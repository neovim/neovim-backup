{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "As a plugin developer I would like to use libraries from the currently active Python virtual environment in my Neovim plugin. For example, when I'm working on a Django project I don't have Django installed globally, instead I have Django installed in my virtual environment. Then I could do something like `:python import django`. However, `pynvim-python` points to the `python` of the virtual environment where it was installed to, not the currently active one, so it cannot find Django.\n\nWhat is the solution? I could install pynvim into the current virtual environment as well. Then in my plugin I would have to do something like this:\n\n```python\ntry:\n    import django\nexcept ModuleNotFoundError:\n    print('Cannot find Django. Did you install pynvim into your virtual environment?')\n    # And whatever else\n```\n\nIs this the way forward?",
    "closed_at": "2025-09-14T12:18:57Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
        "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
        "followers_url": "https://api.github.com/users/HiPhish/followers",
        "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
        "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/HiPhish",
        "id": 4954650,
        "login": "HiPhish",
        "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
        "organizations_url": "https://api.github.com/users/HiPhish/orgs",
        "received_events_url": "https://api.github.com/users/HiPhish/received_events",
        "repos_url": "https://api.github.com/users/HiPhish/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/HiPhish",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": " @drmikehenry has probably thought about this and knows if there are techniques for it :)",
            "created_at": "2025-09-07T16:21:21Z",
            "html_url": "https://github.com/neovim/pynvim/issues/597#issuecomment-3263885113",
            "id": 3263885113,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/597",
            "node_id": "IC_kwDOASpKTs7Ciu85",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3263885113/reactions"
            },
            "updated_at": "2025-09-07T16:21:21Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3263885113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The discussion below assumes an activated test django virtual environment (venv) with Neovim running:\n\n```sh\npython3 -m venv venv\n. venv/bin/activate\npip install django\nnvim\n```\n\nWithout more details, it's not clear what kinds of interaction you'd like to perform between your Neovim plugin and the django package within your venv.  In general, it's desirable to keep Neovim's python separate from individual venvs, as one of the major benefits of venvs is to provide isolation from other venvs and from packages installed with the system.  So if possible, I'd recommend interacting with the django venv through executables in that venv.  One such executable is `django-admin`; if your functionality can be done via that tool, then isolation is maintained.  The plugin could simply run `django-admin` for some purpose, e.g.:\n\n```vim\n:!django-admin version\n```\n\nIf direct calls into the module via `import djanjo; django.something()` are needed, then the most robust way to achieve that is to use the Python interpreter from the django venv.  You can find the venv's directory via the environment variable `VIRTUAL_ENV`.  For example:\n\n```vim\n:!$VIRTUAL_ENV/bin/python -c 'import django; print(django.get_version())'\n```\n\nIf your plugin has substantial logic to perform, such logic could live in a plugin-specific `.py` file (somewhere within the plugin's directory) that would still be launched with the django venv's interpreter.  For example, suppose your plugin has the file `plugin-logic.py` with contents:\n\n```py\nimport django\n\nprint(django.get_version())\n```\n\nThen you could run this logic using the django interpreter via:\n\n```vim\n:!$VIRTUAL_ENV/bin/python plugin-logic.py\n```\n\nIf the logic is tightly coupled with both Neovim and django such that you'd like both pynvim and django support simultaneously, then your suggestion of installing pynvim into your django venv is probably the smoothest approach, though it loses the isolation benefits and requires every user to manually install pynvim into each such venv.\n\nAll of these approaches are the same whether using the new `pynvim-python` interpreter or any of the previously supported methods of locating the Python interpreter that can import pynvim (e.g., installing pynvim into the system Python environment, setting `g:python3_host_prog` for a separate pynvim venv, installing pynvim into every activated venv before running Neovim).  `pynvim-python` is essentially just a unique name for the `python` executable where pynvim is installed.  It makes it more convenient to put pynvim into its own properly isolated venv, but it doesn't fundamentally change the above tradeoffs for Python plugins that interact with other venvs.\n",
            "created_at": "2025-09-09T08:58:25Z",
            "html_url": "https://github.com/neovim/pynvim/issues/597#issuecomment-3269618311",
            "id": 3269618311,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/597",
            "node_id": "IC_kwDOASpKTs7C4mqH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3269618311/reactions"
            },
            "updated_at": "2025-09-09T08:58:25Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3269618311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was thinking about making a plugin which allows me to call Django management commands (the stuff one uses `manage.py` for usually), but instead of invoking the executable and then hoping to parse the output, I was thinking of calling the command directly from Python (using `django.core.management`). So this would be a Python remote plugin, but as you have explained, that requires pynvim to be installed in the same virtual environment as Django.\n\nThis means Python remote plugins can out of the box only use the Python standard library. That's a bit disappointing because in my opinion the real value of remote plugins is the ability to use libraries from other language. But I also understand why things are the way they are.\n\nI have an idea, but I am not sure if this a a good idea: have Neovim detect whether it is running inside a virtual environment, and if so add the install location of pynvim to the `$PYTHONPATH` before running the Python interpreter inside Neovim. That way pynvim would not have to be added to the virtual environment. However, it could mess up libraries if the virtual environment and pynvim have different versions of the same libraries installed. I guess that's too fragile to ship out of the box.",
            "created_at": "2025-09-09T20:07:23Z",
            "html_url": "https://github.com/neovim/pynvim/issues/597#issuecomment-3272109366",
            "id": 3272109366,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/597",
            "node_id": "IC_kwDOASpKTs7DCG02",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3272109366/reactions"
            },
            "updated_at": "2025-09-09T20:07:47Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3272109366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> All of these approaches are the same whether using the new `pynvim-python` interpreter or any of the previously supported methods of locating the Python interpreter that can import pynvim\n\n👍 \n\n> This means Python remote plugins can out of the box only use the Python standard library.\n\nThe default `g:python3_host_prog` is really only relevant as a default. Nvim python remote-plugins can easily invoke themselves however they want, using whatever `python` interpreter they want, including one installed to a plugin-local venv. \n\nThat is the idea behind https://github.com/neovim/pynvim/issues/567 : the \"remote plugin\" concept will simply be redefined as \"normal Lua plugins\"[1] that spawn a `python` job and make `rpcrequest()` calls to it. That's what the current \"remote plugins\" interface does anyway, it just adds unnecessary layers.\n\n[1] The \"Lua\" part of the plugin can be very thin: define some commands and mappings, let the Python part do the rest. Or do everything in Python, and the Lua part just spawns the Python remote process.",
            "created_at": "2025-09-11T03:12:31Z",
            "html_url": "https://github.com/neovim/pynvim/issues/597#issuecomment-3277218173",
            "id": 3277218173,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/597",
            "node_id": "IC_kwDOASpKTs7DVmF9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3277218173/reactions"
            },
            "updated_at": "2025-09-11T03:15:04Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3277218173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The default `g:python3_host_prog` is really only relevant as a default. Nvim python remote-plugins can easily invoke themselves however they want, using whatever `python` interpreter they want, including one installed to a plugin-local venv.\n\nA plugin-local venv would only be of used if the plugin does no depend on any packages used in the user's project. I my hypothetical scenario I would need access to Django and all other project dependencies though, so in the end the user still have to install pynvim into the venv of the project. Or the plugin could set up a second venv with the project dependencies, plus pynvim and whatever other dependencies there might be.\n\nThat's something to think about. I am going to close this issue since the original question has been answered.",
            "created_at": "2025-09-14T12:18:57Z",
            "html_url": "https://github.com/neovim/pynvim/issues/597#issuecomment-3289497063",
            "id": 3289497063,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/597",
            "node_id": "IC_kwDOASpKTs7EEb3n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3289497063/reactions"
            },
            "updated_at": "2025-09-14T12:18:57Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3289497063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
                "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
                "followers_url": "https://api.github.com/users/HiPhish/followers",
                "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
                "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HiPhish",
                "id": 4954650,
                "login": "HiPhish",
                "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
                "organizations_url": "https://api.github.com/users/HiPhish/orgs",
                "received_events_url": "https://api.github.com/users/HiPhish/received_events",
                "repos_url": "https://api.github.com/users/HiPhish/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HiPhish",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/597/comments",
    "created_at": "2025-09-07T08:44:35Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/597/events",
    "html_url": "https://github.com/neovim/pynvim/issues/597",
    "id": 3391372515,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [
        {
            "color": "e6e6e6",
            "default": true,
            "description": "",
            "id": 97892281,
            "name": "question",
            "node_id": "MDU6TGFiZWw5Nzg5MjI4MQ==",
            "url": "https://api.github.com/repos/neovim/pynvim/labels/question"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/597/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOASpKTs7KJDzj",
    "number": 597,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/597/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/597/timeline",
    "title": "Use Python libraries from current venv?",
    "type": null,
    "updated_at": "2025-09-14T12:18:57Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/597",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4954650?v=4",
        "events_url": "https://api.github.com/users/HiPhish/events{/privacy}",
        "followers_url": "https://api.github.com/users/HiPhish/followers",
        "following_url": "https://api.github.com/users/HiPhish/following{/other_user}",
        "gists_url": "https://api.github.com/users/HiPhish/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/HiPhish",
        "id": 4954650,
        "login": "HiPhish",
        "node_id": "MDQ6VXNlcjQ5NTQ2NTA=",
        "organizations_url": "https://api.github.com/users/HiPhish/orgs",
        "received_events_url": "https://api.github.com/users/HiPhish/received_events",
        "repos_url": "https://api.github.com/users/HiPhish/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/HiPhish/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/HiPhish/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/HiPhish",
        "user_view_type": "public"
    }
}