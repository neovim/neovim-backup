{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "If I have a vim global variable that contains a dict, e.g. `g:foo = {\"a\": \"A\"}`, then the current implementation of RemoteMap leads to some unexpected, unintuitive behaviours when I try to manipulate it in python. For example:\r\n\r\n    foo = nvim.vars[\"foo\"]\r\n    foo[\"b\"] = \"B\"\r\n    print(nvim.vars[\"foo\"].keys())  # -> [\"a\"]\r\n\r\nIn python, dicts are normally assigned by reference so a python programmer would expect a change to the local variable `foo` to also affect the Vim variable. But instead, they are only changing a copy. This is particularly confusing when you write a line of code like this:\r\n\r\n    nvim.vars[\"foo\"][\"b\"] = \"B\"\r\n\r\nThis doesn't raise an exception when you run it, and it's such a simple line of code that programmers familiar with python won't suspect that it contains a bug. It's just assigning a value to a dict, how can it possibly be broken? But it is broken because when python assigns `\"B\"` to the key `\"b\"` it is only modifying a copy of `g:foo`, and the copy is immediately garbage collected and the change never makes it back to neovim.\r\n\r\n---\r\n\r\nI can think of three separate actions which will address this in different ways:\r\n\r\n1) Instead of using `__get__()` and `__set__()` for RemoteMap key access, have `.read()` and `.write()` methods that A) make it obvious that you're getting a copy of the variable and B) make it obvious how many RPC calls are happening. This isn't as slick as `__get__()`, but at least you intuitively know what's going on.\r\n\r\n2) Bring back the `__get__()` and `__set__()` for RemoteMap, but have them return pointers to variables that are generally assigned by reference (vim and python both conveniently have the same opinions on what should be copied vs referenced). This has the disadvantage that a RemoteMap gets returned in place of a simple dict, meaning every key lookup is a separate RPC call, but this might be what the users want.\r\n\r\n3) Document how the .vars RemoteMaps work. Obviously documentation is already a big TODO for this project, but we need to make sure this behaviour is specifically covered if we want to make this API friendly to newcomers.\r\n\r\n---\r\n\r\nThis issue was also discussed in the neovim gitter starting here: https://gitter.im/neovim/neovim?at=591e0de4631b8e4e61ed6a20",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "My understanding is that the current behavior matches the legacy Vim python API (before `bindeval`). That's why the behavior is \"expected\". cc @ZyX-I",
            "created_at": "2017-05-19T09:23:14Z",
            "html_url": "https://github.com/neovim/pynvim/issues/261#issuecomment-302654003",
            "id": 302654003,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/261",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjY1NDAwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302654003/reactions"
            },
            "updated_at": "2017-05-19T09:23:14Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302654003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk I did some more digging and have found that Vim and Neovim are not consistent with how they handle var references. Consider this snippet:\r\n\r\n    python << EOF\r\n    import vim\r\n    vim.vars[\"foo\"] = {\"a\": \"A\"}\r\n    vim.vars[\"foo\"][\"b\"] = \"B\"\r\n    foo = vim.vars[\"foo\"]\r\n    foo[\"c\"] = \"C\"\r\n    EOF\r\n    let g:foo\r\n\r\nWhen I run this in vim 8.0.503, `g:foo` is a dict with 3 keys. When I run the same code in neovim v0.2.0, `g:foo` is a dict with only 1 key.",
            "created_at": "2017-05-20T22:04:48Z",
            "html_url": "https://github.com/neovim/pynvim/issues/261#issuecomment-302901532",
            "id": 302901532,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/261",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkwMTUzMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302901532/reactions"
            },
            "updated_at": "2017-05-20T22:04:48Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302901532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3629785?v=4",
                "events_url": "https://api.github.com/users/phodge/events{/privacy}",
                "followers_url": "https://api.github.com/users/phodge/followers",
                "following_url": "https://api.github.com/users/phodge/following{/other_user}",
                "gists_url": "https://api.github.com/users/phodge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phodge",
                "id": 3629785,
                "login": "phodge",
                "node_id": "MDQ6VXNlcjM2Mjk3ODU=",
                "organizations_url": "https://api.github.com/users/phodge/orgs",
                "received_events_url": "https://api.github.com/users/phodge/received_events",
                "repos_url": "https://api.github.com/users/phodge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phodge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phodge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phodge",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk Before bindeval there was no such thing as `vim.vars`; more AFAIR `vim.vars` was introduced in a sequence of patches when `bindeval` was already there for a while and I definitely never coded Neovim behaviour in. So no, it does not.",
            "created_at": "2017-05-20T22:36:26Z",
            "html_url": "https://github.com/neovim/pynvim/issues/261#issuecomment-302903064",
            "id": 302903064,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/261",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkwMzA2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302903064/reactions"
            },
            "updated_at": "2017-05-20T22:36:26Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302903064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@phodge That's because Vim 8 has `bindeval`. Neovim's support of the Vim legacy API only meets Vim 7.4.\r\n\r\nIn any case it sounds like the current behavior is unacceptable :)",
            "created_at": "2017-05-20T23:11:12Z",
            "html_url": "https://github.com/neovim/pynvim/issues/261#issuecomment-302904419",
            "id": 302904419,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/261",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjkwNDQxOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302904419/reactions"
            },
            "updated_at": "2017-05-20T23:11:12Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302904419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The behavior is expected as long as one is aware that it is an rpc interface; the problem is the that it is so well integrated that one often does not think of it as an rpc api. Python does not have `frozendict` or `frozenlist`, only `frozenset` (`tuple` can be abused as frozenlist, but it often carries the indication of different semantics than a list, `(1,2) != [1,2]` goes along with this), so the mutable types are expected to be used even in a value context (like serialization/deserialization). \r\nBut the surronding `vars` definitely has mutable mapping sematics, so dict syntax should be used. Personally I'm leaning towards option 3, but if someone wants to implement option 2 (vim compat is nice of course) that would be fine as long as one could still get a deep copy in a single rpc roundtrip and simple syntax.",
            "created_at": "2017-05-21T15:29:09Z",
            "html_url": "https://github.com/neovim/pynvim/issues/261#issuecomment-302943777",
            "id": 302943777,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/261",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjk0Mzc3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302943777/reactions"
            },
            "updated_at": "2017-05-22T08:05:54Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/302943777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/261/comments",
    "created_at": "2017-05-18T22:41:49Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/261/events",
    "html_url": "https://github.com/neovim/pynvim/issues/261",
    "id": 229824680,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/261/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyMjk4MjQ2ODA=",
    "number": 261,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/261/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/261/timeline",
    "title": "RemoteMap returns copies instead of references, leading to unintuitive/unfriendly behaviour",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-22T19:33:13Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/261",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3629785?v=4",
        "events_url": "https://api.github.com/users/phodge/events{/privacy}",
        "followers_url": "https://api.github.com/users/phodge/followers",
        "following_url": "https://api.github.com/users/phodge/following{/other_user}",
        "gists_url": "https://api.github.com/users/phodge/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/phodge",
        "id": 3629785,
        "login": "phodge",
        "node_id": "MDQ6VXNlcjM2Mjk3ODU=",
        "organizations_url": "https://api.github.com/users/phodge/orgs",
        "received_events_url": "https://api.github.com/users/phodge/received_events",
        "repos_url": "https://api.github.com/users/phodge/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/phodge/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phodge/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/phodge",
        "user_view_type": "public"
    }
}