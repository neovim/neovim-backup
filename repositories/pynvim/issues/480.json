{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "While running the testsuite on aarch64, I get the following error with `test_update_highlights`:\r\n\r\n```\r\n[   79s] =================================== FAILURES ===================================\r\n[   79s] ____________________________ test_update_highlights ____________________________\r\n[   79s] \r\n[   79s] vim = <pynvim.api.nvim.Nvim object at 0xffff8d849080>\r\n[   79s] \r\n[   79s]     def test_update_highlights(vim):\r\n[   79s]         vim.current.buffer[:] = ['a', 'b', 'c']\r\n[   79s]         src_id = vim.new_highlight_source()\r\n[   79s]         vim.current.buffer.update_highlights(\r\n[   79s] >           src_id, [[\"Comment\", 0, 0, -1], (\"String\", 1, 0, 1)], clear=True, async_=False\r\n[   79s]         )\r\n[   79s] \r\n[   79s] test/test_buffer.py:195: \r\n[   79s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   79s] ../../BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/api/buffer.py:143: in update_highlights\r\n[   79s]     async_=async_)\r\n[   79s] ../../BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/api/nvim.py:577: in __call__\r\n[   79s]     return self._nvim.exec_lua(code, *args, **kwargs)\r\n[   79s] ../../BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/api/nvim.py:320: in exec_lua\r\n[   79s]     return self.request('nvim_execute_lua', code, args, **kwargs)\r\n[   79s] ../../BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/api/nvim.py:182: in request\r\n[   79s]     res = self._session.request(name, *args, **kwargs)\r\n[   79s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   79s] \r\n[   79s] self = <pynvim.msgpack_rpc.session.Session object at 0xffff8d842c18>\r\n[   79s] method = 'nvim_execute_lua'\r\n[   79s] args = ('return _pynvim_1.update_highlights(...)', [ExtType(code=0, data=b'\\x01'), 1, [['Comment', 0, 0, -1], ['String', 1, 0, 1]], 0, -1])\r\n[   79s] kwargs = {}, async_ = False\r\n[   79s] v = [[0, 'Error executing lua: [string \"<nvim>\"]:1: attempt to index a nil value (global \\'_pynvim_1\\')'], None]\r\n[   79s] err = [0, 'Error executing lua: [string \"<nvim>\"]:1: attempt to index a nil value (global \\'_pynvim_1\\')']\r\n[   79s] rv = None\r\n[   79s] \r\n[   79s]     def request(self, method, *args, **kwargs):\r\n[   79s]         \"\"\"Send a msgpack-rpc request and block until as response is received.\r\n[   79s]     \r\n[   79s]         If the event loop is running, this method must have been called by a\r\n[   79s]         request or notification handler running on a greenlet. In that case,\r\n[   79s]         send the quest and yield to the parent greenlet until a response is\r\n[   79s]         available.\r\n[   79s]     \r\n[   79s]         When the event loop is not running, it will perform a blocking request\r\n[   79s]         like this:\r\n[   79s]         - Send the request\r\n[   79s]         - Run the loop until the response is available\r\n[   79s]         - Put requests/notifications received while waiting into a queue\r\n[   79s]     \r\n[   79s]         If the `async_` flag is present and True, a asynchronous notification\r\n[   79s]         is sent instead. This will never block, and the return value or error\r\n[   79s]         is ignored.\r\n[   79s]         \"\"\"\r\n[   79s]         async_ = check_async(kwargs.pop('async_', None), kwargs, False)\r\n[   79s]         if async_:\r\n[   79s]             self._async_session.notify(method, args)\r\n[   79s]             return\r\n[   79s]     \r\n[   79s]         if kwargs:\r\n[   79s]             raise ValueError(\"request got unsupported keyword argument(s): {}\"\r\n[   79s]                              .format(', '.join(kwargs.keys())))\r\n[   79s]     \r\n[   79s]         if self._is_running:\r\n[   79s]             v = self._yielding_request(method, args)\r\n[   79s]         else:\r\n[   79s]             v = self._blocking_request(method, args)\r\n[   79s]         if not v:\r\n[   79s]             # EOF\r\n[   79s]             raise OSError('EOF')\r\n[   79s]         err, rv = v\r\n[   79s]         if err:\r\n[   79s]             info(\"'Received error: %s\", err)\r\n[   79s] >           raise self.error_wrapper(err)\r\n[   79s] E           pynvim.api.common.NvimError: Error executing lua: [string \"<nvim>\"]:1: attempt to index a nil value (global '_pynvim_1')\r\n[   79s] \r\n[   79s] ../../BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/msgpack_rpc/session.py:102: NvimError\r\n[   79s] =============================== warnings summary ===============================\r\n[   79s] ../../BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/compat.py:5\r\n[   79s]   /home/abuild/rpmbuild/BUILDROOT/python-neovim-0.4.3-39.7.aarch64/usr/lib/python3.6/site-packages/pynvim/compat.py:5: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n[   79s]     from imp import find_module as original_find_module\r\n[   79s] \r\n[   79s] ../../../../../usr/lib/python3.6/site-packages/_pytest/config/__init__.py:1233\r\n[   79s]   /usr/lib/python3.6/site-packages/_pytest/config/__init__.py:1233: PytestConfigWarning: Unknown config option: timeout\r\n[   79s]   \r\n[   79s]     self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\r\n[   79s] \r\n[   79s] -- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n[   79s] =========================== short test summary info ============================\r\n[   79s] FAILED test/test_buffer.py::test_update_highlights - pynvim.api.common.NvimEr...\r\n[   79s] =================== 1 failed, 68 passed, 2 warnings in 8.28s ===================\r\n```",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/480/comments",
    "created_at": "2021-04-06T13:21:43Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/480/events",
    "html_url": "https://github.com/neovim/pynvim/issues/480",
    "id": 851418805,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/480/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU4NTE0MTg4MDU=",
    "number": 480,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/480/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/480/timeline",
    "title": "test_update_highlights fail on aarch64",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-22T19:35:56Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/480",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1826137?v=4",
        "events_url": "https://api.github.com/users/ggardet/events{/privacy}",
        "followers_url": "https://api.github.com/users/ggardet/followers",
        "following_url": "https://api.github.com/users/ggardet/following{/other_user}",
        "gists_url": "https://api.github.com/users/ggardet/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ggardet",
        "id": 1826137,
        "login": "ggardet",
        "node_id": "MDQ6VXNlcjE4MjYxMzc=",
        "organizations_url": "https://api.github.com/users/ggardet/orgs",
        "received_events_url": "https://api.github.com/users/ggardet/received_events",
        "repos_url": "https://api.github.com/users/ggardet/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ggardet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ggardet/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ggardet",
        "user_view_type": "public"
    }
}