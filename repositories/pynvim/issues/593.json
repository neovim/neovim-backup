{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'd like Neovim to automatically detect `pynvim` even when it has been installed in its own virtual environment.  Finding the python interpreter executable associated with `pynvim` can be problematic when supporting a shared Vim configuration for multiple users on multiple platforms, as user preferences and operating system variations lead to a variety of different locations for the virtual environment.\n\nThe standard method for finding executables that have been installed in arbitrary locations is the `PATH` environment variable.  When the executable name is unique, it may be anywhere on `PATH`, and the executable's actual location need not be configured.\n\nTo make it possible to detect the `pynvim` virtual environment's python interpreter, I've been using the below Python shim and exposing it on `PATH` as the executable named `pynvim-python-interpreter`:\n\n```python\nimport subprocess\nimport sys\n\n\ndef main() -> None:\n    subprocess.run([sys.executable] + sys.argv[1:])\n```\n\n`pynvim-python-interpreter` chains to the Python interpreter associated with the virtual environment where it was installed.  `pynvim` is a dependency that is also installed in that environment. The only Neovim configuration needed is to set `g:python3_host_prog` to `pynvim-python-interpreter`.\n\nSee <https://github.com/drmikehenry/pynvim-python-interpreter> for details on the implementation (published on PyPI as well).  This makes installation straightforward: `uv tool install pynvim-python-interpreter`\n\nIf a similar shim were shipped as part of `pynvim` itself, then `pynvim` could be installed using `uv tool install pynvim`.  I've saved the shorter name `pynvim-python` as a suggestion for `pynvim` to use in lieu of `pynvim-python-interpreter`.\n\nNeovim could automatically detect this interpreter and set `g:python3_host_prog` via something like:\n\n```vim\nif !exists('g:python3_host_prog') && executable('pynvim-python')\n    let g:python3_host_prog = 'pynvim-python'\nendif\n```\n\nWith those changes, users could `uv tool install pynvim` to place `pynvim` in a dedicated virtual environment and require no additional Neovim configuration.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This repo can't really address that. This should probably be tracked in the core Nvim repo?",
            "created_at": "2025-05-27T13:00:43Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2912430112",
            "id": 2912430112,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6tmCgg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2912430112/reactions"
            },
            "updated_at": "2025-05-27T13:00:43Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2912430112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "The probing for `pynvim-python` would indeed be part of the Neovim core.  `pynvim` seems like the natural place to expose the `pynvim-python` entrypoint, which is why I posted here first to gauge interest in the idea.  If `pynvim` were to expose its Python interpreter on the `PATH` under the name `pynvim-python` and Neovim were to probe for that, it would allow the user to place `pynvim` in a separate virtual environment without requiring additional configuration.  My separate repo gets me partway to that ideal situation; I can install `pynvim-python-interpreter` in different locations (depending on operating system or other constraints), and then configure `g:python3_host_prog` to a fixed value.  But my repository is an unofficial solution that requires separate configuration, whereas if the `pynvim` project were to adopt this idea in some form or another and Neovim were to add support for it, then users could be told to install `pynvim` as a tool in their favorite manner (`uv tool install pynvim`, `pipx install pynvim`, etc.) and it would be detected automatically without further configuration.  If you see problems with the idea or don't find the benefits worth the effort, that's fine; I'll be content for my own purposes with my unofficial solution.\n",
            "created_at": "2025-05-28T23:38:01Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2917846808",
            "id": 2917846808,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6t6s8Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2917846808/reactions"
            },
            "updated_at": "2025-05-28T23:38:01Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2917846808",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If you see problems with the idea or don't find the benefits worth the effort, that's fine; I'll be content for my own purposes with my unofficial solution.\n\nI didn't look at your code, but the general idea would be a welcome improvement in core.",
            "created_at": "2025-05-30T15:26:07Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2922700376",
            "id": 2922700376,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6uNN5Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2922700376/reactions"
            },
            "updated_at": "2025-05-30T15:26:07Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2922700376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "The code itself is just the six lines of Python I'd posted; the non-boilerplate logic is a one-liner that chains to the Python interpreter via `subprocess.run([sys.executable] + sys.argv[1:])`.  I've created `pynvim-python` branches for `neovim` and `pynvim` with the minimal changes needed to demonstrate the idea:\n\n- https://github.com/drmikehenry/neovim/tree/pynvim-python\n- https://github.com/drmikehenry/pynvim/tree/pynvim-python\n\nBut the branch differences are small enough to paste here:\n\n- For Neovim: if `pynvim-python` is on `PATH`, use that name for `python3_host`:\n\n  ```diff\n  diff --git a/runtime/lua/vim/provider/python.lua b/runtime/lua/vim/provider/python.lua\n  index a772b36973..62a278b2e6 100644\n  --- a/runtime/lua/vim/provider/python.lua\n  +++ b/runtime/lua/vim/provider/python.lua\n  @@ -83,6 +83,10 @@ function M.detect_by_module(module)\n       return vim.fn.exepath(vim.fn.expand(python_exe, true)), nil\n     end\n\n  +  if vim.fn.executable('pynvim-python') then\n  +      return 'pynvim-python'\n  +  end\n  +\n     local errors = {}\n     for _, exe in ipairs(python_candidates) do\n       local error = check_for_module(exe, module)\n  ```\n\n- For pynvim: publish `pynvim-python` as an entrypoint:\n\n  ```diff\n  diff --git a/pynvim/python.py b/pynvim/python.py\n  new file mode 100644\n  index 0000000..c408ff6\n  --- /dev/null\n  +++ b/pynvim/python.py\n  @@ -0,0 +1,6 @@\n  +import subprocess\n  +import sys\n  +\n  +\n  +def main() -> None:\n  +    subprocess.run([sys.executable] + sys.argv[1:])\n  diff --git a/setup.py b/setup.py\n  index 55d6734..fa0f12d 100644\n  --- a/setup.py\n  +++ b/setup.py\n  @@ -58,4 +58,9 @@ setup(name='pynvim',\n         setup_requires=setup_requires,\n         tests_require=tests_require,\n         extras_require=extras_require,\n  +      entry_points={\n  +              'console_scripts': [\n  +                  'pynvim-python=pynvim.python:main',\n  +              ],\n  +          },\n         )\n  ```\n\nUsing the above branches, `pynvim` may be installed as a Python tool via:\n\n```console\ncd pynvim\nuv tool install .\n```\n\nAt which point `pynvim-python` is available on `PATH`:\n\n```console\n[mike@f16:pynvim]$ which pynvim-python\n/home/mike/.local/bin/pynvim-python\n[mike@f16:pynvim]$ pynvim-python --version\nPython 3.13.3\nAfter installing `pynvim` via `uv tool install .`\n```\n\nNext, build and run neovim:\n\n```console\ncd neovim\nmake CMAKE_BUILD_TYPE=RelWithDebInfo\nVIMRUNTIME=runtime ./build/bin/nvim --clean\n```\n\nThen check the provider health in neovim via:\n\n```\n:checkhealth provider\n```\n\nThis results in:\n\n```\nPython 3 provider (optional) ~\n- `g:python3_host_prog` is not set. Searching for pynvim-python in the environment.\n- Executable: /home/mike/.local/bin/pynvim-python\n- Python version: 3.13.3\n- pynvim version: 0.6.0dev0\n- ✅ OK Latest pynvim is installed.\n```\n\n\n",
            "created_at": "2025-05-31T14:45:45Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2925282108",
            "id": 2925282108,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6uXEM8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2925282108/reactions"
            },
            "updated_at": "2025-05-31T14:45:45Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2925282108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Given the above proposed changes to both `pynvim` and `neovim`, do you think this is an idea that the `pynvim` project would accept?  I recognize that there would need to be a separate request made on the `neovim` issue tracker and that you might not want to speak for that project without giving other maintainers a chance to weigh in.  I'm happy to make proper pull requests (including documentation), but before doing that I was hoping to hear that both projects are interested.  Please let me know how you'd like me to proceed.\n",
            "created_at": "2025-06-06T19:56:47Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2950652412",
            "id": 2950652412,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6v32H8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2950652412/reactions"
            },
            "updated_at": "2025-06-06T19:56:47Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2950652412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "(Your `if vim.fn.executable('pynvim-python')` needs to check for `== 1` because `0` is truthy in Lua.)\n\n",
            "created_at": "2025-07-28T02:49:16Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3125128671",
            "id": 3125128671,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs66Ra3f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125128671/reactions"
            },
            "updated_at": "2025-07-28T02:49:16Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125128671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Trying to understand this request. You have users that all use a \"dedicated venv\", but the venv isn't activated in their shell?\n\nIIUC, your idea only works for the specific case of: \n\n    uv tool install .\n\nright? Because `uv tool` does a global install *from* your specific venv.\n\nSo you want `pynvim-python` available globally, but you *don't* want to install your venv-specific `python` globally? If you did `uv tool install python`, wouldn't that also be a way for Nvim to automatically find the right `python`?\n\nAnyway, your patch seems simple enough, so I wouldn't object to it. But we need to be able to clearly explain it, concisely.",
            "created_at": "2025-07-28T03:02:00Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3125163223",
            "id": 3125163223,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs66RjTX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125163223/reactions"
            },
            "updated_at": "2025-07-28T03:03:22Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125163223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> (Your `if vim.fn.executable('pynvim-python')` needs to check for `== 1` because `0` is truthy in Lua.)\n\nThanks; I've fixed that in the branch.",
            "created_at": "2025-08-02T22:25:24Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3146793172",
            "id": 3146793172,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs67kEDU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3146793172/reactions"
            },
            "updated_at": "2025-08-02T22:25:24Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3146793172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Trying to understand this request. You have users that all use a \"dedicated venv\", but the venv isn't activated in their shell?\n\nThat's correct.  Users that want to install `pynvim` should use a dedicated virtual environment for that purpose.  This provides desirable isolation.  Activating such virtual environments is typically undesirable for reasons explained later.\n\n> IIUC, your idea only works for the specific case of:\n>\n> ```\n> uv tool install .\n> ```\n>\n> right? Because `uv tool` does a global install _from_ your specific venv.\n\nWith the proposed changes, it would be `uv tool install pynvim`, installing `pynvim` from PyPI.  It's not installing _from_ a virtual environment, but installing the `pynvim` package _to_ a virtual environment.\n\nAnd yes, `pynvim-python` will end up on `PATH` only when `uv tool install pynvim` or `pipx install pynvim` is used.\n\n> So you want `pynvim-python` available globally, but you _don't_ want to install your venv-specific `python` globally?\n\nThat's correct.  If the `python` interpreter from the `pynvim` virtual environment were installed globally on the `PATH` under the name `python`, it would intefere with the system `python` interpreter.\n\n> If you did `uv tool install python`, wouldn't that also be a way for Nvim to automatically find the right `python`?\n\n`uv tool install PACKAGE_NAME` is for installing Python packages.  `uv tool install python` would try to install a Python package named `python` rather than expose the executable `python` in some way.\n\nNeovim probes for Python interpreters by enumerating a list of standard interpreter names, looking for them along `PATH`.  Activating an unrelated virtual environment changes the first-found interpreter, so Neovim won't find the one with `pynvim` anymore.  But using the unique name `pynvim-python` for the interpreter ensures that it can be found when other virtual environments are activated.\n\n> Anyway, your patch seems simple enough, so I wouldn't object to it. But we need to be able to clearly explain it, concisely.\n\nThe below section is a short outline of the idea; the next (way too long) section contains the full details to make sure (hopefully) that everything is clear in order to properly vet the idea.\n\n# Quick description\n\n- Neovim's `:help python-provider` suggests this installation method:\n\n  ```\n  python3 -m pip install --user --upgrade pynvim\n  ```\n\n  This fails with modern Python unless the user also provides the `--break-system-packages` switch.  This is because installing packages \"user-wide\" is a deprecated practice.\n\n- Neovim's `:help python-virtualenv` shows how to use a Python virtual environment dedicated to `pynvim`:\n\n  ```\n  If you plan to use per-project virtualenvs often, you should assign one\n  virtualenv for Nvim and hard-code the interpreter path via\n  |g:python3_host_prog| so that the \"pynvim\" package is not required\n  for each virtualenv.\n\n  Example using pyenv: >bash\n      pyenv install 3.4.4\n      pyenv virtualenv 3.4.4 py3nvim\n      pyenv activate py3nvim\n      python3 -m pip install pynvim\n      pyenv which python  # Note the path\n  The last command reports the interpreter path, add it to your init.vim: >vim\n      let g:python3_host_prog = '/path/to/py3nvim/bin/python'\n  ```\n\n- The above requires installation of the separate tool `pyenv`; use of this tool is rapidly being replaced by `uv`, though it's certainly still usable.\n\n- It also requires the user to hard-code a value for `g:python3_host_prog`, which may be non-trivial because the location may vary across operating system and individual computer.\n\n- It's desirable for Neovim to automatically detect the location of `pynvim` when installed in a virtual environment.\n\n- The standard method for using virtual environments for Python programs is to install them with `pipx`, `uv`, or similar tooling.  Leveraging that standard tooling is desirable.\n\n- With the proposed extensions to Neovim and `pynvim`, `g:python3_host_prog` need not be configured.  Instead:\n\n  - The user installs `pipx` or `uv`.\n\n  - The user installs `pynvim` via one of:\n\n    ```\n    pipx install pynvim\n\n    uv tool install pynvim\n    ```\n\n    This will expose the associated Python interpreter on `PATH` under the name `pynvim-python`.\n\n  - Neovim will find and use `pynvim-python`.\n\n  - If the user activates an unrelated virtual environment, Neovim will continue to correctly find and use `pynvim-python`.\n\n# Complete details\n\n- These are described from a Linux point of view for concreteness, but the concepts apply across operating systems.\n\n- When Python itself is installed, it creates a Python \"installation\" comprising:\n\n  - A `bin` directory that's on the user's `PATH` (e.g., `/usr/bin`).\n\n  - A Python interpreter in the `bin` directory, typically named `python3` or `python`.\n\n  - The Python standard library comprising a set of packages or libraries usable from the Python language.\n\n- A package is used by a Python program by importing it, e.g. `import some_package; some_package.some_function()`.\n\n- The Python Package Index (PyPI, at <https://pypi.org>) houses packages for download and installation.\n\n- The `pip` command is frequently included in a Python installation as a way to download Python packages (typically from PyPI) and install them.\n\n- Additional packages are installed into the `site` area of the Python installation, such that they may be imported by the Python interpreter.\n\n- Packages may depend on other Python packages; `pip` installs these in the `site` area as well.\n\n- A Python package might contain a complete program, rather than just a library of code.  It could contain a `main()` function that must be run by the Python interpreter (perhaps via `import some_package; some_package.main()`).\n\n- To make program distribution convenient, a package can declare a function (e.g., `main()` above) as an \"entry point\" to be exposed as `some_command` for the user to run; when the package is installed (e.g., via `pip install some_package`), `pip` will synthesize a small shell script and place it in the `bin` directory, thus adding `some_command` to the `PATH`.  Often, `some_package` is named the same as `some_command`; for example, `black` is a program for Python source code reformatting.  After `pip install black`, the shell script `black` will be installed in the `bin` directory such that the user may run the command `black file_to_reformat.py`.\n\n- Different packages may require conflicting dependencies; this makes it risky to install too many things into the same `site` packages area, as newly installed dependencies might overwrite older ones of a different version.\n\n- For this reason, users are heavily discouraged from performing `pip install` as root in order to put packages into the main Python interpreter area; instead, only the system package manager should be used to install such packages, as it's the job of OS maintainers to ensure such packages are compatible.\n\n- While users can in theory install packages into per-user `site` package areas in their home directories, this still leads to dependency conflicts as the number of installed packages grows.  This is a big enough problem that modern Python disallows it by default.  In Neovim's `:help python-provider`, the recommended installation method is to run `python3 -m pip install --user --upgrade pynvim`; on Ubuntu 24.04 with Python 3.12, this fails with the following message:\n\n  ```\n  error: externally-managed-environment\n\n  × This environment is externally managed\n  ╰─> To install Python packages system-wide, try apt install\n      python3-xyz, where xyz is the package you are trying to\n      install.\n\n      If you wish to install a non-Debian-packaged Python package,\n      create a virtual environment using python3 -m venv path/to/venv.\n      Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n      sure you have python3-full installed.\n\n      If you wish to install a non-Debian packaged Python application,\n      it may be easiest to use pipx install xyz, which will manage a\n      virtual environment for you. Make sure you have pipx installed.\n\n      See /usr/share/doc/python3.12/README.venv for more information.\n\n  note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\n  hint: See PEP 668 for the detailed specification.\n  ```\n\n- Python provides a way to create additional `site` package areas to provide isolation and avoid dependency conflicts.  These are called Python Virtual Environments (<https://docs.python.org/3.13/library/venv.html>), as mentioned in the error message above.\n\n- A virtual environment lives in a separate file tree.  It shares the same Python interpreter and standard library packages as the \"base\" Python upon which it is built.  `python -m venv path/to/some_venv` creates a virtual environment at an arbitrary location; it will be based on the Python installation of the `python` interpreter.  `some_venv/bin` will hold the Python interpreter and (typically) the `pip` command; but this `bin` directory is not automatically added to the user's `PATH`.\n\n- `some_venv/bin/pip install some_package` will install `some_package` into the `site` packages area of `some_venv`, rather than into the Python installation area of the base Python.\n\n- If `some_package` contains an entry point for `some_command`, then `some_venv/bin/pip install some_package` creates the shell script `some_venv/bin/some_command`.  This shell script has a shebang with the absolute path to the Python interpreter (e.g., `#!/abs/path/to/some_venv/bin/python`), such that the script will run with the correct interpreter regardless of the value of `PATH`.  In other words, running `/abs/path/to/some_venv/bin/some_command` will work correctly.\n\n- A virtual environment may be \"activated\"; activation adds `some_venv/bin` to the `PATH` in the currently running shell and sets the `VIRTUAL_ENV` environment variable to the absolute path to `some_venv`.  At most one virtual environment should be activated at a time.\n\n- If the virtual environment is activated, then the user can just type `some_command` in order to such a command installed via an entry point in the virtual environment.\n\n- Instead of activation, it's also possible to simply copy the shell script to a directory already on the `PATH`; the absolute path in the shebang line ensures that the script runs with the correct Python interpreter and its associated packages from the virtual environment.  This adds only that shell script to the `PATH`; this is unlike activating the virtual environment, which exposes the entire contents of its `bin` directory and overrides the default Python interpreter and its packages.\n\n- When installing a program written in Python, it's good practice to create a dedicated virtual environment for that program, install just that program into the virtual environment, then expose just the command's shell script to the `PATH`.  This keeps the program and its dependencies isolated from other such programs, from the main Python installation, and from other virtual environments used by Python programmers as they develop new programs.\n\n- Tools have been written to automate installation of such Python programs.  One such tool is `pipx`; the `pipx` documentation (<https://pipx.pypa.io/latest/how-pipx-works/>) explains the steps it takes.  Another such tool (which is rapidly gaining in popularity) is `uv` (<https://docs.astral.sh/uv/guides/tools/>).  After installing either `pipx` or `uv`, the user can install a Python-based program such as black in one step (`pipx install black` or `uv tool install black`), after which the new command `black` is available on `PATH` for immediate use.\n\n- When developing a Python program, it's good practice to create a virtual environment for the development.  Only those packages necessary for running and developing the program should be installed into the virtual environment.  A `pyproject.toml` file declares the full list of necessary packages, such that development tools (like `pip` and `uv`) know what packages to install.\n\n- For Python support, Neovim requires a Python interpreter that can `import pynvim`.  If `pynvim` is installed via the OS package manager into the system's Python installation, then the default Python interpreter may be used.  Neovim currently probes for such a Python interpreter by checking along `PATH` for `python3`, `python3.13`, `python3.12`, etc.; for each such candidate interpreter, it tries to `import pynvim` to find a suitable interpreter.\n\n- The OS-supplied `pynvim` may be out of date, or the user may not have sufficient permission to install OS packages.  The user may install `pynvim` into a custom virtual environment, but Neovim's probing algorithm won't find it by default.\n\n- The user could activate the virtual environment with `pynvim`, but it can be disruptive to override the default Python interpreter and packages globally.\n\n- A user developing a Python program needs a \"dev\" virtual environment for the program under development; activating a `pynvim` environment conflicts with this need.  Installing `pynvim` into the programmer's dev virtual environment is undesirable because it changes the dev environment, and such installation must be repeated for every Python-based project under development.  In addition, tools like `uv` may \"synchronize\" the environment with the expected packages from `pyproject.toml`, causing `pynvim` to become uninstalled during the course of development.\n\n- If the default probing algorithm is insufficient, the user may set the Neovim variable `g:python3_host_prog` to point to the correct Python interpreter.  Since the `pynvim` virtual environment lives at an arbitrary location, it's difficult for Neovim to probe for it.\n\n- Neovim `:help python-virtualenv` suggests using a dedicated virtual environment for `pynvim` and hard-coding `g:python3_host_prog` to the associated Python interpreter:\n  ```\n  Example using pyenv: >bash\n      pyenv install 3.4.4\n      pyenv virtualenv 3.4.4 py3nvim\n      pyenv activate py3nvim\n      python3 -m pip install pynvim\n      pyenv which python  # Note the path\n  The last command reports the interpreter path, add it to your init.vim: >vim\n      let g:python3_host_prog = '/path/to/py3nvim/bin/python'\n  ```\n\n  It also points to <https://github.com/zchee/deoplete-jedi/wiki/Setting-up-Python-for-Neovim> which makes a similar recommendation.\n\n- Though the user can set `g:python3_host_prog` as part of the Neovim configuration, this is an extra step.  The location of the `pynvim` virtual environment may also vary by operating system and by particular computer, complicating the configuration.  In addition, for Neovim configurations shared by multiple users, per-user preferences may causes additional variation.\n\n- Combining the above considerations yields a solution that allows Neovim to probe for the location of `pynvim` while keeping `pynvim` in an isolated virtual environment:\n\n  - In addition to the names `python3`, `python3.13`, etc., Neovim will probe for the interpreter under the name `pynvim-python`.\n\n  - `pynvim` will use an entry point to expose the command `pynvim-python`.  This is a small Python program that just chains to the virtual environment's Python interpreter.\n\n  - If `pynvim` is installed using `pipx install pynvim` or `uv tool install pynvim`, then those tools will expose `pynvim-python` on the `PATH` where Neovim can probe for it.\n",
            "created_at": "2025-08-02T22:25:45Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3146793353",
            "id": 3146793353,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs67kEGJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3146793353/reactions"
            },
            "updated_at": "2025-08-02T22:26:10Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3146793353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I read everything except the \"Complete details\" :D And it sounds like a great plan. Yes, the `pyenv` docs should be updated to mention `uv` and/or `pipx`, please feel free to update them.\n\nThis will hopefully fix a lot python provider and/or checkhealth issues: \nhttps://github.com/neovim/neovim/issues?q=is%3Aissue%20state%3Aopen%20python%20checkhealth",
            "created_at": "2025-08-02T22:30:56Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3146796575",
            "id": 3146796575,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs67kE4f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3146796575/reactions"
            },
            "updated_at": "2025-08-02T22:34:01Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3146796575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/593/comments",
    "created_at": "2025-05-24T13:58:13Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/593/events",
    "html_url": "https://github.com/neovim/pynvim/issues/593",
    "id": 3088484415,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/593/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOASpKTs64Fog_",
    "number": 593,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 1,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/593/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/593/timeline",
    "title": "Auto-detect `pynvim`  located in dedicated virtual environment",
    "type": null,
    "updated_at": "2025-08-02T22:34:01Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/593",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
        "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
        "followers_url": "https://api.github.com/users/drmikehenry/followers",
        "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
        "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/drmikehenry",
        "id": 705278,
        "login": "drmikehenry",
        "node_id": "MDQ6VXNlcjcwNTI3OA==",
        "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
        "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
        "repos_url": "https://api.github.com/users/drmikehenry/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/drmikehenry",
        "user_view_type": "public"
    }
}