{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'd like Neovim to automatically detect `pynvim` even when it has been installed in its own virtual environment.  Finding the python interpreter executable associated with `pynvim` can be problematic when supporting a shared Vim configuration for multiple users on multiple platforms, as user preferences and operating system variations lead to a variety of different locations for the virtual environment.\n\nThe standard method for finding executables that have been installed in arbitrary locations is the `PATH` environment variable.  When the executable name is unique, it may be anywhere on `PATH`, and the executable's actual location need not be configured.\n\nTo make it possible to detect the `pynvim` virtual environment's python interpreter, I've been using the below Python shim and exposing it on `PATH` as the executable named `pynvim-python-interpreter`:\n\n```python\nimport subprocess\nimport sys\n\n\ndef main() -> None:\n    subprocess.run([sys.executable] + sys.argv[1:])\n```\n\n`pynvim-python-interpreter` chains to the Python interpreter associated with the virtual environment where it was installed.  `pynvim` is a dependency that is also installed in that environment. The only Neovim configuration needed is to set `g:python3_host_prog` to `pynvim-python-interpreter`.\n\nSee <https://github.com/drmikehenry/pynvim-python-interpreter> for details on the implementation (published on PyPI as well).  This makes installation straightforward: `uv tool install pynvim-python-interpreter`\n\nIf a similar shim were shipped as part of `pynvim` itself, then `pynvim` could be installed using `uv tool install pynvim`.  I've saved the shorter name `pynvim-python` as a suggestion for `pynvim` to use in lieu of `pynvim-python-interpreter`.\n\nNeovim could automatically detect this interpreter and set `g:python3_host_prog` via something like:\n\n```vim\nif !exists('g:python3_host_prog') && executable('pynvim-python')\n    let g:python3_host_prog = 'pynvim-python'\nendif\n```\n\nWith those changes, users could `uv tool install pynvim` to place `pynvim` in a dedicated virtual environment and require no additional Neovim configuration.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This repo can't really address that. This should probably be tracked in the core Nvim repo?",
            "created_at": "2025-05-27T13:00:43Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2912430112",
            "id": 2912430112,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6tmCgg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2912430112/reactions"
            },
            "updated_at": "2025-05-27T13:00:43Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2912430112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "The probing for `pynvim-python` would indeed be part of the Neovim core.  `pynvim` seems like the natural place to expose the `pynvim-python` entrypoint, which is why I posted here first to gauge interest in the idea.  If `pynvim` were to expose its Python interpreter on the `PATH` under the name `pynvim-python` and Neovim were to probe for that, it would allow the user to place `pynvim` in a separate virtual environment without requiring additional configuration.  My separate repo gets me partway to that ideal situation; I can install `pynvim-python-interpreter` in different locations (depending on operating system or other constraints), and then configure `g:python3_host_prog` to a fixed value.  But my repository is an unofficial solution that requires separate configuration, whereas if the `pynvim` project were to adopt this idea in some form or another and Neovim were to add support for it, then users could be told to install `pynvim` as a tool in their favorite manner (`uv tool install pynvim`, `pipx install pynvim`, etc.) and it would be detected automatically without further configuration.  If you see problems with the idea or don't find the benefits worth the effort, that's fine; I'll be content for my own purposes with my unofficial solution.\n",
            "created_at": "2025-05-28T23:38:01Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2917846808",
            "id": 2917846808,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6t6s8Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2917846808/reactions"
            },
            "updated_at": "2025-05-28T23:38:01Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2917846808",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If you see problems with the idea or don't find the benefits worth the effort, that's fine; I'll be content for my own purposes with my unofficial solution.\n\nI didn't look at your code, but the general idea would be a welcome improvement in core.",
            "created_at": "2025-05-30T15:26:07Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2922700376",
            "id": 2922700376,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6uNN5Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2922700376/reactions"
            },
            "updated_at": "2025-05-30T15:26:07Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2922700376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "The code itself is just the six lines of Python I'd posted; the non-boilerplate logic is a one-liner that chains to the Python interpreter via `subprocess.run([sys.executable] + sys.argv[1:])`.  I've created `pynvim-python` branches for `neovim` and `pynvim` with the minimal changes needed to demonstrate the idea:\n\n- https://github.com/drmikehenry/neovim/tree/pynvim-python\n- https://github.com/drmikehenry/pynvim/tree/pynvim-python\n\nBut the branch differences are small enough to paste here:\n\n- For Neovim: if `pynvim-python` is on `PATH`, use that name for `python3_host`:\n\n  ```diff\n  diff --git a/runtime/lua/vim/provider/python.lua b/runtime/lua/vim/provider/python.lua\n  index a772b36973..62a278b2e6 100644\n  --- a/runtime/lua/vim/provider/python.lua\n  +++ b/runtime/lua/vim/provider/python.lua\n  @@ -83,6 +83,10 @@ function M.detect_by_module(module)\n       return vim.fn.exepath(vim.fn.expand(python_exe, true)), nil\n     end\n\n  +  if vim.fn.executable('pynvim-python') then\n  +      return 'pynvim-python'\n  +  end\n  +\n     local errors = {}\n     for _, exe in ipairs(python_candidates) do\n       local error = check_for_module(exe, module)\n  ```\n\n- For pynvim: publish `pynvim-python` as an entrypoint:\n\n  ```diff\n  diff --git a/pynvim/python.py b/pynvim/python.py\n  new file mode 100644\n  index 0000000..c408ff6\n  --- /dev/null\n  +++ b/pynvim/python.py\n  @@ -0,0 +1,6 @@\n  +import subprocess\n  +import sys\n  +\n  +\n  +def main() -> None:\n  +    subprocess.run([sys.executable] + sys.argv[1:])\n  diff --git a/setup.py b/setup.py\n  index 55d6734..fa0f12d 100644\n  --- a/setup.py\n  +++ b/setup.py\n  @@ -58,4 +58,9 @@ setup(name='pynvim',\n         setup_requires=setup_requires,\n         tests_require=tests_require,\n         extras_require=extras_require,\n  +      entry_points={\n  +              'console_scripts': [\n  +                  'pynvim-python=pynvim.python:main',\n  +              ],\n  +          },\n         )\n  ```\n\nUsing the above branches, `pynvim` may be installed as a Python tool via:\n\n```console\ncd pynvim\nuv tool install .\n```\n\nAt which point `pynvim-python` is available on `PATH`:\n\n```console\n[mike@f16:pynvim]$ which pynvim-python\n/home/mike/.local/bin/pynvim-python\n[mike@f16:pynvim]$ pynvim-python --version\nPython 3.13.3\nAfter installing `pynvim` via `uv tool install .`\n```\n\nNext, build and run neovim:\n\n```console\ncd neovim\nmake CMAKE_BUILD_TYPE=RelWithDebInfo\nVIMRUNTIME=runtime ./build/bin/nvim --clean\n```\n\nThen check the provider health in neovim via:\n\n```\n:checkhealth provider\n```\n\nThis results in:\n\n```\nPython 3 provider (optional) ~\n- `g:python3_host_prog` is not set. Searching for pynvim-python in the environment.\n- Executable: /home/mike/.local/bin/pynvim-python\n- Python version: 3.13.3\n- pynvim version: 0.6.0dev0\n- ✅ OK Latest pynvim is installed.\n```\n\n\n",
            "created_at": "2025-05-31T14:45:45Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2925282108",
            "id": 2925282108,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6uXEM8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2925282108/reactions"
            },
            "updated_at": "2025-05-31T14:45:45Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2925282108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Given the above proposed changes to both `pynvim` and `neovim`, do you think this is an idea that the `pynvim` project would accept?  I recognize that there would need to be a separate request made on the `neovim` issue tracker and that you might not want to speak for that project without giving other maintainers a chance to weigh in.  I'm happy to make proper pull requests (including documentation), but before doing that I was hoping to hear that both projects are interested.  Please let me know how you'd like me to proceed.\n",
            "created_at": "2025-06-06T19:56:47Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-2950652412",
            "id": 2950652412,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs6v32H8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2950652412/reactions"
            },
            "updated_at": "2025-06-06T19:56:47Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/2950652412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
                "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
                "followers_url": "https://api.github.com/users/drmikehenry/followers",
                "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
                "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/drmikehenry",
                "id": 705278,
                "login": "drmikehenry",
                "node_id": "MDQ6VXNlcjcwNTI3OA==",
                "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
                "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
                "repos_url": "https://api.github.com/users/drmikehenry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/drmikehenry",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "(Your `if vim.fn.executable('pynvim-python')` needs to check for `== 1` because `0` is truthy in Lua.)\n\n",
            "created_at": "2025-07-28T02:49:16Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3125128671",
            "id": 3125128671,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs66Ra3f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125128671/reactions"
            },
            "updated_at": "2025-07-28T02:49:16Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125128671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Trying to understand this request. You have users that all use a \"dedicated venv\", but the venv isn't activated in their shell?\n\nIIUC, your idea only works for the specific case of: \n\n    uv tool install .\n\nright? Because `uv tool` does a global install *from* your specific venv.\n\nSo you want `pynvim-python` available globally, but you *don't* want to install your venv-specific `python` globally? If you did `uv tool install python`, wouldn't that also be a way for Nvim to automatically find the right `python`?\n\nAnyway, your patch seems simple enough, so I wouldn't object to it. But we need to be able to clearly explain it, concisely.",
            "created_at": "2025-07-28T03:02:00Z",
            "html_url": "https://github.com/neovim/pynvim/issues/593#issuecomment-3125163223",
            "id": 3125163223,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/593",
            "node_id": "IC_kwDOASpKTs66RjTX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125163223/reactions"
            },
            "updated_at": "2025-07-28T03:03:22Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/3125163223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/593/comments",
    "created_at": "2025-05-24T13:58:13Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/593/events",
    "html_url": "https://github.com/neovim/pynvim/issues/593",
    "id": 3088484415,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/593/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOASpKTs64Fog_",
    "number": 593,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 1,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/593/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/593/timeline",
    "title": "Auto-detect `pynvim`  located in dedicated virtual environment",
    "type": null,
    "updated_at": "2025-07-28T03:03:22Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/593",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
        "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
        "followers_url": "https://api.github.com/users/drmikehenry/followers",
        "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
        "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/drmikehenry",
        "id": 705278,
        "login": "drmikehenry",
        "node_id": "MDQ6VXNlcjcwNTI3OA==",
        "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
        "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
        "repos_url": "https://api.github.com/users/drmikehenry/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/drmikehenry",
        "user_view_type": "public"
    }
}