{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'd like Neovim to automatically detect `pynvim` even when it has been installed in its own virtual environment.  Finding the python interpreter executable associated with `pynvim` can be problematic when supporting a shared Vim configuration for multiple users on multiple platforms, as user preferences and operating system variations lead to a variety of different locations for the virtual environment.\n\nThe standard method for finding executables that have been installed in arbitrary locations is the `PATH` environment variable.  When the executable name is unique, it may be anywhere on `PATH`, and the executable's actual location need not be configured.\n\nTo make it possible to detect the `pynvim` virtual environment's python interpreter, I've been using the below Python shim and exposing it on `PATH` as the executable named `pynvim-python-interpreter`:\n\n```python\nimport subprocess\nimport sys\n\n\ndef main() -> None:\n    subprocess.run([sys.executable] + sys.argv[1:])\n```\n\n`pynvim-python-interpreter` chains to the Python interpreter associated with the virtual environment where it was installed.  `pynvim` is a dependency that is also installed in that environment. The only Neovim configuration needed is to set `g:python3_host_prog` to `pynvim-python-interpreter`.\n\nSee <https://github.com/drmikehenry/pynvim-python-interpreter> for details on the implementation (published on PyPI as well).  This makes installation straightforward: `uv tool install pynvim-python-interpreter`\n\nIf a similar shim were shipped as part of `pynvim` itself, then `pynvim` could be installed using `uv tool install pynvim`.  I've saved the shorter name `pynvim-python` as a suggestion for `pynvim` to use in lieu of `pynvim-python-interpreter`.\n\nNeovim could automatically detect this interpreter and set `g:python3_host_prog` via something like:\n\n```vim\nif !exists('g:python3_host_prog') && executable('pynvim-python')\n    let g:python3_host_prog = 'pynvim-python'\nendif\n```\n\nWith those changes, users could `uv tool install pynvim` to place `pynvim` in a dedicated virtual environment and require no additional Neovim configuration.\n",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/593/comments",
    "created_at": "2025-05-24T13:58:13Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/593/events",
    "html_url": "https://github.com/neovim/pynvim/issues/593",
    "id": 3088484415,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/593/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOASpKTs64Fog_",
    "number": 593,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/593/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/593/timeline",
    "title": "Auto-detect `pynvim`  located in dedicated virtual environment",
    "type": null,
    "updated_at": "2025-05-24T13:58:13Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/593",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/705278?v=4",
        "events_url": "https://api.github.com/users/drmikehenry/events{/privacy}",
        "followers_url": "https://api.github.com/users/drmikehenry/followers",
        "following_url": "https://api.github.com/users/drmikehenry/following{/other_user}",
        "gists_url": "https://api.github.com/users/drmikehenry/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/drmikehenry",
        "id": 705278,
        "login": "drmikehenry",
        "node_id": "MDQ6VXNlcjcwNTI3OA==",
        "organizations_url": "https://api.github.com/users/drmikehenry/orgs",
        "received_events_url": "https://api.github.com/users/drmikehenry/received_events",
        "repos_url": "https://api.github.com/users/drmikehenry/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/drmikehenry/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drmikehenry/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/drmikehenry",
        "user_view_type": "public"
    }
}