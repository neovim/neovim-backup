{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I've noticed that if the deoplete main process exits with an error it will stay around as a Zombie process.\r\n\r\nI couldn't reproduce it with a standalone script outside of Neovim, so I assume there might be something in Neovim's python-client that might cause it.\r\n\r\nDeoplete's source:\r\nhttps://github.com/Shougo/deoplete.nvim/blob/a80fd5267e978ab86a1e30975be9457df3394646/rplugin/python3/deoplete/parent.py#L92-L98\r\n\r\nTest script:\r\n```python\r\nimport asyncio\r\nfrom functools import partial\r\n\r\n\r\nclass Process(asyncio.SubprocessProtocol):\r\n\r\n    def __init__(self, plugin):\r\n        with open('/tmp/deoplete-2.log', 'a') as f:\r\n            f.write('init\\n')\r\n        self._plugin = plugin\r\n        # self._vim = plugin._vim\r\n\r\n    def connection_made(self, transport):\r\n        self._plugin._stdin = transport.get_pipe_transport(0)\r\n        with open('/tmp/deoplete-2.log', 'a') as f:\r\n            f.write('connection made: %r\\n' % transport)\r\n        print('connection made: %r\\n' % transport)\r\n\r\n    def connection_lost(self, exc):\r\n        with open('/tmp/deoplete-2.log', 'a') as f:\r\n            f.write('connection lost: %r' % exc)\r\n\r\n    def pipe_data_received(self, fd, data):\r\n        print('pipe_data_received: %d, %r' % (fd, data))\r\n        with open('/tmp/deoplete-2.log', 'a') as f:\r\n            f.write('pipe_data_received: %d, %r\\n' % (fd, data))\r\n        if fd == 1:\r\n            unpacker = self._plugin._unpacker\r\n            unpacker.feed(data)\r\n            for child_out in unpacker:\r\n                self._plugin._queue_out.put(child_out)\r\n        else:\r\n            # self._vim.error\r\n            raise Exception('pipe_data_received: unexpected output on %d: %s' % (fd, data))\r\n\r\n    def process_exited(self):\r\n        print('process_exited')\r\n        with open('/tmp/deoplete-2.log', 'a') as f:\r\n            f.write('process exited: %r' % self)\r\n\r\n\r\nclass Plugin:\r\n    pass\r\n\r\nplugin = Plugin()\r\n\r\nloop = asyncio.get_event_loop()\r\ntask = loop.create_task(\r\n    loop.subprocess_exec(\r\n        partial(Process, plugin),\r\n        'python3', 'meh',\r\n        # stdout=None,\r\n        # stderr=None,\r\n        cwd='/tmp'))\r\nloop.run_forever()\r\n# loop.run_until_complete(task)\r\nloop.close()\r\n```\r\n\r\nNeeds further investigation (also from my side), but maybe you have some pointer(s) already?\r\n\r\n/cc @shougo",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> If the deoplete main process exits with an error it will stay around as a Zombie process.\r\n\r\nHow can it exit yet \"stay around\"? Which process exactly?",
            "created_at": "2018-04-12T21:32:42Z",
            "html_url": "https://github.com/neovim/pynvim/issues/322#issuecomment-380951030",
            "id": 380951030,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/322",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDk1MTAzMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/380951030/reactions"
            },
            "updated_at": "2018-04-12T21:32:42Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/380951030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk \r\nAFAIK a process becomes a zombie process for a parent's `wait`.\r\nSo it looked to me like Neovim's loop handling might never trigger that `wait` for some reason, but I have not investigated further, and unfortunately could not reproduce it using a simpler script back then.",
            "created_at": "2018-04-12T22:59:04Z",
            "html_url": "https://github.com/neovim/pynvim/issues/322#issuecomment-380969526",
            "id": 380969526,
            "issue_url": "https://api.github.com/repos/neovim/pynvim/issues/322",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDk2OTUyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/380969526/reactions"
            },
            "updated_at": "2018-04-12T22:59:04Z",
            "url": "https://api.github.com/repos/neovim/pynvim/issues/comments/380969526",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/pynvim/issues/322/comments",
    "created_at": "2018-03-31T23:49:47Z",
    "events_url": "https://api.github.com/repos/neovim/pynvim/issues/322/events",
    "html_url": "https://github.com/neovim/pynvim/issues/322",
    "id": 310280747,
    "issue_dependencies_summary": {
        "blocked_by": 0,
        "blocking": 0,
        "total_blocked_by": 0,
        "total_blocking": 0
    },
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/pynvim/issues/322/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMTAyODA3NDc=",
    "number": 322,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/pynvim/issues/322/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/pynvim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/pynvim/issues/322/timeline",
    "title": "Zombie processes with loop.subprocess_exec",
    "type": {
        "color": "red",
        "created_at": "2024-01-25T10:10:19Z",
        "description": "An unexpected problem or behavior",
        "id": 597163,
        "is_enabled": true,
        "name": "Bug",
        "node_id": "IT_kwDOAGK_Pc4ACRyr",
        "updated_at": "2024-07-26T10:12:30Z"
    },
    "updated_at": "2025-09-22T19:35:54Z",
    "url": "https://api.github.com/repos/neovim/pynvim/issues/322",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
        "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
        "followers_url": "https://api.github.com/users/blueyed/followers",
        "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
        "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/blueyed",
        "id": 9766,
        "login": "blueyed",
        "node_id": "MDQ6VXNlcjk3NjY=",
        "organizations_url": "https://api.github.com/users/blueyed/orgs",
        "received_events_url": "https://api.github.com/users/blueyed/received_events",
        "repos_url": "https://api.github.com/users/blueyed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/blueyed",
        "user_view_type": "public"
    }
}