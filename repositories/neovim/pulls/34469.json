{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34469/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34469/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34469"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34469"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34469/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/92526899c4284dff08cad5e10e974461aa82d4af"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6198,
            "forks_count": 6198,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1970,
            "open_issues_count": 1970,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-21T05:18:47Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 334403,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91287,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-22T03:04:19Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91287,
            "watchers_count": 91287,
            "web_commit_signoff_required": false
        },
        "sha": "0dc900d744434f9792495cd41a36eecdde587fbe",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "To address #31453, I plan to try introducing more OOP design. My planned roadmap is:\r\n\r\n- Refactor `_folding_range.lua` into an OOP design by adding the `FRProvider` class (this PR);\r\n- Compare `STHighlighter` in `semantic_token.lua`, extract the overlapping logic with `FRProvider` (mainly lifecycle-related), and create a common parent class, tentatively named `FeatureProvider` or `Provider`;\r\n- With the common parent class, some new features can be provided, such as displaying which `FeatureProvider`s are enabled, in which buffers, which clients have enabled them, and the current version or of the displayed data via `:checkhealth vim.lsp`;\r\n- More refactoring, such as refactoring `inlay_hint.lua`, or re-implementing old features, such as `codelens.lua`;\r\n\r\nThis PR does not add any new explicit logic but fixes #34202, because the non-nil assertion issue mentioned in that issue can be avoided with this kind of OOP design. Therefore, I think this PR is ready to be merged, even if the shared superclass approach was not eventually used.",
    "closed_at": "2025-06-19T13:23:40Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146331268"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146331268"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it still makes sense to \"namespace\" the class name with `vim.lsp.folding_range`.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T01:07:40Z",
            "diff_hunk": "@@ -5,8 +5,11 @@ local api = vim.api\n \n local M = {}\n \n----@class (private) vim.lsp.folding_range.BufState\n+---@class (private) FRProvider",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146331268",
            "id": 2146331268,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7mqE",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 8,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2926954567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146331268/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T01:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146331268",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146334251"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146334251"
                }
            },
            "author_association": "MEMBER",
            "body": "We can make the definition of `FRProvider` the type annotation in line 29 instead of having a separate type definition.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T01:09:51Z",
            "diff_hunk": "@@ -5,8 +5,11 @@ local api = vim.api\n \n local M = {}\n \n----@class (private) vim.lsp.folding_range.BufState\n+---@class (private) FRProvider",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146334251",
            "id": 2146334251,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7nYr",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 8,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2926954567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146334251/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T01:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146334251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146336481"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146336481"
                }
            },
            "author_association": "MEMBER",
            "body": "Why inline the handler? I found it cleaner to have a separate function.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T01:10:59Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146336481",
            "id": 2146336481,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7n7h",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 144,
            "original_position": 121,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2926954567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146336481/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T01:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146336481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146338215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146338215"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  self:reset()\r\n```",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T01:12:20Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)\n+        self:handle_results({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+      end,\n+      self.bufnr\n+    )\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:handle_results(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.\n---\n--- TODO(ofseed):\n--- 1. Implement clearing `bufstate` and event hooks\n---    when no clients in the buffer support the corresponding method.\n--- 2. Then generalize this state management to other LSP modules.\n-local augroup_setup = api.nvim_create_augroup('nvim.lsp.folding_range.setup', {})\n-\n---- Initialize `bufstate` and event hooks, then request folding ranges.\n---- Manage their lifecycle within this function.\n+function FRProvider:reset()\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}\n+end\n+\n+--- Initialize `provider` and event hooks, then request folding ranges.\n ---@param bufnr integer\n----@return vim.lsp.folding_range.BufState?\n-local function setup(bufnr)\n-  if not api.nvim_buf_is_loaded(bufnr) then\n-    return\n-  end\n+---@return FRProvider\n+function FRProvider.new(bufnr)\n+  local self = setmetatable({}, { __index = FRProvider })\n+  self.bufnr = bufnr\n+  self.augroup = api.nvim_create_augroup('nvim.lsp.folding_range:' .. bufnr, { clear = true })\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146338215",
            "id": 2146338215,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7oWn",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 180,
            "original_position": 179,
            "original_start_line": 177,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2926954567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146338215/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-14T01:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146338215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146412813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146412813"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I might not have understood your point? The `FRProvider` on line 29 is a metatable, not an instance of `FRProvider`, so it cannot have fields like `bufnr` or `augroup`; it can only have a static field like `active`.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:01:29Z",
            "diff_hunk": "@@ -5,8 +5,11 @@ local api = vim.api\n \n local M = {}\n \n----@class (private) vim.lsp.folding_range.BufState\n+---@class (private) FRProvider",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146412813",
            "id": 2146412813,
            "in_reply_to_id": 2146334251,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_76kN",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 8,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927164928,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146412813/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T04:01:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146412813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146426876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146426876"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I inlined it to reduce the number of methods in `FRProvider`. This interface has two handlers, one is `lsp.Handler` and the other is `lsp.MultiHandler`. The original `handler` only transformed the parameters into a form suitable for `multi_handler`, so I inlined it.\r\n\r\nAdditionally, I have longer-term but still uncertain plans for the handler functions. If I successfully continue advancing my plan to implement LSP features based on inheritance (see the roadmap above), I will treat functions like `self:handle_result` methods of the parent class serving as interfaces, with subclasses implementing them. This would be an internal-only interface replacement of the previous and deprecated `vim.lsp.handler`.\r\n\r\nThe main purpose of this approach is that if we want to support `partialResultParams`, we will need a third type of handler beyond `lsp.Handler` and `lsp.MultiHandler`, for example, one called `partialHandler`. This handler differs from the previous two in that it is unlikely to be implemented as a pure function, which is why I plan to introduce OOP. Any related ideas are welcome.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:17:47Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146426876",
            "id": 2146426876,
            "in_reply_to_id": 2146336481,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_79_8",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 144,
            "original_position": 121,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927179678,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146426876/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T04:17:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146426876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146427529"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146427529"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I was also hesitant about whether to use `reset` here, and in the end, I didn't because I planned to make `reset` a general interface (`vim.lsp.semantic_token` also has a `self:reset()`). Maybe I should apply this suggestion first and make changes later when needed?",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:21:24Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)\n+        self:handle_results({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+      end,\n+      self.bufnr\n+    )\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:handle_results(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.\n---\n--- TODO(ofseed):\n--- 1. Implement clearing `bufstate` and event hooks\n---    when no clients in the buffer support the corresponding method.\n--- 2. Then generalize this state management to other LSP modules.\n-local augroup_setup = api.nvim_create_augroup('nvim.lsp.folding_range.setup', {})\n-\n---- Initialize `bufstate` and event hooks, then request folding ranges.\n---- Manage their lifecycle within this function.\n+function FRProvider:reset()\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}\n+end\n+\n+--- Initialize `provider` and event hooks, then request folding ranges.\n ---@param bufnr integer\n----@return vim.lsp.folding_range.BufState?\n-local function setup(bufnr)\n-  if not api.nvim_buf_is_loaded(bufnr) then\n-    return\n-  end\n+---@return FRProvider\n+function FRProvider.new(bufnr)\n+  local self = setmetatable({}, { __index = FRProvider })\n+  self.bufnr = bufnr\n+  self.augroup = api.nvim_create_augroup('nvim.lsp.folding_range:' .. bufnr, { clear = true })\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146427529",
            "id": 2146427529,
            "in_reply_to_id": 2146338215,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7-KJ",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 180,
            "original_position": 179,
            "original_start_line": 177,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927180310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146427529/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-14T04:21:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146427529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146431733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146431733"
                }
            },
            "author_association": "MEMBER",
            "body": "nvm I was not reading the diff correctly and I had not noticed that this was already the annotation for the table I was referring to. Ignore my comment.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:36:39Z",
            "diff_hunk": "@@ -5,8 +5,11 @@ local api = vim.api\n \n local M = {}\n \n----@class (private) vim.lsp.folding_range.BufState\n+---@class (private) FRProvider",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146431733",
            "id": 2146431733,
            "in_reply_to_id": 2146334251,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7_L1",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 8,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927186028,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146431733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T04:36:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146431733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146431828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146431828"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't see why `reset()` being general affects the fact that you can call the function here instead of duplicating the implementation.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:37:36Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)\n+        self:handle_results({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+      end,\n+      self.bufnr\n+    )\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:handle_results(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.\n---\n--- TODO(ofseed):\n--- 1. Implement clearing `bufstate` and event hooks\n---    when no clients in the buffer support the corresponding method.\n--- 2. Then generalize this state management to other LSP modules.\n-local augroup_setup = api.nvim_create_augroup('nvim.lsp.folding_range.setup', {})\n-\n---- Initialize `bufstate` and event hooks, then request folding ranges.\n---- Manage their lifecycle within this function.\n+function FRProvider:reset()\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}\n+end\n+\n+--- Initialize `provider` and event hooks, then request folding ranges.\n ---@param bufnr integer\n----@return vim.lsp.folding_range.BufState?\n-local function setup(bufnr)\n-  if not api.nvim_buf_is_loaded(bufnr) then\n-    return\n-  end\n+---@return FRProvider\n+function FRProvider.new(bufnr)\n+  local self = setmetatable({}, { __index = FRProvider })\n+  self.bufnr = bufnr\n+  self.augroup = api.nvim_create_augroup('nvim.lsp.folding_range:' .. bufnr, { clear = true })\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146431828",
            "id": 2146431828,
            "in_reply_to_id": 2146338215,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_7_NU",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 180,
            "original_position": 179,
            "original_start_line": 177,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927186177,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146431828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-14T04:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146431828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146438743"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146438743"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh, you are right. Even though it is general, the logic of this `reset()` remains the same.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:43:10Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)\n+        self:handle_results({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+      end,\n+      self.bufnr\n+    )\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:handle_results(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.\n---\n--- TODO(ofseed):\n--- 1. Implement clearing `bufstate` and event hooks\n---    when no clients in the buffer support the corresponding method.\n--- 2. Then generalize this state management to other LSP modules.\n-local augroup_setup = api.nvim_create_augroup('nvim.lsp.folding_range.setup', {})\n-\n---- Initialize `bufstate` and event hooks, then request folding ranges.\n---- Manage their lifecycle within this function.\n+function FRProvider:reset()\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}\n+end\n+\n+--- Initialize `provider` and event hooks, then request folding ranges.\n ---@param bufnr integer\n----@return vim.lsp.folding_range.BufState?\n-local function setup(bufnr)\n-  if not api.nvim_buf_is_loaded(bufnr) then\n-    return\n-  end\n+---@return FRProvider\n+function FRProvider.new(bufnr)\n+  local self = setmetatable({}, { __index = FRProvider })\n+  self.bufnr = bufnr\n+  self.augroup = api.nvim_create_augroup('nvim.lsp.folding_range:' .. bufnr, { clear = true })\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146438743",
            "id": 2146438743,
            "in_reply_to_id": 2146338215,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_8A5X",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 180,
            "original_position": 179,
            "original_start_line": 177,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927194884,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146438743/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-14T04:43:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146438743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2146441708"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146441708"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think it is quite convincing when someone points out that the behavior after inlining is not clear enough. I have reverted it to the original form, that is, as a separate function.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-14T04:57:36Z",
            "diff_hunk": "@@ -108,119 +104,112 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:handle_results(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n----@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n-end\n-\n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(\n+      ms.textDocument_foldingRange,\n+      params,\n+      ---@param result lsp.FoldingRange[]?\n+      function(err, result, ctx)",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2146441708",
            "id": 2146441708,
            "in_reply_to_id": 2146336481,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_8Bns",
            "original_commit_id": "d5fb6e28e6c17a4041196e60e9a2d836fe57135b",
            "original_line": 144,
            "original_position": 121,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2927198344,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146441708/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-14T04:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2146441708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2154489282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154489282"
                }
            },
            "author_association": "MEMBER",
            "body": "The name FRProvider seems questionable. Why not name it `FoldRange` or `FoldState`? If it's just an object that does stuff, that's the typical pattern.\r\n\r\n\"Provider\" implies that there will be different backend implementations of a concept, typically platform-specific in some way. If we're only talking about polymorphism or a \"base class\", it's helpful to just name the base-class by its main purpose.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-18T12:35:55Z",
            "diff_hunk": "@@ -23,23 +26,18 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-\n----@type table<integer, vim.lsp.folding_range.BufState?>\n-local bufstates = {}\n+local FRProvider = { active = {} }",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2154489282",
            "id": 2154489282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AauXC",
            "original_commit_id": "b17ff3b138b014b5486fad0382675eaa7b3b7d13",
            "original_line": 29,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2939031314,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154489282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T12:36:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154489282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2154491846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154491846"
                }
            },
            "author_association": "MEMBER",
            "body": "is the comment dropped because the new design handles this and makes it obvious? if so, that's a good sign :)",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-18T12:37:13Z",
            "diff_hunk": "@@ -108,119 +104,110 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:multi_handler(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n+---@param err lsp.ResponseError?\n ---@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+---@param ctx lsp.HandlerContext, config?: table\n+function FRProvider:handler(err, result, ctx)\n+  self:multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n end\n \n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(ms.textDocument_foldingRange, params, function(...)\n+      self:handler(...)\n+    end, self.bufnr)\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:multi_handler(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2154491846",
            "id": 2154491846,
            "line": 180,
            "node_id": "PRRC_kwDOAPphoM6Aau_G",
            "original_commit_id": "b17ff3b138b014b5486fad0382675eaa7b3b7d13",
            "original_line": 180,
            "original_position": 145,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": 145,
            "pull_request_review_id": 2939035445,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154491846/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T12:37:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154491846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2156357928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156357928"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I spent quite a bit of time thinking about this name, haha. The suffix `Provider` is just to highlight that it have a common base class and contains methods.\r\n\r\nThe reason why simply calling it `FoldingRange` doesn't seem appropriate is that there is already an `lsp.FoldingRange` in the protocol type definition, which could confuse. So I thought of naming it `vim.lsp.folding_range.State` instead.\r\n",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-19T07:40:46Z",
            "diff_hunk": "@@ -23,23 +26,18 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-\n----@type table<integer, vim.lsp.folding_range.BufState?>\n-local bufstates = {}\n+local FRProvider = { active = {} }",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2156357928",
            "id": 2156357928,
            "in_reply_to_id": 2154489282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Ah2ko",
            "original_commit_id": "b17ff3b138b014b5486fad0382675eaa7b3b7d13",
            "original_line": 29,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2941940614,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156357928/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-19T07:40:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156357928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2156364416"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156364416"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, the advantage of OOP is that when we create data through `new()`, we can simultaneously create autocmds, and clear both the data and autocmds in `destroy()`. I think this operation is intuitive under this design, and the purpose is self-evident, so I removed these comments.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-19T07:44:15Z",
            "diff_hunk": "@@ -108,119 +104,110 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function FRProvider:multi_handler(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n+---@param err lsp.ResponseError?\n ---@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+---@param ctx lsp.HandlerContext, config?: table\n+function FRProvider:handler(err, result, ctx)\n+  self:multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n end\n \n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function FRProvider:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(ms.textDocument_foldingRange, params, function(...)\n+      self:handler(...)\n+    end, self.bufnr)\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:multi_handler(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2156364416",
            "id": 2156364416,
            "in_reply_to_id": 2154491846,
            "line": 180,
            "node_id": "PRRC_kwDOAPphoM6Ah4KA",
            "original_commit_id": "b17ff3b138b014b5486fad0382675eaa7b3b7d13",
            "original_line": 180,
            "original_position": 145,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": 145,
            "pull_request_review_id": 2941950973,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156364416/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-19T08:43:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156364416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2156933791"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156933791"
                }
            },
            "author_association": "MEMBER",
            "body": "> The suffix `Provider` is just to highlight that it have a common base class and contains methods.\r\n\r\nOk then \"Provider\" isn't the right name, for the reason mentioned in my above comment.\r\n\r\n`vim.lsp.folding_range.State` seems fine, but the name of the instance should probably be `foldState` or `foldRangeState`.",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-19T12:42:27Z",
            "diff_hunk": "@@ -23,23 +26,18 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-\n----@type table<integer, vim.lsp.folding_range.BufState?>\n-local bufstates = {}\n+local FRProvider = { active = {} }",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2156933791",
            "id": 2156933791,
            "in_reply_to_id": 2154489282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AkDKf",
            "original_commit_id": "b17ff3b138b014b5486fad0382675eaa7b3b7d13",
            "original_line": 29,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2942872350,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156933791/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-19T12:42:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156933791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2156940657"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156940657"
                }
            },
            "author_association": "MEMBER",
            "body": "\"provider\" is [confusing](https://github.com/neovim/neovim/pull/34469#discussion_r2154489282)/misleading, let's name the instances `state` or `foldState` or something like that. ",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-19T12:45:07Z",
            "diff_hunk": "@@ -120,119 +116,110 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function State:multi_handler(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n+---@param err lsp.ResponseError?\n ---@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+---@param ctx lsp.HandlerContext, config?: table\n+function State:handler(err, result, ctx)\n+  self:multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n end\n \n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function State:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(ms.textDocument_foldingRange, params, function(...)\n+      self:handler(...)\n+    end, self.bufnr)\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:multi_handler(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.\n---\n--- TODO(ofseed):\n--- 1. Implement clearing `bufstate` and event hooks\n---    when no clients in the buffer support the corresponding method.\n--- 2. Then generalize this state management to other LSP modules.\n-local augroup_setup = api.nvim_create_augroup('nvim.lsp.folding_range.setup', {})\n-\n---- Initialize `bufstate` and event hooks, then request folding ranges.\n---- Manage their lifecycle within this function.\n+function State:reset()\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}\n+end\n+\n+--- Initialize `provider` and event hooks, then request folding ranges.\n ---@param bufnr integer\n----@return vim.lsp.folding_range.BufState?\n-local function setup(bufnr)\n-  if not api.nvim_buf_is_loaded(bufnr) then\n-    return\n-  end\n+---@return vim.lsp.folding_range.State\n+function State.new(bufnr)\n+  local self = setmetatable({}, { __index = State })\n+  self.bufnr = bufnr\n+  self.augroup = api.nvim_create_augroup('nvim.lsp.folding_range:' .. bufnr, { clear = true })\n+  self:reset()\n+\n+  State.active[bufnr] = self\n \n-  -- Register the new `bufstate`.\n-  bufstates[bufnr] = {\n-    client_ranges = {},\n-    row_level = {},\n-    row_kinds = {},\n-    row_text = {},\n-  }\n-\n-  -- Event hooks from `buf_attach` can't be removed externally.\n-  -- Hooks and `bufstate` share the same lifecycle;\n-  -- they should self-destroy if `bufstate == nil`.\n   api.nvim_buf_attach(bufnr, false, {\n     -- `on_detach` also runs on buffer reload (`:e`).\n-    -- Ensure `bufstate` and hooks are cleared to avoid duplication or leftover states.\n+    -- Ensure `provider` and hooks are cleared to avoid duplication or leftover states.\n     on_detach = function()\n       util._cancel_requests({\n         bufnr = bufnr,\n         method = ms.textDocument_foldingRange,\n         type = 'pending',\n       })\n-      bufstates[bufnr] = nil\n-      api.nvim_clear_autocmds({ buffer = bufnr, group = augroup_setup })\n+      local provider = State.active[bufnr]\n+      if provider then\n+        provider:destroy()",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2156940657",
            "id": 2156940657,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AkE1x",
            "original_commit_id": "f29f652fd69aceca1466838426725bdabdc52686",
            "original_line": 205,
            "original_position": 203,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2942884650,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156940657/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-19T12:45:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156940657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34469#discussion_r2156970609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34469"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156970609"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh, I just overlooked it, sorry.\r\n\r\nIn the absence of ambiguity, I personally prefer to reduce the number of words, so I named it `state`. Not a strong preference",
            "commit_id": "92526899c4284dff08cad5e10e974461aa82d4af",
            "created_at": "2025-06-19T12:59:22Z",
            "diff_hunk": "@@ -120,119 +116,110 @@ local function schedule_foldupdate(bufnr)\n end\n \n ---@param results table<integer,{err: lsp.ResponseError?, result: lsp.FoldingRange[]?}>\n----@type lsp.MultiHandler\n-local function multi_handler(results, ctx)\n-  local bufnr = assert(ctx.bufnr)\n+---@param ctx lsp.HandlerContext\n+function State:multi_handler(results, ctx)\n   -- Handling responses from outdated buffer only causes performance overhead.\n-  if util.buf_versions[bufnr] ~= ctx.version then\n+  if util.buf_versions[self.bufnr] ~= ctx.version then\n     return\n   end\n \n-  local bufstate = assert(bufstates[bufnr])\n   for client_id, result in pairs(results) do\n     if result.err then\n       log.error(result.err)\n     else\n-      bufstate.client_ranges[client_id] = result.result\n+      self.client_ranges[client_id] = result.result\n     end\n   end\n-  bufstate.version = ctx.version\n+  self.version = ctx.version\n \n+  self:renew()\n   if api.nvim_get_mode().mode:match('^i') then\n     -- `foldUpdate()` is guarded in insert mode.\n-    schedule_foldupdate(bufnr)\n+    schedule_foldupdate(self.bufnr)\n   else\n-    foldupdate(bufnr)\n+    foldupdate(self.bufnr)\n   end\n end\n \n+---@param err lsp.ResponseError?\n ---@param result lsp.FoldingRange[]?\n----@type lsp.Handler\n-local function handler(err, result, ctx)\n-  multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n+---@param ctx lsp.HandlerContext, config?: table\n+function State:handler(err, result, ctx)\n+  self:multi_handler({ [ctx.client_id] = { err = err, result = result } }, ctx)\n end\n \n --- Request `textDocument/foldingRange` from the server.\n --- `foldupdate()` is scheduled once after the request is completed.\n----@param bufnr integer\n ---@param client? vim.lsp.Client The client whose server supports `foldingRange`.\n-local function request(bufnr, client)\n+function State:request(client)\n   ---@type lsp.FoldingRangeParams\n-  local params = { textDocument = util.make_text_document_params(bufnr) }\n+  local params = { textDocument = util.make_text_document_params(self.bufnr) }\n \n   if client then\n-    client:request(ms.textDocument_foldingRange, params, handler, bufnr)\n+    client:request(ms.textDocument_foldingRange, params, function(...)\n+      self:handler(...)\n+    end, self.bufnr)\n     return\n   end\n \n-  if not next(vim.lsp.get_clients({ bufnr = bufnr, method = ms.textDocument_foldingRange })) then\n+  if\n+    not next(vim.lsp.get_clients({ bufnr = self.bufnr, method = ms.textDocument_foldingRange }))\n+  then\n     return\n   end\n \n-  vim.lsp.buf_request_all(bufnr, ms.textDocument_foldingRange, params, multi_handler)\n+  vim.lsp.buf_request_all(self.bufnr, ms.textDocument_foldingRange, params, function(...)\n+    self:multi_handler(...)\n+  end)\n end\n \n--- NOTE:\n--- `bufstate` and event hooks are interdependent:\n--- * `bufstate` needs event hooks for correctness.\n--- * event hooks require the previous `bufstate` for updates.\n--- Since they are manually created and destroyed,\n--- we ensure their lifecycles are always synchronized.\n---\n--- TODO(ofseed):\n--- 1. Implement clearing `bufstate` and event hooks\n---    when no clients in the buffer support the corresponding method.\n--- 2. Then generalize this state management to other LSP modules.\n-local augroup_setup = api.nvim_create_augroup('nvim.lsp.folding_range.setup', {})\n-\n---- Initialize `bufstate` and event hooks, then request folding ranges.\n---- Manage their lifecycle within this function.\n+function State:reset()\n+  self.client_ranges = {}\n+  self.row_level = {}\n+  self.row_kinds = {}\n+  self.row_text = {}\n+end\n+\n+--- Initialize `provider` and event hooks, then request folding ranges.\n ---@param bufnr integer\n----@return vim.lsp.folding_range.BufState?\n-local function setup(bufnr)\n-  if not api.nvim_buf_is_loaded(bufnr) then\n-    return\n-  end\n+---@return vim.lsp.folding_range.State\n+function State.new(bufnr)\n+  local self = setmetatable({}, { __index = State })\n+  self.bufnr = bufnr\n+  self.augroup = api.nvim_create_augroup('nvim.lsp.folding_range:' .. bufnr, { clear = true })\n+  self:reset()\n+\n+  State.active[bufnr] = self\n \n-  -- Register the new `bufstate`.\n-  bufstates[bufnr] = {\n-    client_ranges = {},\n-    row_level = {},\n-    row_kinds = {},\n-    row_text = {},\n-  }\n-\n-  -- Event hooks from `buf_attach` can't be removed externally.\n-  -- Hooks and `bufstate` share the same lifecycle;\n-  -- they should self-destroy if `bufstate == nil`.\n   api.nvim_buf_attach(bufnr, false, {\n     -- `on_detach` also runs on buffer reload (`:e`).\n-    -- Ensure `bufstate` and hooks are cleared to avoid duplication or leftover states.\n+    -- Ensure `provider` and hooks are cleared to avoid duplication or leftover states.\n     on_detach = function()\n       util._cancel_requests({\n         bufnr = bufnr,\n         method = ms.textDocument_foldingRange,\n         type = 'pending',\n       })\n-      bufstates[bufnr] = nil\n-      api.nvim_clear_autocmds({ buffer = bufnr, group = augroup_setup })\n+      local provider = State.active[bufnr]\n+      if provider then\n+        provider:destroy()",
            "html_url": "https://github.com/neovim/neovim/pull/34469#discussion_r2156970609",
            "id": 2156970609,
            "in_reply_to_id": 2156940657,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AkMJx",
            "original_commit_id": "f29f652fd69aceca1466838426725bdabdc52686",
            "original_line": 205,
            "original_position": 203,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2942935475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156970609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-19T13:04:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156970609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "> leverage vim's existing buffer-scoped/window-scoped (`vim.b`, `vim.b`) variables\r\n\r\nI've considered this before, but in this case, using `vim.b` still cannot solve the problem of clearing autocmds; all autocmds require to be explicitly cleared. I will likely use `vim.b` for variables like `_is_feature_enabled`, but this does not involve using a table, so it is not currently blocked by #12544.",
            "created_at": "2025-06-19T08:54:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/34469#issuecomment-2987271873",
            "id": 2987271873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34469",
            "node_id": "IC_kwDOAPphoM6yDibB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987271873/reactions"
            },
            "updated_at": "2025-06-19T08:54:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987271873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34469/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34469/commits",
    "created_at": "2025-06-12T13:37:03Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34469.diff",
    "draft": false,
    "head": {
        "label": "ofseed:refactor-folding-provider",
        "ref": "refactor-folding-provider",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ofseed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ofseed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ofseed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ofseed/neovim/branches{/branch}",
            "clone_url": "https://github.com/ofseed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ofseed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ofseed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ofseed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ofseed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ofseed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ofseed/neovim/contributors",
            "created_at": "2021-11-30T18:13:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ofseed/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ofseed/neovim/downloads",
            "events_url": "https://api.github.com/repos/ofseed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ofseed/neovim/forks",
            "full_name": "ofseed/neovim",
            "git_commits_url": "https://api.github.com/repos/ofseed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ofseed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ofseed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ofseed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ofseed/neovim/hooks",
            "html_url": "https://github.com/ofseed/neovim",
            "id": 433537354,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ofseed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ofseed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ofseed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ofseed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ofseed/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ofseed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ofseed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ofseed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGddBSg",
            "notifications_url": "https://api.github.com/repos/ofseed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ofseed/neovim/pulls{/number}",
            "pushed_at": "2025-07-21T10:38:55Z",
            "releases_url": "https://api.github.com/repos/ofseed/neovim/releases{/id}",
            "size": 325328,
            "ssh_url": "git@github.com:ofseed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ofseed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ofseed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ofseed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ofseed/neovim/subscription",
            "svn_url": "https://github.com/ofseed/neovim",
            "tags_url": "https://api.github.com/repos/ofseed/neovim/tags",
            "teams_url": "https://api.github.com/repos/ofseed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ofseed/neovim/git/trees{/sha}",
            "updated_at": "2025-07-21T08:45:39Z",
            "url": "https://api.github.com/repos/ofseed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "92526899c4284dff08cad5e10e974461aa82d4af",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
            "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofseed/followers",
            "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofseed",
            "id": 61115159,
            "login": "ofseed",
            "node_id": "MDQ6VXNlcjYxMTE1MTU5",
            "organizations_url": "https://api.github.com/users/ofseed/orgs",
            "received_events_url": "https://api.github.com/users/ofseed/received_events",
            "repos_url": "https://api.github.com/users/ofseed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofseed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34469",
    "id": 2587397620,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34469",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "528381587bd3cc57c7a3b288b94b3240a9adce68",
    "merged_at": "2025-06-19T13:23:40Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6aOI30",
    "number": 34469,
    "patch_url": "https://github.com/neovim/neovim/pull/34469.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34469/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/92526899c4284dff08cad5e10e974461aa82d4af",
    "title": "refactor(lsp): migrate LSP folding to an oop design",
    "updated_at": "2025-07-21T08:06:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34469",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}