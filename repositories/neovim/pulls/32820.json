{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32820/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32820/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/32820"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32820"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32820/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/01b79b46be57dfc11f7706125c7c8647185d3dab"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6249,
            "forks_count": 6249,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1985,
            "open_issues_count": 1985,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-11T22:39:04Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 336901,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91885,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-12T02:40:46Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91885,
            "watchers_count": 91885,
            "web_commit_signoff_required": false
        },
        "sha": "c1d21492a66c8bc3cdb390b5f4cb24ad16516853",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "support completeitem/resolve request to get documentation and show it in popup floating window when cot include popup, the actual application of `nvim__complete_set`. It may still need some refinement. If there are any issues, I can adjust the implementation on the C side.\r\n\r\n![test2](https://github.com/user-attachments/assets/6aede0de-0235-4d9b-91ac-2192545c96da)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1988174700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988174700"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Do we need to set filetype for that buffer (and then executing autocommands there)? Is not `vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))` enough? ",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T00:05:25Z",
            "diff_hunk": "@@ -630,6 +630,105 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    vim.bo[bufnr].filetype = ft or ''",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1988174700",
            "id": 1988174700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52gSNs",
            "original_commit_id": "68d4b4105a49f67219755f8563e3d5c4d5264fd5",
            "original_line": 680,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2672428655,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988174700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T00:06:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988174700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1988404036"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988404036"
                }
            },
            "author_association": "MEMBER",
            "body": "because it returns `string | markdown | plaintext`.. so can only use ts to cover all cases? At least it can fall back to the traditional syntax if there have when set ft",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T05:10:29Z",
            "diff_hunk": "@@ -630,6 +630,105 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    vim.bo[bufnr].filetype = ft or ''",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1988404036",
            "id": 1988404036,
            "in_reply_to_id": 1988174700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52hKNE",
            "original_commit_id": "68d4b4105a49f67219755f8563e3d5c4d5264fd5",
            "original_line": 680,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2672834129,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988404036/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T05:10:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988404036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1988940415"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988940415"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Lots of plugins use `au FileType *` anti-pattern, so it would be good to reduce frequency of sending such event. What about\r\n```suggestion\r\n    if vim.bo[bufnr].filetype ~= ft then\r\n      vim.bo[bufnr].filetype = ft or ''\r\n    end\r\n```\r\n?",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T10:41:02Z",
            "diff_hunk": "@@ -630,6 +630,105 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    vim.bo[bufnr].filetype = ft or ''",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1988940415",
            "id": 1988940415,
            "in_reply_to_id": 1988174700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52jNJ_",
            "original_commit_id": "68d4b4105a49f67219755f8563e3d5c4d5264fd5",
            "original_line": 680,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2673870681,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988940415/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T10:41:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988940415",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1988944311"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988944311"
                }
            },
            "author_association": "MEMBER",
            "body": "make sense",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T10:43:18Z",
            "diff_hunk": "@@ -630,6 +630,105 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    vim.bo[bufnr].filetype = ft or ''",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1988944311",
            "id": 1988944311,
            "in_reply_to_id": 1988174700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52jOG3",
            "original_commit_id": "68d4b4105a49f67219755f8563e3d5c4d5264fd5",
            "original_line": 680,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2673877293,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988944311/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T10:43:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1988944311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1989380841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989380841"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Consider a condition similar to `ft` below (to reduce triggering `OptionSet`) or using `eventignorewin` here if it make sense.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T14:13:20Z",
            "diff_hunk": "@@ -671,6 +671,107 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1989380841",
            "id": 1989380841,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52k4rp",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 679,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2674719358,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989380841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T14:13:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989380841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1989546489"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989546489"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The disadvantage of this approach is that every (especially the first) request is delayed, even if there is no need to wait. \r\n\r\nFor this reason some weeks ago I switched to sending the request immediately when the timer is up. I'm still not sure if it's implemented correctly, but a similar approach could be worth considering here. See\r\n\r\nhttps://github.com/przepompownia/nvim-arctgx/blob/e186f882d3bcca4f320ec3e21e602d41be54cd3f/lua/arctgx/completion.lua#L71-L88",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T15:25:21Z",
            "diff_hunk": "@@ -671,6 +671,107 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft and vim.bo[bufnr].filetype ~= ft then\n+      vim.bo[bufnr].filetype = ft\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    cancel_funcs = {}, --- @type function[]\n+    bufnr = nil,\n+    word = nil,\n+  }\n+\n+  local function cancel_pending()\n+    for _, cancel in ipairs(infoContext.cancel_funcs) do\n+      cancel()\n+    end\n+    infoContext.cancel_funcs = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  local function is_valid()\n+    local data = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(data, 'completed', 'word') or '') == infoContext.word\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      100,",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1989546489",
            "id": 1989546489,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52lhH5",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 742,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2675041017,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989546489/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T15:37:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989546489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1989565658"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989565658"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Additionally, maybe this value should be configurable. I ended up with 250 ms, but I will probably need to fine-tune that value further.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T15:34:18Z",
            "diff_hunk": "@@ -671,6 +671,107 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft and vim.bo[bufnr].filetype ~= ft then\n+      vim.bo[bufnr].filetype = ft\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    cancel_funcs = {}, --- @type function[]\n+    bufnr = nil,\n+    word = nil,\n+  }\n+\n+  local function cancel_pending()\n+    for _, cancel in ipairs(infoContext.cancel_funcs) do\n+      cancel()\n+    end\n+    infoContext.cancel_funcs = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  local function is_valid()\n+    local data = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(data, 'completed', 'word') or '') == infoContext.word\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      100,",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1989565658",
            "id": 1989565658,
            "in_reply_to_id": 1989546489,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52llza",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 742,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2675078763,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989565658/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T15:34:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989565658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1989679924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989679924"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Nice to have: description :)",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T16:21:47Z",
            "diff_hunk": "@@ -706,6 +807,33 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('CompleteChanged', {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1989679924",
            "id": 1989679924,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52mBs0",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 812,
            "original_position": 114,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2675297768,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989679924/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T16:21:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1989679924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1990252033"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990252033"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "can we send this request only to the specific `user_data.nvim.lsp.client_id` that provided the completion item? Currently it sends request to all of them, even the clients that were not involved with the completion item. I tried out this branch and it causes a bit of flicker/chaos when there is more than one LSP server attached.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-11T23:07:57Z",
            "diff_hunk": "@@ -671,6 +671,107 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft and vim.bo[bufnr].filetype ~= ft then\n+      vim.bo[bufnr].filetype = ft\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    cancel_funcs = {}, --- @type function[]\n+    bufnr = nil,\n+    word = nil,\n+  }\n+\n+  local function cancel_pending()\n+    for _, cancel in ipairs(infoContext.cancel_funcs) do\n+      cancel()\n+    end\n+    infoContext.cancel_funcs = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  local function is_valid()\n+    local data = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(data, 'completed', 'word') or '') == infoContext.word\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      100,\n+      0,\n+      vim.schedule_wrap(function()\n+        if not is_valid() then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+\n+        local _, cancel_func = vim.lsp.buf_request(",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1990252033",
            "id": 1990252033,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52oNYB",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 739,
            "original_position": 69,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2676335352,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990252033/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-11T23:07:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990252033",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1990592378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990592378"
                }
            },
            "author_association": "MEMBER",
            "body": "currently completion use [EMA](https://en.wikipedia.org/wiki/Moving_average) to calc the request timer. I'm not sure if this also applies to info.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-12T05:22:53Z",
            "diff_hunk": "@@ -671,6 +671,107 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft and vim.bo[bufnr].filetype ~= ft then\n+      vim.bo[bufnr].filetype = ft\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    cancel_funcs = {}, --- @type function[]\n+    bufnr = nil,\n+    word = nil,\n+  }\n+\n+  local function cancel_pending()\n+    for _, cancel in ipairs(infoContext.cancel_funcs) do\n+      cancel()\n+    end\n+    infoContext.cancel_funcs = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  local function is_valid()\n+    local data = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(data, 'completed', 'word') or '') == infoContext.word\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      100,",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1990592378",
            "id": 1990592378,
            "in_reply_to_id": 1989546489,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52pgd6",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 742,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2676952754,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990592378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-12T05:22:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990592378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1990592888"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990592888"
                }
            },
            "author_association": "MEMBER",
            "body": "make sense",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-12T05:23:32Z",
            "diff_hunk": "@@ -671,6 +671,107 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft and vim.bo[bufnr].filetype ~= ft then\n+      vim.bo[bufnr].filetype = ft\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    cancel_funcs = {}, --- @type function[]\n+    bufnr = nil,\n+    word = nil,\n+  }\n+\n+  local function cancel_pending()\n+    for _, cancel in ipairs(infoContext.cancel_funcs) do\n+      cancel()\n+    end\n+    infoContext.cancel_funcs = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  local function is_valid()\n+    local data = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(data, 'completed', 'word') or '') == infoContext.word\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      100,\n+      0,\n+      vim.schedule_wrap(function()\n+        if not is_valid() then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+\n+        local _, cancel_func = vim.lsp.buf_request(",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1990592888",
            "id": 1990592888,
            "in_reply_to_id": 1990252033,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52pgl4",
            "original_commit_id": "2856dab137b27faa90a53c9d856a820a722e90c1",
            "original_line": 739,
            "original_position": 69,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2676953544,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990592888/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-12T05:23:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1990592888",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1991832982"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1991832982"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n      api.nvim_create_autocmd('CompleteChanged', {\r\n```",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-12T16:06:42Z",
            "diff_hunk": "@@ -706,6 +853,36 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('completechanged', {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1991832982",
            "id": 1991832982,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52uPWW",
            "original_commit_id": "994ff56d3ab117ad1cecbb11a8f3a49efce80091",
            "original_line": 858,
            "original_position": 160,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2679078830,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1991832982/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-12T16:06:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1991832982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997348297"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997348297"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "can we check `client:supports_method(ms.completionItem_resolve) `before sending the request? I'm seeing many `vim.notify` warnings for some LSP servers (e.g. json language service) which don't support `completionItem/resolve`: they simply provide documentation in the original response.\r\n",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-15T22:00:04Z",
            "diff_hunk": "@@ -706,6 +853,36 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {\n+        group = group,\n+        buffer = bufnr,\n+        callback = function(args)\n+          local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+          if (completed_item.info or '') ~= '' then\n+            local data = vim.fn.complete_info({ 'selected' })\n+            update_popup_window(data.preview_winid, data.preview_bufnr)\n+            return\n+          end\n+\n+          if\n+            not lsp.get_client_by_id(\n+              vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id')\n+            )\n+          then\n+            return\n+          end\n+\n+          local param = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')\n+          if param then\n+            debounce_info_request(args.buf, param, completed_item.word)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997348297",
            "id": 1997348297,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DR3J",
            "original_commit_id": "19ed439fadca3fd962a449f22eb49f09a4d38cb5",
            "original_line": 878,
            "original_position": 181,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688361572,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997348297/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-15T22:00:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997348297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997349792"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997349792"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm experiencing something like an off-by-one with the height, example response:\r\n    `foo:\\n```lua\\nbar\\n```\\n`\r\nIf I add an extra newline:\r\n    `foo:\\n```lua\\nbar\\n```\\n\\n`\r\nthen `bar` will be shown in the popup.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-15T22:05:56Z",
            "diff_hunk": "@@ -671,6 +671,153 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local lang = vim.treesitter.language.get_lang(ft)\n+      if lang then\n+        local ok = pcall(vim.treesitter.get_parser, bufnr, lang)\n+        if ok then\n+          vim.treesitter.start(bufnr, lang)\n+        end\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997349792",
            "id": 1997349792,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DSOg",
            "original_commit_id": "19ed439fadca3fd962a449f22eb49f09a4d38cb5",
            "original_line": 691,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688363471,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997349792/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-15T22:05:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997349792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997417672"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997417672"
                }
            },
            "author_association": "MEMBER",
            "body": "emm I  have fixed this in master.. rebased.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-15T23:47:31Z",
            "diff_hunk": "@@ -671,6 +671,153 @@ local function get_augroup(bufnr)\n   return string.format('nvim.lsp.completion_%d', bufnr)\n end\n \n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local lang = vim.treesitter.language.get_lang(ft)\n+      if lang then\n+        local ok = pcall(vim.treesitter.get_parser, bufnr, lang)\n+        if ok then\n+          vim.treesitter.start(bufnr, lang)\n+        end\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997417672",
            "id": 1997417672,
            "in_reply_to_id": 1997349792,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DizI",
            "original_commit_id": "19ed439fadca3fd962a449f22eb49f09a4d38cb5",
            "original_line": 691,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688436704,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997417672/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-15T23:47:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997417672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997426609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997426609"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n          local clients = lsp.get_clients({\r\n            id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\r\n            method = ms.completionItem_resolve\r\n          )\r\n\r\n          if #clients == 0 then\r\n            return\r\n          end\r\n```\r\nWDYT (assuming that `client` is not used later)?",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T00:05:35Z",
            "diff_hunk": "@@ -706,6 +853,36 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {\n+        group = group,\n+        buffer = bufnr,\n+        callback = function(args)\n+          local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+          if (completed_item.info or '') ~= '' then\n+            local data = vim.fn.complete_info({ 'selected' })\n+            update_popup_window(data.preview_winid, data.preview_bufnr)\n+            return\n+          end\n+\n+          local client = lsp.get_client_by_id(\n+            vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id')\n+          )\n+\n+          if not client or not client:supports_method(ms.completionItem_resolve) then\n+            return\n+          end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997426609",
            "id": 1997426609,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53Dk-x",
            "original_commit_id": "817a28ff9f171e3598516b919ac0e9bef5ff095b",
            "original_line": 874,
            "original_position": 177,
            "original_start_line": 869,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688445748,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997426609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-16T00:08:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997426609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997428611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997428611"
                }
            },
            "author_association": "MEMBER",
            "body": "better ",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T00:10:01Z",
            "diff_hunk": "@@ -706,6 +853,36 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {\n+        group = group,\n+        buffer = bufnr,\n+        callback = function(args)\n+          local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+          if (completed_item.info or '') ~= '' then\n+            local data = vim.fn.complete_info({ 'selected' })\n+            update_popup_window(data.preview_winid, data.preview_bufnr)\n+            return\n+          end\n+\n+          local client = lsp.get_client_by_id(\n+            vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id')\n+          )\n+\n+          if not client or not client:supports_method(ms.completionItem_resolve) then\n+            return\n+          end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997428611",
            "id": 1997428611,
            "in_reply_to_id": 1997426609,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DleD",
            "original_commit_id": "817a28ff9f171e3598516b919ac0e9bef5ff095b",
            "original_line": 874,
            "original_position": 177,
            "original_start_line": 869,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688448102,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997428611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-16T00:10:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997428611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997430197"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997430197"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "And `clients` became redundant",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T00:12:09Z",
            "diff_hunk": "@@ -706,6 +853,36 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {\n+        group = group,\n+        buffer = bufnr,\n+        callback = function(args)\n+          local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+          if (completed_item.info or '') ~= '' then\n+            local data = vim.fn.complete_info({ 'selected' })\n+            update_popup_window(data.preview_winid, data.preview_bufnr)\n+            return\n+          end\n+\n+          local client = lsp.get_client_by_id(\n+            vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id')\n+          )\n+\n+          if not client or not client:supports_method(ms.completionItem_resolve) then\n+            return\n+          end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997430197",
            "id": 1997430197,
            "in_reply_to_id": 1997426609,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53Dl21",
            "original_commit_id": "817a28ff9f171e3598516b919ac0e9bef5ff095b",
            "original_line": 874,
            "original_position": 177,
            "original_start_line": 869,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688450582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997430197/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-16T00:12:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997430197",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997431594"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997431594"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't use that just inline check size of table.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T00:16:30Z",
            "diff_hunk": "@@ -706,6 +853,36 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {\n+        group = group,\n+        buffer = bufnr,\n+        callback = function(args)\n+          local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+          if (completed_item.info or '') ~= '' then\n+            local data = vim.fn.complete_info({ 'selected' })\n+            update_popup_window(data.preview_winid, data.preview_bufnr)\n+            return\n+          end\n+\n+          local client = lsp.get_client_by_id(\n+            vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id')\n+          )\n+\n+          if not client or not client:supports_method(ms.completionItem_resolve) then\n+            return\n+          end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997431594",
            "id": 1997431594,
            "in_reply_to_id": 1997426609,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DmMq",
            "original_commit_id": "817a28ff9f171e3598516b919ac0e9bef5ff095b",
            "original_line": 874,
            "original_position": 177,
            "original_start_line": 869,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688451972,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997431594/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-16T00:16:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997431594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997460337"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997460337"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is the logic in the best place? Unless the user writes an autocmd, they still get LSP completion via C-XC-O omnifunc, but it misses some features such as this one, which I found a bit confusing? The result is that I thought the feature wasn't working...\r\n\r\nTest setup:\r\n```lua\r\nvim.lsp.enable({ 'lua' })\r\n-- confusing: without 'noselect', the first item is autoselected without a CompleteChanged? must move down/back up to see docs.\r\n-- confusing: with 'noselect', you need 'menuone' too: otherwise completion does nothing if there's only 1 result.\r\nvim.opt.completeopt = {'menuone', 'popup', 'noselect'}\r\n-- confusing: completion still \"kinda works\" via omnifunc without this, but without docs and other features:\r\nvim.api.nvim_create_autocmd('LspAttach', {\r\n  callback = function(args)\r\n    local client = assert(vim.lsp.get_client_by_id(args.data.client_id))\r\n    if client:supports_method('textDocument/completion') then\r\n      -- Enable completion \"fully\" via C-X C-O\r\n      vim.lsp.completion.enable(true, client.id, args.buf)\r\n    end\r\n  end,\r\n})\r\n```",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T02:03:53Z",
            "diff_hunk": "@@ -706,6 +851,37 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997460337",
            "id": 1997460337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DtNx",
            "original_commit_id": "b532b8f07896352d46708701f915cd0f9c3a014c",
            "original_line": 889,
            "original_position": 158,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688485756,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997460337/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-16T02:03:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997460337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997463555"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997463555"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "some LSP servers aren't giving us documentation, because we don't tell them we can do this. example is 'jdtls' for java. Suggested fix:\r\n```\r\ndiff --git a/runtime/lua/vim/lsp/protocol.lua b/runtime/lua/vim/lsp/protocol.lua\r\nindex ececc41cee..72397bad8e 100644\r\n--- a/runtime/lua/vim/lsp/protocol.lua\r\n+++ b/runtime/lua/vim/lsp/protocol.lua\r\n@@ -459,6 +459,7 @@ function protocol.make_client_capabilities()\r\n             properties = {\r\n               'additionalTextEdits',\r\n               'command',\r\n+              'documentation',\r\n             },\r\n           },\r\n           tagSupport = {\r\n```",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T02:29:14Z",
            "diff_hunk": "@@ -706,6 +851,37 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {\n+        group = group,\n+        buffer = bufnr,\n+        callback = function(args)\n+          local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+          if (completed_item.info or '') ~= '' then\n+            local data = vim.fn.complete_info({ 'selected' })\n+            update_popup_window(data.preview_winid, data.preview_bufnr)\n+            return\n+          end\n+\n+          if\n+            #lsp.get_clients({\n+              id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\n+              methods = ms.completionItem_resolve,\n+            }) == 0",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997463555",
            "id": 1997463555,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DuAD",
            "original_commit_id": "b532b8f07896352d46708701f915cd0f9c3a014c",
            "original_line": 871,
            "original_position": 173,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688489571,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997463555/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-16T02:29:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997463555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997466986"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997466986"
                }
            },
            "author_association": "MEMBER",
            "body": "what's the `set omnifunc?` i think this doesn't override the default omnifunc which set in there\r\nhttps://github.com/neovim/neovim/blob/f5714994bc4fc578b5f07bca403e7067e6d9b5a0/runtime/ftplugin/lua.lua#L4",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T02:50:27Z",
            "diff_hunk": "@@ -706,6 +851,37 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997466986",
            "id": 1997466986,
            "in_reply_to_id": 1997460337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53Du1q",
            "original_commit_id": "b532b8f07896352d46708701f915cd0f9c3a014c",
            "original_line": 889,
            "original_position": 158,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688498728,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997466986/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-16T02:59:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997466986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997470645"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997470645"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`v:lua.vim.lsp.omnifunc`. This gets set here:\r\n https://github.com/neovim/neovim/blob/ed071672613bbd3d5b5e5618a12ca6975244ca9b/runtime/lua/vim/lsp.lua#L712\r\n\r\nBut without an autocmd, I don't see documentation.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T03:18:25Z",
            "diff_hunk": "@@ -706,6 +851,37 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997470645",
            "id": 1997470645,
            "in_reply_to_id": 1997460337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53Dvu1",
            "original_commit_id": "b532b8f07896352d46708701f915cd0f9c3a014c",
            "original_line": 889,
            "original_position": 158,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688501900,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997470645/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-16T03:18:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997470645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r1997476449"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997476449"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh I misunderstand i know what you mean now :)",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-03-16T04:08:00Z",
            "diff_hunk": "@@ -706,6 +851,37 @@ local function enable_completions(client_id, bufnr, opts)\n         end\n       end,\n     })\n+\n+    if vim.o.completeopt:find('popup') then\n+      api.nvim_create_autocmd('Completechanged', {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r1997476449",
            "id": 1997476449,
            "in_reply_to_id": 1997460337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM53DxJh",
            "original_commit_id": "b532b8f07896352d46708701f915cd0f9c3a014c",
            "original_line": 889,
            "original_position": 158,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2688506408,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997476449/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-16T04:08:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1997476449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2040972460"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2040972460"
                }
            },
            "author_association": "NONE",
            "body": "Maybe this could be part of `vim.lsp.completion.enable`? Instead of checking on each trigger attempt this autocmd could be set once, when lsp completion is enabled. Additionally, if there would be interest in it, a new setting to control this could be added to `vim.lsp.completion.BufferOpts`.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-13T06:05:20Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)\n+      end\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2040972460",
            "id": 2040972460,
            "line": 762,
            "node_id": "PRRC_kwDOAPphoM55psSs",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 762,
            "original_position": 200,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 262,
            "pull_request_review_id": 2762611562,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2040972460/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-13T06:17:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2040972460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4627919?v=4",
                "events_url": "https://api.github.com/users/somnam/events{/privacy}",
                "followers_url": "https://api.github.com/users/somnam/followers",
                "following_url": "https://api.github.com/users/somnam/following{/other_user}",
                "gists_url": "https://api.github.com/users/somnam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/somnam",
                "id": 4627919,
                "login": "somnam",
                "node_id": "MDQ6VXNlcjQ2Mjc5MTk=",
                "organizations_url": "https://api.github.com/users/somnam/orgs",
                "received_events_url": "https://api.github.com/users/somnam/received_events",
                "repos_url": "https://api.github.com/users/somnam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/somnam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/somnam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/somnam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2040995220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2040995220"
                }
            },
            "author_association": "MEMBER",
            "body": "`_omnifunc` does not calling `enable_completion`. ",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-13T06:12:46Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)\n+      end\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2040995220",
            "id": 2040995220,
            "in_reply_to_id": 2040972460,
            "line": 762,
            "node_id": "PRRC_kwDOAPphoM55px2U",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 762,
            "original_position": 200,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 262,
            "pull_request_review_id": 2762625837,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2040995220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-13T06:12:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2040995220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2041003001"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2041003001"
                }
            },
            "author_association": "NONE",
            "body": "Ooh, didn't see this calls on regular omnifunc too.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-13T06:15:30Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)\n+      end\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2041003001",
            "id": 2041003001,
            "in_reply_to_id": 2040972460,
            "line": 762,
            "node_id": "PRRC_kwDOAPphoM55pzv5",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 762,
            "original_position": 200,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 262,
            "pull_request_review_id": 2762632610,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2041003001/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-13T06:15:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2041003001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4627919?v=4",
                "events_url": "https://api.github.com/users/somnam/events{/privacy}",
                "followers_url": "https://api.github.com/users/somnam/followers",
                "following_url": "https://api.github.com/users/somnam/following{/other_user}",
                "gists_url": "https://api.github.com/users/somnam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/somnam",
                "id": 4627919,
                "login": "somnam",
                "node_id": "MDQ6VXNlcjQ2Mjc5MTk=",
                "organizations_url": "https://api.github.com/users/somnam/orgs",
                "received_events_url": "https://api.github.com/users/somnam/received_events",
                "repos_url": "https://api.github.com/users/somnam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/somnam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/somnam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/somnam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2041020778"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2041020778"
                }
            },
            "author_association": "MEMBER",
            "body": "A clean hook may be needed here to handle all autocmds such as `CompletePumShown` to reigister all oth `Complete*` autocmds It needs to be evaluated and discussed and then if so I will implement it on the C side.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-13T06:22:14Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)\n+      end\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2041020778",
            "id": 2041020778,
            "in_reply_to_id": 2040972460,
            "line": 762,
            "node_id": "PRRC_kwDOAPphoM55p4Fq",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 762,
            "original_position": 200,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 262,
            "pull_request_review_id": 2762650479,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2041020778/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-13T06:23:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2041020778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060181153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060181153"
                }
            },
            "author_association": "MEMBER",
            "body": "defining the autocmd in the middle of trigger() seems strange. why not do it in completion.enable() or some other \"one time\" setup step?",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:49:27Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060181153",
            "id": 2060181153,
            "line": 760,
            "node_id": "PRRC_kwDOAPphoM56y96h",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 760,
            "original_position": 198,
            "original_start_line": 711,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 260,
            "pull_request_review_id": 2794017525,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060181153/reactions"
            },
            "side": "RIGHT",
            "start_line": 758,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-25T12:49:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060181153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060182065"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060182065"
                }
            },
            "author_association": "MEMBER",
            "body": "could use vim.regex to check word boundary, that's a bit less fragile incase another `popupfoo` flag is added in the future.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:50:07Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060182065",
            "id": 2060182065,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y-Ix",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 717,
            "original_position": 193,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794019164,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060182065/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:50:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060182065",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060183836"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060183836"
                }
            },
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/pull/32820#discussion_r2040995220\r\n\r\n",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:51:20Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060183836",
            "id": 2060183836,
            "in_reply_to_id": 2060181153,
            "line": 760,
            "node_id": "PRRC_kwDOAPphoM56y-kc",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 760,
            "original_position": 198,
            "original_start_line": 711,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 260,
            "pull_request_review_id": 2794022118,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060183836/reactions"
            },
            "side": "RIGHT",
            "start_line": 758,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-25T12:57:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060183836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060185145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060185145"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.v.event` ...\r\n\r\nwhy use the more verbose api? same for any other code in this PR, and future PRs...",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:52:12Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060185145",
            "id": 2060185145,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y-45",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 622,
            "original_position": 160,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794024249,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060185145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:52:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060185145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060187800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060187800"
                }
            },
            "author_association": "MEMBER",
            "body": "where is this user_data coming from? a 1-line comment should give a hint.\r\n\r\nthere is way too much \"hidden knowledge\" in this PR. use concise 1-line comments to give hints.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:53:56Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+      if (completed_item.info or '') ~= '' then\n+        local data = vim.fn.complete_info({ 'selected' })\n+        update_popup_window(data.preview_winid, data.preview_bufnr)\n+        return\n+      end\n+\n+      if\n+        #lsp.get_clients({\n+          id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\n+          method = ms.completionItem_resolve,\n+          bufnr = args.buf,\n+        }) == 0\n+      then\n+        return\n+      end\n+\n+      local param = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060187800",
            "id": 2060187800,
            "line": 685,
            "node_id": "PRRC_kwDOAPphoM56y_iY",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 685,
            "original_position": 177,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 238,
            "pull_request_review_id": 2794028593,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060187800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:53:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060187800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060190367"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060190367"
                }
            },
            "author_association": "MEMBER",
            "body": "because this file elsewhere uses api.nvim_get_vvar('event')",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:55:32Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060190367",
            "id": 2060190367,
            "in_reply_to_id": 2060185145,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zAKf",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 622,
            "original_position": 160,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794032702,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060190367/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:55:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060190367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060191238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060191238"
                }
            },
            "author_association": "MEMBER",
            "body": "    --- Defines a CompleteChanged handler to ...",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:56:05Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060191238",
            "id": 2060191238,
            "line": 661,
            "node_id": "PRRC_kwDOAPphoM56zAYG",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 661,
            "original_position": 155,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 214,
            "pull_request_review_id": 2794034079,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060191238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:56:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060191238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060193534"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060193534"
                }
            },
            "author_association": "MEMBER",
            "body": "this is 100 lines of complex code. how is anyone supposed to know what this does without studying it?",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:57:34Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060193534",
            "id": 2060193534,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zA7-",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 509,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794037837,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060193534/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:57:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060193534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060194082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060194082"
                }
            },
            "author_association": "MEMBER",
            "body": "random function without  docstring giving any hint about its purpose",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:57:55Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060194082",
            "id": 2060194082,
            "line": 491,
            "node_id": "PRRC_kwDOAPphoM56zBEi",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 491,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 44,
            "pull_request_review_id": 2794038744,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060194082/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:57:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060194082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060196686"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060196686"
                }
            },
            "author_association": "MEMBER",
            "body": "`:help complete-items`",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T12:59:35Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+      if (completed_item.info or '') ~= '' then\n+        local data = vim.fn.complete_info({ 'selected' })\n+        update_popup_window(data.preview_winid, data.preview_bufnr)\n+        return\n+      end\n+\n+      if\n+        #lsp.get_clients({\n+          id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\n+          method = ms.completionItem_resolve,\n+          bufnr = args.buf,\n+        }) == 0\n+      then\n+        return\n+      end\n+\n+      local param = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060196686",
            "id": 2060196686,
            "in_reply_to_id": 2060187800,
            "line": 685,
            "node_id": "PRRC_kwDOAPphoM56zBtO",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 685,
            "original_position": 177,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 238,
            "pull_request_review_id": 2794042906,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060196686/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:59:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060196686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060197621"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060197621"
                }
            },
            "author_association": "MEMBER",
            "body": "really need to decide what we're going to do with this api function. ",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:00:14Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060197621",
            "id": 2060197621,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zB71",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 613,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794044539,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060197621/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:00:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060197621",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060224990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060224990"
                }
            },
            "author_association": "MEMBER",
            "body": "> `_omnifunc` does not calling `enable_completion`.\r\n\r\nThen `_omnifunc` should call `on_completechanged()` to do the setup. Adding it randomly in `trigger()` is messy.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:16:11Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060224990",
            "id": 2060224990,
            "in_reply_to_id": 2060181153,
            "line": 760,
            "node_id": "PRRC_kwDOAPphoM56zIne",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 760,
            "original_position": 198,
            "original_start_line": 711,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 260,
            "pull_request_review_id": 2794093599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060224990/reactions"
            },
            "side": "RIGHT",
            "start_line": 758,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-25T13:16:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060224990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060225870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060225870"
                }
            },
            "author_association": "MEMBER",
            "body": "we don't need to perpetuate suboptimal practices",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:16:46Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060225870",
            "id": 2060225870,
            "in_reply_to_id": 2060185145,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zI1O",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 622,
            "original_position": 160,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794095160,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060225870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:17:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060225870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060228568"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060228568"
                }
            },
            "author_association": "MEMBER",
            "body": "That only describes `user_data`, not this custom info that is *set* on `user_data`.",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:18:08Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+      if (completed_item.info or '') ~= '' then\n+        local data = vim.fn.complete_info({ 'selected' })\n+        update_popup_window(data.preview_winid, data.preview_bufnr)\n+        return\n+      end\n+\n+      if\n+        #lsp.get_clients({\n+          id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\n+          method = ms.completionItem_resolve,\n+          bufnr = args.buf,\n+        }) == 0\n+      then\n+        return\n+      end\n+\n+      local param = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060228568",
            "id": 2060228568,
            "in_reply_to_id": 2060187800,
            "line": 685,
            "node_id": "PRRC_kwDOAPphoM56zJfY",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 685,
            "original_position": 177,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 238,
            "pull_request_review_id": 2794100176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060228568/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:18:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060228568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060231291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060231291"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.v.event...`",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:19:29Z",
            "diff_hunk": "@@ -463,6 +463,197 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+--- Updates the completion preview popup: configures conceal level, applies Treesitter or\n+--- fallback syntax, and resizes height to fit content\n+---\n+--- @param winid integer\n+--- @param bufnr integer\n+--- @param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+--- Creates and returns a debounced resolver function that performs LSP completionItem/resolve\n+--- requests, computes rolling-average RTT, and updates the documentation popup when the user\n+--- navigates completion items.\n+---\n+--- @return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+--- Defines a CompleteChanged handler to request and display LSP completion item documentation\n+--- via completionItem/resolve\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = vim.v.completed_item or {}",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060231291",
            "id": 2060231291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zKJ7",
            "original_commit_id": "554f03be88090772cb57b85f62a8c957393e75d0",
            "original_line": 639,
            "original_position": 169,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": null,
            "pull_request_review_id": 2794105179,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060231291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:19:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060231291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060234928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060234928"
                }
            },
            "author_association": "MEMBER",
            "body": "if no matches still call `on_completechanged` ??",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:21:51Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060234928",
            "id": 2060234928,
            "in_reply_to_id": 2060181153,
            "line": 760,
            "node_id": "PRRC_kwDOAPphoM56zLCw",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 760,
            "original_position": 198,
            "original_start_line": 711,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 260,
            "pull_request_review_id": 2794111505,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060234928/reactions"
            },
            "side": "RIGHT",
            "start_line": 758,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-25T13:21:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060234928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060236637"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060236637"
                }
            },
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/pull/32820#discussion_r2041020778",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:22:57Z",
            "diff_hunk": "@@ -523,6 +705,14 @@ local function trigger(bufnr, clients, ctx)\n     end\n     local start_col = (server_start_boundary or word_boundary) + 1\n     Context.cursor = { cursor_row, start_col }\n+    if #matches > 0 and vim.o.completeopt:find('popup') then\n+      local group = get_augroup(bufnr)\n+      if\n+        #api.nvim_get_autocmds({ buffer = bufnr, event = 'CompleteChanged', group = group }) == 0\n+      then\n+        on_completechanged(group, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060236637",
            "id": 2060236637,
            "in_reply_to_id": 2060181153,
            "line": 760,
            "node_id": "PRRC_kwDOAPphoM56zLdd",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 760,
            "original_position": 198,
            "original_start_line": 711,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 260,
            "pull_request_review_id": 2794114431,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060236637/reactions"
            },
            "side": "RIGHT",
            "start_line": 758,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-25T13:22:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060236637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060238470"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060238470"
                }
            },
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/blob/06613989a67e03044941a608536a775af1521c61/runtime/lua/vim/lsp/completion.lua#L338-L342",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:24:08Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+      if (completed_item.info or '') ~= '' then\n+        local data = vim.fn.complete_info({ 'selected' })\n+        update_popup_window(data.preview_winid, data.preview_bufnr)\n+        return\n+      end\n+\n+      if\n+        #lsp.get_clients({\n+          id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\n+          method = ms.completionItem_resolve,\n+          bufnr = args.buf,\n+        }) == 0\n+      then\n+        return\n+      end\n+\n+      local param = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060238470",
            "id": 2060238470,
            "in_reply_to_id": 2060187800,
            "line": 685,
            "node_id": "PRRC_kwDOAPphoM56zL6G",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 685,
            "original_position": 177,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 238,
            "pull_request_review_id": 2794117684,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060238470/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:24:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060238470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32820#discussion_r2060253211"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32820"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060253211"
                }
            },
            "author_association": "MEMBER",
            "body": "added comment",
            "commit_id": "01b79b46be57dfc11f7706125c7c8647185d3dab",
            "created_at": "2025-04-25T13:32:27Z",
            "diff_hunk": "@@ -463,6 +463,188 @@ local function request(clients, bufnr, win, ctx, callback)\n   end\n end\n \n+---@param bufnr integer\n+---@return string\n+local function get_augroup(bufnr)\n+  return string.format('nvim.lsp.completion_%d', bufnr)\n+end\n+\n+---@param winid integer\n+---@param bufnr integer\n+---@param ft? string\n+local function update_popup_window(winid, bufnr, ft)\n+  if winid and api.nvim_win_is_valid(winid) and bufnr and api.nvim_buf_is_valid(bufnr) then\n+    vim.wo[winid].conceallevel = 2\n+    if ft then\n+      local ok = pcall(vim.treesitter.get_parser, bufnr, ft)\n+      if ok then\n+        vim.treesitter.start(bufnr, vim.treesitter.language.get_lang(ft))\n+      else\n+        vim.wo[winid].eventignorewin = 'OptionSet'\n+        vim.bo[bufnr].filetype = ft\n+        vim.bo[bufnr].syntax = 'on'\n+      end\n+    end\n+    local all = api.nvim_win_text_height(winid, {}).all\n+    api.nvim_win_set_height(winid, all)\n+  end\n+end\n+\n+---@return function\n+local function cmpitem_resolve()\n+  local doc_rtt_ms = 100\n+  local doc_compute_new_average = exp_avg(10, 5)\n+\n+  local infoContext = {\n+    timer = nil, -- [[uv_time_t]]\n+    request_ids = {}, --- @type table<integer, integer>\n+    bufnr = nil,\n+    word = nil,\n+    last_request_time = nil,\n+  }\n+\n+  local function next_doc_debounce()\n+    if not infoContext.last_request_time then\n+      return doc_rtt_ms\n+    end\n+\n+    local ms_since_request = (vim.uv.hrtime() - infoContext.last_request_time) * ns_to_ms\n+    return math.max((ms_since_request - doc_rtt_ms) * -1, 0)\n+  end\n+\n+  local function cancel_pending()\n+    for client_id, request_id in pairs(infoContext.request_ids) do\n+      local client = lsp.get_client_by_id(client_id)\n+      if client and client.requests and client.requests[request_id] then\n+        client:cancel_request(request_id)\n+      end\n+    end\n+    infoContext.request_ids = {}\n+  end\n+\n+  local function cleanup()\n+    if infoContext.timer and not infoContext.timer:is_closing() then\n+      infoContext.timer:stop()\n+      infoContext.timer:close()\n+      infoContext.timer = nil\n+    end\n+    cancel_pending()\n+  end\n+\n+  ---@return boolean, table\n+  local function is_valid()\n+    local cmp_info = vim.fn.complete_info({ 'selected', 'completed' })\n+    return api.nvim_buf_is_valid(infoContext.bufnr)\n+      and api.nvim_get_current_buf() == infoContext.bufnr\n+      and vim.startswith(api.nvim_get_mode().mode, 'i')\n+      and tonumber(vim.fn.pumvisible()) == 1\n+      and (vim.tbl_get(cmp_info, 'completed', 'word') or '') == infoContext.word,\n+      cmp_info\n+  end\n+\n+  return function(bufnr, param, select_word)\n+    cleanup()\n+\n+    infoContext.bufnr = bufnr\n+    infoContext.word = select_word\n+    local debounce_time = next_doc_debounce()\n+\n+    infoContext.timer = assert(vim.uv.new_timer())\n+    infoContext.timer:start(\n+      debounce_time,\n+      0,\n+      vim.schedule_wrap(function()\n+        local valid, cmp_info = is_valid()\n+        if not valid then\n+          cleanup()\n+          return\n+        end\n+\n+        cancel_pending()\n+        local client_id = vim.tbl_get(cmp_info.completed, 'user_data', 'nvim', 'lsp', 'client_id')\n+        local client = client_id and lsp.get_client_by_id(client_id)\n+        if not client then\n+          return\n+        end\n+\n+        local start_time = vim.uv.hrtime()\n+        infoContext.last_request_time = start_time\n+\n+        local ok, request_id = client:request(\n+          vim.lsp.protocol.Methods.completionItem_resolve,\n+          param,\n+          function(err, result)\n+            local end_time = vim.uv.hrtime()\n+            local response_time = (end_time - start_time) * ns_to_ms\n+            doc_rtt_ms = doc_compute_new_average(response_time)\n+\n+            if err or not result or next(result) == nil then\n+              if err then\n+                vim.notify(err.message, vim.log.levels.WARN)\n+              end\n+              return\n+            end\n+\n+            valid, cmp_info = is_valid()\n+            if not valid then\n+              return\n+            end\n+\n+            local value = vim.tbl_get(result, 'documentation', 'value')\n+            if not value then\n+              return\n+            end\n+\n+            local windata = api.nvim__complete_set(cmp_info.selected, {\n+              info = value,\n+            })\n+            local kind = vim.tbl_get(result, 'documentation', 'kind')\n+            update_popup_window(windata.winid, windata.bufnr, kind)\n+          end,\n+          bufnr\n+        )\n+\n+        if ok and request_id then\n+          infoContext.request_ids[client.id] = request_id\n+        end\n+      end)\n+    )\n+  end\n+end\n+\n+local debounce_info_request = cmpitem_resolve()\n+\n+local function on_completechanged(group, bufnr)\n+  api.nvim_create_autocmd('CompleteChanged', {\n+    group = group,\n+    buffer = bufnr,\n+    callback = function(args)\n+      local completed_item = api.nvim_get_vvar('event').completed_item or {}\n+      if (completed_item.info or '') ~= '' then\n+        local data = vim.fn.complete_info({ 'selected' })\n+        update_popup_window(data.preview_winid, data.preview_bufnr)\n+        return\n+      end\n+\n+      if\n+        #lsp.get_clients({\n+          id = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'client_id'),\n+          method = ms.completionItem_resolve,\n+          bufnr = args.buf,\n+        }) == 0\n+      then\n+        return\n+      end\n+\n+      local param = vim.tbl_get(completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')",
            "html_url": "https://github.com/neovim/neovim/pull/32820#discussion_r2060253211",
            "id": 2060253211,
            "in_reply_to_id": 2060187800,
            "line": 685,
            "node_id": "PRRC_kwDOAPphoM56zPgb",
            "original_commit_id": "ac50197dac36afa6a04e4079ee99279063eb9105",
            "original_line": 685,
            "original_position": 177,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/completion.lua",
            "position": 238,
            "pull_request_review_id": 2794145015,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060253211/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:32:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060253211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Please add `Fixes #29225` tag to the description.",
            "created_at": "2025-03-11T13:35:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2714282784",
            "id": 2714282784,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6hyKsg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2714282784/reactions"
            },
            "updated_at": "2025-03-11T13:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2714282784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "![image](https://github.com/user-attachments/assets/a11589c4-b52a-4256-8b53-0f7cacd6f818)\r\nAny thoughts about the default background highlight (not necessary to set here)?",
            "created_at": "2025-03-15T16:02:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2726754918",
            "id": 2726754918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6ihvpm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2726754918/reactions"
            },
            "updated_at": "2025-03-15T16:02:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2726754918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Any thoughts about the default background highlight (not necessary to set here)?\r\n\r\nHopefully soon we'll have a default 1px border for popupmenu + the doc floatwin, so that will be less urgent.",
            "created_at": "2025-03-15T17:07:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2726788567",
            "id": 2726788567,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6ih33X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2726788567/reactions"
            },
            "updated_at": "2025-03-15T17:07:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2726788567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I created a separate draft PR for the \"no room for popup\" issues I keep hitting while testing, but feel free to fold it in here if you think it is better: https://github.com/neovim/neovim/pull/32924",
            "created_at": "2025-03-16T03:06:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2727156239",
            "id": 2727156239,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6ijRoP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2727156239/reactions"
            },
            "updated_at": "2025-03-16T03:06:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2727156239",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It's fine keep in that PR :)",
            "created_at": "2025-03-16T04:06:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2727175590",
            "id": 2727175590,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6ijWWm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2727175590/reactions"
            },
            "updated_at": "2025-03-16T04:06:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2727175590",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Similarly to #32277 I have logged lots of\r\n```\r\n[ERROR][2025-03-25 18:24:39] ...m/lsp/client.lua:623    \"LSP[luals]\"    \"Cannot find request with id 42 whilst attempting to cancel\"\r\n```\r\nwhen moving between items (`<C-n>`).  ",
            "created_at": "2025-03-25T17:30:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2752026271",
            "id": 2752026271,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6kCJaf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2752026271/reactions"
            },
            "updated_at": "2025-03-26T10:45:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2752026271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Tracking request ids solved the problem, thanks!",
            "created_at": "2025-03-26T10:45:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2753980162",
            "id": 2753980162,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6kJmcC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2753980162/reactions"
            },
            "updated_at": "2025-03-26T12:28:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2753980162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "~Hey @glepnir sorry for the newbie question but how are you getting these suggestions? Are you using any lsp for that, like lua_ls?~ nvm I found it out xD. defining workspace using `nvim_get_runtime_file`",
            "created_at": "2025-04-19T16:36:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-2816775639",
            "id": 2816775639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM6n5JXX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2816775639/reactions"
            },
            "updated_at": "2025-04-22T20:45:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2816775639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/15686693?v=4",
                "events_url": "https://api.github.com/users/Cih2001/events{/privacy}",
                "followers_url": "https://api.github.com/users/Cih2001/followers",
                "following_url": "https://api.github.com/users/Cih2001/following{/other_user}",
                "gists_url": "https://api.github.com/users/Cih2001/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Cih2001",
                "id": 15686693,
                "login": "Cih2001",
                "node_id": "MDQ6VXNlcjE1Njg2Njkz",
                "organizations_url": "https://api.github.com/users/Cih2001/orgs",
                "received_events_url": "https://api.github.com/users/Cih2001/received_events",
                "repos_url": "https://api.github.com/users/Cih2001/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Cih2001/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Cih2001/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Cih2001",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there any other (than reported by CI) block preventing this PR from being merged?",
            "created_at": "2025-08-04T13:29:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-3150728449",
            "id": 3150728449,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM67zE0B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3150728449/reactions"
            },
            "updated_at": "2025-08-04T13:30:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3150728449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is there any other (than reported by CI) block preventing this PR from being merged?\r\n\r\nOne issue I found: the `nvim__complete_set()` in master no longer works correctly, due to recent changes, `selected` is no longer an index into the completion items anymore. https://github.com/vim/vim/pull/17952",
            "created_at": "2025-08-09T11:45:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/32820#issuecomment-3170648760",
            "id": 3170648760,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
            "node_id": "IC_kwDOAPphoM68_EK4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3170648760/reactions"
            },
            "updated_at": "2025-08-10T09:55:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3170648760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/504194?v=4",
                "events_url": "https://api.github.com/users/rmuir/events{/privacy}",
                "followers_url": "https://api.github.com/users/rmuir/followers",
                "following_url": "https://api.github.com/users/rmuir/following{/other_user}",
                "gists_url": "https://api.github.com/users/rmuir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rmuir",
                "id": 504194,
                "login": "rmuir",
                "node_id": "MDQ6VXNlcjUwNDE5NA==",
                "organizations_url": "https://api.github.com/users/rmuir/orgs",
                "received_events_url": "https://api.github.com/users/rmuir/received_events",
                "repos_url": "https://api.github.com/users/rmuir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rmuir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rmuir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rmuir",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32820/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/32820/commits",
    "created_at": "2025-03-10T10:00:11Z",
    "diff_url": "https://github.com/neovim/neovim/pull/32820.diff",
    "draft": false,
    "head": {
        "label": "glepnir:completion_info",
        "ref": "completion_info",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/glepnir/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/glepnir/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/glepnir/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/glepnir/neovim/branches{/branch}",
            "clone_url": "https://github.com/glepnir/neovim.git",
            "collaborators_url": "https://api.github.com/repos/glepnir/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/glepnir/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/glepnir/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/glepnir/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/glepnir/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/glepnir/neovim/contributors",
            "created_at": "2022-07-17T05:15:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/glepnir/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/glepnir/neovim/downloads",
            "events_url": "https://api.github.com/repos/glepnir/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/glepnir/neovim/forks",
            "full_name": "glepnir/neovim",
            "git_commits_url": "https://api.github.com/repos/glepnir/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/glepnir/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/glepnir/neovim/git/tags{/sha}",
            "git_url": "git://github.com/glepnir/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/glepnir/neovim/hooks",
            "html_url": "https://github.com/glepnir/neovim",
            "id": 514752985,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/glepnir/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/glepnir/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/glepnir/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/glepnir/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/glepnir/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/glepnir/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/glepnir/neovim/merges",
            "milestones_url": "https://api.github.com/repos/glepnir/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHq6B2Q",
            "notifications_url": "https://api.github.com/repos/glepnir/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/glepnir/neovim/pulls{/number}",
            "pushed_at": "2025-08-11T06:44:07Z",
            "releases_url": "https://api.github.com/repos/glepnir/neovim/releases{/id}",
            "size": 330131,
            "ssh_url": "git@github.com:glepnir/neovim.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/glepnir/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/glepnir/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/glepnir/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/glepnir/neovim/subscription",
            "svn_url": "https://github.com/glepnir/neovim",
            "tags_url": "https://api.github.com/repos/glepnir/neovim/tags",
            "teams_url": "https://api.github.com/repos/glepnir/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/glepnir/neovim/git/trees{/sha}",
            "updated_at": "2025-08-11T06:44:23Z",
            "url": "https://api.github.com/repos/glepnir/neovim",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "01b79b46be57dfc11f7706125c7c8647185d3dab",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
            "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
            "followers_url": "https://api.github.com/users/glepnir/followers",
            "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
            "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/glepnir",
            "id": 41671631,
            "login": "glepnir",
            "node_id": "MDQ6VXNlcjQxNjcxNjMx",
            "organizations_url": "https://api.github.com/users/glepnir/orgs",
            "received_events_url": "https://api.github.com/users/glepnir/received_events",
            "repos_url": "https://api.github.com/users/glepnir/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/glepnir",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/32820",
    "id": 2381767624,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32820",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "c6efa2380aea7ab9d428cc854cbd8374769b32fd",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 105,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 72,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-08-11T22:39:19Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "PR_kwDOAPphoM6N9uPI",
    "number": 32820,
    "patch_url": "https://github.com/neovim/neovim/pull/32820.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/32820/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/01b79b46be57dfc11f7706125c7c8647185d3dab",
    "title": "feat(lsp): vim.lsp.completion completionItem/resolve when completeopt=popup",
    "updated_at": "2025-08-10T09:55:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/32820",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
        "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
        "followers_url": "https://api.github.com/users/glepnir/followers",
        "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
        "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/glepnir",
        "id": 41671631,
        "login": "glepnir",
        "node_id": "MDQ6VXNlcjQxNjcxNjMx",
        "organizations_url": "https://api.github.com/users/glepnir/orgs",
        "received_events_url": "https://api.github.com/users/glepnir/received_events",
        "repos_url": "https://api.github.com/users/glepnir/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/glepnir",
        "user_view_type": "public"
    }
}