{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35027/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35027/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35027"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35027"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35027/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/7d16e2bc4785cd42dc626147f941b7f695976b1f"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6210,
            "forks_count": 6210,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1969,
            "open_issues_count": 1969,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-29T02:23:07Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 334730,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91452,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-29T02:23:15Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91452,
            "watchers_count": 91452,
            "web_commit_signoff_required": false
        },
        "sha": "0dcdd65dcc08483d9a5c106f62b862a9de30983e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Although we don't need very fancy parsing currently (just need to extract the hostnames from the configuration file), modifying this to extract more parameters shouldn't be too much trouble.\r\n\r\nNote: This does not currently process `Include` directives.\r\n\r\nA lot of the code was converted from here: https://github.com/cyjake/ssh-config\r\n\r\nReference Issue: https://github.com/neovim/neovim/issues/34257",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2222326437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222326437"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  return vim.list_contains(multi_value_directives, param:lower())\r\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T12:13:06Z",
            "diff_hunk": "@@ -0,0 +1,238 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.tbl_contains(multi_value_directives, param:lower())",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2222326437",
            "id": 2222326437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EdgKl",
            "original_commit_id": "8707624c2bcc51c3724326fe5924f06e4f784f9c",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3042700802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222326437/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T12:18:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222326437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2222336242"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222336242"
                }
            },
            "author_association": "MEMBER",
            "body": "generate string at last.\r\n\r\n```suggestion\r\n  local function parse_value()\r\n    local val = {}\r\n    local quoted, escaped = false, false\r\n\r\n    while chr and not chr:match(LINE_BREAK_PATTERN) do\r\n      if escaped then\r\n        if chr == '\"' then\r\n          table.insert(val, chr)\r\n        else\r\n          table.insert(val, '\\\\' .. chr)\r\n        end\r\n        escaped = false\r\n      elseif chr == '\"' then\r\n        quoted = not quoted\r\n      elseif chr == '\\\\' then\r\n        escaped = true\r\n      elseif chr == '#' and not quoted then\r\n        break\r\n      else\r\n        table.insert(val, chr)\r\n      end\r\n      chr = consume()\r\n    end\r\n\r\n    if quoted or escaped then\r\n      error('Unexpected line break at line ' .. line)\r\n    end\r\n\r\n    return vim.trim(table.concat(val))\r\n  end\r\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T12:17:12Z",
            "diff_hunk": "@@ -0,0 +1,238 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.tbl_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = ''\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          val = val .. chr\n+        else\n+          val = val .. '\\\\' .. chr\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == '' or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        val = val .. chr\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(val)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2222336242",
            "id": 2222336242,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Edijy",
            "original_commit_id": "8707624c2bcc51c3724326fe5924f06e4f784f9c",
            "original_line": 108,
            "original_position": 109,
            "original_start_line": 79,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3042700802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222336242/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-22T12:18:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222336242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2222839021"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222839021"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is there any particular reason to generate the string at the end? My best guess is that it might perform better, I couldn't think of anything else.",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T15:01:48Z",
            "diff_hunk": "@@ -0,0 +1,238 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.tbl_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = ''\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          val = val .. chr\n+        else\n+          val = val .. '\\\\' .. chr\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == '' or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        val = val .. chr\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(val)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2222839021",
            "id": 2222839021,
            "in_reply_to_id": 2222336242,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EfdTt",
            "original_commit_id": "8707624c2bcc51c3724326fe5924f06e4f784f9c",
            "original_line": 108,
            "original_position": 109,
            "original_start_line": 79,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3043440932,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222839021/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-22T15:01:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2222839021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223217437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223217437"
                }
            },
            "author_association": "NONE",
            "body": "https://www.lua.org/pil/11.6.html",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T16:50:31Z",
            "diff_hunk": "@@ -0,0 +1,238 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.tbl_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = ''\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          val = val .. chr\n+        else\n+          val = val .. '\\\\' .. chr\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == '' or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        val = val .. chr\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(val)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223217437",
            "id": 2223217437,
            "in_reply_to_id": 2222336242,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Eg5sd",
            "original_commit_id": "8707624c2bcc51c3724326fe5924f06e4f784f9c",
            "original_line": 108,
            "original_position": 109,
            "original_start_line": 79,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3043965698,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223217437/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-22T16:50:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223217437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/154880267?v=4",
                "events_url": "https://api.github.com/users/nenahp/events{/privacy}",
                "followers_url": "https://api.github.com/users/nenahp/followers",
                "following_url": "https://api.github.com/users/nenahp/following{/other_user}",
                "gists_url": "https://api.github.com/users/nenahp/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nenahp",
                "id": 154880267,
                "login": "nenahp",
                "node_id": "U_kgDOCTtJCw",
                "organizations_url": "https://api.github.com/users/nenahp/orgs",
                "received_events_url": "https://api.github.com/users/nenahp/received_events",
                "repos_url": "https://api.github.com/users/nenahp/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nenahp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nenahp/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nenahp",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223474334"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223474334"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thanks! I've updated the code.",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T18:30:01Z",
            "diff_hunk": "@@ -0,0 +1,238 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.tbl_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = ''\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          val = val .. chr\n+        else\n+          val = val .. '\\\\' .. chr\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == '' or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        val = val .. chr\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(val)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223474334",
            "id": 2223474334,
            "in_reply_to_id": 2222336242,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Eh4ae",
            "original_commit_id": "8707624c2bcc51c3724326fe5924f06e4f784f9c",
            "original_line": 108,
            "original_position": 109,
            "original_start_line": 79,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3044339858,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223474334/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-22T18:30:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223474334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223605827"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223605827"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\n---                 Note: This does not currently process `Include` directives in the\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T19:09:55Z",
            "diff_hunk": "@@ -0,0 +1,15 @@\n+local M = {}\n+\n+local parser = require('vim._ssh.parser') ---@type table\n+\n+---@return string[] The hostnames configured in the ssh configuration file\n+---                 located at \"~/.ssh/config\"\n+---                 Note: This does not currenly process Include directives in the",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223605827",
            "id": 2223605827,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EiYhD",
            "original_commit_id": "772c6489212c40093f47783789a2659481eb9fb4",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/lua/vim/ssh.lua",
            "position": null,
            "pull_request_review_id": 3044507321,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223605827/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T19:11:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223605827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223606225"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223606225"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\n---                 configuration file.\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T19:10:03Z",
            "diff_hunk": "@@ -0,0 +1,15 @@\n+local M = {}\n+\n+local parser = require('vim._ssh.parser') ---@type table\n+\n+---@return string[] The hostnames configured in the ssh configuration file\n+---                 located at \"~/.ssh/config\"\n+---                 Note: This does not currenly process Include directives in the\n+---                 configuration file",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223606225",
            "id": 2223606225,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EiYnR",
            "original_commit_id": "772c6489212c40093f47783789a2659481eb9fb4",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/lua/vim/ssh.lua",
            "position": null,
            "pull_request_review_id": 3044507321,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223606225/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T19:11:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223606225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223606674"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223606674"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\n---                 located at \"~/.ssh/config\".\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T19:10:10Z",
            "diff_hunk": "@@ -0,0 +1,15 @@\n+local M = {}\n+\n+local parser = require('vim._ssh.parser') ---@type table\n+\n+---@return string[] The hostnames configured in the ssh configuration file\n+---                 located at \"~/.ssh/config\"",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223606674",
            "id": 2223606674,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EiYuS",
            "original_commit_id": "772c6489212c40093f47783789a2659481eb9fb4",
            "original_line": 6,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/ssh.lua",
            "position": null,
            "pull_request_review_id": 3044507321,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223606674/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T19:11:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223606674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223608514"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223608514"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Do you need to close the file in the event of an error?",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T19:10:52Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.list_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = {}\n+    local quoted, escaped = false, false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == {} or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(table.concat(val))\n+  end\n+\n+  local function parse_comment()\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      chr = consume()\n+    end\n+  end\n+\n+  ---@return string[]\n+  local function parse_multiple_values()\n+    local results = {}\n+    local val = {}\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif quoted then\n+        table.insert(val, chr)\n+      elseif chr:match('[ \\t=]') then\n+        if val ~= {} then\n+          table.insert(results, vim.trim(table.concat(val)))\n+          val = {}\n+        end\n+      elseif chr == '#' and #results > 0 then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    if val ~= {} then\n+      table.insert(results, vim.trim(table.concat(val)))\n+    end\n+\n+    return results\n+  end\n+\n+  local function parse_directive()\n+    local param = parse_parameter_name()\n+    local multiple = is_multi_value_directive(param)\n+    local _ = parse_separator()\n+    local value = multiple and parse_multiple_values() or parse_value()\n+\n+    local result = {\n+      param = param,\n+      value = value,\n+    }\n+\n+    return result\n+  end\n+\n+  local function parse_line()\n+    local _ = parse_spaces()\n+    if chr == '#' then\n+      parse_comment()\n+      return nil\n+    end\n+    local node = parse_directive()\n+    local _ = parse_linebreaks()\n+\n+    return node\n+  end\n+\n+  local hostnames = {}\n+\n+  ---@param value string\n+  local function is_valid(value)\n+    return not (value:find('[?*!]') or vim.list_contains(hostnames, value))\n+  end\n+\n+  while chr do\n+    local node = parse_line()\n+    if node then\n+      -- This is done just to assign the type\n+      node.value = node.value ---@type string[]\n+      if node.param:lower() == 'match' and node.value then\n+        local current = nil\n+        for ind, val in ipairs(node.value) do\n+          if val:lower() == 'host' and ind + 1 <= #node.value and is_valid(node.value[ind + 1]) then\n+            current = node.value[ind + 1]\n+          end\n+        end\n+        if current then\n+          table.insert(hostnames, current)\n+        end\n+      elseif node.param:lower() == 'host' and node.value then\n+        for _, value in ipairs(node.value) do\n+          if is_valid(value) then\n+            table.insert(hostnames, value)\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  return hostnames\n+end\n+\n+---@param filename string\n+---@return string[] The hostnames configured in the file located at filename\n+function M.parse_file(filename)\n+  local file = io.open(filename, 'r')\n+  if not file then\n+    error('Cannot read ssh configuration file')",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223608514",
            "id": 2223608514,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EiZLC",
            "original_commit_id": "772c6489212c40093f47783789a2659481eb9fb4",
            "original_line": 227,
            "original_position": 227,
            "original_start_line": null,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3044507321,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223608514/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T19:11:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223608514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223616846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223616846"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The `not file` condition is only hit when the file couldn't be opened for whatever reason, so there is no file to close here. https://www.lua.org/pil/21.2.html\r\n\r\nI got this code from a code generator, so I assume it's fine.\r\n\r\nhttps://github.com/neovim/neovim/blob/8b5d8dfc732eff3a7ba1cc25d6e5b7c210f761a4/src/gen/gen_declarations.lua#L5",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T19:15:43Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.list_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = {}\n+    local quoted, escaped = false, false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == {} or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(table.concat(val))\n+  end\n+\n+  local function parse_comment()\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      chr = consume()\n+    end\n+  end\n+\n+  ---@return string[]\n+  local function parse_multiple_values()\n+    local results = {}\n+    local val = {}\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif quoted then\n+        table.insert(val, chr)\n+      elseif chr:match('[ \\t=]') then\n+        if val ~= {} then\n+          table.insert(results, vim.trim(table.concat(val)))\n+          val = {}\n+        end\n+      elseif chr == '#' and #results > 0 then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    if val ~= {} then\n+      table.insert(results, vim.trim(table.concat(val)))\n+    end\n+\n+    return results\n+  end\n+\n+  local function parse_directive()\n+    local param = parse_parameter_name()\n+    local multiple = is_multi_value_directive(param)\n+    local _ = parse_separator()\n+    local value = multiple and parse_multiple_values() or parse_value()\n+\n+    local result = {\n+      param = param,\n+      value = value,\n+    }\n+\n+    return result\n+  end\n+\n+  local function parse_line()\n+    local _ = parse_spaces()\n+    if chr == '#' then\n+      parse_comment()\n+      return nil\n+    end\n+    local node = parse_directive()\n+    local _ = parse_linebreaks()\n+\n+    return node\n+  end\n+\n+  local hostnames = {}\n+\n+  ---@param value string\n+  local function is_valid(value)\n+    return not (value:find('[?*!]') or vim.list_contains(hostnames, value))\n+  end\n+\n+  while chr do\n+    local node = parse_line()\n+    if node then\n+      -- This is done just to assign the type\n+      node.value = node.value ---@type string[]\n+      if node.param:lower() == 'match' and node.value then\n+        local current = nil\n+        for ind, val in ipairs(node.value) do\n+          if val:lower() == 'host' and ind + 1 <= #node.value and is_valid(node.value[ind + 1]) then\n+            current = node.value[ind + 1]\n+          end\n+        end\n+        if current then\n+          table.insert(hostnames, current)\n+        end\n+      elseif node.param:lower() == 'host' and node.value then\n+        for _, value in ipairs(node.value) do\n+          if is_valid(value) then\n+            table.insert(hostnames, value)\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  return hostnames\n+end\n+\n+---@param filename string\n+---@return string[] The hostnames configured in the file located at filename\n+function M.parse_file(filename)\n+  local file = io.open(filename, 'r')\n+  if not file then\n+    error('Cannot read ssh configuration file')",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223616846",
            "id": 2223616846,
            "in_reply_to_id": 2223608514,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EibNO",
            "original_commit_id": "772c6489212c40093f47783789a2659481eb9fb4",
            "original_line": 227,
            "original_position": 227,
            "original_start_line": null,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3044530953,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223616846/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T19:18:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223616846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2223694902"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223694902"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah my apologies on this. Didn't read the code properly!",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-22T19:50:04Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.list_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = {}\n+    local quoted, escaped = false, false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == {} or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(table.concat(val))\n+  end\n+\n+  local function parse_comment()\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      chr = consume()\n+    end\n+  end\n+\n+  ---@return string[]\n+  local function parse_multiple_values()\n+    local results = {}\n+    local val = {}\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif quoted then\n+        table.insert(val, chr)\n+      elseif chr:match('[ \\t=]') then\n+        if val ~= {} then\n+          table.insert(results, vim.trim(table.concat(val)))\n+          val = {}\n+        end\n+      elseif chr == '#' and #results > 0 then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    if val ~= {} then\n+      table.insert(results, vim.trim(table.concat(val)))\n+    end\n+\n+    return results\n+  end\n+\n+  local function parse_directive()\n+    local param = parse_parameter_name()\n+    local multiple = is_multi_value_directive(param)\n+    local _ = parse_separator()\n+    local value = multiple and parse_multiple_values() or parse_value()\n+\n+    local result = {\n+      param = param,\n+      value = value,\n+    }\n+\n+    return result\n+  end\n+\n+  local function parse_line()\n+    local _ = parse_spaces()\n+    if chr == '#' then\n+      parse_comment()\n+      return nil\n+    end\n+    local node = parse_directive()\n+    local _ = parse_linebreaks()\n+\n+    return node\n+  end\n+\n+  local hostnames = {}\n+\n+  ---@param value string\n+  local function is_valid(value)\n+    return not (value:find('[?*!]') or vim.list_contains(hostnames, value))\n+  end\n+\n+  while chr do\n+    local node = parse_line()\n+    if node then\n+      -- This is done just to assign the type\n+      node.value = node.value ---@type string[]\n+      if node.param:lower() == 'match' and node.value then\n+        local current = nil\n+        for ind, val in ipairs(node.value) do\n+          if val:lower() == 'host' and ind + 1 <= #node.value and is_valid(node.value[ind + 1]) then\n+            current = node.value[ind + 1]\n+          end\n+        end\n+        if current then\n+          table.insert(hostnames, current)\n+        end\n+      elseif node.param:lower() == 'host' and node.value then\n+        for _, value in ipairs(node.value) do\n+          if is_valid(value) then\n+            table.insert(hostnames, value)\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  return hostnames\n+end\n+\n+---@param filename string\n+---@return string[] The hostnames configured in the file located at filename\n+function M.parse_file(filename)\n+  local file = io.open(filename, 'r')\n+  if not file then\n+    error('Cannot read ssh configuration file')",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2223694902",
            "id": 2223694902,
            "in_reply_to_id": 2223608514,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EiuQ2",
            "original_commit_id": "772c6489212c40093f47783789a2659481eb9fb4",
            "original_line": 227,
            "original_position": 227,
            "original_start_line": null,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3044664972,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223694902/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-22T19:50:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2223694902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11936772?v=4",
                "events_url": "https://api.github.com/users/tristan957/events{/privacy}",
                "followers_url": "https://api.github.com/users/tristan957/followers",
                "following_url": "https://api.github.com/users/tristan957/following{/other_user}",
                "gists_url": "https://api.github.com/users/tristan957/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tristan957",
                "id": 11936772,
                "login": "tristan957",
                "node_id": "MDQ6VXNlcjExOTM2Nzcy",
                "organizations_url": "https://api.github.com/users/tristan957/orgs",
                "received_events_url": "https://api.github.com/users/tristan957/received_events",
                "repos_url": "https://api.github.com/users/tristan957/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tristan957/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tristan957/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tristan957",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2224130867"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224130867"
                }
            },
            "author_association": "MEMBER",
            "body": "also need `it('failure modes')` which tests bad or unexpected input, i.e it should use `pcall_err` or similar to assert what happens when parsing fails.\n\n\nthat is almost always required when adding new features.\n\nhttps://github.com/cyjake/ssh-config/tree/master/test/unit may have some ideas.",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-23T01:35:01Z",
            "diff_hunk": "@@ -0,0 +1,44 @@\n+local t = require('test.testutil')\n+local parser = require('vim._ssh.parser')\n+local eq = t.eq\n+\n+describe('SSH parser', function()\n+  it('parses SSH configuration strings', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2224130867",
            "id": 2224130867,
            "line": 6,
            "node_id": "PRRC_kwDOAPphoM6EkYsz",
            "original_commit_id": "5cf6744e57f7f9a662c322f7ac96fae0105e5d06",
            "original_line": 6,
            "original_position": 6,
            "original_start_line": null,
            "path": "test/functional/lua/ssh_spec.lua",
            "position": 6,
            "pull_request_review_id": 3045306395,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224130867/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-23T01:35:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224130867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2224131315"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224131315"
                }
            },
            "author_association": "MEMBER",
            "body": "this is not something we want/need to expose publicly for now.",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-23T01:35:32Z",
            "diff_hunk": "@@ -4885,4 +4885,15 @@ vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n                        success.\n \n \n+==============================================================================\n+Lua module: vim.ssh                                                  *vim.ssh*",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2224131315",
            "id": 2224131315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EkYzz",
            "original_commit_id": "5cf6744e57f7f9a662c322f7ac96fae0105e5d06",
            "original_line": 4889,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3045306931,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224131315/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-23T01:35:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224131315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2224132954"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224132954"
                }
            },
            "author_association": "MEMBER",
            "body": "lowercase",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-23T01:37:36Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2224132954",
            "id": 2224132954,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EkZNa",
            "original_commit_id": "5cf6744e57f7f9a662c322f7ac96fae0105e5d06",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3045309049,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224132954/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-23T01:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224132954",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2224133852"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224133852"
                }
            },
            "author_association": "MEMBER",
            "body": "`runtime/lua/vim/net/_ssh.lua` seems like a good place for this, though it's private for now. \n\ndo not create lots of granular modules. just put everything in `_ssh.lua` , until it's clear that separate modules are needed.",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-23T01:38:32Z",
            "diff_hunk": "@@ -0,0 +1,44 @@\n+local t = require('test.testutil')\n+local parser = require('vim._ssh.parser')",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2224133852",
            "id": 2224133852,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EkZbc",
            "original_commit_id": "5cf6744e57f7f9a662c322f7ac96fae0105e5d06",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "test/functional/lua/ssh_spec.lua",
            "position": null,
            "pull_request_review_id": 3045310076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224133852/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-23T01:38:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224133852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2224136814"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224136814"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\nfunction M.parse_config(filename)\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-23T01:42:06Z",
            "diff_hunk": "@@ -0,0 +1,235 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local WHITESPACE_PATTERN = '%s'\n+local LINE_BREAK_PATTERN = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.list_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(WHITESPACE_PATTERN) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(LINE_BREAK_PATTERN) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = {}\n+    local quoted, escaped = false, false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' and (val == {} or quoted) then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif chr == '#' and not quoted then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    return vim.trim(table.concat(val))\n+  end\n+\n+  local function parse_comment()\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      chr = consume()\n+    end\n+  end\n+\n+  ---@return string[]\n+  local function parse_multiple_values()\n+    local results = {}\n+    local val = {}\n+    local quoted = false\n+    local escaped = false\n+\n+    while chr and not chr:match(LINE_BREAK_PATTERN) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end\n+        escaped = false\n+      elseif chr == '\"' then\n+        quoted = not quoted\n+      elseif chr == '\\\\' then\n+        escaped = true\n+      elseif quoted then\n+        table.insert(val, chr)\n+      elseif chr:match('[ \\t=]') then\n+        if val ~= {} then\n+          table.insert(results, vim.trim(table.concat(val)))\n+          val = {}\n+        end\n+      elseif chr == '#' and #results > 0 then\n+        break\n+      else\n+        table.insert(val, chr)\n+      end\n+      chr = consume()\n+    end\n+\n+    if quoted or escaped then\n+      error('Unexpected line break at line ' .. line)\n+    end\n+\n+    if val ~= {} then\n+      table.insert(results, vim.trim(table.concat(val)))\n+    end\n+\n+    return results\n+  end\n+\n+  local function parse_directive()\n+    local param = parse_parameter_name()\n+    local multiple = is_multi_value_directive(param)\n+    local _ = parse_separator()\n+    local value = multiple and parse_multiple_values() or parse_value()\n+\n+    local result = {\n+      param = param,\n+      value = value,\n+    }\n+\n+    return result\n+  end\n+\n+  local function parse_line()\n+    local _ = parse_spaces()\n+    if chr == '#' then\n+      parse_comment()\n+      return nil\n+    end\n+    local node = parse_directive()\n+    local _ = parse_linebreaks()\n+\n+    return node\n+  end\n+\n+  local hostnames = {}\n+\n+  ---@param value string\n+  local function is_valid(value)\n+    return not (value:find('[?*!]') or vim.list_contains(hostnames, value))\n+  end\n+\n+  while chr do\n+    local node = parse_line()\n+    if node then\n+      -- This is done just to assign the type\n+      node.value = node.value ---@type string[]\n+      if node.param:lower() == 'match' and node.value then\n+        local current = nil\n+        for ind, val in ipairs(node.value) do\n+          if val:lower() == 'host' and ind + 1 <= #node.value and is_valid(node.value[ind + 1]) then\n+            current = node.value[ind + 1]\n+          end\n+        end\n+        if current then\n+          table.insert(hostnames, current)\n+        end\n+      elseif node.param:lower() == 'host' and node.value then\n+        for _, value in ipairs(node.value) do\n+          if is_valid(value) then\n+            table.insert(hostnames, value)\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  return hostnames\n+end\n+\n+---@param filename string\n+---@return string[] The hostnames configured in the file located at filename\n+function M.parse_file(filename)",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2224136814",
            "id": 2224136814,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6EkaJu",
            "original_commit_id": "5cf6744e57f7f9a662c322f7ac96fae0105e5d06",
            "original_line": 224,
            "original_position": 224,
            "original_start_line": null,
            "path": "runtime/lua/vim/_ssh/parser.lua",
            "position": null,
            "pull_request_review_id": 3045313877,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224136814/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-23T01:42:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224136814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35027#discussion_r2224990383"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35027"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224990383"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        table.insert(val, chr == '\"' and chr or '\\\\' .. chr)\r\n```",
            "commit_id": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
            "created_at": "2025-07-23T09:39:57Z",
            "diff_hunk": "@@ -0,0 +1,245 @@\n+-- Converted into Lua from https://github.com/cyjake/ssh-config\n+-- TODO (siddhantdev): deal with include directives\n+\n+local M = {}\n+\n+local whitespace_pattern = '%s'\n+local line_break_pattern = '[\\r\\n]'\n+\n+---@param param string\n+local function is_multi_value_directive(param)\n+  local multi_value_directives = {\n+    'globalknownhostsfile',\n+    'host',\n+    'ipqos',\n+    'sendenv',\n+    'userknownhostsfile',\n+    'proxycommand',\n+    'match',\n+    'canonicaldomains',\n+  }\n+\n+  return vim.list_contains(multi_value_directives, param:lower())\n+end\n+\n+---@param text string The ssh configuration which needs to be parsed\n+---@return string[] The parsed host names in the configuration\n+function M.parse_ssh_config(text)\n+  local i = 1\n+  local line = 1\n+\n+  local function consume()\n+    if i <= #text then\n+      local char = text:sub(i, i)\n+      i = i + 1\n+      return char\n+    end\n+    return nil\n+  end\n+\n+  local chr = consume()\n+\n+  local function parse_spaces()\n+    local spaces = ''\n+    while chr and chr:match(whitespace_pattern) do\n+      spaces = spaces .. chr\n+      chr = consume()\n+    end\n+    return spaces\n+  end\n+\n+  local function parse_linebreaks()\n+    local breaks = ''\n+    while chr and chr:match(line_break_pattern) do\n+      line = line + 1\n+      breaks = breaks .. chr\n+      chr = consume()\n+    end\n+    return breaks\n+  end\n+\n+  local function parse_parameter_name()\n+    local param = ''\n+    while chr and not chr:match('[ \\t=]') do\n+      param = param .. chr\n+      chr = consume()\n+    end\n+    return param\n+  end\n+\n+  local function parse_separator()\n+    local sep = parse_spaces()\n+    if chr == '=' then\n+      sep = sep .. chr\n+      chr = consume()\n+    end\n+    return sep .. parse_spaces()\n+  end\n+\n+  local function parse_value()\n+    local val = {}\n+    local quoted, escaped = false, false\n+\n+    while chr and not chr:match(line_break_pattern) do\n+      if escaped then\n+        if chr == '\"' then\n+          table.insert(val, chr)\n+        else\n+          table.insert(val, '\\\\' .. chr)\n+        end",
            "html_url": "https://github.com/neovim/neovim/pull/35027#discussion_r2224990383",
            "id": 2224990383,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Enqiv",
            "original_commit_id": "6622e8b7e8145cf53318cd19841f086780afa93b",
            "original_line": 89,
            "original_position": 89,
            "original_start_line": 85,
            "path": "runtime/lua/vim/net/_ssh.lua",
            "position": null,
            "pull_request_review_id": 3046535803,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224990383/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-23T09:40:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2224990383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Since this a private module, does `news.txt` still need to be updated?",
            "created_at": "2025-07-23T19:30:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/35027#issuecomment-3109883442",
            "id": 3109883442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35027",
            "node_id": "IC_kwDOAPphoM65XQ4y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3109883442/reactions"
            },
            "updated_at": "2025-07-23T19:30:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3109883442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35027/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35027/commits",
    "created_at": "2025-07-22T11:51:25Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35027.diff",
    "draft": false,
    "head": {
        "label": "siddhantdev:ssh-config-parser",
        "ref": "ssh-config-parser",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/siddhantdev/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/siddhantdev/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/siddhantdev/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/siddhantdev/neovim/branches{/branch}",
            "clone_url": "https://github.com/siddhantdev/neovim.git",
            "collaborators_url": "https://api.github.com/repos/siddhantdev/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/siddhantdev/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/siddhantdev/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/siddhantdev/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/siddhantdev/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/siddhantdev/neovim/contributors",
            "created_at": "2024-12-25T05:21:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/siddhantdev/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/siddhantdev/neovim/downloads",
            "events_url": "https://api.github.com/repos/siddhantdev/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/siddhantdev/neovim/forks",
            "full_name": "siddhantdev/neovim",
            "git_commits_url": "https://api.github.com/repos/siddhantdev/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/siddhantdev/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/siddhantdev/neovim/git/tags{/sha}",
            "git_url": "git://github.com/siddhantdev/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/siddhantdev/neovim/hooks",
            "html_url": "https://github.com/siddhantdev/neovim",
            "id": 908089530,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/siddhantdev/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/siddhantdev/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/siddhantdev/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/siddhantdev/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/siddhantdev/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/siddhantdev/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/siddhantdev/neovim/merges",
            "milestones_url": "https://api.github.com/repos/siddhantdev/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONiBYug",
            "notifications_url": "https://api.github.com/repos/siddhantdev/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
                "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
                "followers_url": "https://api.github.com/users/siddhantdev/followers",
                "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
                "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/siddhantdev",
                "id": 68201519,
                "login": "siddhantdev",
                "node_id": "MDQ6VXNlcjY4MjAxNTE5",
                "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
                "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
                "repos_url": "https://api.github.com/users/siddhantdev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/siddhantdev",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/siddhantdev/neovim/pulls{/number}",
            "pushed_at": "2025-07-28T20:52:23Z",
            "releases_url": "https://api.github.com/repos/siddhantdev/neovim/releases{/id}",
            "size": 331984,
            "ssh_url": "git@github.com:siddhantdev/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/siddhantdev/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/siddhantdev/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/siddhantdev/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/siddhantdev/neovim/subscription",
            "svn_url": "https://github.com/siddhantdev/neovim",
            "tags_url": "https://api.github.com/repos/siddhantdev/neovim/tags",
            "teams_url": "https://api.github.com/repos/siddhantdev/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/siddhantdev/neovim/git/trees{/sha}",
            "updated_at": "2025-06-21T17:25:54Z",
            "url": "https://api.github.com/repos/siddhantdev/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "7d16e2bc4785cd42dc626147f941b7f695976b1f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
            "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
            "followers_url": "https://api.github.com/users/siddhantdev/followers",
            "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
            "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/siddhantdev",
            "id": 68201519,
            "login": "siddhantdev",
            "node_id": "MDQ6VXNlcjY4MjAxNTE5",
            "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
            "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
            "repos_url": "https://api.github.com/users/siddhantdev/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/siddhantdev",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35027",
    "id": 2685273794,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35027",
    "labels": [
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "70d3b651e6dbfa57db2f70f7803a2edd8bf22be7",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6gDgbC",
    "number": 35027,
    "patch_url": "https://github.com/neovim/neovim/pull/35027.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35027/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/7d16e2bc4785cd42dc626147f941b7f695976b1f",
    "title": "feat(ssh): add a SSH configuration parser",
    "updated_at": "2025-07-23T19:30:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35027",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/68201519?v=4",
        "events_url": "https://api.github.com/users/siddhantdev/events{/privacy}",
        "followers_url": "https://api.github.com/users/siddhantdev/followers",
        "following_url": "https://api.github.com/users/siddhantdev/following{/other_user}",
        "gists_url": "https://api.github.com/users/siddhantdev/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/siddhantdev",
        "id": 68201519,
        "login": "siddhantdev",
        "node_id": "MDQ6VXNlcjY4MjAxNTE5",
        "organizations_url": "https://api.github.com/users/siddhantdev/orgs",
        "received_events_url": "https://api.github.com/users/siddhantdev/received_events",
        "repos_url": "https://api.github.com/users/siddhantdev/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/siddhantdev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/siddhantdev/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/siddhantdev",
        "user_view_type": "public"
    }
}