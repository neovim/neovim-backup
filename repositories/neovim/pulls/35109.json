{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35109/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35109/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35109"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35109"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35109/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/9f5b309d824a7b8a7496fbd23b54d96798a4f2c2"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6262,
            "forks_count": 6262,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1971,
            "open_issues_count": 1971,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-19T00:45:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 338530,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92074,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-19T01:56:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92074,
            "watchers_count": 92074,
            "web_commit_signoff_required": false
        },
        "sha": "7e450aa3839fb815f1f000a503bb3210022ce67a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "ref #25509\r\n\r\nCurrently, the main focus is on defining the `vim.pos.Pos` and `vim.range.Range` structures, and moving the logic of the comparing functions in `vim.treesitter._range` so that we can deprecate it in the future.",
    "closed_at": "2025-08-17T20:37:56Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2244251191"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244251191"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "IMO, the neovim codebase uses `Class.new` style definition for class constructor.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T03:12:05Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos\n+---@overload fun(range: Range): vim.range.Range Only for compatibility\n+---@overload fun(start: vim.pos.Pos, end_: vim.pos.Pos): vim.range.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.range.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(range: Range)\n+---@overload fun(start: vim.pos.Pos, end_: vim.pos.Pos): vim.range.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.range.Range\n+function Range:new(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2244251191",
            "id": 2244251191,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FxI43",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 58,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3073855126,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244251191/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T03:12:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244251191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2244292210"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244292210"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is mainly for the following overload:\r\n\r\n```\r\nsetmetatable(Pos, {\r\n__call = Pos.new,\r\n})\r\n```\r\n\r\nOtherwise, we need a wrapper that discards the first argument (caller, aka `self`). I think this slight inconsistency is not a big deal because `Pos.new` is marked `@protected` and users are encouraged to use `vim.pos()` instead of `vim.pos.new()`.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T03:59:36Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos\n+---@overload fun(range: Range): vim.range.Range Only for compatibility\n+---@overload fun(start: vim.pos.Pos, end_: vim.pos.Pos): vim.range.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.range.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(range: Range)\n+---@overload fun(start: vim.pos.Pos, end_: vim.pos.Pos): vim.range.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.range.Range\n+function Range:new(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2244292210",
            "id": 2244292210,
            "in_reply_to_id": 2244251191,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FxS5y",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 58,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3073906086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244292210/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T03:59:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244292210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2244373229"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244373229"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I see, I understand now.\r\nHowever, I feel that resolving this mismatch should be done on the overload side.\r\n\r\n```lua\r\nsetmetatable(Pos, {\r\n  __call = function(_, ...)\r\n    return Pos.new(...)\r\n  end\r\n})\r\n```\r\n",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T05:18:37Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos\n+---@overload fun(range: Range): vim.range.Range Only for compatibility\n+---@overload fun(start: vim.pos.Pos, end_: vim.pos.Pos): vim.range.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.range.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(range: Range)\n+---@overload fun(start: vim.pos.Pos, end_: vim.pos.Pos): vim.range.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.range.Range\n+function Range:new(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2244373229",
            "id": 2244373229,
            "in_reply_to_id": 2244251191,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Fxmrt",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 58,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3074005940,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244373229/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T05:18:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244373229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2244975996"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244975996"
                }
            },
            "author_association": "MEMBER",
            "body": "One of the biggest pain points I noticed when it comes to working with ranges is that it is very tricky to work with blockwise selections/ranges/regions. So maybe making `Range` have `mode` field that can be `v` / `V` / `\\22` or `c` / `l` / `b` for charwise / linewise / blockwise range?\r\n\r\nThis is a big complication for all the methods (both present comparison / intersection and future), but this would make this abstraction *much* more valuable.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T10:23:43Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2244975996",
            "id": 2244975996,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Fz518",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3074820443,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244975996/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T10:23:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244975996",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2244988256"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244988256"
                }
            },
            "author_association": "MEMBER",
            "body": "One of the pain points with positions I noticed is to work when they are (deliberately) outside of available text (like with 'virtualedit', which might be common with blockwise selections). I.e. past the end of line.\r\n\r\nNot sure if this fits `Pos` abstraction or methods it might be input for, though.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T10:27:24Z",
            "diff_hunk": "@@ -0,0 +1,64 @@\n+---@class vim.pos.Pos\n+---@field row integer 0-based\n+---@field col integer 0-based\n+---@field offset? integer Only for compatibility",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2244988256",
            "id": 2244988256,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Fz81g",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3074837586,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244988256/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T10:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244988256",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2244989309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244989309"
                }
            },
            "author_association": "MEMBER",
            "body": "Region should be its own structure (table of ranges)",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T10:27:57Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2244989309",
            "id": 2244989309,
            "in_reply_to_id": 2244975996,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Fz9F9",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3074839067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244989309/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T10:27:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244989309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2245072185"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245072185"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I've noticed this issue, but I think the implementation here is fine for intersection/comparing between block ranges, unless we want to merge/comparison between regular ranges and block ranges, but I think this might produce an irregular selection that can't be represented by a `Range` with only two `Pos`. In this case, a list of ranges might be appropriate.\r\n\r\nWe may add such functions in the future. Since this simple `Range` can be regarded as a lower-level API, I feel that the current design will not hinder future implementations, so it is not blocked for now.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T11:05:33Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2245072185",
            "id": 2245072185,
            "in_reply_to_id": 2244975996,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F0RU5",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3074956395,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245072185/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T11:05:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245072185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2245095107"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245095107"
                }
            },
            "author_association": "MEMBER",
            "body": "> but I think this might produce an irregular selection that can't be represented by a `Range` with only two `Pos`\r\n\r\nA blockwise selection is defined only by two opposite positions: top-left + bottom-right or top-right + bottom-left. This follows from how it is created manually. So at least from the usage perspective there is no need for a list and it fits in a single data structure.\r\n\r\nWhether to call it range/region/selection/chunk is a question of semantics and the same for ",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T11:17:45Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2245095107",
            "id": 2245095107,
            "in_reply_to_id": 2244975996,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F0W7D",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3074988259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245095107/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T11:17:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245095107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2245149465"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245149465"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Blockwise selections could also be presented by two `Pos` like regular selections because they are rectangles; only two identical row-col pairs need to be recorded. So I think the abstractions here should be sufficient because an intersection of rectangles is also a rectangle, and still easy to deal with.\r\n\r\nBut that is not true for intersections of blockwise selections and regular selections. Imagine randomly tearing a piece of A4 paper; it is what the intersection selection may look like. The point is they are irregular, and we need a table of ranges to represent them, no matter what it is named.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T11:43:51Z",
            "diff_hunk": "@@ -0,0 +1,99 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.range.Range\n+---@field start vim.pos.Pos\n+---@field end_ vim.pos.Pos",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2245149465",
            "id": 2245149465,
            "in_reply_to_id": 2244975996,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F0kMZ",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 5,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3075062835,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245149465/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T11:43:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245149465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2245185031"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245185031"
                }
            },
            "author_association": "MEMBER",
            "body": "This module specifically uses arrays for performance reasons as treesitter needs to do lots of processing for injections.\n\nThis code now invokes a constructor twice, allocating around 4 tables just to do a comparison. Before it was just comparing 4 numbers.\n\nI think this module should be left as it is. If code reuse is possible, then fine, but it shouldn't be done through a heavier abstraction object.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T12:01:42Z",
            "diff_hunk": "@@ -25,52 +27,39 @@ local M = {}\n \n ---@alias Range Range2|Range4|Range6\n \n----@param a_row integer\n----@param a_col integer\n----@param b_row integer\n----@param b_col integer\n----@return integer\n---- 1: a > b\n---- 0: a == b\n---- -1: a < b\n-local function cmp_pos(a_row, a_col, b_row, b_col)\n-  if a_row == b_row then\n-    if a_col > b_col then\n-      return 1\n-    elseif a_col < b_col then\n-      return -1\n-    else\n-      return 0\n-    end\n-  elseif a_row > b_row then\n-    return 1\n-  end\n-\n-  return -1\n-end\n-\n M.cmp_pos = {\n-  lt = function(...)\n-    return cmp_pos(...) == -1\n+  lt = function(a_row, a_col, b_row, b_col)\n+    return pos(a_row, a_col) < pos(b_row, b_col)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2245185031",
            "id": 2245185031,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F0s4H",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 32,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_range.lua",
            "position": null,
            "pull_request_review_id": 3075110962,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245185031/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T12:02:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245185031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2245231412"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245231412"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> I think this module should be left as it is. If code reuse is possible, then fine, but it shouldn't be done through a heavier abstraction object.\r\n\r\nI will revert it to its previous version and then delete it when the `Range` to `vim.Range` refactoring is complete. This way, temporary tables won't be created frequently.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-07-31T12:22:14Z",
            "diff_hunk": "@@ -25,52 +27,39 @@ local M = {}\n \n ---@alias Range Range2|Range4|Range6\n \n----@param a_row integer\n----@param a_col integer\n----@param b_row integer\n----@param b_col integer\n----@return integer\n---- 1: a > b\n---- 0: a == b\n---- -1: a < b\n-local function cmp_pos(a_row, a_col, b_row, b_col)\n-  if a_row == b_row then\n-    if a_col > b_col then\n-      return 1\n-    elseif a_col < b_col then\n-      return -1\n-    else\n-      return 0\n-    end\n-  elseif a_row > b_row then\n-    return 1\n-  end\n-\n-  return -1\n-end\n-\n M.cmp_pos = {\n-  lt = function(...)\n-    return cmp_pos(...) == -1\n+  lt = function(a_row, a_col, b_row, b_col)\n+    return pos(a_row, a_col) < pos(b_row, b_col)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2245231412",
            "id": 2245231412,
            "in_reply_to_id": 2245185031,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F04M0",
            "original_commit_id": "93f8501ed971509c8279cffb8e14fee35096a2c2",
            "original_line": 32,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_range.lua",
            "position": null,
            "pull_request_review_id": 3075177917,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245231412/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T12:22:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2245231412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250023699"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250023699"
                }
            },
            "author_association": "MEMBER",
            "body": "`:help dev-naming`\n```suggestion\nfunction Range.has(a, b)\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T15:39:02Z",
            "diff_hunk": "@@ -0,0 +1,85 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.Range\n+function Range:new(...)\n+  local args = { ... }\n+  ---@type vim.Pos, vim.Pos\n+  local start, end_\n+\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+  elseif #args == 4 then\n+    ---@cast args [integer, integer, integer, integer]\n+    start, end_ = pos(unpack(args, 1, 2)), pos(unpack(args, 3, 4))\n+  else\n+    assert(false)\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param a vim.Range\n+---@param b vim.Range\n+function Range.contains(a, b)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250023699",
            "id": 2250023699,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHKMT",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 38,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3082221726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250023699/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T15:39:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250023699",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250024741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250024741"
                }
            },
            "author_association": "MEMBER",
            "body": "is this analogous to `version.intersect()` ? if so, let's use the same name. also a docstring similar to version.intersect() will help.\n https://github.com/neovim/neovim/blob/78f4994627b7d9c3b85f30028fe55ff38024a39d/runtime/lua/vim/version.lua#L371\n\n\n```suggestion\nfunction Range.intersect(a, b)\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T15:41:50Z",
            "diff_hunk": "@@ -0,0 +1,85 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.Range\n+function Range:new(...)\n+  local args = { ... }\n+  ---@type vim.Pos, vim.Pos\n+  local start, end_\n+\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+  elseif #args == 4 then\n+    ---@cast args [integer, integer, integer, integer]\n+    start, end_ = pos(unpack(args, 1, 2)), pos(unpack(args, 3, 4))\n+  else\n+    assert(false)\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param a vim.Range\n+---@param b vim.Range\n+function Range.contains(a, b)\n+  return a.start <= b.start and a.end_ >= b.end_\n+end\n+\n+---@param a vim.Range\n+---@param b vim.Range\n+function Range.intercepts(a, b)\n+  return a.end_ > b.start and a.start < b.end_\n+end\n+\n+---@param a vim.Range\n+---@param b vim.Range\n+function Range.intersection(a, b)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250024741",
            "id": 2250024741,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHKcl",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 50,
            "original_position": 50,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3082222530,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250024741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T15:41:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250024741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250026450"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250026450"
                }
            },
            "author_association": "MEMBER",
            "body": "docstring will help. unlike \"contains\" (`has()`), it looks like this one checks if they \"touch\" but do not fully overlap.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T15:47:11Z",
            "diff_hunk": "@@ -0,0 +1,85 @@\n+local pos = require('vim._pos')\n+\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer): vim.Range\n+function Range:new(...)\n+  local args = { ... }\n+  ---@type vim.Pos, vim.Pos\n+  local start, end_\n+\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+  elseif #args == 4 then\n+    ---@cast args [integer, integer, integer, integer]\n+    start, end_ = pos(unpack(args, 1, 2)), pos(unpack(args, 3, 4))\n+  else\n+    assert(false)\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param a vim.Range\n+---@param b vim.Range\n+function Range.contains(a, b)\n+  return a.start <= b.start and a.end_ >= b.end_\n+end\n+\n+---@param a vim.Range\n+---@param b vim.Range\n+function Range.intercepts(a, b)\n+  return a.end_ > b.start and a.start < b.end_",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250026450",
            "id": 2250026450,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHK3S",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 45,
            "original_position": 45,
            "original_start_line": 44,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3082223937,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250026450/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-03T15:47:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250026450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250027911"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250027911"
                }
            },
            "author_association": "MEMBER",
            "body": "Not a blocker I guess since this is experimental, but we need to be very clear about the \"canonical\" semantics of the position. Because translating to/from treesitter/lsp/editor/marks/etc positions requires knowing the underlying semantics of `vim.pos`.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T15:51:15Z",
            "diff_hunk": "@@ -0,0 +1,61 @@\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---@overload fun(row: integer, col: integer): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+function Pos:new(row, col)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250027911",
            "id": 2250027911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHLOH",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3082225091,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250027911/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T15:51:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250027911",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250030115"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250030115"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm just considering this now. If this module is expected to convert between arbitrary positions, then we'd better include `bufnr` in `Pos` as well. Just determining the encoding of the string is not enough because we need to know the specific content to convert between positions unless we always pass `bufnr` as a parameter.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T15:58:00Z",
            "diff_hunk": "@@ -0,0 +1,61 @@\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---@overload fun(row: integer, col: integer): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+function Pos:new(row, col)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250030115",
            "id": 2250030115,
            "in_reply_to_id": 2250027911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHLwj",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3082226846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250030115/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T15:58:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250030115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250031302"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250031302"
                }
            },
            "author_association": "MEMBER",
            "body": "yeah #25509 specifies an optional `buf?` field. We will likely want \"window\" and \"screen\" positions too, so may need `win?` and `editor?` fields.\r\n\r\nAnd whether these fields are required is decided by the `kind` ?\r\n\r\nNote: this PR doesn't need to add all the treesitter/marks/etc translation, but probably at least the above fields should be decided.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T16:02:47Z",
            "diff_hunk": "@@ -0,0 +1,61 @@\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---@overload fun(row: integer, col: integer): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+function Pos:new(row, col)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250031302",
            "id": 2250031302,
            "in_reply_to_id": 2250027911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHMDG",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3082227873,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250031302/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T16:03:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250031302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2250032589"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250032589"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'll add the lsp position conversion since my other two feature PRs can use it.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-03T16:06:36Z",
            "diff_hunk": "@@ -0,0 +1,61 @@\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---@overload fun(row: integer, col: integer): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+function Pos:new(row, col)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2250032589",
            "id": 2250032589,
            "in_reply_to_id": 2250027911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GHMXN",
            "original_commit_id": "3bd3a84a9748da6ec8250e78ccc99e501cc4d711",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3082229571,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250032589/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T16:06:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2250032589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278439924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278439924"
                }
            },
            "author_association": "MEMBER",
            "body": "no problem with `bufnr`, but more recommended to use the `buf` instead 🤔 ref #35316",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T07:15:35Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278439924",
            "id": 2278439924,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Hzjv0",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5018,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123134880,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278439924/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T07:15:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278439924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278453086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278453086"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  return Range:new(math.max(r1.start, r2.start), math.min(r1.end_, r2.end_))\r\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T07:27:25Z",
            "diff_hunk": "@@ -0,0 +1,194 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Range| objects, this module offers operations\n+--- that support comparisons as well as containment checks\n+--- (for positions and for other ranges).\n+--- conversions between various types of ranges is also provided.\n+\n+local validate = vim.validate\n+\n+--- Represents a well-defined range.\n+---\n+--- A |vim.Range| object contains a {start} and a {end_} position(see |vim.Pos|).\n+--- Note that the {end_} position is exclusive.\n+--- To create a new |vim.Range| object, call the table `vim._range` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Create a range from two positions.\n+--- local range1 = vim._range(pos1, pos2)\n+--- -- Or createa range from four integers representing start and end positions.\n+--- local range2 = vim._range(3, 5, 4, 0)\n+---\n+--- -- Because `vim.Range` is end exclusive, `range1` and `range2` both represent\n+--- -- a range starting at the row 3, column 5 and ending at where the row 3 ends.\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if range1 == range2 then\n+---   print(\"range1 and range2 are the same range\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions. Note that the {start} and {end_} positions\n+--- need to have the same optional fields.\n+---\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(self: vim.Range, start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(self: vim.Range, start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+function Range:new(...)\n+  ---@type vim.Pos, vim.Pos, vim.Pos.Optional\n+  local start, end_\n+\n+  local args = { ... }\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+    validate('start', start, 'table')\n+    validate('end_', end_, 'table')\n+\n+    if start.bufnr ~= end_.bufnr then\n+      error('start and end positions must belong to the same buffer')\n+    end\n+  elseif #args == 4 or #args == 5 then\n+    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n+    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n+  else\n+    error('invalid parameters')\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param range vim.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_range(range, position_encoding)\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string', true)\n+\n+  ---@type lsp.Range\n+  return {\n+    ['start'] = range.start:lsp(position_encoding),\n+    ['end'] = range.end_:lsp(position_encoding),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param range lsp.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_range(bufnr, range, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  -- TODO(ofseed): avoid using `Pos:lsp()` here,\n+  -- as they need reading files separately if buffer is unloaded.\n+  local start = vim._pos.lsp(bufnr, range['start'], position_encoding)\n+  local end_ = vim._pos.lsp(bufnr, range['end'], position_encoding)\n+\n+  return Range:new(start, end_)\n+end\n+\n+--- Converts between |vim.Range| and `lsp.Range`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP range.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local range = vim._range(3, 5, 4, 0, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP range.\n+--- local lsp_range = range:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Range`.\n+--- if vim._range.lsp(bufnr, lsp_range, 'utf-16') == range then\n+---   print(\"lsp_range is equal to range\")\n+--- end\n+--- ```\n+---@overload fun(range: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Range\n+---@overload fun(bufnr: integer, range: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Range\n+function Range.lsp(...)\n+  local args = { ... }\n+  if #args == 2 then\n+    return to_lsp_range(...)\n+  elseif #args == 3 then\n+    return from_lsp_range(...)\n+  else\n+    error('invalid parameters')\n+  end\n+end\n+\n+--- Checks whether {outer} range contains {inner} range.\n+---\n+---@param outer vim.Range\n+---@param inner vim.Range\n+---@return boolean `true` if {outer} range fully contains {inner} range.\n+function Range.has(outer, inner)\n+  return outer.start <= inner.start and outer.end_ >= inner.end_\n+end\n+\n+--- Computes the common range shared by the given ranges.\n+---\n+---@param r1 vim.Range First range to intersect.\n+---@param r2 vim.Range Second range to intersect\n+---@return vim.Range? range that is present inside both `r1` and `r2`.\n+---                   `nil` if such range does not exist.\n+function Range.intersect(r1, r2)\n+  if r1.end_ <= r2.start or r1.start >= r2.end_ then\n+    return nil\n+  end\n+  local rs = r1.start <= r2.start and r2 or r1\n+  local re = r1.end_ >= r2.end_ and r2 or r1\n+  return Range:new(rs.start, re.end_)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278453086",
            "id": 2278453086,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Hzm9e",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 165,
            "original_position": 165,
            "original_start_line": 163,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3123150691,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278453086/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-15T07:27:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278453086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278469488"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278469488"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I saw this naming suggestion in `dev-common`, but I saw that the main places where `Range` is currently used, such as LSP and tree-sitter code, all use `bufnr`, so I chose `bufnr`. I personally prefer to use bufnr in pure Lua APIs.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T07:41:57Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278469488",
            "id": 2278469488,
            "in_reply_to_id": 2278439924,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Hzq9w",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5018,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123170902,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278469488/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T07:41:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278469488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278941079"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278941079"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's use `buf` here. ",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T12:54:18Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278941079",
            "id": 2278941079,
            "in_reply_to_id": 2278439924,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1eGX",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5018,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123789228,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278941079/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T12:54:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278941079",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278953568"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278953568"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's standardize on `buf`.\n```suggestion\n      • `fun(buf: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Pos`\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:02:53Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {lsp}     (`fun()`) See |Pos:lsp()|.\n+\n+\n+Pos:lsp()                                                          *Pos:lsp()*\n+    Converts between |vim.Pos| and `lsp.Position`.\n+\n+    Example: >lua\n+        -- `bufnr` is required for conversion to LSP position.\n+        local bufnr = vim.api.nvim_get_current_buf()\n+        local pos = vim.pos(3, 5, { bufnr = bufnr })\n+\n+        -- Convert to LSP position.\n+        local lsp_pos = pos:lsp('utf-16')\n+\n+        -- Convert back to `vim.Pos`.\n+        if vim.pos.lsp(bufnr, lsp_pos, 'utf-16') == pos then\n+          print(\"lsp_pos is equal to pos\")\n+        end\n+<\n+\n+    Overloads: ~\n+      • `fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Position`\n+      • `fun(bufnr: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Pos`",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278953568",
            "id": 2278953568,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1hJg",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5045,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123805334,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278953568/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:02:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278953568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278956570"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278956570"
                }
            },
            "author_association": "MEMBER",
            "body": "verbose, and probably confusing for users that aren't deeply familiar with Lua.\n\n```suggestion\n    |vim.Range| object, call `vim._range()`.\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:05:08Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {lsp}     (`fun()`) See |Pos:lsp()|.\n+\n+\n+Pos:lsp()                                                          *Pos:lsp()*\n+    Converts between |vim.Pos| and `lsp.Position`.\n+\n+    Example: >lua\n+        -- `bufnr` is required for conversion to LSP position.\n+        local bufnr = vim.api.nvim_get_current_buf()\n+        local pos = vim.pos(3, 5, { bufnr = bufnr })\n+\n+        -- Convert to LSP position.\n+        local lsp_pos = pos:lsp('utf-16')\n+\n+        -- Convert back to `vim.Pos`.\n+        if vim.pos.lsp(bufnr, lsp_pos, 'utf-16') == pos then\n+          print(\"lsp_pos is equal to pos\")\n+        end\n+<\n+\n+    Overloads: ~\n+      • `fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Position`\n+      • `fun(bufnr: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Pos`\n+\n+\n+==============================================================================\n+Lua module: vim._range                                            *vim._range*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Range| objects, this module offers operations that support\n+comparisons as well as containment checks (for positions and for other\n+ranges). conversions between various types of ranges is also provided.\n+\n+\n+*vim.Range*\n+    Represents a well-defined range.\n+\n+    A |vim.Range| object contains a {start} and a {end_} position(see\n+    |vim.Pos|). Note that the {end_} position is exclusive. To create a new\n+    |vim.Range| object, call the table `vim._range` as a function.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278956570",
            "id": 2278956570,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1h4a",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5067,
            "original_position": 92,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123809533,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278956570/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:05:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278956570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278962459"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278962459"
                }
            },
            "author_association": "MEMBER",
            "body": "The underscores aren't necessary, we can just document them as experimental. We aren't going to release Nvim 0.12 until we finalize these.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:09:26Z",
            "diff_hunk": "@@ -26,6 +26,8 @@\n -- These are for loading runtime modules lazily since they aren't available in\n -- the nvim binary as specified in executor.c\n for k, v in pairs({\n+  _pos = true,\n+  _range = true,",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278962459",
            "id": 2278962459,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1jUb",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 30,
            "original_position": 5,
            "original_start_line": 29,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 3123817835,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278962459/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-15T13:09:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278962459",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278963497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278963497"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's use the same names everywhere. Position is always \"pos\". \r\n\r\n(`position_encoding` is an exception since that's a name from LSP, though in this context `pos_encoding` could be fine.)\r\n\r\n```suggestion\r\nlocal function to_lsp_pos(pos, position_encoding)\r\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:10:09Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278963497",
            "id": 2278963497,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1jkp",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 86,
            "original_position": 86,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3123819270,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278963497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278963497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278970063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278970063"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems like a place where the `kind` field is important. Comparing unlike kinds of positions is an error.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:14:53Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local bufnr = assert(pos.bufnr, 'position is not a buffer position')\n+  local row, col = pos.row, pos.col\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_utfindex(get_line(bufnr, row), position_encoding, col, false)\n+  end\n+\n+  ---@type lsp.Position\n+  return { line = row, character = col }\n+end\n+\n+---@param bufnr integer\n+---@param pos lsp.Position\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_position(bufnr, pos, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local row, col = pos.line, pos.character\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_byteindex(get_line(bufnr, row), position_encoding, col)\n+  end\n+\n+  return Pos:new(row, col, { bufnr = bufnr })\n+end\n+\n+--- Converts between |vim.Pos| and `lsp.Position`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP position.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local pos = vim.pos(3, 5, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP position.\n+--- local lsp_pos = pos:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Pos`.\n+--- if vim.pos.lsp(bufnr, lsp_pos, 'utf-16') == pos then\n+---   print(\"lsp_pos is equal to pos\")\n+--- end\n+--- ```\n+---@overload fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Position\n+---@overload fun(bufnr: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Pos\n+function Pos.lsp(...)\n+  local args = { ... }\n+  if #args == 2 then\n+    return to_lsp_position(...)\n+  elseif #args == 3 then\n+    return from_lsp_position(...)\n+  else\n+    error('invalid parameters')\n+  end\n+end\n+\n+---@param p1 vim.Pos First position to compare.\n+---@param p2 vim.Pos Second position to compare.\n+---@return integer\n+--- 1: a > b\n+--- 0: a == b\n+--- -1: a < b\n+local function cmp_pos(p1, p2)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278970063",
            "id": 2278970063,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1lLP",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 155,
            "original_position": 155,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3123828361,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278970063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:14:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278970063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278972153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278972153"
                }
            },
            "author_association": "MEMBER",
            "body": "Should it accept `buf=0` for current buffer?",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:16:18Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {lsp}     (`fun()`) See |Pos:lsp()|.\n+\n+\n+Pos:lsp()                                                          *Pos:lsp()*\n+    Converts between |vim.Pos| and `lsp.Position`.\n+\n+    Example: >lua\n+        -- `bufnr` is required for conversion to LSP position.\n+        local bufnr = vim.api.nvim_get_current_buf()\n+        local pos = vim.pos(3, 5, { bufnr = bufnr })",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278972153",
            "id": 2278972153,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1lr5",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5032,
            "original_position": 57,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123831114,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278972153/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:16:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278972153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278976595"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278976595"
                }
            },
            "author_association": "MEMBER",
            "body": "Although pos objects have metamethods, I'm not sure we need `:lsp()` as a method, especially since it requires lots of parameters anyway, are we gaining much by having it as a method? `vim.pos.lsp()` seems ok. ",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:19:26Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {lsp}     (`fun()`) See |Pos:lsp()|.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278976595",
            "id": 2278976595,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1mxT",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5023,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123837398,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278976595/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:19:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278976595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278982402"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278982402"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n--- -- Operators are overloaded for comparing two `vim.Pos` objects.\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:23:22Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278982402",
            "id": 2278982402,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1oMC",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3123845051,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278982402/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:23:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278982402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278983916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278983916"
                }
            },
            "author_association": "MEMBER",
            "body": "need `@returns` doc",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:24:22Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local bufnr = assert(pos.bufnr, 'position is not a buffer position')\n+  local row, col = pos.row, pos.col\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_utfindex(get_line(bufnr, row), position_encoding, col, false)\n+  end\n+\n+  ---@type lsp.Position\n+  return { line = row, character = col }\n+end\n+\n+---@param bufnr integer\n+---@param pos lsp.Position\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_position(bufnr, pos, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local row, col = pos.line, pos.character\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_byteindex(get_line(bufnr, row), position_encoding, col)\n+  end\n+\n+  return Pos:new(row, col, { bufnr = bufnr })\n+end\n+\n+--- Converts between |vim.Pos| and `lsp.Position`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP position.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local pos = vim.pos(3, 5, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP position.\n+--- local lsp_pos = pos:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Pos`.\n+--- if vim.pos.lsp(bufnr, lsp_pos, 'utf-16') == pos then\n+---   print(\"lsp_pos is equal to pos\")\n+--- end\n+--- ```\n+---@overload fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Position\n+---@overload fun(bufnr: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Pos\n+function Pos.lsp(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278983916",
            "id": 2278983916,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1ojs",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 138,
            "original_position": 138,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3123847099,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278983916/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:24:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278983916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2278985966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278985966"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is a two-birds-with-one-stone approach. The `:lsp()` call in Lua is merely syntactic sugar, as long as `vim.Pos` is the first argument (as it is now), it can be called in the form `pos:lsp(encoding)`, or in the style `vim.lsp(pos, encoding)`. I think this is a documentation issue, but it is limited by the current doc gen script.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:25:43Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {lsp}     (`fun()`) See |Pos:lsp()|.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2278985966",
            "id": 2278985966,
            "in_reply_to_id": 2278976595,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1pDu",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5023,
            "original_position": 48,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3123849851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278985966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:25:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2278985966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279000975"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279000975"
                }
            },
            "author_association": "MEMBER",
            "body": "Converting to other structures is something I didn't think about. I was thinking only about translating the coordinates...\n\nThis is somewhat tricky because Lua has no runtime type-checking, so the caller must be sure that they're passing something valid.\n\nHowever, we still also need `vim.Pos <=> vim.Pos` conversions, and for that we will need a `kind` field, to guard against nonsense like:\n\n    vim.pos.lsp(vim.pos.lsp(...))\n\nAlso, there's an interface question: the `vim.pos.lsp/mark/...` interface proposed in #25509 was intended for `vim.Pos <=> vim.Pos` translation, but we also want `vim.Pos => lsp.Position` conversion.\n\nIt's up for debate, but in order to unblock this PR, I suggest using:\n\n- `to_xx()` for the \"convert\" interface. Example: `vim.pos.to_lsp()` converts `vim.Pos => lsp.Position`. \n- `xx()` for the \"translate\" interface. Example: `vim.pos.lsp()` translates `vim.Pos => vim.Pos` (and sets `kind='lsp'`). \n\nWDYT?",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:33:44Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local bufnr = assert(pos.bufnr, 'position is not a buffer position')\n+  local row, col = pos.row, pos.col\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_utfindex(get_line(bufnr, row), position_encoding, col, false)\n+  end\n+\n+  ---@type lsp.Position\n+  return { line = row, character = col }\n+end\n+\n+---@param bufnr integer\n+---@param pos lsp.Position\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_position(bufnr, pos, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local row, col = pos.line, pos.character\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_byteindex(get_line(bufnr, row), position_encoding, col)\n+  end\n+\n+  return Pos:new(row, col, { bufnr = bufnr })\n+end\n+\n+--- Converts between |vim.Pos| and `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279000975",
            "id": 2279000975,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1suP",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 120,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3123868649,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279000975/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:33:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279000975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279002391"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279002391"
                }
            },
            "author_association": "MEMBER",
            "body": "need `@return` doc",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T13:34:42Z",
            "diff_hunk": "@@ -0,0 +1,194 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Range| objects, this module offers operations\n+--- that support comparisons as well as containment checks\n+--- (for positions and for other ranges).\n+--- conversions between various types of ranges is also provided.\n+\n+local validate = vim.validate\n+\n+--- Represents a well-defined range.\n+---\n+--- A |vim.Range| object contains a {start} and a {end_} position(see |vim.Pos|).\n+--- Note that the {end_} position is exclusive.\n+--- To create a new |vim.Range| object, call the table `vim._range` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Create a range from two positions.\n+--- local range1 = vim._range(pos1, pos2)\n+--- -- Or createa range from four integers representing start and end positions.\n+--- local range2 = vim._range(3, 5, 4, 0)\n+---\n+--- -- Because `vim.Range` is end exclusive, `range1` and `range2` both represent\n+--- -- a range starting at the row 3, column 5 and ending at where the row 3 ends.\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if range1 == range2 then\n+---   print(\"range1 and range2 are the same range\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions. Note that the {start} and {end_} positions\n+--- need to have the same optional fields.\n+---\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(self: vim.Range, start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(self: vim.Range, start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+function Range:new(...)\n+  ---@type vim.Pos, vim.Pos, vim.Pos.Optional\n+  local start, end_\n+\n+  local args = { ... }\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+    validate('start', start, 'table')\n+    validate('end_', end_, 'table')\n+\n+    if start.bufnr ~= end_.bufnr then\n+      error('start and end positions must belong to the same buffer')\n+    end\n+  elseif #args == 4 or #args == 5 then\n+    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n+    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n+  else\n+    error('invalid parameters')\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param range vim.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_range(range, position_encoding)\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string', true)\n+\n+  ---@type lsp.Range\n+  return {\n+    ['start'] = range.start:lsp(position_encoding),\n+    ['end'] = range.end_:lsp(position_encoding),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param range lsp.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_range(bufnr, range, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  -- TODO(ofseed): avoid using `Pos:lsp()` here,\n+  -- as they need reading files separately if buffer is unloaded.\n+  local start = vim._pos.lsp(bufnr, range['start'], position_encoding)\n+  local end_ = vim._pos.lsp(bufnr, range['end'], position_encoding)\n+\n+  return Range:new(start, end_)\n+end\n+\n+--- Converts between |vim.Range| and `lsp.Range`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP range.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local range = vim._range(3, 5, 4, 0, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP range.\n+--- local lsp_range = range:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Range`.\n+--- if vim._range.lsp(bufnr, lsp_range, 'utf-16') == range then\n+---   print(\"lsp_range is equal to range\")\n+--- end\n+--- ```\n+---@overload fun(range: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Range\n+---@overload fun(bufnr: integer, range: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Range\n+function Range.lsp(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279002391",
            "id": 2279002391,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H1tEX",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3123870540,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279002391/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T13:34:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279002391",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279348641"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279348641"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of allocating a table, operate on `...` directly\n\n\n```suggestion\n  local nargs = select('#', ...)\n  if nargs == 2 then\n    ---@cast args [vim.Pos, vim.Pos]\n    start, end_ = ...\n    validate('start', start, 'table')\n    validate('end_', end_, 'table')\n\n    if start.bufnr ~= end_.bufnr then\n      error('start and end positions must belong to the same buffer')\n    end\n  elseif nargs == 4 or nargs == 5 then\n    local args = { ... }\n    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n  else\n    error('invalid parameters')\n  end\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T15:49:00Z",
            "diff_hunk": "@@ -0,0 +1,194 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Range| objects, this module offers operations\n+--- that support comparisons as well as containment checks\n+--- (for positions and for other ranges).\n+--- conversions between various types of ranges is also provided.\n+\n+local validate = vim.validate\n+\n+--- Represents a well-defined range.\n+---\n+--- A |vim.Range| object contains a {start} and a {end_} position(see |vim.Pos|).\n+--- Note that the {end_} position is exclusive.\n+--- To create a new |vim.Range| object, call the table `vim._range` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Create a range from two positions.\n+--- local range1 = vim._range(pos1, pos2)\n+--- -- Or createa range from four integers representing start and end positions.\n+--- local range2 = vim._range(3, 5, 4, 0)\n+---\n+--- -- Because `vim.Range` is end exclusive, `range1` and `range2` both represent\n+--- -- a range starting at the row 3, column 5 and ending at where the row 3 ends.\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if range1 == range2 then\n+---   print(\"range1 and range2 are the same range\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions. Note that the {start} and {end_} positions\n+--- need to have the same optional fields.\n+---\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(self: vim.Range, start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(self: vim.Range, start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+function Range:new(...)\n+  ---@type vim.Pos, vim.Pos, vim.Pos.Optional\n+  local start, end_\n+\n+  local args = { ... }\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+    validate('start', start, 'table')\n+    validate('end_', end_, 'table')\n+\n+    if start.bufnr ~= end_.bufnr then\n+      error('start and end positions must belong to the same buffer')\n+    end\n+  elseif #args == 4 or #args == 5 then\n+    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n+    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n+  else\n+    error('invalid parameters')\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279348641",
            "id": 2279348641,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H3Bmh",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": 62,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3124338953,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279348641/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-15T15:49:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279348641",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279364250"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279364250"
                }
            },
            "author_association": "MEMBER",
            "body": "This module is also quite performance sensitive and the new objects introduced in the PR are quite bulky. Can we revert the changes here too?",
            "commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "created_at": "2025-08-15T15:53:43Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279364250",
            "id": 2279364250,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6H3Faa",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/semantic_tokens.lua",
            "position": 1,
            "pull_request_review_id": 3124357552,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279364250/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-08-15T15:56:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279364250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279375337"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279375337"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n  local nargs = select('#', ...)\n  if nargs == 2 then\n    return to_lsp_range(...)\n  elseif nargs == 3 then\n    return from_lsp_range(...)\n  end\n  error('invalid parameters')\n```",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T15:59:16Z",
            "diff_hunk": "@@ -0,0 +1,194 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Range| objects, this module offers operations\n+--- that support comparisons as well as containment checks\n+--- (for positions and for other ranges).\n+--- conversions between various types of ranges is also provided.\n+\n+local validate = vim.validate\n+\n+--- Represents a well-defined range.\n+---\n+--- A |vim.Range| object contains a {start} and a {end_} position(see |vim.Pos|).\n+--- Note that the {end_} position is exclusive.\n+--- To create a new |vim.Range| object, call the table `vim._range` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Create a range from two positions.\n+--- local range1 = vim._range(pos1, pos2)\n+--- -- Or createa range from four integers representing start and end positions.\n+--- local range2 = vim._range(3, 5, 4, 0)\n+---\n+--- -- Because `vim.Range` is end exclusive, `range1` and `range2` both represent\n+--- -- a range starting at the row 3, column 5 and ending at where the row 3 ends.\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if range1 == range2 then\n+---   print(\"range1 and range2 are the same range\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions. Note that the {start} and {end_} positions\n+--- need to have the same optional fields.\n+---\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(self: vim.Range, start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(self: vim.Range, start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+function Range:new(...)\n+  ---@type vim.Pos, vim.Pos, vim.Pos.Optional\n+  local start, end_\n+\n+  local args = { ... }\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+    validate('start', start, 'table')\n+    validate('end_', end_, 'table')\n+\n+    if start.bufnr ~= end_.bufnr then\n+      error('start and end positions must belong to the same buffer')\n+    end\n+  elseif #args == 4 or #args == 5 then\n+    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n+    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n+  else\n+    error('invalid parameters')\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param range vim.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_range(range, position_encoding)\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string', true)\n+\n+  ---@type lsp.Range\n+  return {\n+    ['start'] = range.start:lsp(position_encoding),\n+    ['end'] = range.end_:lsp(position_encoding),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param range lsp.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_range(bufnr, range, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  -- TODO(ofseed): avoid using `Pos:lsp()` here,\n+  -- as they need reading files separately if buffer is unloaded.\n+  local start = vim._pos.lsp(bufnr, range['start'], position_encoding)\n+  local end_ = vim._pos.lsp(bufnr, range['end'], position_encoding)\n+\n+  return Range:new(start, end_)\n+end\n+\n+--- Converts between |vim.Range| and `lsp.Range`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP range.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local range = vim._range(3, 5, 4, 0, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP range.\n+--- local lsp_range = range:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Range`.\n+--- if vim._range.lsp(bufnr, lsp_range, 'utf-16') == range then\n+---   print(\"lsp_range is equal to range\")\n+--- end\n+--- ```\n+---@overload fun(range: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Range\n+---@overload fun(bufnr: integer, range: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Range\n+function Range.lsp(...)\n+  local args = { ... }\n+  if #args == 2 then\n+    return to_lsp_range(...)\n+  elseif #args == 3 then\n+    return from_lsp_range(...)\n+  else\n+    error('invalid parameters')\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279375337",
            "id": 2279375337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H3IHp",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 141,
            "original_position": 141,
            "original_start_line": 134,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3124371796,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279375337/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-15T15:59:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279375337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279413580"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279413580"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think this should be different from the previous situation. The previous refactor in `treesitter/_range.lua` caused a large number of temporary tables to be allocated for each comparison and then discarded. The refactor here is not the same. All `vim.Range` are created after each request and remain valid for a period, so new tables are not allocated very frequently.",
            "commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "created_at": "2025-08-15T16:17:56Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279413580",
            "id": 2279413580,
            "in_reply_to_id": 2279364250,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6H3RdM",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/semantic_tokens.lua",
            "position": 1,
            "pull_request_review_id": 3124437529,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279413580/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-08-15T16:17:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279413580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279640408"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279640408"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The return value is already specified in `@overload`. Lua LS will infer the specific return value type based on the passed parameters. If `@return` is used here, this more sophisticated inference method will fail.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T18:26:35Z",
            "diff_hunk": "@@ -0,0 +1,194 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Range| objects, this module offers operations\n+--- that support comparisons as well as containment checks\n+--- (for positions and for other ranges).\n+--- conversions between various types of ranges is also provided.\n+\n+local validate = vim.validate\n+\n+--- Represents a well-defined range.\n+---\n+--- A |vim.Range| object contains a {start} and a {end_} position(see |vim.Pos|).\n+--- Note that the {end_} position is exclusive.\n+--- To create a new |vim.Range| object, call the table `vim._range` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Create a range from two positions.\n+--- local range1 = vim._range(pos1, pos2)\n+--- -- Or createa range from four integers representing start and end positions.\n+--- local range2 = vim._range(3, 5, 4, 0)\n+---\n+--- -- Because `vim.Range` is end exclusive, `range1` and `range2` both represent\n+--- -- a range starting at the row 3, column 5 and ending at where the row 3 ends.\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if range1 == range2 then\n+---   print(\"range1 and range2 are the same range\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions. Note that the {start} and {end_} positions\n+--- need to have the same optional fields.\n+---\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(self: vim.Range, start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(self: vim.Range, start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+function Range:new(...)\n+  ---@type vim.Pos, vim.Pos, vim.Pos.Optional\n+  local start, end_\n+\n+  local args = { ... }\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+    validate('start', start, 'table')\n+    validate('end_', end_, 'table')\n+\n+    if start.bufnr ~= end_.bufnr then\n+      error('start and end positions must belong to the same buffer')\n+    end\n+  elseif #args == 4 or #args == 5 then\n+    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n+    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n+  else\n+    error('invalid parameters')\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param range vim.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_range(range, position_encoding)\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string', true)\n+\n+  ---@type lsp.Range\n+  return {\n+    ['start'] = range.start:lsp(position_encoding),\n+    ['end'] = range.end_:lsp(position_encoding),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param range lsp.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_range(bufnr, range, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  -- TODO(ofseed): avoid using `Pos:lsp()` here,\n+  -- as they need reading files separately if buffer is unloaded.\n+  local start = vim._pos.lsp(bufnr, range['start'], position_encoding)\n+  local end_ = vim._pos.lsp(bufnr, range['end'], position_encoding)\n+\n+  return Range:new(start, end_)\n+end\n+\n+--- Converts between |vim.Range| and `lsp.Range`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP range.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local range = vim._range(3, 5, 4, 0, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP range.\n+--- local lsp_range = range:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Range`.\n+--- if vim._range.lsp(bufnr, lsp_range, 'utf-16') == range then\n+---   print(\"lsp_range is equal to range\")\n+--- end\n+--- ```\n+---@overload fun(range: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Range\n+---@overload fun(bufnr: integer, range: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Range\n+function Range.lsp(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279640408",
            "id": 2279640408,
            "in_reply_to_id": 2279002391,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H4I1Y",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3124779528,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279640408/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T18:26:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279640408",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279646552"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279646552"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Converting to other structures is something I didn't think about. I was thinking only about translating the coordinates...\r\n\r\nMaybe my understanding of the position/range use case is not comprehensive enough. Based on my current understanding, I think this `vim.Pos <=> vim.Pos` conversion is unnecessary. My idea is that when using `vim.Pos`, we always convert it to a unified format, currently 0-based byte index.\r\n\r\nThis is because our low-level C API does not directly handle `vim.Pos`. In most cases, we always get raw position tuples from the C API and convert it to `vim.Pos`; after some operations, we convert `vim.Pos` back to raw position tuples so that the C API can use it. For example:\r\n\r\n```lua\r\nlocal row, col = api.nvim_win_get_cursor(winid) -- 1, 5\r\nlocal pos = vim.pos.cursor(row, col) -- pos.row == 0, pos.col == 5\r\nlocal cursor_pos = pos:to_cursor() -- { 1, 5 }\r\napi.nvim_win_set_sursor(winid, pos)\r\n```\r\n\r\nAs you can see, we don't need to store the original `row`, `col` directly into `vim.Pos`, which will not have any benefits. Instead, using the only `vim.Pos` has the benefit that it is convenient for us to operate on different pos, for example:\r\n\r\n```lua\r\nlocal cursor_pos = vim.pos.cursor(api.nvim_win_get_cursor(winid))\r\nlocal extmark_pos = vim.pos.extmark(...)\r\nif cursor_pos < extmark_pos then\r\n  print('cursor is before the extmark')\r\nend\r\n```\r\n\r\nWe don't need to convert between different types of `position`, so the translation I envision is the opposite - the translation always converts `vim.Pos` to another structure.\r\n\r\n> It's up for debate, but in order to unblock this PR, I suggest using:\r\n> \r\n> * `to_xx()` for the \"convert\" interface. Example: `vim.pos.to_lsp()` converts `vim.Pos => lsp.Position`.\r\n> * `xx()` for the \"translate\" interface. Example: `vim.pos.lsp()` translates `vim.Pos => vim.Pos` (and sets `kind='lsp'`).\r\n\r\nRegardless of the previous idea, I always prefer this approach. Because the extensive use of overload will make our documents difficult to understand unless we make considerable changes to the current doc gen script.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T18:31:05Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local bufnr = assert(pos.bufnr, 'position is not a buffer position')\n+  local row, col = pos.row, pos.col\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_utfindex(get_line(bufnr, row), position_encoding, col, false)\n+  end\n+\n+  ---@type lsp.Position\n+  return { line = row, character = col }\n+end\n+\n+---@param bufnr integer\n+---@param pos lsp.Position\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_position(bufnr, pos, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local row, col = pos.line, pos.character\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_byteindex(get_line(bufnr, row), position_encoding, col)\n+  end\n+\n+  return Pos:new(row, col, { bufnr = bufnr })\n+end\n+\n+--- Converts between |vim.Pos| and `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279646552",
            "id": 2279646552,
            "in_reply_to_id": 2279000975,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H4KVY",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 120,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3124788588,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279646552/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T18:31:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279646552",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279660012"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279660012"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Since `vim.Pos` is often stored after creation, I think it is better to let the user explicitly get the current buffer. Otherwise, it will be ambiguous, because \"current buffer\" may refer to \"current buffer\" when the constructor is called, or \"current buffer when the value of pos is used\".",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T18:40:45Z",
            "diff_hunk": "@@ -4976,4 +4976,169 @@ Rather than a |hit-enter-prompt|, messages shown in the cmdline area that do\n not fit are appended with a `[+x]` \"spill\" indicator, where `x` indicates the\n spilled lines. To see the full message, the |g<| command can be used.\n \n+==============================================================================\n+Lua module: vim._pos                                                *vim._pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {bufnr}?  (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {lsp}     (`fun()`) See |Pos:lsp()|.\n+\n+\n+Pos:lsp()                                                          *Pos:lsp()*\n+    Converts between |vim.Pos| and `lsp.Position`.\n+\n+    Example: >lua\n+        -- `bufnr` is required for conversion to LSP position.\n+        local bufnr = vim.api.nvim_get_current_buf()\n+        local pos = vim.pos(3, 5, { bufnr = bufnr })",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279660012",
            "id": 2279660012,
            "in_reply_to_id": 2278972153,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H4Nns",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 5032,
            "original_position": 57,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3124807582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279660012/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T18:40:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279660012",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279738751"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279738751"
                }
            },
            "author_association": "MEMBER",
            "body": "oh i was looking at the docs, hmm.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T19:28:08Z",
            "diff_hunk": "@@ -0,0 +1,194 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Range| objects, this module offers operations\n+--- that support comparisons as well as containment checks\n+--- (for positions and for other ranges).\n+--- conversions between various types of ranges is also provided.\n+\n+local validate = vim.validate\n+\n+--- Represents a well-defined range.\n+---\n+--- A |vim.Range| object contains a {start} and a {end_} position(see |vim.Pos|).\n+--- Note that the {end_} position is exclusive.\n+--- To create a new |vim.Range| object, call the table `vim._range` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Create a range from two positions.\n+--- local range1 = vim._range(pos1, pos2)\n+--- -- Or createa range from four integers representing start and end positions.\n+--- local range2 = vim._range(3, 5, 4, 0)\n+---\n+--- -- Because `vim.Range` is end exclusive, `range1` and `range2` both represent\n+--- -- a range starting at the row 3, column 5 and ending at where the row 3 ends.\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if range1 == range2 then\n+---   print(\"range1 and range2 are the same range\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions. Note that the {start} and {end_} positions\n+--- need to have the same optional fields.\n+---\n+---@class vim.Range\n+---@field start vim.Pos Start position.\n+---@field end_ vim.Pos End position, exclusive.\n+---@overload fun(start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+local Range = {}\n+Range.__index = Range\n+\n+---@package\n+---@overload fun(self: vim.Range, start: vim.Pos, end_: vim.Pos): vim.Range\n+---@overload fun(self: vim.Range, start_row: integer, start_col: integer, end_row: integer, end_col: integer, opts?: vim.Pos.Optional): vim.Range\n+function Range:new(...)\n+  ---@type vim.Pos, vim.Pos, vim.Pos.Optional\n+  local start, end_\n+\n+  local args = { ... }\n+  if #args == 2 then\n+    ---@cast args [vim.Pos, vim.Pos]\n+    start, end_ = unpack(args)\n+    validate('start', start, 'table')\n+    validate('end_', end_, 'table')\n+\n+    if start.bufnr ~= end_.bufnr then\n+      error('start and end positions must belong to the same buffer')\n+    end\n+  elseif #args == 4 or #args == 5 then\n+    ---@cast args [integer, integer, integer, integer, vim.Pos.Optional?]\n+    start, end_ = vim._pos(args[1], args[2], args[5]), vim._pos(args[3], args[4], args[5])\n+  else\n+    error('invalid parameters')\n+  end\n+\n+  ---@class vim.Range\n+  self = setmetatable({}, self)\n+  self.start = start\n+  self.end_ = end_\n+  return self\n+end\n+\n+---@param range vim.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_range(range, position_encoding)\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string', true)\n+\n+  ---@type lsp.Range\n+  return {\n+    ['start'] = range.start:lsp(position_encoding),\n+    ['end'] = range.end_:lsp(position_encoding),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param range lsp.Range\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_range(bufnr, range, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('range', range, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  -- TODO(ofseed): avoid using `Pos:lsp()` here,\n+  -- as they need reading files separately if buffer is unloaded.\n+  local start = vim._pos.lsp(bufnr, range['start'], position_encoding)\n+  local end_ = vim._pos.lsp(bufnr, range['end'], position_encoding)\n+\n+  return Range:new(start, end_)\n+end\n+\n+--- Converts between |vim.Range| and `lsp.Range`.\n+---\n+--- Example:\n+--- ```lua\n+--- -- `bufnr` is required for conversion to LSP range.\n+--- local bufnr = vim.api.nvim_get_current_buf()\n+--- local range = vim._range(3, 5, 4, 0, { bufnr = bufnr })\n+---\n+--- -- Convert to LSP range.\n+--- local lsp_range = range:lsp('utf-16')\n+---\n+--- -- Convert back to `vim.Range`.\n+--- if vim._range.lsp(bufnr, lsp_range, 'utf-16') == range then\n+---   print(\"lsp_range is equal to range\")\n+--- end\n+--- ```\n+---@overload fun(range: vim.Pos, position_encoding: lsp.PositionEncodingKind): lsp.Range\n+---@overload fun(bufnr: integer, range: lsp.Position, position_encoding: lsp.PositionEncodingKind): vim.Range\n+function Range.lsp(...)",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279738751",
            "id": 2279738751,
            "in_reply_to_id": 2279002391,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H4g1_",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "runtime/lua/vim/_range.lua",
            "position": null,
            "pull_request_review_id": 3124916813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279738751/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T19:28:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279738751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279771936"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279771936"
                }
            },
            "author_association": "MEMBER",
            "body": "> we don't need to store the original `row`, `col` directly into `vim.Pos`, which will not have any benefits.\r\n\r\nYes, to be clear, storing the \"original\" row/col isn't proposed in #25509, and would be unnecessary because `kind` defines the semantics of the current values.\r\n\r\n> ```lua\r\n> local cursor_pos = vim.pos.cursor(api.nvim_win_get_cursor(winid))\r\n> local extmark_pos = vim.pos.extmark(...)\r\n> if cursor_pos < extmark_pos then\r\n>   print('cursor is before the extmark')\r\n> end\r\n> ```\r\n\r\nThat looks great, and I agree that always normalizing/canonicalizing to `vim.Pos` (currently 0-indexed) makes a lot of sense.\r\n\r\nI'm just a little worried about codepaths that pass around a \"naked\" `vim.Pos` and some part of the codepath is expecting a different type of position. Without a `kind` field, it's harder to surface those problems and show useful error messages.\r\n\r\nBut you're right that `vim.Pos <=> vim.Pos` translation probably isn't needed. So the remaining question of a `kind` field, is a low-risk change that we can defer for now.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T19:50:46Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local bufnr = assert(pos.bufnr, 'position is not a buffer position')\n+  local row, col = pos.row, pos.col\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_utfindex(get_line(bufnr, row), position_encoding, col, false)\n+  end\n+\n+  ---@type lsp.Position\n+  return { line = row, character = col }\n+end\n+\n+---@param bufnr integer\n+---@param pos lsp.Position\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_position(bufnr, pos, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local row, col = pos.line, pos.character\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_byteindex(get_line(bufnr, row), position_encoding, col)\n+  end\n+\n+  return Pos:new(row, col, { bufnr = bufnr })\n+end\n+\n+--- Converts between |vim.Pos| and `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279771936",
            "id": 2279771936,
            "in_reply_to_id": 2279000975,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H4o8g",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 120,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3124961305,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279771936/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T19:50:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279771936",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279789621"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279789621"
                }
            },
            "author_association": "MEMBER",
            "body": "these should go in the alphanumeric section above",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T20:00:46Z",
            "diff_hunk": "@@ -168,6 +168,8 @@ local config = {\n \n       -- Sections at the end, in a specific order:\n       'tohtml.lua',\n+      'pos.lua',\n+      'range.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279789621",
            "id": 2279789621,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H4tQ1",
            "original_commit_id": "b6d4b6a0f70b6aaae973807eada3d8cc254a5657",
            "original_line": 172,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/gen/gen_vimdoc.lua",
            "position": null,
            "pull_request_review_id": 3124988179,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279789621/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T20:00:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279789621",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2279793625"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279793625"
                }
            },
            "author_association": "MEMBER",
            "body": "do we need vim.range tests for lsp conversion?",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-15T20:03:32Z",
            "diff_hunk": "@@ -0,0 +1,63 @@\n+-- Test suite for vim.range\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local eq = t.eq\n+\n+local clear = n.clear\n+local exec_lua = n.exec_lua\n+\n+describe('vim.range', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2279793625",
            "id": 2279793625,
            "line": 10,
            "node_id": "PRRC_kwDOAPphoM6H4uPZ",
            "original_commit_id": "b6d4b6a0f70b6aaae973807eada3d8cc254a5657",
            "original_line": 10,
            "original_position": 9,
            "original_start_line": null,
            "path": "test/functional/lua/range_spec.lua",
            "position": 10,
            "pull_request_review_id": 3124995640,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279793625/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-15T20:03:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2279793625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2280692190"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280692190"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Regarding adding a field like `kind`, I have a rough idea to add a `data` field, similar to `vim.Diagnostic`. This is mainly because those places that really need APIs like `vim.Pos` are likely to also rely on comparisons. By having `vim.Range` have data like highlights (`range.data`) instead of having highlights have a `range` (`highlight.range`), the data objects can be compared directly instead of getting the `range` first. We can also make `data` default to `kind`, which can play multiple roles instead of just marking errors.\r\n\r\nWe can consider such changes after Lua LS has better support for generics, that is, support for defining `vim.Range<T> `with `data: T`.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-17T02:28:00Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call the table `vim._pos` as a function.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Mathematical operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field bufnr? integer\n+---@overload fun(row: integer, col: integer, opts: vim.Pos.Optional?): vim.Pos\n+local Pos = {}\n+Pos.__index = Pos\n+\n+---@class vim.Pos.Optional\n+---@inlinedoc\n+---@field bufnr? integer\n+\n+---@package\n+---@param row integer\n+---@param col integer\n+---@param opts vim.Pos.Optional\n+function Pos:new(row, col, opts)\n+  validate('row', row, 'number')\n+  validate('col', col, 'number')\n+  validate('opts', opts, 'table', true)\n+\n+  ---@type vim.Pos\n+  self = setmetatable({}, self)\n+  self.row = row\n+  self.col = col\n+\n+  opts = opts or {}\n+  self.bufnr = opts.bufnr\n+\n+  return self\n+end\n+\n+--- TODO(ofseed): Make it work for unloaded buffers.\n+---@param bufnr integer\n+---@param row integer\n+local function get_line(bufnr, row)\n+  return api.nvim_buf_get_lines(bufnr, row, row + 1, true)[1]\n+end\n+\n+---@param pos vim.Pos\n+---@param position_encoding lsp.PositionEncodingKind\n+local function to_lsp_position(pos, position_encoding)\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local bufnr = assert(pos.bufnr, 'position is not a buffer position')\n+  local row, col = pos.row, pos.col\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_utfindex(get_line(bufnr, row), position_encoding, col, false)\n+  end\n+\n+  ---@type lsp.Position\n+  return { line = row, character = col }\n+end\n+\n+---@param bufnr integer\n+---@param pos lsp.Position\n+---@param position_encoding lsp.PositionEncodingKind\n+local function from_lsp_position(bufnr, pos, position_encoding)\n+  validate('bufnr', bufnr, 'number')\n+  validate('pos', pos, 'table')\n+  validate('position_encoding', position_encoding, 'string')\n+\n+  local row, col = pos.line, pos.character\n+  -- When on the first character,\n+  -- we can ignore the difference between byte and character.\n+  if col > 0 then\n+    col = vim.str_byteindex(get_line(bufnr, row), position_encoding, col)\n+  end\n+\n+  return Pos:new(row, col, { bufnr = bufnr })\n+end\n+\n+--- Converts between |vim.Pos| and `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2280692190",
            "id": 2280692190,
            "in_reply_to_id": 2279000975,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H8Jne",
            "original_commit_id": "7e8f987222f0bce3231379b9d9952e69897e0161",
            "original_line": 120,
            "original_position": 120,
            "original_start_line": null,
            "path": "runtime/lua/vim/_pos.lua",
            "position": null,
            "pull_request_review_id": 3126167018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280692190/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T02:28:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280692190",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2281011111"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2281011111"
                }
            },
            "author_association": "MEMBER",
            "body": "Does this make sense as a method (`pos:lsp()`) or should it be strictly a module function (`vim.pos.lsp()`)? Same question for `Range:lsp()`.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-17T20:30:50Z",
            "diff_hunk": "@@ -3949,6 +3949,205 @@ vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n                        success.\n \n \n+==============================================================================\n+Lua module: vim.pos                                                  *vim.pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call `vim.pos()`.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {buf}?    (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {to_lsp}  (`fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:to_lsp()|.\n+      • {lsp}     (`fun(buf: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:lsp()|.\n+\n+\n+Pos:lsp({buf}, {pos}, {position_encoding})                         *Pos:lsp()*\n+    Creates a new |vim.Pos| from `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2281011111",
            "id": 2281011111,
            "line": 4003,
            "node_id": "PRRC_kwDOAPphoM6H9Xen",
            "original_commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "original_line": 4003,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 55,
            "pull_request_review_id": 3126453942,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2281011111/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T20:31:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2281011111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2281277277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2281277277"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There’s no need for that, any function that takes `vim.Pos` as its first argument can be treated as a method. Since Lua itself doesn’t really have true OOP abstractions, `pos:lsp(encoding)` is nothing more than syntactic sugar for `vim.pos.lsp(pos, encoding)`. The magic here lies in the fact that `vim.lsp` is the metatable of `pos`, which makes both calling styles valid.\r\n\r\nBeyond flexibility, another important reason is that this keeps us consistent with Lua’s own syntax. For example, Lua strings can be used both as `\"a string\":format(pattern)` and as `string.format(\"a string\", pattern)`.\r\n\r\nHowever, I noticed that the generated documentation from the gen vim doc script is a bit misleading here. It should produce `vim.pos.lsp()` instead of `Pos:lsp`.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-18T04:36:14Z",
            "diff_hunk": "@@ -3949,6 +3949,205 @@ vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n                        success.\n \n \n+==============================================================================\n+Lua module: vim.pos                                                  *vim.pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call `vim.pos()`.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {buf}?    (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {to_lsp}  (`fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:to_lsp()|.\n+      • {lsp}     (`fun(buf: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:lsp()|.\n+\n+\n+Pos:lsp({buf}, {pos}, {position_encoding})                         *Pos:lsp()*\n+    Creates a new |vim.Pos| from `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2281277277",
            "id": 2281277277,
            "in_reply_to_id": 2281011111,
            "line": 4003,
            "node_id": "PRRC_kwDOAPphoM6H-Ydd",
            "original_commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "original_line": 4003,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 55,
            "pull_request_review_id": 3126763474,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2281277277/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-18T04:36:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2281277277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2282645043"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2282645043"
                }
            },
            "author_association": "MEMBER",
            "body": "> `pos:lsp(encoding)` is nothing more than syntactic sugar for `vim.pos.lsp(pos, encoding)`\r\n\r\nthat makes sense for `to_lsp()` but not `lsp()`. `Pos.lsp()` does not take a `vim.Pos` as its first arg, and it doesn't make sense to create a `vim.Pos` from a `vim.Pos`.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-18T14:52:40Z",
            "diff_hunk": "@@ -3949,6 +3949,205 @@ vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n                        success.\n \n \n+==============================================================================\n+Lua module: vim.pos                                                  *vim.pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call `vim.pos()`.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {buf}?    (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {to_lsp}  (`fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:to_lsp()|.\n+      • {lsp}     (`fun(buf: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:lsp()|.\n+\n+\n+Pos:lsp({buf}, {pos}, {position_encoding})                         *Pos:lsp()*\n+    Creates a new |vim.Pos| from `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2282645043",
            "id": 2282645043,
            "in_reply_to_id": 2281011111,
            "line": 4003,
            "node_id": "PRRC_kwDOAPphoM6IDmYz",
            "original_commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "original_line": 4003,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 55,
            "pull_request_review_id": 3128723736,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2282645043/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-18T14:52:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2282645043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2282757612"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2282757612"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I mean we should let the doc be generated as `vim.pos.lsp` and `vim.pos.to_lsp`, never generate `Pos:lsp` and `Pos:to_lsp`. Making users decide whether to use this syntax sugar freely, just like some functions of the `string` table can be called as a method (the first parameter is `string`) and some can only be called as a function (the first parameter is not `string`).",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-18T15:32:26Z",
            "diff_hunk": "@@ -3949,6 +3949,205 @@ vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n                        success.\n \n \n+==============================================================================\n+Lua module: vim.pos                                                  *vim.pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call `vim.pos()`.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {buf}?    (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {to_lsp}  (`fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:to_lsp()|.\n+      • {lsp}     (`fun(buf: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:lsp()|.\n+\n+\n+Pos:lsp({buf}, {pos}, {position_encoding})                         *Pos:lsp()*\n+    Creates a new |vim.Pos| from `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2282757612",
            "id": 2282757612,
            "in_reply_to_id": 2281011111,
            "line": 4003,
            "node_id": "PRRC_kwDOAPphoM6IEB3s",
            "original_commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "original_line": 4003,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 55,
            "pull_request_review_id": 3128890952,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2282757612/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-18T15:36:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2282757612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2283039341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2283039341"
                }
            },
            "author_association": "MEMBER",
            "body": "This should be `M`. That's the default convention except for cases where multiple classes are defined in a module. Some old lsp modules don't follow this convention, but they are wrong.",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-18T17:36:48Z",
            "diff_hunk": "@@ -0,0 +1,189 @@\n+---@brief\n+---\n+--- WARNING: This module is under experimental support.\n+--- Its semantics are not yet finalized,\n+--- and the stability of this API is not guaranteed.\n+--- Avoid using it outside of Nvim.\n+--- You may subscribe to or participate in the tracking issue\n+--- https://github.com/neovim/neovim/issues/25509\n+--- to stay updated or contribute to its development.\n+---\n+--- Built on |vim.Pos| objects, this module offers operations\n+--- that support comparisons and conversions between various types of positions.\n+\n+local api = vim.api\n+local validate = vim.validate\n+\n+--- Represents a well-defined position.\n+---\n+--- A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+--- To create a new |vim.Pos| object, call `vim.pos()`.\n+---\n+--- Example:\n+--- ```lua\n+--- local pos1 = vim.pos(3, 5)\n+--- local pos2 = vim.pos(4, 0)\n+---\n+--- -- Operators are overloaded for comparing two `vim.Pos` objects.\n+--- if pos1 < pos2 then\n+---   print(\"pos1 comes before pos2\")\n+--- end\n+---\n+--- if pos1 ~= pos2 then\n+---   print(\"pos1 and pos2 are different positions\")\n+--- end\n+--- ```\n+---\n+--- It may include optional fields that enable additional capabilities,\n+--- such as format conversions.\n+---\n+---@class vim.Pos\n+---@field row integer 0-based byte index.\n+---@field col integer 0-based byte index.\n+---\n+--- Optional buffer handle.\n+---\n+--- When specified, it indicates that this position belongs to a specific buffer.\n+--- This field is required when performing position conversions.\n+---@field buf? integer\n+local Pos = {}",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2283039341",
            "id": 2283039341,
            "line": 49,
            "node_id": "PRRC_kwDOAPphoM6IFGpt",
            "original_commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "original_line": 49,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/pos.lua",
            "position": 49,
            "pull_request_review_id": 3129305233,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2283039341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-18T17:37:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2283039341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35109#discussion_r2283041986"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35109"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2283041986"
                }
            },
            "author_association": "MEMBER",
            "body": "oh hmm, idk why the docgen is doing that for `vim.pos.lsp` :/",
            "commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "created_at": "2025-08-18T17:38:19Z",
            "diff_hunk": "@@ -3949,6 +3949,205 @@ vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n                        success.\n \n \n+==============================================================================\n+Lua module: vim.pos                                                  *vim.pos*\n+\n+WARNING: This module is under experimental support. Its semantics are not yet\n+finalized, and the stability of this API is not guaranteed. Avoid using it\n+outside of Nvim. You may subscribe to or participate in the tracking issue\n+https://github.com/neovim/neovim/issues/25509 to stay updated or contribute to\n+its development.\n+\n+Built on |vim.Pos| objects, this module offers operations that support\n+comparisons and conversions between various types of positions.\n+\n+\n+*vim.Pos*\n+    Represents a well-defined position.\n+\n+    A |vim.Pos| object contains the {row} and {col} coordinates of a position.\n+    To create a new |vim.Pos| object, call `vim.pos()`.\n+\n+    Example: >lua\n+        local pos1 = vim.pos(3, 5)\n+        local pos2 = vim.pos(4, 0)\n+\n+        -- Operators are overloaded for comparing two `vim.Pos` objects.\n+        if pos1 < pos2 then\n+          print(\"pos1 comes before pos2\")\n+        end\n+\n+        if pos1 ~= pos2 then\n+          print(\"pos1 and pos2 are different positions\")\n+        end\n+<\n+\n+    It may include optional fields that enable additional capabilities, such\n+    as format conversions.\n+\n+    Fields: ~\n+      • {row}     (`integer`) 0-based byte index.\n+      • {col}     (`integer`) 0-based byte index.\n+      • {buf}?    (`integer`) Optional buffer handle.\n+\n+                  When specified, it indicates that this position belongs to a\n+                  specific buffer. This field is required when performing\n+                  position conversions.\n+      • {to_lsp}  (`fun(pos: vim.Pos, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:to_lsp()|.\n+      • {lsp}     (`fun(buf: integer, pos: lsp.Position, position_encoding: lsp.PositionEncodingKind)`)\n+                  See |Pos:lsp()|.\n+\n+\n+Pos:lsp({buf}, {pos}, {position_encoding})                         *Pos:lsp()*\n+    Creates a new |vim.Pos| from `lsp.Position`.",
            "html_url": "https://github.com/neovim/neovim/pull/35109#discussion_r2283041986",
            "id": 2283041986,
            "in_reply_to_id": 2281011111,
            "line": 4003,
            "node_id": "PRRC_kwDOAPphoM6IFHTC",
            "original_commit_id": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
            "original_line": 4003,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 55,
            "pull_request_review_id": 3129308832,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2283041986/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-18T17:38:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2283041986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "While the implementation in this PR is ready to be leveraged elsewhere to make operations like position comparisons more convenient, I think it might be more powerful if we standardize this structure, but we need to decide the following:\r\n\r\nFor `Pos`:\r\n- Should `bufnr` be added to `Pos` and made required?\r\n- What encoding should `Pos.col` be? Should we treat it as a byte index? I'm not familiar with encoding-related issues. Also, if we specify a unique encoding, we can remove the requirement to pass `bufr`.\r\n\r\nFor `Range`:\r\n- Should `Range.end_` be inclusive or exclusive? In the case of exclusive, a common use is to use `{ start = { row = 1, col = 0 }, end = { row = 2, col = 0 }` to represent the entire row with `row == 1`. This is very common in LSP, but I don't know much about tree-sitter, so I might need to consider the needs of tree-sitter.\r\n\r\nI may not have seen enough use cases, so I hope for more opinions. After solving the above problems, we can start exposing it as a public API and add some functions to make it more useful.",
            "created_at": "2025-07-31T05:17:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3138589959",
            "id": 3138589959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM67ExUH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3138589959/reactions"
            },
            "updated_at": "2025-07-31T12:49:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3138589959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For the standard definition I mentioned above, I will define `row` and `col` of `vim.Pos` as 0-based byte index, and `end_` in `vim.Range` as exclusive, which is consistent with the usage of most of our APIs such as `set_extmark`/`set_text`.\r\n\r\nIf we need to support different encodings to make this more convenient, we could add a separate optional field like `encoding`  (or just by `bufnr`) in the future to indicate that, while still defaulting to treating it as a byte index, so this would be compatible with the current situation, thus not block for now.",
            "created_at": "2025-07-31T12:44:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3139825342",
            "id": 3139825342,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM67Je6-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3139825342/reactions"
            },
            "updated_at": "2025-07-31T12:44:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3139825342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This doesn't close https://github.com/neovim/neovim/issues/25509 but it's extremely helpful to start in that direction, thank you!\r\n\r\nWill keep https://github.com/neovim/neovim/issues/25509 open to track the \"translation\" of lsp/marks/treesitter/etc position kinds.\r\n",
            "created_at": "2025-08-03T15:55:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3148510475",
            "id": 3148510475,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM67qnUL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148510475/reactions"
            },
            "updated_at": "2025-08-03T15:55:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148510475",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This PR is ready to be merged or reviewed again. I have added documentation and basic tests for this new feature.",
            "created_at": "2025-08-15T06:55:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3190793418",
            "id": 3190793418,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-L6TK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3190793418/reactions"
            },
            "updated_at": "2025-08-15T06:55:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3190793418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 Thank you for sharing this material; it’s valuable!\r\n\r\n> will make it slower.\r\n\r\nI went through the document, and here are some points and thoughts I had regarding the use of tables:\r\n\r\n1. Avoiding too much table nesting. Currently, `Range` uses one `Range` containing two `Pos` objects. This means creating a new `Range` will allocate at least three new tables. I think this suggests we might want `Range` to directly hold fields like `start_row` instead of using `start.row`. We could then provide methods to construct a `vim.Pos` only when needed, rather than storing them directly.\r\n2. Lua tables have an array part and a hash part. The array part uses direct indexing, while the hash part indexes via a hash function. There must be some performance difference here, but the article didn’t discuss it. Since hash functions are usually fast enough and our tables don’t have many keys (so collisions are rare), it might not be a significant difference when reflecting on *overall performance*. It would need actual benchmarking to know for sure.\r\n3. Except for indexing, the main effect of storing values in the hash part instead of the array part is increased memory usage. For modern environments where nvim runs, the difference should still be negligible.\r\n4. The biggest performance concern is *rehashing*. This can happen for both the array and hash parts, but only when inserting new keys. Because of this, I changed the metatable creation to the following form:\r\n   ```lua\r\n   self = setmetatable({\r\n     start = start,\r\n     end_ = end_,\r\n   }, self)\r\n   ```\r\n   instead of:\r\n   ```lua\r\n   self = setmetatable({}, self)\r\n   self.start = start\r\n   self.end_ = end_\r\n   ```\r\n\r\nSo, my conclusion is that the performance issue mainly comes from we are storing actual values in the hash part rather than the array part, which could make indexing slower. To address this, the API could store `row` and `col` as `[1]` and `[2]`. The use of OOP style is also a factor affecting performance, but this should also be related to indexing time. We can look into whether that’s worth doing. Please correct me if I’m wrong.\r\n\r\nI’m not saying that `vim.Range` must be used everywhere, but I’d like to make it as broadly useful as possible instead of adding an API that comes with too many restrictions or pitfalls. The semantic tokens refactor was only because its tests looked relatively complete. Since it seems controversial and not very valuable, I’ll separate that part out of this PR to make sure this PR can go forward first.\r\n\r\n> IMO the constructs introduced in this PR do not significantly improve any of our current code\r\n\r\nMy main focus is on LSP, and because LSP clients don’t always share the same `position_encoding`, every `lsp.Position` must be converted upon receiving. An API that provides a “standard” struct helps avoid potential issues there (see https://github.com/neovim/neovim/issues/25509#issuecomment-3066613525).\r\n",
            "created_at": "2025-08-16T04:41:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3193380832",
            "id": 3193380832,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-Vx_g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193380832/reactions"
            },
            "updated_at": "2025-08-16T04:53:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193380832",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Avoiding too much table nesting. Currently, Range uses one Range containing two Pos objects. This means creating a new Range will allocate at least three new tables. I think this suggests we might want Range to directly hold fields like start_row instead of using start.row. We could then provide methods to construct a vim.Pos only when needed, rather than storing them directly.\n\n:+1:\n\n> Lua tables have an array part and a hash part. The array part uses direct indexing, while the hash part indexes via a hash function. There must be some performance difference here, but the article didn’t discuss it. Since hash functions are usually fast enough and our tables don’t have many keys (so collisions are rare), it might not be a significant difference when reflecting on overall performance. It would need actual benchmarking to know for sure.\n\nIndexing is direct memory access using an offset into an array, perf is almost nothing and will be highly dependent on that state of CPU cache. A hash lookup is significantly more than this. If you create a simple benchmark that compares this, this should be clear. Obviously only real world applications matter, but for generic low level structures we need to keep this in mind and use indexing wherever we can.\n\nSo far the main convention for using positions and ranges is just by passing 2 or 4 numbers which is as ideal as it can get in regards to perf.\n\n> Except for indexing, the main effect of storing values in the hash part instead of the array part is increased memory usage. For modern environments where nvim runs, the difference should still be negligible.\n\nThe amount of memory doesn't matter. What does matter is cache hits/misses. If you're using more memory then you need then you increase the chances of cache misses.\n\n> The biggest performance concern is rehashing. \n\nFor classes with defined fields, this actually isn't too much of a problem, LuaJIT might even be able to handle small amounts for fields without rehashing. Though the change suggested is still worth doing.",
            "created_at": "2025-08-16T10:19:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3193564419",
            "id": 3193564419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-We0D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193564419/reactions"
            },
            "updated_at": "2025-08-16T10:19:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193564419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've removed the semantic token refactoring from this PR and renamed the conversion API to `lsp()` and `to_lsp`. Can we merge this before we do more performance exploration mentioned above? Just ensure it's been used somewhere in our codebase for more test coverage. I have two feature PRs in progress that will use this functionality.",
            "created_at": "2025-08-17T04:30:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3194120596",
            "id": 3194120596,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-YmmU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194120596/reactions"
            },
            "updated_at": "2025-08-17T04:30:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194120596",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Merging to unblock. Fantastic work!\r\n\r\n> the API could store `row` and `col` as `[1]` and `[2]`\r\n\r\nNo objection to that if you / @lewis6991 think that's worth doing. Also for Range it would avoid the `end_` name :)",
            "created_at": "2025-08-17T20:37:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3194636995",
            "id": 3194636995,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-akrD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194636995/reactions"
            },
            "updated_at": "2025-08-17T20:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194636995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "To expand on the performance concern that Lewis brought up: For the LSP case we should also keep it an option to do the conversion lazy. Eagerly converting all positions if only a subset is needed is wasteful. The current API looks a bit as if it will promote eager conversions but I guess we'll see that once this gets actually used.",
            "created_at": "2025-08-18T10:03:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3196010211",
            "id": 3196010211,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-fz7j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3196010211/reactions"
            },
            "updated_at": "2025-08-18T10:03:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3196010211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": " I think we have reached a consensus not to nest `Pos` in `Range`. So there are two more things to be determined:\r\n\r\n1. Consider using `[1]` and `[2]` instead of `row` and `col` to store coordinates;\r\n2. Consider lazy conversion.\r\n\r\nIf we want to achieve both of the above improvements at the same time, the API I envision is:\r\n\r\n1. Use `[1]` and `[2]` to store coordinates, but these fields are private, and they may be `nil` when the conversion is expensive.\r\n2. Provide `row` and `col` as public fields, actually using `__index` to implement them, which will get `[1]` and `[2]` or do perform the conversion, then assign `[1]` and `[2]` when they are `nil`. Or getters like `row()` and `col()` to imply that these fields are read-only. However, I'm unsure if this will result in more performance overhead.\r\n\r\nThis seems to have more readability than simply using array indexing, and it seems compatible with the current API if getters aren't used instead.",
            "created_at": "2025-08-18T11:38:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/35109#issuecomment-3196292979",
            "id": 3196292979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
            "node_id": "IC_kwDOAPphoM6-g49z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3196292979/reactions"
            },
            "updated_at": "2025-08-18T11:46:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3196292979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35109/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35109/commits",
    "created_at": "2025-07-30T14:40:05Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35109.diff",
    "draft": false,
    "head": {
        "label": "ofseed:feat-pos",
        "ref": "feat-pos",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ofseed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ofseed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ofseed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ofseed/neovim/branches{/branch}",
            "clone_url": "https://github.com/ofseed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ofseed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ofseed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ofseed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ofseed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ofseed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ofseed/neovim/contributors",
            "created_at": "2021-11-30T18:13:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ofseed/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ofseed/neovim/downloads",
            "events_url": "https://api.github.com/repos/ofseed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ofseed/neovim/forks",
            "full_name": "ofseed/neovim",
            "git_commits_url": "https://api.github.com/repos/ofseed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ofseed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ofseed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ofseed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ofseed/neovim/hooks",
            "html_url": "https://github.com/ofseed/neovim",
            "id": 433537354,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ofseed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ofseed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ofseed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ofseed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ofseed/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ofseed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ofseed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ofseed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGddBSg",
            "notifications_url": "https://api.github.com/repos/ofseed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ofseed/neovim/pulls{/number}",
            "pushed_at": "2025-08-18T15:46:14Z",
            "releases_url": "https://api.github.com/repos/ofseed/neovim/releases{/id}",
            "size": 329291,
            "ssh_url": "git@github.com:ofseed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ofseed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ofseed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ofseed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ofseed/neovim/subscription",
            "svn_url": "https://github.com/ofseed/neovim",
            "tags_url": "https://api.github.com/repos/ofseed/neovim/tags",
            "teams_url": "https://api.github.com/repos/ofseed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ofseed/neovim/git/trees{/sha}",
            "updated_at": "2025-08-18T12:19:37Z",
            "url": "https://api.github.com/repos/ofseed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
            "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofseed/followers",
            "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofseed",
            "id": 61115159,
            "login": "ofseed",
            "node_id": "MDQ6VXNlcjYxMTE1MTU5",
            "organizations_url": "https://api.github.com/users/ofseed/orgs",
            "received_events_url": "https://api.github.com/users/ofseed/received_events",
            "repos_url": "https://api.github.com/users/ofseed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofseed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35109",
    "id": 2707431934,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35109",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "d8ed43c6a70899117dc07a807d14a10b4dcc833c",
    "merged_at": "2025-08-17T20:37:56Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6hYCH-",
    "number": 35109,
    "patch_url": "https://github.com/neovim/neovim/pull/35109.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35109/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/9f5b309d824a7b8a7496fbd23b54d96798a4f2c2",
    "title": "feat(lua): add `vim.pos`/`vim.range`",
    "updated_at": "2025-08-18T17:38:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35109",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}