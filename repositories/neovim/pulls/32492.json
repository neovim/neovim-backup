{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32492/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32492/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/32492"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32492"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32492/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32492"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/873d6b29d3e58e1a00d3ecb481384a0d40790e77"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5893,
            "forks_count": 5893,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1874,
            "open_issues_count": 1874,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-02-25T01:17:51Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 309174,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 86583,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-02-25T02:27:01Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 86583,
            "watchers_count": 86583,
            "web_commit_signoff_required": false
        },
        "sha": "5d03060743da195ad2942201eed16708377c1a43",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\r\nlua-bit is built-in, but there is no doc\r\n\r\nSolution:\r\nUpstream doc from https://bitop.luajit.org/",
    "closed_at": "2025-02-19T18:09:10Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32492#discussion_r1958437035"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32492"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958437035"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n`require(\"bit\")`. See |lua-bit|.\r\n```",
            "commit_id": "873d6b29d3e58e1a00d3ecb481384a0d40790e77",
            "created_at": "2025-02-17T15:39:31Z",
            "diff_hunk": "@@ -46,10 +46,9 @@ before using them: >lua\n     -- code for plain lua 5.1\n   end\n <\n-                                                                  *lua-bit*\n One exception is the LuaJIT `bit` extension, which is always available: when\n built with PUC Lua, Nvim includes a fallback implementation which provides\n-`require(\"bit\")`.\n+`require(\"bit\")`. See |lua-bit.txt| for details.",
            "html_url": "https://github.com/neovim/neovim/pull/32492#discussion_r1958437035",
            "id": 1958437035,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM50u2Cr",
            "original_commit_id": "a250d840459d0fa8bb595a448afa4aef619b309b",
            "original_line": 51,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2621399834,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32492",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958437035/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-17T15:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958437035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32492#discussion_r1958437880"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32492"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958437880"
                }
            },
            "author_association": "MEMBER",
            "body": "don't need a help tag for this",
            "commit_id": "873d6b29d3e58e1a00d3ecb481384a0d40790e77",
            "created_at": "2025-02-17T15:40:08Z",
            "diff_hunk": "@@ -0,0 +1,385 @@\n+*lua-bit.txt*           Nvim\n+                                                                *lua-bit*\n+\n+                             LUA REFERENCE MANUAL\n+\n+\n+                    Adapted from <https://bitop.luajit.org>\n+\n+\n+Lua BitOp is a C extension module for Lua 5.1/5.2 which adds bitwise\n+operations on numbers.\n+\n+\t\t\t\t\tType |gO| to see the table of contents.\n+\n+==============================================================================\n+API FUNCTIONS                                                    *lua-bit-api*\n+\n+This list of API functions is not intended to replace a tutorial. If you are\n+not familiar with the terms used, you may want to study the Wikipedia article\n+on bitwise operations (https://en.wikipedia.org/wiki/Bitwise_operation) first.\n+\n+------------------------------------------------------------------------------\n+Loading the BitOp module\n+                                                               *lua-bit-module*\n+\n+The suggested way to use the BitOp module is to add the following to the start\n+of every Lua file that needs one of its functions: >lua\n+    local bit = require(\"bit\")\n+<\n+This makes the dependency explicit, limits the scope to the current file and\n+provides faster access to the bit.* functions, too. It's good programming\n+practice not to rely on the global variable bit being set (assuming some other\n+part of your application has already loaded the module). The require function\n+ensures the module is only loaded once, in any case.\n+\n+------------------------------------------------------------------------------\n+Defining Shortcuts ~\n+                                                            *lua-bit-shortcuts*\n+\n+It's a common (but not a required) practice to cache often used module\n+functions in locals. This serves as a shortcut to save some typing and also\n+speeds up resolving them (only relevant if called hundreds of thousands of\n+times).\n+>lua\n+    local bnot = bit.bnot\n+    local band, bor, bxor = bit.band, bit.bor, bit.bxor\n+    local lshift, rshift, rol = bit.lshift, bit.rshift, bit.rol\n+    -- etc...\n+\n+    -- Example use of the shortcuts:\n+    local function tr_i(a, b, c, d, x, s)\n+      return rol(bxor(c, bor(b, bnot(d))) + a + x, s) + b\n+    end\n+<\n+\n+Remember that `and`, `or` and `not` are reserved keywords in Lua. They cannot\n+be used for variable names or literal field names. That's why the\n+corresponding bitwise functions have been named `band`, `bor`, and `bnot` (and\n+`bxor` for consistency).\n+\n+While we are at it: a common pitfall is to use bit as the name of a local\n+temporary variable — well, don't! :-)\n+\n+------------------------------------------------------------------------------\n+About the Examples\n+\n+The examples below show small Lua one-liners. Their expected output is shown\n+after `-->`. This is interpreted as a comment marker by Lua so you can cut &\n+paste the whole line to a Lua prompt and experiment with it.\n+\n+Note that all bit operations return signed 32 bit numbers (rationale). And\n+these print as signed decimal numbers by default.\n+\n+For clarity the examples assume the definition of a helper function\n+`printx()`. This prints its argument as an unsigned 32 bit hexadecimal number\n+on all platforms:\n+>lua\n+    function printx(x)\n+      print(\"0x\"..bit.tohex(x))\n+    end\n+<\n+------------------------------------------------------------------------------\n+Bit operations\n+                                                                    *lua-bitop*\n+\n+y = bit.tobit(x)                                                   *bit.tobit()*\n+    Normalizes a number to the numeric range for bit operations and returns\n+    it. This function is usually not needed since all bit operations already\n+    normalize all of their input arguments. Check the |luabit-semantics| for\n+    details.\n+\n+    Example: >lua\n+\tprint(0xffffffff)                --> 4294967295 (*)\n+\tprint(bit.tobit(0xffffffff))     --> -1\n+\tprintx(bit.tobit(0xffffffff))    --> 0xffffffff\n+\tprint(bit.tobit(0xffffffff + 1)) --> 0\n+\tprint(bit.tobit(2^40 + 1234))    --> 1234\n+<\n+    (*) See the treatment of |lua-bit-hex-literals| for an explanation why the\n+    printed numbers in the first two lines differ (if your Lua installation\n+    uses a double number type).\n+\n+y = bit.tohex(x [,n])\t\t\t\t\t\t*bit.tohex()*\n+    Converts its first argument to a hex string. The number of hex digits is\n+    given by the absolute value of the optional second argument. Positive\n+    numbers between 1 and 8 generate lowercase hex digits. Negative numbers\n+    generate uppercase hex digits. Only the least-significant `4*|n|` bits are\n+    used. The default is to generate 8 lowercase hex digits.\n+\n+    Example: >lua\n+\tprint(bit.tohex(1))              --> 00000001\n+\tprint(bit.tohex(-1))             --> ffffffff\n+\tprint(bit.tohex(0xffffffff))     --> ffffffff\n+\tprint(bit.tohex(-1, -8))         --> FFFFFFFF\n+\tprint(bit.tohex(0x21, 4))        --> 0021\n+\tprint(bit.tohex(0x87654321, 4))  --> 4321\n+<\n+y = bit.bnot(x)\t\t\t\t\t\t\t*bit.bnot()*\n+    Returns the bitwise `not` of its argument.\n+\n+    Example: >lua\n+\tprint(bit.bnot(0))            --> -1\n+\tprintx(bit.bnot(0))           --> 0xffffffff\n+\tprint(bit.bnot(-1))           --> 0\n+\tprint(bit.bnot(0xffffffff))   --> 0\n+\tprintx(bit.bnot(0x12345678))  --> 0xedcba987\n+<\n+y = bit.bor(x1 [,x2...])\t\t\t\t\t*bit.bor()*\n+y = bit.band(x1 [,x2...])\t\t\t\t\t*bit.band()*\n+y = bit.bxor(x1 [,x2...])\t\t\t\t\t*bit.bxor()*\n+    Returns either the bitwise `or`, bitwise `and`, or bitwise `xor` of all of its\n+    arguments. Note that more than two arguments are allowed.\n+\n+    Example: >lua\n+\tprint(bit.bor(1, 2, 4, 8))                --> 15\n+\tprintx(bit.band(0x12345678, 0xff))        --> 0x00000078\n+\tprintx(bit.bxor(0xa5a5f0f0, 0xaa55ff00))  --> 0x0ff00ff0\n+<\n+y = bit.lshift(x, n)\t\t\t\t\t\t*bit.lshift()*\n+y = bit.rshift(x, n)\t\t\t\t\t\t*bit.rshift()*\n+y = bit.arshift(x, n)\t\t\t\t\t\t*bit.arshift()*\n+    Returns either the bitwise `logical left-shift`, bitwise `logical`\n+    `right-shift`, or bitwise `arithmetic right-shift` of its first argument\n+    by the number of bits given by the second argument.\n+\n+    Logical shifts treat the first argument as an unsigned number and shift in\n+    0-bits. Arithmetic right-shift treats the most-significant bit as a sign\n+    bit and replicates it. Only the lower 5 bits of the shift count are used\n+    (reduces to the range [0..31]).\n+\n+    Example: >lua\n+\tprint(bit.lshift(1, 0))              --> 1\n+\tprint(bit.lshift(1, 8))              --> 256\n+\tprint(bit.lshift(1, 40))             --> 256\n+\tprint(bit.rshift(256, 8))            --> 1\n+\tprint(bit.rshift(-256, 8))           --> 16777215\n+\tprint(bit.arshift(256, 8))           --> 1\n+\tprint(bit.arshift(-256, 8))          --> -1\n+\tprintx(bit.lshift(0x87654321, 12))   --> 0x54321000\n+\tprintx(bit.rshift(0x87654321, 12))   --> 0x00087654\n+\tprintx(bit.arshift(0x87654321, 12))  --> 0xfff87654\n+<\n+y = bit.rol(x, n)\t\t\t\t\t\t*bit.rol()*\n+y = bit.ror(x, n)\t\t\t\t\t\t*bit.ror()*\n+    Returns either the bitwise `left rotation`, or bitwise `right rotation` of its\n+    first argument by the number of bits given by the second argument. Bits\n+    shifted out on one side are shifted back in on the other side.\n+\n+    Only the lower 5 bits of the rotate count are used (reduces to the range\n+    [0..31]).\n+\n+    Example: >lua\n+\tprintx(bit.rol(0x12345678, 12))   --> 0x45678123\n+\tprintx(bit.ror(0x12345678, 12))   --> 0x67812345\n+<\n+y = bit.bswap(x)\n+    Swaps the bytes of its argument and returns it. This can be used to\n+    convert little-endian 32 bit numbers to big-endian 32 bit numbers or vice\n+    versa.\n+\n+    Example: >lua\n+\tprintx(bit.bswap(0x12345678)) --> 0x78563412\n+\tprintx(bit.bswap(0x78563412)) --> 0x12345678\n+<\n+------------------------------------------------------------------------------\n+Example Program\n+\n+This is an implementation of the (naïve) Sieve of Eratosthenes algorithm. It\n+counts the number of primes up to some maximum number.\n+\n+A Lua table is used to hold a bit-vector. Every array index has 32 bits of the\n+vector. Bitwise operations are used to access and modify them. Note that the\n+shift counts don't need to be masked since this is already done by the BitOp\n+shift and rotate functions.\n+>lua\n+    local bit = require(\"bit\")\n+    local band, bxor = bit.band, bit.bxor\n+    local rshift, rol = bit.rshift, bit.rol\n+\n+    local m = tonumber(arg and arg[1]) or 100000\n+    if m < 2 then m = 2 end\n+    local count = 0\n+    local p = {}\n+\n+    for i=0,(m+31)/32 do p[i] = -1 end\n+\n+    for i=2,m do\n+      if band(rshift(p[rshift(i, 5)], i), 1) ~= 0 then\n+\tcount = count + 1\n+\tfor j=i+i,m,i do\n+\t  local jx = rshift(j, 5)\n+\t  p[jx] = band(p[jx], rol(-2, j))\n+\tend\n+      end\n+    end\n+\n+    io.write(string.format(\"Found %d primes up to %d\\n\", count, m))\n+<\n+Lua BitOp is quite fast. This program runs in less than 90 milliseconds on a 3\n+GHz CPU with a standard Lua installation, but performs more than a million\n+calls to bitwise functions. If you're looking for even more speed, check out\n+|lua-luajit|.\n+\n+------------------------------------------------------------------------------\n+Caveats                                                      *lua-bit-caveats*\n+\n+Signed Results ~\n+\n+Returning signed numbers from bitwise operations may be surprising to\n+programmers coming from other programming languages which have both signed and\n+unsigned types. But as long as you treat the results of bitwise operations\n+uniformly everywhere, this shouldn't cause any problems.\n+\n+Preferably format results with `bit.tohex` if you want a reliable unsigned\n+string representation. Avoid the `\"%x\"` or `\"%u\"` formats for `string.format`. They\n+fail on some architectures for negative numbers and can return more than 8 hex\n+digits on others.\n+\n+You may also want to avoid the default number to string coercion, since this\n+is a signed conversion. The coercion is used for string concatenation and all\n+standard library functions which accept string arguments (such as `print()` or\n+`io.write()`).\n+\n+Conditionals ~\n+\n+If you're transcribing some code from C/C++, watch out for bit operations in\n+conditionals. In C/C++ any non-zero value is implicitly considered as `true`.\n+E.g. this C code: >c\n+    if (x & 3) ...\n+<\n+must not be turned into this Lua code: >lua\n+    if band(x, 3) then ... -- wrong!\n+<\n+In Lua all objects except `nil` and `false` are considered `true`. This\n+includes all numbers. An explicit comparison against zero is required in this\n+case: >lua\n+    if band(x, 3) ~= 0 then ... -- correct!\n+\n+Comparing Against Hex Literals ~\n+\n+Comparing the results of bitwise operations (signed numbers) against hex\n+literals (unsigned numbers) needs some additional care. The following\n+conditional expression may or may not work right, depending on the platform\n+you run it on: >lua\n+    bit.bor(x, 1) == 0xffffffff\n+<\n+E.g. it's never true on a Lua installation with the default number type. Some\n+simple solutions:\n+\n+    Never use hex literals larger than 0x7fffffff in comparisons: >lua\n+\tbit.bor(x, 1) == -1\n+<\n+    Or convert them with bit.tobit() before comparing: >lua\n+\tbit.bor(x, 1) == bit.tobit(0xffffffff)\n+<\n+    Or use a generic workaround with bit.bxor(): >lua\n+\tbit.bxor(bit.bor(x, 1), 0xffffffff) == 0\n+<\n+    Or use a case-specific workaround: >lua\n+\tbit.rshift(x, 1) == 0x7fffffff\n+<\n+==============================================================================\n+OPERATIONAL SEMANTICS AND RATIONALE                        *lua-bit-semantics*\n+\n+\n+Input and Output Ranges ~\n+                                                          *lua-bit-io-ranges*\n+\n+Bitwise operations cannot sensibly be applied to FP numbers (or their\n+underlying bit patterns). They must be converted to integers before operating\n+on them and then back to FP numbers.\n+\n+It's desirable to define semantics that work the same across all platforms.\n+This dictates that all operations are based on the common denominator of 32\n+bit integers. The `float` type provides only 24 bits of precision. This makes it\n+unsuitable for use in bitwise operations. Lua BitOp refuses to compile against\n+a Lua installation with this number type.\n+\n+Bit operations only deal with the underlying bit patterns and generally ignore\n+signedness (except for arithmetic right-shift). They are commonly displayed\n+and treated like unsigned numbers, though.\n+\n+But the Lua number type must be signed and may be limited to 32 bits. Defining\n+the result type as an unsigned number would not be cross-platform safe. All\n+bit operations are thus defined to return results in the range of signed 32\n+bit numbers (converted to the Lua number type).\n+\n+                                                        *lua-bit-hex-literals*\n+Hexadecimal literals are treated as unsigned numbers by the Lua parser before\n+converting them to the Lua number type. This means they can be out of the\n+range of signed 32 bit integers if the Lua number type has a greater range.\n+E.g. 0xffffffff has a value of 4294967295 in the default installation, but may\n+be -1 on embedded systems. It's highly desirable that hex literals are treated\n+uniformly across systems when used in bitwise operations. All bit operations\n+accept arguments in the signed or the unsigned 32 bit range (and more, see\n+below). Numbers with the same underlying bit pattern are treated the same by\n+all operations.\n+\n+\n+Modular Arithmetic ~\n+                                                        *lua-bit-modular-arith*\n+\n+Arithmetic operations on n-bit integers are usually based on the rules of\n+modular arithmetic modulo 2^n. Numbers wrap around when the mathematical result\n+of operations is outside their defined range. This simplifies hardware\n+implementations and some algorithms actually require this behavior (like many\n+cryptographic functions).\n+\n+E.g. for 32 bit integers the following holds: `0xffffffff + 1 = 0`\n+\n+Arithmetic modulo 2^32 is trivially available if the Lua number type is a 32\n+bit integer. Otherwise normalization steps must be inserted. Modular\n+arithmetic should work the same across all platforms as far as possible:\n+\n+- For the default number type of double, arguments can be in the range of\n+  ±2^51 and still be safely normalized across all platforms by taking their\n+  least-significant 32 bits. The limit is derived from the way doubles are\n+  converted to integers.\n+- The function bit.tobit can be used to explicitly normalize numbers to\n+  implement modular addition or subtraction. E.g. >lua\n+\t\tbit.tobit(0xffffffff + 1)\n+  returns 0 on all platforms.\n+- The limit on the argument range implies that modular multiplication is\n+  usually restricted to multiplying already normalized numbers with small\n+  constants. FP numbers are limited to 53 bits of precision, anyway. E.g.\n+  (2^30+1)^2 does not return an odd number when computed with doubles.\n+\n+BTW: The `tr_i` function shown here |lua-bit-shortcuts| is one of the\n+non-linear functions of the (flawed) MD5 cryptographic hash and relies on\n+modular arithmetic for correct operation. The result is fed back to other\n+bitwise operations (not shown) and does not need to be normalized until the\n+last step.\n+\n+\n+Restricted and undefined behaviors ~\n+                                                      *lua-bit-restrictions*\n+\n+The following rules are intended to give a precise and useful definition (for\n+the programmer), yet give the implementation (interpreter and compiler) the\n+maximum flexibility and the freedom to apply advanced optimizations. It's\n+strongly advised not to rely on undefined or implementation-defined behavior.\n+\n+- All kinds of floating-point numbers are acceptable to the bitwise\n+  operations. None of them cause an error, but some may invoke undefined\n+  behavior:\n+\t- -0 is treated the same as +0 on input and is never returned as a result.\n+\t- Passing ±Inf, NaN or numbers outside the range of ±2^51 as input yields\n+\t  an undefined result.\n+\t- Non-integral numbers may be rounded or truncated in an\n+\t  implementation-defined way. This means the result could differ between\n+\t  different BitOp versions, different Lua VMs, on different platforms or\n+\t  even between interpreted vs. compiled code (as in |LuaJIT|). Avoid\n+\t  passing fractional numbers to bitwise functions. Use `math.floor()` or\n+\t  `math.ceil()` to get defined behavior.\n+- Lua provides auto-coercion of string arguments to numbers by default. This\n+  behavior is deprecated for bitwise operations.\n+\n+==============================================================================\n+COPYRIGHT                                                   *lua-bit-copyright*",
            "html_url": "https://github.com/neovim/neovim/pull/32492#discussion_r1958437880",
            "id": 1958437880,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM50u2P4",
            "original_commit_id": "a250d840459d0fa8bb595a448afa4aef619b309b",
            "original_line": 379,
            "original_position": 379,
            "original_start_line": null,
            "path": "runtime/doc/lua-bit.txt",
            "position": null,
            "pull_request_review_id": 2621401254,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32492",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958437880/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-17T15:40:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958437880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32492#discussion_r1958439078"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32492"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958439078"
                }
            },
            "author_association": "MEMBER",
            "body": "please `:%retab` to avoid tab chars.",
            "commit_id": "873d6b29d3e58e1a00d3ecb481384a0d40790e77",
            "created_at": "2025-02-17T15:40:57Z",
            "diff_hunk": "@@ -0,0 +1,385 @@\n+*lua-bit.txt*           Nvim\n+                                                                *lua-bit*\n+\n+                             LUA REFERENCE MANUAL\n+\n+\n+                    Adapted from <https://bitop.luajit.org>\n+\n+\n+Lua BitOp is a C extension module for Lua 5.1/5.2 which adds bitwise\n+operations on numbers.\n+\n+\t\t\t\t\tType |gO| to see the table of contents.\n+\n+==============================================================================\n+API FUNCTIONS                                                    *lua-bit-api*\n+\n+This list of API functions is not intended to replace a tutorial. If you are\n+not familiar with the terms used, you may want to study the Wikipedia article\n+on bitwise operations (https://en.wikipedia.org/wiki/Bitwise_operation) first.\n+\n+------------------------------------------------------------------------------\n+Loading the BitOp module\n+                                                               *lua-bit-module*\n+\n+The suggested way to use the BitOp module is to add the following to the start\n+of every Lua file that needs one of its functions: >lua\n+    local bit = require(\"bit\")\n+<\n+This makes the dependency explicit, limits the scope to the current file and\n+provides faster access to the bit.* functions, too. It's good programming\n+practice not to rely on the global variable bit being set (assuming some other\n+part of your application has already loaded the module). The require function\n+ensures the module is only loaded once, in any case.\n+\n+------------------------------------------------------------------------------\n+Defining Shortcuts ~\n+                                                            *lua-bit-shortcuts*\n+\n+It's a common (but not a required) practice to cache often used module\n+functions in locals. This serves as a shortcut to save some typing and also\n+speeds up resolving them (only relevant if called hundreds of thousands of\n+times).\n+>lua\n+    local bnot = bit.bnot\n+    local band, bor, bxor = bit.band, bit.bor, bit.bxor\n+    local lshift, rshift, rol = bit.lshift, bit.rshift, bit.rol\n+    -- etc...\n+\n+    -- Example use of the shortcuts:\n+    local function tr_i(a, b, c, d, x, s)\n+      return rol(bxor(c, bor(b, bnot(d))) + a + x, s) + b\n+    end\n+<\n+\n+Remember that `and`, `or` and `not` are reserved keywords in Lua. They cannot\n+be used for variable names or literal field names. That's why the\n+corresponding bitwise functions have been named `band`, `bor`, and `bnot` (and\n+`bxor` for consistency).\n+\n+While we are at it: a common pitfall is to use bit as the name of a local\n+temporary variable — well, don't! :-)\n+\n+------------------------------------------------------------------------------\n+About the Examples\n+\n+The examples below show small Lua one-liners. Their expected output is shown\n+after `-->`. This is interpreted as a comment marker by Lua so you can cut &\n+paste the whole line to a Lua prompt and experiment with it.\n+\n+Note that all bit operations return signed 32 bit numbers (rationale). And\n+these print as signed decimal numbers by default.\n+\n+For clarity the examples assume the definition of a helper function\n+`printx()`. This prints its argument as an unsigned 32 bit hexadecimal number\n+on all platforms:\n+>lua\n+    function printx(x)\n+      print(\"0x\"..bit.tohex(x))\n+    end\n+<\n+------------------------------------------------------------------------------\n+Bit operations\n+                                                                    *lua-bitop*\n+\n+y = bit.tobit(x)                                                   *bit.tobit()*\n+    Normalizes a number to the numeric range for bit operations and returns\n+    it. This function is usually not needed since all bit operations already\n+    normalize all of their input arguments. Check the |luabit-semantics| for\n+    details.\n+\n+    Example: >lua\n+\tprint(0xffffffff)                --> 4294967295 (*)\n+\tprint(bit.tobit(0xffffffff))     --> -1\n+\tprintx(bit.tobit(0xffffffff))    --> 0xffffffff\n+\tprint(bit.tobit(0xffffffff + 1)) --> 0\n+\tprint(bit.tobit(2^40 + 1234))    --> 1234\n+<\n+    (*) See the treatment of |lua-bit-hex-literals| for an explanation why the\n+    printed numbers in the first two lines differ (if your Lua installation\n+    uses a double number type).\n+\n+y = bit.tohex(x [,n])\t\t\t\t\t\t*bit.tohex()*\n+    Converts its first argument to a hex string. The number of hex digits is\n+    given by the absolute value of the optional second argument. Positive\n+    numbers between 1 and 8 generate lowercase hex digits. Negative numbers\n+    generate uppercase hex digits. Only the least-significant `4*|n|` bits are\n+    used. The default is to generate 8 lowercase hex digits.\n+\n+    Example: >lua\n+\tprint(bit.tohex(1))              --> 00000001\n+\tprint(bit.tohex(-1))             --> ffffffff\n+\tprint(bit.tohex(0xffffffff))     --> ffffffff\n+\tprint(bit.tohex(-1, -8))         --> FFFFFFFF\n+\tprint(bit.tohex(0x21, 4))        --> 0021\n+\tprint(bit.tohex(0x87654321, 4))  --> 4321\n+<\n+y = bit.bnot(x)\t\t\t\t\t\t\t*bit.bnot()*\n+    Returns the bitwise `not` of its argument.\n+\n+    Example: >lua\n+\tprint(bit.bnot(0))            --> -1\n+\tprintx(bit.bnot(0))           --> 0xffffffff\n+\tprint(bit.bnot(-1))           --> 0\n+\tprint(bit.bnot(0xffffffff))   --> 0\n+\tprintx(bit.bnot(0x12345678))  --> 0xedcba987\n+<\n+y = bit.bor(x1 [,x2...])\t\t\t\t\t*bit.bor()*\n+y = bit.band(x1 [,x2...])\t\t\t\t\t*bit.band()*\n+y = bit.bxor(x1 [,x2...])\t\t\t\t\t*bit.bxor()*\n+    Returns either the bitwise `or`, bitwise `and`, or bitwise `xor` of all of its\n+    arguments. Note that more than two arguments are allowed.\n+\n+    Example: >lua\n+\tprint(bit.bor(1, 2, 4, 8))                --> 15\n+\tprintx(bit.band(0x12345678, 0xff))        --> 0x00000078\n+\tprintx(bit.bxor(0xa5a5f0f0, 0xaa55ff00))  --> 0x0ff00ff0\n+<\n+y = bit.lshift(x, n)\t\t\t\t\t\t*bit.lshift()*\n+y = bit.rshift(x, n)\t\t\t\t\t\t*bit.rshift()*\n+y = bit.arshift(x, n)\t\t\t\t\t\t*bit.arshift()*\n+    Returns either the bitwise `logical left-shift`, bitwise `logical`\n+    `right-shift`, or bitwise `arithmetic right-shift` of its first argument\n+    by the number of bits given by the second argument.\n+\n+    Logical shifts treat the first argument as an unsigned number and shift in\n+    0-bits. Arithmetic right-shift treats the most-significant bit as a sign\n+    bit and replicates it. Only the lower 5 bits of the shift count are used\n+    (reduces to the range [0..31]).\n+\n+    Example: >lua\n+\tprint(bit.lshift(1, 0))              --> 1\n+\tprint(bit.lshift(1, 8))              --> 256\n+\tprint(bit.lshift(1, 40))             --> 256\n+\tprint(bit.rshift(256, 8))            --> 1\n+\tprint(bit.rshift(-256, 8))           --> 16777215\n+\tprint(bit.arshift(256, 8))           --> 1\n+\tprint(bit.arshift(-256, 8))          --> -1\n+\tprintx(bit.lshift(0x87654321, 12))   --> 0x54321000\n+\tprintx(bit.rshift(0x87654321, 12))   --> 0x00087654\n+\tprintx(bit.arshift(0x87654321, 12))  --> 0xfff87654\n+<\n+y = bit.rol(x, n)\t\t\t\t\t\t*bit.rol()*\n+y = bit.ror(x, n)\t\t\t\t\t\t*bit.ror()*\n+    Returns either the bitwise `left rotation`, or bitwise `right rotation` of its\n+    first argument by the number of bits given by the second argument. Bits\n+    shifted out on one side are shifted back in on the other side.\n+\n+    Only the lower 5 bits of the rotate count are used (reduces to the range\n+    [0..31]).\n+\n+    Example: >lua\n+\tprintx(bit.rol(0x12345678, 12))   --> 0x45678123\n+\tprintx(bit.ror(0x12345678, 12))   --> 0x67812345\n+<\n+y = bit.bswap(x)\n+    Swaps the bytes of its argument and returns it. This can be used to\n+    convert little-endian 32 bit numbers to big-endian 32 bit numbers or vice\n+    versa.\n+\n+    Example: >lua\n+\tprintx(bit.bswap(0x12345678)) --> 0x78563412\n+\tprintx(bit.bswap(0x78563412)) --> 0x12345678\n+<\n+------------------------------------------------------------------------------\n+Example Program\n+\n+This is an implementation of the (naïve) Sieve of Eratosthenes algorithm. It\n+counts the number of primes up to some maximum number.\n+\n+A Lua table is used to hold a bit-vector. Every array index has 32 bits of the\n+vector. Bitwise operations are used to access and modify them. Note that the\n+shift counts don't need to be masked since this is already done by the BitOp\n+shift and rotate functions.\n+>lua\n+    local bit = require(\"bit\")\n+    local band, bxor = bit.band, bit.bxor\n+    local rshift, rol = bit.rshift, bit.rol\n+\n+    local m = tonumber(arg and arg[1]) or 100000\n+    if m < 2 then m = 2 end\n+    local count = 0\n+    local p = {}\n+\n+    for i=0,(m+31)/32 do p[i] = -1 end\n+\n+    for i=2,m do\n+      if band(rshift(p[rshift(i, 5)], i), 1) ~= 0 then\n+\tcount = count + 1\n+\tfor j=i+i,m,i do\n+\t  local jx = rshift(j, 5)\n+\t  p[jx] = band(p[jx], rol(-2, j))\n+\tend\n+      end\n+    end\n+\n+    io.write(string.format(\"Found %d primes up to %d\\n\", count, m))\n+<\n+Lua BitOp is quite fast. This program runs in less than 90 milliseconds on a 3\n+GHz CPU with a standard Lua installation, but performs more than a million\n+calls to bitwise functions. If you're looking for even more speed, check out\n+|lua-luajit|.\n+\n+------------------------------------------------------------------------------\n+Caveats                                                      *lua-bit-caveats*\n+\n+Signed Results ~\n+\n+Returning signed numbers from bitwise operations may be surprising to\n+programmers coming from other programming languages which have both signed and\n+unsigned types. But as long as you treat the results of bitwise operations\n+uniformly everywhere, this shouldn't cause any problems.\n+\n+Preferably format results with `bit.tohex` if you want a reliable unsigned\n+string representation. Avoid the `\"%x\"` or `\"%u\"` formats for `string.format`. They\n+fail on some architectures for negative numbers and can return more than 8 hex\n+digits on others.\n+\n+You may also want to avoid the default number to string coercion, since this\n+is a signed conversion. The coercion is used for string concatenation and all\n+standard library functions which accept string arguments (such as `print()` or\n+`io.write()`).\n+\n+Conditionals ~\n+\n+If you're transcribing some code from C/C++, watch out for bit operations in\n+conditionals. In C/C++ any non-zero value is implicitly considered as `true`.\n+E.g. this C code: >c\n+    if (x & 3) ...\n+<\n+must not be turned into this Lua code: >lua\n+    if band(x, 3) then ... -- wrong!\n+<\n+In Lua all objects except `nil` and `false` are considered `true`. This\n+includes all numbers. An explicit comparison against zero is required in this\n+case: >lua\n+    if band(x, 3) ~= 0 then ... -- correct!\n+\n+Comparing Against Hex Literals ~\n+\n+Comparing the results of bitwise operations (signed numbers) against hex\n+literals (unsigned numbers) needs some additional care. The following\n+conditional expression may or may not work right, depending on the platform\n+you run it on: >lua\n+    bit.bor(x, 1) == 0xffffffff\n+<\n+E.g. it's never true on a Lua installation with the default number type. Some\n+simple solutions:\n+\n+    Never use hex literals larger than 0x7fffffff in comparisons: >lua\n+\tbit.bor(x, 1) == -1\n+<\n+    Or convert them with bit.tobit() before comparing: >lua\n+\tbit.bor(x, 1) == bit.tobit(0xffffffff)\n+<\n+    Or use a generic workaround with bit.bxor(): >lua\n+\tbit.bxor(bit.bor(x, 1), 0xffffffff) == 0\n+<\n+    Or use a case-specific workaround: >lua\n+\tbit.rshift(x, 1) == 0x7fffffff\n+<\n+==============================================================================\n+OPERATIONAL SEMANTICS AND RATIONALE                        *lua-bit-semantics*\n+\n+\n+Input and Output Ranges ~\n+                                                          *lua-bit-io-ranges*\n+\n+Bitwise operations cannot sensibly be applied to FP numbers (or their\n+underlying bit patterns). They must be converted to integers before operating\n+on them and then back to FP numbers.\n+\n+It's desirable to define semantics that work the same across all platforms.\n+This dictates that all operations are based on the common denominator of 32\n+bit integers. The `float` type provides only 24 bits of precision. This makes it\n+unsuitable for use in bitwise operations. Lua BitOp refuses to compile against\n+a Lua installation with this number type.\n+\n+Bit operations only deal with the underlying bit patterns and generally ignore\n+signedness (except for arithmetic right-shift). They are commonly displayed\n+and treated like unsigned numbers, though.\n+\n+But the Lua number type must be signed and may be limited to 32 bits. Defining\n+the result type as an unsigned number would not be cross-platform safe. All\n+bit operations are thus defined to return results in the range of signed 32\n+bit numbers (converted to the Lua number type).\n+\n+                                                        *lua-bit-hex-literals*\n+Hexadecimal literals are treated as unsigned numbers by the Lua parser before\n+converting them to the Lua number type. This means they can be out of the\n+range of signed 32 bit integers if the Lua number type has a greater range.\n+E.g. 0xffffffff has a value of 4294967295 in the default installation, but may\n+be -1 on embedded systems. It's highly desirable that hex literals are treated\n+uniformly across systems when used in bitwise operations. All bit operations\n+accept arguments in the signed or the unsigned 32 bit range (and more, see\n+below). Numbers with the same underlying bit pattern are treated the same by\n+all operations.\n+\n+\n+Modular Arithmetic ~\n+                                                        *lua-bit-modular-arith*\n+\n+Arithmetic operations on n-bit integers are usually based on the rules of\n+modular arithmetic modulo 2^n. Numbers wrap around when the mathematical result\n+of operations is outside their defined range. This simplifies hardware\n+implementations and some algorithms actually require this behavior (like many\n+cryptographic functions).\n+\n+E.g. for 32 bit integers the following holds: `0xffffffff + 1 = 0`\n+\n+Arithmetic modulo 2^32 is trivially available if the Lua number type is a 32\n+bit integer. Otherwise normalization steps must be inserted. Modular\n+arithmetic should work the same across all platforms as far as possible:\n+\n+- For the default number type of double, arguments can be in the range of\n+  ±2^51 and still be safely normalized across all platforms by taking their\n+  least-significant 32 bits. The limit is derived from the way doubles are\n+  converted to integers.\n+- The function bit.tobit can be used to explicitly normalize numbers to\n+  implement modular addition or subtraction. E.g. >lua\n+\t\tbit.tobit(0xffffffff + 1)\n+  returns 0 on all platforms.\n+- The limit on the argument range implies that modular multiplication is\n+  usually restricted to multiplying already normalized numbers with small\n+  constants. FP numbers are limited to 53 bits of precision, anyway. E.g.\n+  (2^30+1)^2 does not return an odd number when computed with doubles.\n+\n+BTW: The `tr_i` function shown here |lua-bit-shortcuts| is one of the\n+non-linear functions of the (flawed) MD5 cryptographic hash and relies on\n+modular arithmetic for correct operation. The result is fed back to other\n+bitwise operations (not shown) and does not need to be normalized until the\n+last step.\n+\n+\n+Restricted and undefined behaviors ~\n+                                                      *lua-bit-restrictions*\n+\n+The following rules are intended to give a precise and useful definition (for\n+the programmer), yet give the implementation (interpreter and compiler) the\n+maximum flexibility and the freedom to apply advanced optimizations. It's\n+strongly advised not to rely on undefined or implementation-defined behavior.\n+\n+- All kinds of floating-point numbers are acceptable to the bitwise\n+  operations. None of them cause an error, but some may invoke undefined\n+  behavior:\n+\t- -0 is treated the same as +0 on input and is never returned as a result.\n+\t- Passing ±Inf, NaN or numbers outside the range of ±2^51 as input yields",
            "html_url": "https://github.com/neovim/neovim/pull/32492#discussion_r1958439078",
            "id": 1958439078,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM50u2im",
            "original_commit_id": "a250d840459d0fa8bb595a448afa4aef619b309b",
            "original_line": 367,
            "original_position": 367,
            "original_start_line": null,
            "path": "runtime/doc/lua-bit.txt",
            "position": null,
            "pull_request_review_id": 2621403104,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32492",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958439078/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-17T15:41:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1958439078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32492#discussion_r1960752274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32492"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1960752274"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n`require(\"bit\")`. See |lua-bit|.\r\n```",
            "commit_id": "873d6b29d3e58e1a00d3ecb481384a0d40790e77",
            "created_at": "2025-02-18T23:57:02Z",
            "diff_hunk": "@@ -46,10 +46,9 @@ before using them: >lua\n     -- code for plain lua 5.1\n   end\n <\n-                                                                  *lua-bit*\n One exception is the LuaJIT `bit` extension, which is always available: when\n built with PUC Lua, Nvim includes a fallback implementation which provides\n-`require(\"bit\")`.\n+`require(\"bit\")`. See |lua-bit.txt|.",
            "html_url": "https://github.com/neovim/neovim/pull/32492#discussion_r1960752274",
            "id": 1960752274,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM503rSS",
            "original_commit_id": "71894330f3d75445922f667a2050378463197bb1",
            "original_line": 51,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2625315886,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32492",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1960752274/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-18T23:57:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1960752274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32492/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/32492/commits",
    "created_at": "2025-02-17T03:34:04Z",
    "diff_url": "https://github.com/neovim/neovim/pull/32492.diff",
    "draft": false,
    "head": {
        "label": "brianhuster:lua-bit-help",
        "ref": "lua-bit-help",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/brianhuster/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/brianhuster/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/brianhuster/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/brianhuster/neovim/branches{/branch}",
            "clone_url": "https://github.com/brianhuster/neovim.git",
            "collaborators_url": "https://api.github.com/repos/brianhuster/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/brianhuster/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/brianhuster/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/brianhuster/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/brianhuster/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/brianhuster/neovim/contributors",
            "created_at": "2025-02-01T09:06:09Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/brianhuster/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/brianhuster/neovim/downloads",
            "events_url": "https://api.github.com/repos/brianhuster/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/brianhuster/neovim/forks",
            "full_name": "brianhuster/neovim",
            "git_commits_url": "https://api.github.com/repos/brianhuster/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/brianhuster/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/brianhuster/neovim/git/tags{/sha}",
            "git_url": "git://github.com/brianhuster/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/brianhuster/neovim/hooks",
            "html_url": "https://github.com/brianhuster/neovim",
            "id": 925600113,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/brianhuster/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/brianhuster/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/brianhuster/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/brianhuster/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/brianhuster/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/brianhuster/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/brianhuster/neovim/merges",
            "milestones_url": "https://api.github.com/repos/brianhuster/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONyuJcQ",
            "notifications_url": "https://api.github.com/repos/brianhuster/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/brianhuster/neovim/pulls{/number}",
            "pushed_at": "2025-02-24T17:04:13Z",
            "releases_url": "https://api.github.com/repos/brianhuster/neovim/releases{/id}",
            "size": 301131,
            "ssh_url": "git@github.com:brianhuster/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/brianhuster/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/brianhuster/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/brianhuster/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/brianhuster/neovim/subscription",
            "svn_url": "https://github.com/brianhuster/neovim",
            "tags_url": "https://api.github.com/repos/brianhuster/neovim/tags",
            "teams_url": "https://api.github.com/repos/brianhuster/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/brianhuster/neovim/git/trees{/sha}",
            "updated_at": "2025-02-24T16:57:48Z",
            "url": "https://api.github.com/repos/brianhuster/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "873d6b29d3e58e1a00d3ecb481384a0d40790e77",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
            "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
            "followers_url": "https://api.github.com/users/brianhuster/followers",
            "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
            "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/brianhuster",
            "id": 111893501,
            "login": "brianhuster",
            "node_id": "U_kgDOBqtb_Q",
            "organizations_url": "https://api.github.com/users/brianhuster/orgs",
            "received_events_url": "https://api.github.com/users/brianhuster/received_events",
            "repos_url": "https://api.github.com/users/brianhuster/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/brianhuster",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/32492",
    "id": 2338680139,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32492",
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "a422f3393e93ae19d679520f43f38bd1c53ddf06",
    "merged_at": "2025-02-19T18:09:09Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6LZW1L",
    "number": 32492,
    "patch_url": "https://github.com/neovim/neovim/pull/32492.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/32492/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/873d6b29d3e58e1a00d3ecb481384a0d40790e77",
    "title": "docs: add doc for Lua bit library",
    "updated_at": "2025-02-19T18:09:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/32492",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
        "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
        "followers_url": "https://api.github.com/users/brianhuster/followers",
        "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
        "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/brianhuster",
        "id": 111893501,
        "login": "brianhuster",
        "node_id": "U_kgDOBqtb_Q",
        "organizations_url": "https://api.github.com/users/brianhuster/orgs",
        "received_events_url": "https://api.github.com/users/brianhuster/received_events",
        "repos_url": "https://api.github.com/users/brianhuster/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/brianhuster",
        "user_view_type": "public"
    }
}