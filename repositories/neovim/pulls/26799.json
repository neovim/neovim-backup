{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26799/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26799/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26799"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26799"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26799/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6179,
            "forks_count": 6179,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1956,
            "open_issues_count": 1956,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T22:14:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332755,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91117,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-15T02:58:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91117,
            "watchers_count": 91117,
            "web_commit_signoff_required": false
        },
        "sha": "89b946aa87d2414bd268f0766d5354cedc5702ff",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem: We are missing the option for Vim's `previewpopup`.\r\n\r\nSolution: Implement the `previewpopup` option. However, our floating window is different from Vim's, so some available keys in the `previewpopup`  differ from Vim.\r\n\r\nFix #9920 ",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1438468271"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438468271"
                }
            },
            "author_association": "MEMBER",
            "body": "parameter in here is wired. it's better make w_float_is_info to be receive flag. then use flag here. can refactor on https://github.com/neovim/neovim/pull/26739 .",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2023-12-30T04:15:57Z",
            "diff_hunk": "@@ -291,12 +296,138 @@ bool win_float_valid(const win_T *win)\n   return false;\n }\n \n-win_T *win_float_find_preview(void)\n+static void parse_title(FloatConfig *fconfig, BorderTextType bt, char *str, size_t len)\n+{\n+  Error err = ERROR_INIT;\n+  if (bt == kBorderTextTitle) {\n+    fconfig->title = true;\n+  } else {\n+    fconfig->footer = true;\n+  }\n+  Object obj = OBJECT_INIT;\n+  obj.type = kObjectTypeString;\n+  char *data = xmemdupz(str, len);\n+  obj.data.string.data = xstrdup(data);\n+  obj.data.string.size = strlen(data);\n+  parse_bordertext(obj, bt, fconfig, &err);\n+  api_free_object(obj);\n+  xfree(data);\n+}\n+\n+static void parse_title_pos(FloatConfig *fconfig, BorderTextType bt, char *s, size_t len)\n+{\n+  int start = bt == kBorderTextTitle ? 10 : 11;\n+  Error err = ERROR_INIT;\n+  String str = {\n+    .data = xmemdupz(s + start, len),\n+    .size = len + 1,\n+  };\n+  parse_bordertext_pos(str, bt, fconfig, &err);\n+  api_free_string(str);\n+}\n+\n+/// used for parse completepopup and previewpopup options\n+int parse_float_option(FloatConfig *fconfig, int *border_adj, bool preview)\n+{\n+  char *p = p_pvp;\n+  Error err = ERROR_INIT;\n+\n+  for (; *p != NUL; p += (*p == ',' ? 1 : 0)) {\n+    char *e, *dig;\n+    char *s = p;\n+\n+    e = vim_strchr(p, ':');\n+    if (e == NULL || e[1] == NUL) {\n+      return FAIL;\n+    }\n+\n+    p = vim_strchr(e, ',');\n+    if (p == NULL) {\n+      p = e + strlen(e);\n+    }\n+    dig = e + 1;\n+\n+    if (strncmp(s, \"border:\", 7) == 0) {\n+      if ((s + 7)[0] != 'd' && (s + 7)[0] != 's' && (s + 7)[0] != 'r') {\n+        return FAIL;\n+      }\n+      Object style = OBJECT_INIT;\n+      size_t len = p ? (size_t)(p - s - 7) : (size_t)(s - 7);\n+      char *data = xmemdupz(s + 7, len);\n+      style.type = kObjectTypeString;\n+      style.data.string.data = xstrdup(data);\n+      style.data.string.size = strlen(data);\n+      parse_border_style(style, fconfig, &err);\n+      int border_attr = syn_name2attr(\"FloatBorder\");\n+      for (int i = 0; i < 8; i++) {\n+        fconfig->border_attr[i] = fconfig->border_hl_ids[i]\n+                                  ? hl_get_ui_attr(0, HLF_BORDER, fconfig->border_hl_ids[i], false)\n+                                  : border_attr;\n+        if (i < 4 && fconfig->border_chars[2 * i + 1][0]) {\n+          border_adj[i] = 1;\n+        }\n+      }\n+      api_free_object(style);\n+      xfree(data);\n+    } else if (strncmp(s, \"title:\", 6) == 0) {\n+      size_t len = p ? (size_t)(p - s - 6) : (size_t)(s - 6);\n+      parse_title(fconfig, kBorderTextTitle, s + 6, len);\n+    } else if (strncmp(s, \"title_pos:\", 10) == 0) {\n+      size_t len = p ? (size_t)(p - s - 10) : (size_t)(s - 10);\n+      parse_title_pos(fconfig, kBorderTextTitle, s, len);\n+    } else if (strncmp(s, \"footer:\", 7) == 0) {\n+      size_t len = p ? (size_t)(p - s - 7) : (size_t)(s - 7);\n+      parse_title(fconfig, kBorderTextFooter, s + 7, len);\n+    } else if (strncmp(s, \"footer_pos:\", 11) == 0) {\n+      size_t len = p ? (size_t)(p - s - 11) : (size_t)(s - 11);\n+      parse_title_pos(fconfig, kBorderTextFooter, s, len);\n+    } else if (preview && strncmp(s, \"height:\", 7) == 0) {\n+      fconfig->height = getdigits_int(&dig, false, 0);\n+    } else if (preview && strncmp(s, \"width:\", 6) == 0) {\n+      fconfig->width = getdigits_int(&dig, false, 0);\n+    } else if (preview && strncmp(s, \"style:\", 6) == 0) {\n+      if ((s + 6)[0] != 'm') {\n+        return FAIL;\n+      }\n+      fconfig->style = kWinStyleMinimal;\n+    } else {\n+      return FAIL;\n+    }\n+  }\n+\n+  return OK;\n+}\n+\n+win_T *win_float_find_preview(bool find_info)",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1438468271",
            "id": 1438468271,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5VvUiv",
            "original_commit_id": "1f272c83afac10bcfe4bd7c964149390daeab0b1",
            "original_line": 436,
            "original_position": 138,
            "original_start_line": null,
            "path": "src/nvim/winfloat.c",
            "position": null,
            "pull_request_review_id": 1799279315,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438468271/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-30T04:21:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438468271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486176280"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486176280"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        When not empty a floating window is used for commands that would open\r\n        a preview window.  See |preview-popup|.\r\n        Not used for the insert completion info, add \"popup\" to\r\n        'completeopt' for that.\r\n```",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T13:24:27Z",
            "diff_hunk": "@@ -6025,6 +6025,24 @@ return {\n       type = 'number',\n       varname = 'p_pvh',\n     },\n+    {\n+      abbreviation = 'pvp',\n+      cb = 'did_set_previewpopup',\n+      expand_cb = 'expand_set_popupoption',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When not empty a floating window is used for commands that would open a\n+        preview window.  See preview-popup.\n+        Not used for the insert completion info, add \"popup\" to\n+        'completeopt' for that.",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486176280",
            "id": 1486176280,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YlUAY",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 6545,
            "original_position": 13,
            "original_start_line": 6034,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486176280/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486176280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486179676"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486179676"
                }
            },
            "author_association": "MEMBER",
            "body": "To match Vim's `P_COMMA|P_NODUP|P_COLON`, this'd be:\r\n\r\n```lua\r\ndeny_duplicates = true,\r\nlist = 'commacolon',  -- though maybe \"onecommacolon\" is better...\r\n```\r\n\r\nThis has implications like removing duplicates when using `:set+=`.",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T13:27:34Z",
            "diff_hunk": "@@ -6025,6 +6025,24 @@ return {\n       type = 'number',\n       varname = 'p_pvh',\n     },\n+    {\n+      abbreviation = 'pvp',\n+      cb = 'did_set_previewpopup',\n+      expand_cb = 'expand_set_popupoption',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When not empty a floating window is used for commands that would open a\n+        preview window.  See preview-popup.\n+        Not used for the insert completion info, add \"popup\" to\n+        'completeopt' for that.\n+      ]=],\n+      full_name = 'previewpopup',\n+      list = 'onecomma',",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486179676",
            "id": 1486179676,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YlU1c",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 6040,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486179676/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486179676",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486181453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486181453"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      short_desc = N_('options for preview floating window'),\r\n```\r\n\r\nOr you could consider basing it on Vim's optwin.vim description:\r\n```lua\r\n      short_desc = N_('use a floating window for preview'),\r\n```",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T13:29:07Z",
            "diff_hunk": "@@ -6025,6 +6025,24 @@ return {\n       type = 'number',\n       varname = 'p_pvh',\n     },\n+    {\n+      abbreviation = 'pvp',\n+      cb = 'did_set_previewpopup',\n+      expand_cb = 'expand_set_popupoption',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When not empty a floating window is used for commands that would open a\n+        preview window.  See preview-popup.\n+        Not used for the insert completion info, add \"popup\" to\n+        'completeopt' for that.\n+      ]=],\n+      full_name = 'previewpopup',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('option for preview floating window'),",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486181453",
            "id": 1486181453,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YlVRN",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 6042,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486181453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486181453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486197463"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486197463"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nstatic char *(p_popup_option_values[]) = { \"height:\", \"width:\", \"border:\", \"title:\", \"title_pos:\",\r\n                                           \"footer:\", \"footer_pos:\", NULL };\r\n```",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T13:42:33Z",
            "diff_hunk": "@@ -142,6 +143,12 @@ static char *(p_rdb_values[]) = { \"compositor\", \"nothrottle\", \"invalid\", \"nodelt\n                                   \"flush\", NULL };\n static char *(p_sloc_values[]) = { \"last\", \"statusline\", \"tabline\", NULL };\n \n+// Note: Keep this in sync with parse_float_option()\n+static char *(p_popup_option_values[]) = { \"height:\", \"width:\", \"border:\", \"title:\", \"title_pos\",\n+                                           \"footer\", \"footer_pos\", NULL };",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486197463",
            "id": 1486197463,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YlZLX",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 148,
            "original_position": 14,
            "original_start_line": 147,
            "path": "src/nvim/optionstr.c",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486197463/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486197463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486215065"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486215065"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  fconfig.anchor = 0;  // NW\r\n```\r\nnit",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T13:55:22Z",
            "diff_hunk": "@@ -297,12 +303,210 @@ bool win_float_valid(const win_T *win)\n   return false;\n }\n \n-win_T *win_float_find_preview(void)\n+/// Parses the 'title' or 'footer' text and stores it in WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dup_val Value text to parse.\n+/// @param len Length of the text.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_title(WinConfig *config, char *dup_val, size_t len, Error *err)\n+{\n+  if (len == 6) {\n+    config->title = true;\n+  } else {\n+    config->footer = true;\n+  }\n+  Object obj = CSTR_TO_OBJ(dup_val);\n+  // 6 mean title otherwise is footer\n+  parse_bordertext(obj, (len == 6 ? kBorderTextTitle : kBorderTextFooter), config, err);\n+  api_free_object(obj);\n+  return !ERROR_SET(err);\n+}\n+\n+/// Parses 'title' or 'footer' text from a specified position and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dup_val value text to parse.\n+/// @param len Length of the text.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_title_pos(WinConfig *config, char *dup_val, size_t len, Error *err)\n+{\n+  String str = cstr_as_string(dup_val);\n+  // 10 mean title_pos otherwise is footer_pos\n+  parse_bordertext_pos(str, (len == 10 ? kBorderTextTitle : kBorderTextFooter), config, err);\n+  api_free_string(str);\n+  return !ERROR_SET(err);\n+}\n+\n+/// Parses the 'border' style configuration and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dup_val Value text to parse.\n+/// @param len Length of the text.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_border(WinConfig *config, char *dup_val, size_t len, Error *err)\n+{\n+  Object style = CSTR_AS_OBJ(dup_val);\n+  parse_border_style(style, config, err);\n+  api_free_object(style);\n+  if (ERROR_SET(err)) {\n+    return false;\n+  }\n+  int border_attr = syn_name2attr(\"FloatBorder\");\n+  for (int i = 0; i < 8; i++) {\n+    config->border_attr[i] = config->border_hl_ids[i]\n+                             ? hl_get_ui_attr(0, HLF_BORDER, config->border_hl_ids[i], false)\n+                             : border_attr;\n+  }\n+  return true;\n+}\n+\n+/// Parses numeric keys for 'height' and 'width' options and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dig Digits representing the numeric value.\n+/// @param len Length of the digits.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_dig_key(WinConfig *config, char *dig, size_t len, Error *err)\n+{\n+  int val = getdigits_int(&dig, false, 0);\n+  if (len == 6) {\n+    config->width = val;\n+  } else {\n+    config->height = val;\n+  }\n+  return true;\n+}\n+\n+/// Parses options for configuring floating windows for completion popups or preview popups.\n+/// Supports setting border style, title, title position, footer, footer position, height, and width.\n+/// Only processes height and width options if `preview` is true.\n+///\n+/// @param fconfig The floating window configuration to modify.\n+/// @param preview Indicates if the configuration is for a preview popup.\n+///\n+/// @return True if options are successfully parsed, otherwise false.\n+bool parse_float_option(WinConfig *config)\n+{\n+  char *p = p_pvp;\n+  Error err = ERROR_INIT;\n+\n+  struct {\n+    char *key;\n+    bool (*parser_func)(WinConfig *, char *, size_t, Error *);\n+  } parsers[] = {\n+    { \"border:\", parse_opt_border },\n+    { \"title:\", parse_opt_title },\n+    { \"footer:\", parse_opt_title },\n+    { \"title_pos:\", parse_opt_title_pos },\n+    { \"footer_pos:\", parse_opt_title_pos },\n+    { \"height:\", parse_opt_dig_key },\n+    { \"width:\", parse_opt_dig_key },\n+    { NULL, NULL },\n+  };\n+\n+  for (; *p != NUL; p += (*p == ',' ? 1 : 0)) {\n+    char *s = p;\n+\n+    char *e = strchr(p, ':');\n+    if (e == NULL || e[1] == NUL) {\n+      return false;\n+    }\n+\n+    p = strchr(e, ',');\n+    if (p == NULL) {\n+      p = e + strlen(e);\n+    }\n+\n+    bool parsed = false;\n+    for (size_t i = 0; parsers[i].key; i++) {\n+      size_t len = strlen(parsers[i].key);\n+      if (strncmp(s, parsers[i].key, len) == 0) {\n+        // when is width or height use e + 1\n+        char *val = s[0] == 'w' || s[0] == 'h' ? e + 1 : NULL;\n+        if (!val) {\n+          val = xmemdupz(s + len, (p ? (size_t)(p - s) - len : (size_t)(s - len)));\n+          if (!val) {\n+            return false;\n+          }\n+        }\n+        if (!parsers[i].parser_func(config, val, len, &err)) {\n+          return false;\n+        }\n+        parsed = true;\n+        break;\n+      }\n+    }\n+\n+    if (!parsed) {\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+/// Searches for a floating window matching given criteria.\n+///\n+/// @param find_info Search for info window if true, else preview window.\n+///\n+/// @return A pointer to the a floating window structure.\n+win_T *win_float_find_preview(bool find_info)\n {\n   for (win_T *wp = lastwin; wp && wp->w_floating; wp = wp->w_prev) {\n-    if (wp->w_float_is_info) {\n+    if ((find_info ? wp->w_float_is_info : wp->w_p_pvw)) {\n       return wp;\n     }\n   }\n   return NULL;\n }\n+\n+/// Creates a new floating window configured for preview or complete popup use.\n+/// This function initializes a floating window configuration with default settings,\n+/// adjusts its position, and sets it relative to the current window. It then creates\n+/// the floating window, marks it for preview use, and returns a pointer to the\n+/// window structure.\n+///\n+/// @return A pointer to the newly created floating window structure.\n+win_T *win_float_create(void)\n+{\n+  WinConfig fconfig = WIN_CONFIG_INIT;\n+  fconfig.row = 1;\n+  fconfig.col = 1;\n+  fconfig.relative = kFloatRelativeWindow;\n+  fconfig.focusable = false;\n+  fconfig.window = (Window)curwin->handle;\n+  // NW\n+  fconfig.anchor = 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486215065",
            "id": 1486215065,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YldeZ",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 488,
            "original_position": 221,
            "original_start_line": 487,
            "path": "src/nvim/winfloat.c",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486215065/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486215065",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486232558"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486232558"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks like this skips the epilogue at the end of the function that resets `&scrollbind` and such (which `win_float_create` also doesn't seem to do)",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T14:07:16Z",
            "diff_hunk": "@@ -4545,12 +4546,26 @@ void free_old_sub(void)\n /// @param undo_sync  sync undo when leaving the window\n ///\n /// @return           true when it was created.\n-bool prepare_tagpreview(bool undo_sync)\n+bool prepare_tagpreview(bool undo_sync, bool use_float)\n {\n   if (curwin->w_p_pvw) {\n     return false;\n   }\n \n+  if (use_float) {\n+    win_T *wp = win_float_find_preview(false);\n+    if (wp) {\n+      win_enter(wp, undo_sync);\n+      return false;\n+    }\n+    wp = win_float_create();\n+    if (!wp) {\n+      return false;\n+    }\n+    win_enter(wp, undo_sync);\n+    return true;",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486232558",
            "id": 1486232558,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ylhvu",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 4566,
            "original_position": 30,
            "original_start_line": 4561,
            "path": "src/nvim/ex_cmds.c",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486232558/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486232558",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486270594"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486270594"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd continue calling it a floating window and maybe reword a few things too, something like:\r\n\r\n```suggestion\r\nAlternatively, a floating window can be used by setting the 'previewpopup'\r\noption.  When set, it overrules the 'previewwindow' and 'previewheight'\r\nsettings.  The option is a comma-separated list of values:\r\n`border`, `height`, `width`, `title`, `title_pos`, `footer`, `footer_pos`.\r\nSee |nvim_open_win()| for details.\r\nNote that `border` only supports string values.\r\n```",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T14:35:22Z",
            "diff_hunk": "@@ -924,6 +924,26 @@ set in the preview window to be able to recognize it.  The 'winfixheight'\n option is set to have it keep the same height when opening/closing other\n windows.\n \n+                                                *preview-popup*\n+Alternatively, a popup window can be used by setting the 'previewpopup'\n+option.  When set, it overrules the 'previewwindow' and 'previewheight'\n+settings.  The option is a comma-separated list of values:\n+  `border`, `height`, `width`, `title`, `title_pos`, `footer`, `footer_pos`.\n+  see |nvim_open_win()|\n+\n+Note border only support string values.",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486270594",
            "id": 1486270594,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YlrCC",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 934,
            "original_position": 11,
            "original_start_line": 928,
            "path": "runtime/doc/windows.txt",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486270594/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486270594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486276350"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486276350"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit, but above this, the line `bool use_float = strstr(p_cot, \"popup\") != NULL ? true : false;` doesn't need the ternary.",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T14:39:29Z",
            "diff_hunk": "@@ -772,7 +772,7 @@ win_T *pum_set_info(int pum_idx, char *info)\n   block_autocmds();\n   RedrawingDisabled++;\n   no_u_sync++;\n-  win_T *wp = win_float_find_preview();\n+  win_T *wp = win_float_find_preview(true);",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486276350",
            "id": 1486276350,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ylsb-",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 952,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/popupmenu.c",
            "position": null,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486276350/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-12T15:40:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486276350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r1486352045"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486352045"
                }
            },
            "author_association": "MEMBER",
            "body": "This isn't true for Nvim (it's from [v8.1.1813](https://github.com/vim/vim/commit/2debf1c16b93f8693a785f675320d9e949c96a97)), but maybe this swapexists behaviour should be ported given that the popup is `focusable = false`.\r\n\r\nThis all said, maybe Nvim preview popups (well, floats) should allow focusing anyway, as we're not bound to the same limitations as Vim's popups in regards to editing.",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2024-02-12T15:32:46Z",
            "diff_hunk": "@@ -924,6 +924,26 @@ set in the preview window to be able to recognize it.  The 'winfixheight'\n option is set to have it keep the same height when opening/closing other\n windows.\n \n+                                                *preview-popup*\n+Alternatively, a popup window can be used by setting the 'previewpopup'\n+option.  When set, it overrules the 'previewwindow' and 'previewheight'\n+settings.  The option is a comma-separated list of values:\n+  `border`, `height`, `width`, `title`, `title_pos`, `footer`, `footer_pos`.\n+  see |nvim_open_win()|\n+\n+Note border only support string values.\n+Example: >vim\n+        :set previewpopup=border:double,height:10,width:60\n+\n+A few peculiarities:\n+- If the file is in a buffer already, it will be re-used.  This will allow for\n+  editing the file while it's visible in the popup window.\n+- No ATTENTION dialog will be used, since you can't edit the file in the popup\n+  window.  However, if you later open the same buffer in a normal window, you\n+  may not notice it's edited elsewhere.  And when then using \":edit\" to\n+  trigger the ATTENTION and responding \"A\" for Abort, the preview window will\n+  become empty.",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r1486352045",
            "id": 1486352045,
            "line": 963,
            "node_id": "PRRC_kwDOAPphoM5Yl-6t",
            "original_commit_id": "01bfab43f8827a41ce0af682f7871c526d07fb39",
            "original_line": 963,
            "original_position": 22,
            "original_start_line": 941,
            "path": "runtime/doc/windows.txt",
            "position": 22,
            "pull_request_review_id": 1875229295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486352045/reactions"
            },
            "side": "RIGHT",
            "start_line": 959,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-12T15:53:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1486352045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2196276282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2196276282"
                }
            },
            "author_association": "MEMBER",
            "body": "Floats should not have a \"type\". idk where `w_float_is_info` came from, is it related to `nvim__complete_set()` ?\r\n\r\nThere can only ever be one preview window. The preview window id is already known globally, isn't it? So the window-id can be compared, we don't need to mark it as `kFloatPreview` ?",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-10T00:59:05Z",
            "diff_hunk": "@@ -1343,7 +1348,7 @@ struct window_S {\n   ScreenGrid w_grid_alloc;              // the grid specific to the window\n   bool w_pos_changed;                   // true if window position changed\n   bool w_floating;                      ///< whether the window is floating\n-  bool w_float_is_info;                 // the floating window is info float\n+  FloatType w_float_is;                 // the floating window is info float",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2196276282",
            "id": 2196276282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6C6IQ6",
            "original_commit_id": "160bb5ec4e3b94b2e798c92f19eb42666f66cb8d",
            "original_line": 1351,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 3003515239,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2196276282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-10T01:09:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2196276282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2199586609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2199586609"
                }
            },
            "author_association": "MEMBER",
            "body": "> idk where w_float_is_info came from, is it related to nvim__complete_set() ?\r\n\r\nyes idea from bredl's comment.\r\n\r\n> preview window id is already known globally, isn't it? So the window-id can be compared, we don't need to mark it as kFloatPreview ?\r\n\r\nwe dont't need `type` here ..I have clean up the old code of here we can use `wp->w_p_pvwm && wp->w_floating` \r\nAbout preview window id ..currently no way to get it 🤔 .vim use `popup_findpreview` and `popup_findinof` functions to get window id of `preview` or `info preview`.",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-11T04:57:20Z",
            "diff_hunk": "@@ -1343,7 +1348,7 @@ struct window_S {\n   ScreenGrid w_grid_alloc;              // the grid specific to the window\n   bool w_pos_changed;                   // true if window position changed\n   bool w_floating;                      ///< whether the window is floating\n-  bool w_float_is_info;                 // the floating window is info float\n+  FloatType w_float_is;                 // the floating window is info float",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2199586609",
            "id": 2199586609,
            "in_reply_to_id": 2196276282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DGwcx",
            "original_commit_id": "160bb5ec4e3b94b2e798c92f19eb42666f66cb8d",
            "original_line": 1351,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 3008570061,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2199586609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-11T04:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2199586609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203047542"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203047542"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's add `ui/previewwin_spec.lua`. This test file is 10k lines...",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T01:54:33Z",
            "diff_hunk": "@@ -10951,6 +10951,178 @@ describe('float window', function()\n       eq('Vim(set):E474: Invalid argument: winborder=+,-,+,|,+,-,+,', pcall_err(command, [[set winborder=+,-,+,\\|,+,-,+,]]))\n       eq('Vim(set):E474: Invalid argument: winborder=custom', pcall_err(command, 'set winborder=custom'))\n     end)\n+\n+    it('#previewpopup option', function()",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203047542",
            "id": 2203047542,
            "line": 10955,
            "node_id": "PRRC_kwDOAPphoM6DT9Z2",
            "original_commit_id": "35ca64faad4c9382c515c6e7ae9be94773859361",
            "original_line": 10955,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/ui/float_spec.lua",
            "position": 5,
            "pull_request_review_id": 3013729326,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203047542/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T01:54:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203047542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203047708"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203047708"
                }
            },
            "author_association": "MEMBER",
            "body": "don't we already have placement code somewhere? ",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T01:55:33Z",
            "diff_hunk": "@@ -433,9 +594,148 @@ win_T *win_float_create(bool enter, bool new_buf)\n   }\n   unblock_autocmds();\n   wp->w_p_diff = false;\n-  wp->w_float_is_info = true;\n+  if (preview) {\n+    wp->w_p_pvw = true;\n+    wp->w_p_wrap = true;\n+    wp->w_p_so = 0;\n+  } else {\n+    wp->w_float_is_info = true;\n+  }\n+\n   if (enter) {\n     win_enter(wp, false);\n   }\n+\n   return wp;\n }\n+\n+/// Closes a specified floating window used for previews or popups.\n+/// Searches for and closes a floating window based on given criteria.\n+///\n+/// @param preview Flag to determine search criteria for the floating window.\n+///\n+/// @return True if the window is successfully closed, otherwise false.\n+bool win_float_close(bool preview)\n+{\n+  win_T *wp = win_float_find_preview(preview);\n+  return wp && win_close(wp, false, false) != FAIL;\n+}\n+\n+/// Set bufname as title for a floating window.\n+/// Title position is center.\n+///\n+/// @param wp A pointer of win_T\n+/// @param redraw bool\n+/// @return\n+void win_float_set_title(win_T *wp)\n+{\n+  if (!wp->w_floating || !wp->w_config.border) {\n+    return;\n+  }\n+\n+  if (wp->w_config.title) {\n+    clear_virttext(&wp->w_config.title_chunks);\n+  }\n+  wp->w_config.title = true;\n+  wp->w_config.title_pos = kAlignCenter;\n+  wp->w_config.title_width = (int)mb_string2cells(wp->w_buffer->b_fname);\n+  kv_push(*(&wp->w_config.title_chunks), ((VirtTextChunk){\n+    .text = xstrdup(wp->w_buffer->b_fname), .hl_id = -1\n+  }));\n+  win_config_float(wp, wp->w_config);\n+}\n+\n+/// adjust a preview floating window postion to fit screen and buffer in wp.\n+///\n+/// @param wp A pointer of win_T\n+void win_float_adjust_position(win_T *wp)\n+{\n+  if (!wp->w_floating) {\n+    return;\n+  }\n+\n+  // Get cursor screen coordinates\n+  int cursor_row = curwin->w_winrow + curwin->w_wrow;\n+  int cursor_col = curwin->w_wincol + curwin->w_wcol;\n+\n+  int border_extra = wp->w_config.border ? 1 : 0;  // Usually border is 1, not 2\n+\n+  // Calculate available space in four directions\n+  int right_extra = Columns - cursor_col - border_extra;\n+  int left_extra = cursor_col - border_extra;\n+  int below_extra = Rows - cursor_row - 1 - border_extra;  // -1 for cmdline\n+  int above_extra = cursor_row - border_extra;\n+\n+  // Determine horizontal position\n+  bool place_right = false;\n+  int available_width = wp->w_config.width;\n+\n+  if (available_width <= right_extra) {\n+    place_right = true;  // Prefer right side\n+  } else if (available_width <= left_extra) {\n+    place_right = false;  // Place on left side\n+  } else {\n+    // Neither side has enough space, choose the larger one\n+    if (right_extra >= left_extra) {\n+      place_right = true;\n+      wp->w_config.width = right_extra;\n+    } else {\n+      place_right = false;\n+      wp->w_config.width = left_extra;\n+    }\n+  }\n+\n+  // Determine vertical position\n+  bool place_below = true;\n+  int available_height = wp->w_config.height;\n+\n+  if (available_height <= below_extra) {\n+    place_below = true;  // Prefer below cursor\n+  } else if (available_height <= above_extra) {\n+    place_below = false;  // Place above cursor\n+  } else {\n+    // Neither direction has enough space, choose the larger one\n+    if (below_extra >= above_extra) {\n+      place_below = true;\n+      wp->w_config.height = below_extra;\n+    } else {\n+      place_below = false;\n+      wp->w_config.height = above_extra;\n+    }\n+  }\n+\n+  // Set anchor and position\n+  wp->w_config.anchor = 0;  // Reset anchor\n+\n+  if (place_below && place_right) {\n+    // Bottom-right: anchor NW, position at cursor bottom-right\n+    wp->w_config.anchor = 0;  // NW\n+    wp->w_config.row = cursor_row + 1;\n+    wp->w_config.col = cursor_col + 1;",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203047708",
            "id": 2203047708,
            "line": 655,
            "node_id": "PRRC_kwDOAPphoM6DT9cc",
            "original_commit_id": "35ca64faad4c9382c515c6e7ae9be94773859361",
            "original_line": 655,
            "original_position": 349,
            "original_start_line": 711,
            "path": "src/nvim/winfloat.c",
            "position": 290,
            "pull_request_review_id": 3013729445,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203047708/reactions"
            },
            "side": "RIGHT",
            "start_line": 652,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T01:55:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203047708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203060801"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203060801"
                }
            },
            "author_association": "MEMBER",
            "body": "we have `win_float_find_preview`, what does it do? maybe it's misnamed, it [checks](https://github.com/neovim/neovim/blob/815916b45005da04838ceee749cec875ddad0f1a/src/nvim/winfloat.c#L346-L348) `wp->w_prev` which is \"previous\", not \"preview\"?\r\n\r\noh, I see you updated it :)",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T02:44:47Z",
            "diff_hunk": "@@ -1343,7 +1348,7 @@ struct window_S {\n   ScreenGrid w_grid_alloc;              // the grid specific to the window\n   bool w_pos_changed;                   // true if window position changed\n   bool w_floating;                      ///< whether the window is floating\n-  bool w_float_is_info;                 // the floating window is info float\n+  FloatType w_float_is;                 // the floating window is info float",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203060801",
            "id": 2203060801,
            "in_reply_to_id": 2196276282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUApB",
            "original_commit_id": "160bb5ec4e3b94b2e798c92f19eb42666f66cb8d",
            "original_line": 1351,
            "original_position": 17,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 3013747747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203060801/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T02:44:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203060801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203062393"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203062393"
                }
            },
            "author_association": "MEMBER",
            "body": "\"float\" is ambiguous. we should always say \"floatwin\" or win_float.\n```suggestion\nbool win_float_parse_option(WinConfig *config)\n```",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T02:45:28Z",
            "diff_hunk": "@@ -343,10 +352,158 @@ bool win_float_valid(const win_T *win)\n   return false;\n }\n \n-win_T *win_float_find_preview(void)\n+/// Parses the 'border' style configuration and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dup_val Value text to parse.\n+/// @param len Length of the text.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_border(WinConfig *config, char *dup_val, size_t len, Error *err)\n+{\n+  Object style = CSTR_AS_OBJ(dup_val);\n+  parse_border_style(style, config, err);\n+  api_free_object(style);\n+  if (ERROR_SET(err)) {\n+    return false;\n+  }\n+  int border_attr = syn_name2attr(\"FloatBorder\");\n+  for (int i = 0; i < 8; i++) {\n+    config->border_attr[i] = config->border_hl_ids[i]\n+                             ? hl_get_ui_attr(0, HLF_BORDER, config->border_hl_ids[i], false)\n+                             : border_attr;\n+  }\n+  return true;\n+}\n+\n+/// Parses numeric keys for 'height' and 'width' options and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dig Digits representing the numeric value.\n+/// @param len Length of the digits.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_dig_key(WinConfig *config, char *dig, size_t len, Error *err)\n+{\n+  char *start = dig;\n+  int val = getdigits_int(&dig, false, 0);\n+  if (dig == start) {\n+    return false;\n+  }\n+  if (len == 6) {\n+    config->width = val;\n+  } else {\n+    config->height = val;\n+  }\n+  return true;\n+}\n+\n+/// Parses the 'align' option for floating window configuration.\n+///\n+/// @param config Configuration storage.\n+/// @param dup_val Value text to parse (\"item\" or \"menu\").\n+/// @param len Length of the key (should be 6 for \"align:\").\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_align(WinConfig *config, char *val, size_t len, Error *err)\n+{\n+  // TODO(glepnir): support this by adding completepopup\n+  bool is_item = (len == 4) && strncmp(val, \"item\", 4) == 0;\n+  bool is_menu = (len == 4) && strncmp(val, \"menu\", 4) == 0;\n+\n+  if (!is_item && !is_menu) {\n+    // Invalid align value\n+    api_set_error(err, kErrorTypeValidation, \"Invalid align value. Expected 'item' or 'menu'\");\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+/// Parses options for configuring floating windows for completion popups or preview popups.\n+/// Supports setting border style, title, title position, footer, footer position, height, and width.\n+/// Only processes height and width options if `preview` is true.\n+///\n+/// @param fconfig The floating window configuration to modify.\n+/// @param preview Indicates if the configuration is for a preview popup.\n+///\n+/// @return True if options are successfully parsed, otherwise false.\n+bool parse_float_option(WinConfig *config)",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203062393",
            "id": 2203062393,
            "line": 361,
            "node_id": "PRRC_kwDOAPphoM6DUBB5",
            "original_commit_id": "35ca64faad4c9382c515c6e7ae9be94773859361",
            "original_line": 361,
            "original_position": 125,
            "original_start_line": null,
            "path": "src/nvim/winfloat.c",
            "position": 52,
            "pull_request_review_id": 3013749035,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203062393/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T02:45:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203062393",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203082163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203082163"
                }
            },
            "author_association": "MEMBER",
            "body": "was this copied from vim? or generated by AI? :) we have lots of similar code like `parse_winborder`, `parse_win_config`, `parse_border_style`. why do we need even more ? \n\nand if it's really needed, the name should make it more clear that this is specifically for 'previewpopup'. The name `parse_float_option` is very unclear. A clearer name would be `parse_previewpopu_option`.\n\nAlso, should this live in `optionstr.c` ?\n",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T02:50:38Z",
            "diff_hunk": "@@ -343,10 +352,158 @@ bool win_float_valid(const win_T *win)\n   return false;\n }\n \n-win_T *win_float_find_preview(void)\n+/// Parses the 'border' style configuration and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dup_val Value text to parse.\n+/// @param len Length of the text.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_border(WinConfig *config, char *dup_val, size_t len, Error *err)\n+{\n+  Object style = CSTR_AS_OBJ(dup_val);\n+  parse_border_style(style, config, err);\n+  api_free_object(style);\n+  if (ERROR_SET(err)) {\n+    return false;\n+  }\n+  int border_attr = syn_name2attr(\"FloatBorder\");\n+  for (int i = 0; i < 8; i++) {\n+    config->border_attr[i] = config->border_hl_ids[i]\n+                             ? hl_get_ui_attr(0, HLF_BORDER, config->border_hl_ids[i], false)\n+                             : border_attr;\n+  }\n+  return true;\n+}\n+\n+/// Parses numeric keys for 'height' and 'width' options and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dig Digits representing the numeric value.\n+/// @param len Length of the digits.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_dig_key(WinConfig *config, char *dig, size_t len, Error *err)\n+{\n+  char *start = dig;\n+  int val = getdigits_int(&dig, false, 0);\n+  if (dig == start) {\n+    return false;\n+  }\n+  if (len == 6) {\n+    config->width = val;\n+  } else {\n+    config->height = val;\n+  }\n+  return true;\n+}\n+\n+/// Parses the 'align' option for floating window configuration.\n+///\n+/// @param config Configuration storage.\n+/// @param dup_val Value text to parse (\"item\" or \"menu\").\n+/// @param len Length of the key (should be 6 for \"align:\").\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_align(WinConfig *config, char *val, size_t len, Error *err)\n+{\n+  // TODO(glepnir): support this by adding completepopup\n+  bool is_item = (len == 4) && strncmp(val, \"item\", 4) == 0;\n+  bool is_menu = (len == 4) && strncmp(val, \"menu\", 4) == 0;\n+\n+  if (!is_item && !is_menu) {\n+    // Invalid align value\n+    api_set_error(err, kErrorTypeValidation, \"Invalid align value. Expected 'item' or 'menu'\");\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+/// Parses options for configuring floating windows for completion popups or preview popups.\n+/// Supports setting border style, title, title position, footer, footer position, height, and width.\n+/// Only processes height and width options if `preview` is true.\n+///\n+/// @param fconfig The floating window configuration to modify.\n+/// @param preview Indicates if the configuration is for a preview popup.\n+///\n+/// @return True if options are successfully parsed, otherwise false.\n+bool parse_float_option(WinConfig *config)\n+{\n+  char *p = p_pvp;\n+  Error err = ERROR_INIT;\n+\n+  struct {\n+    char *key;\n+    bool (*parser_func)(WinConfig *, char *, size_t, Error *);\n+  } parsers[] = {\n+    { \"border:\", parse_opt_border },\n+    { \"height:\", parse_opt_dig_key },\n+    { \"width:\", parse_opt_dig_key },\n+    { \"align:\", parse_opt_align },",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203082163",
            "id": 2203082163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUF2z",
            "original_commit_id": "35ca64faad4c9382c515c6e7ae9be94773859361",
            "original_line": 446,
            "original_position": 137,
            "original_start_line": 443,
            "path": "src/nvim/winfloat.c",
            "position": null,
            "pull_request_review_id": 3013772098,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203082163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T02:51:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203082163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203128254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203128254"
                }
            },
            "author_association": "MEMBER",
            "body": "code in popupwin.c handles this option in Vim. Here's how I've modified it to make it clearer.\r\n\r\nhttps://github.com/vim/vim/blob/68ee1cf7de36bdd6e642807c8beda751112aaab8/src/popupwin.c#L1778-L1904\r\n\r\nI have removed these `parse_opt_*` functions .. If you still feel it's too long, then maybe as you said, we could handle some comma-list options in Lua and replace certain C functions. ",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T03:38:12Z",
            "diff_hunk": "@@ -343,10 +352,158 @@ bool win_float_valid(const win_T *win)\n   return false;\n }\n \n-win_T *win_float_find_preview(void)\n+/// Parses the 'border' style configuration and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dup_val Value text to parse.\n+/// @param len Length of the text.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_border(WinConfig *config, char *dup_val, size_t len, Error *err)\n+{\n+  Object style = CSTR_AS_OBJ(dup_val);\n+  parse_border_style(style, config, err);\n+  api_free_object(style);\n+  if (ERROR_SET(err)) {\n+    return false;\n+  }\n+  int border_attr = syn_name2attr(\"FloatBorder\");\n+  for (int i = 0; i < 8; i++) {\n+    config->border_attr[i] = config->border_hl_ids[i]\n+                             ? hl_get_ui_attr(0, HLF_BORDER, config->border_hl_ids[i], false)\n+                             : border_attr;\n+  }\n+  return true;\n+}\n+\n+/// Parses numeric keys for 'height' and 'width' options and updates WinConfig.\n+///\n+/// @param fconfig Configuration storage.\n+/// @param dig Digits representing the numeric value.\n+/// @param len Length of the digits.\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_dig_key(WinConfig *config, char *dig, size_t len, Error *err)\n+{\n+  char *start = dig;\n+  int val = getdigits_int(&dig, false, 0);\n+  if (dig == start) {\n+    return false;\n+  }\n+  if (len == 6) {\n+    config->width = val;\n+  } else {\n+    config->height = val;\n+  }\n+  return true;\n+}\n+\n+/// Parses the 'align' option for floating window configuration.\n+///\n+/// @param config Configuration storage.\n+/// @param dup_val Value text to parse (\"item\" or \"menu\").\n+/// @param len Length of the key (should be 6 for \"align:\").\n+/// @param err Pointer to the Error structure for error handling.\n+///\n+/// @return true if parsing is successful, otherwise false.\n+static bool parse_opt_align(WinConfig *config, char *val, size_t len, Error *err)\n+{\n+  // TODO(glepnir): support this by adding completepopup\n+  bool is_item = (len == 4) && strncmp(val, \"item\", 4) == 0;\n+  bool is_menu = (len == 4) && strncmp(val, \"menu\", 4) == 0;\n+\n+  if (!is_item && !is_menu) {\n+    // Invalid align value\n+    api_set_error(err, kErrorTypeValidation, \"Invalid align value. Expected 'item' or 'menu'\");\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+/// Parses options for configuring floating windows for completion popups or preview popups.\n+/// Supports setting border style, title, title position, footer, footer position, height, and width.\n+/// Only processes height and width options if `preview` is true.\n+///\n+/// @param fconfig The floating window configuration to modify.\n+/// @param preview Indicates if the configuration is for a preview popup.\n+///\n+/// @return True if options are successfully parsed, otherwise false.\n+bool parse_float_option(WinConfig *config)\n+{\n+  char *p = p_pvp;\n+  Error err = ERROR_INIT;\n+\n+  struct {\n+    char *key;\n+    bool (*parser_func)(WinConfig *, char *, size_t, Error *);\n+  } parsers[] = {\n+    { \"border:\", parse_opt_border },\n+    { \"height:\", parse_opt_dig_key },\n+    { \"width:\", parse_opt_dig_key },\n+    { \"align:\", parse_opt_align },",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203128254",
            "id": 2203128254,
            "in_reply_to_id": 2203082163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DURG-",
            "original_commit_id": "35ca64faad4c9382c515c6e7ae9be94773859361",
            "original_line": 446,
            "original_position": 137,
            "original_start_line": 443,
            "path": "src/nvim/winfloat.c",
            "position": null,
            "pull_request_review_id": 3013827344,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203128254/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T05:33:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203128254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26799#discussion_r2203129008"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26799"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203129008"
                }
            },
            "author_association": "MEMBER",
            "body": "nope in vim has `popup_adjust_position` https://github.com/vim/vim/blob/68ee1cf7de36bdd6e642807c8beda751112aaab8/src/popupwin.c#L1204",
            "commit_id": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
            "created_at": "2025-07-13T03:39:46Z",
            "diff_hunk": "@@ -433,9 +594,148 @@ win_T *win_float_create(bool enter, bool new_buf)\n   }\n   unblock_autocmds();\n   wp->w_p_diff = false;\n-  wp->w_float_is_info = true;\n+  if (preview) {\n+    wp->w_p_pvw = true;\n+    wp->w_p_wrap = true;\n+    wp->w_p_so = 0;\n+  } else {\n+    wp->w_float_is_info = true;\n+  }\n+\n   if (enter) {\n     win_enter(wp, false);\n   }\n+\n   return wp;\n }\n+\n+/// Closes a specified floating window used for previews or popups.\n+/// Searches for and closes a floating window based on given criteria.\n+///\n+/// @param preview Flag to determine search criteria for the floating window.\n+///\n+/// @return True if the window is successfully closed, otherwise false.\n+bool win_float_close(bool preview)\n+{\n+  win_T *wp = win_float_find_preview(preview);\n+  return wp && win_close(wp, false, false) != FAIL;\n+}\n+\n+/// Set bufname as title for a floating window.\n+/// Title position is center.\n+///\n+/// @param wp A pointer of win_T\n+/// @param redraw bool\n+/// @return\n+void win_float_set_title(win_T *wp)\n+{\n+  if (!wp->w_floating || !wp->w_config.border) {\n+    return;\n+  }\n+\n+  if (wp->w_config.title) {\n+    clear_virttext(&wp->w_config.title_chunks);\n+  }\n+  wp->w_config.title = true;\n+  wp->w_config.title_pos = kAlignCenter;\n+  wp->w_config.title_width = (int)mb_string2cells(wp->w_buffer->b_fname);\n+  kv_push(*(&wp->w_config.title_chunks), ((VirtTextChunk){\n+    .text = xstrdup(wp->w_buffer->b_fname), .hl_id = -1\n+  }));\n+  win_config_float(wp, wp->w_config);\n+}\n+\n+/// adjust a preview floating window postion to fit screen and buffer in wp.\n+///\n+/// @param wp A pointer of win_T\n+void win_float_adjust_position(win_T *wp)\n+{\n+  if (!wp->w_floating) {\n+    return;\n+  }\n+\n+  // Get cursor screen coordinates\n+  int cursor_row = curwin->w_winrow + curwin->w_wrow;\n+  int cursor_col = curwin->w_wincol + curwin->w_wcol;\n+\n+  int border_extra = wp->w_config.border ? 1 : 0;  // Usually border is 1, not 2\n+\n+  // Calculate available space in four directions\n+  int right_extra = Columns - cursor_col - border_extra;\n+  int left_extra = cursor_col - border_extra;\n+  int below_extra = Rows - cursor_row - 1 - border_extra;  // -1 for cmdline\n+  int above_extra = cursor_row - border_extra;\n+\n+  // Determine horizontal position\n+  bool place_right = false;\n+  int available_width = wp->w_config.width;\n+\n+  if (available_width <= right_extra) {\n+    place_right = true;  // Prefer right side\n+  } else if (available_width <= left_extra) {\n+    place_right = false;  // Place on left side\n+  } else {\n+    // Neither side has enough space, choose the larger one\n+    if (right_extra >= left_extra) {\n+      place_right = true;\n+      wp->w_config.width = right_extra;\n+    } else {\n+      place_right = false;\n+      wp->w_config.width = left_extra;\n+    }\n+  }\n+\n+  // Determine vertical position\n+  bool place_below = true;\n+  int available_height = wp->w_config.height;\n+\n+  if (available_height <= below_extra) {\n+    place_below = true;  // Prefer below cursor\n+  } else if (available_height <= above_extra) {\n+    place_below = false;  // Place above cursor\n+  } else {\n+    // Neither direction has enough space, choose the larger one\n+    if (below_extra >= above_extra) {\n+      place_below = true;\n+      wp->w_config.height = below_extra;\n+    } else {\n+      place_below = false;\n+      wp->w_config.height = above_extra;\n+    }\n+  }\n+\n+  // Set anchor and position\n+  wp->w_config.anchor = 0;  // Reset anchor\n+\n+  if (place_below && place_right) {\n+    // Bottom-right: anchor NW, position at cursor bottom-right\n+    wp->w_config.anchor = 0;  // NW\n+    wp->w_config.row = cursor_row + 1;\n+    wp->w_config.col = cursor_col + 1;",
            "html_url": "https://github.com/neovim/neovim/pull/26799#discussion_r2203129008",
            "id": 2203129008,
            "in_reply_to_id": 2203047708,
            "line": 655,
            "node_id": "PRRC_kwDOAPphoM6DURSw",
            "original_commit_id": "35ca64faad4c9382c515c6e7ae9be94773859361",
            "original_line": 655,
            "original_position": 349,
            "original_start_line": 711,
            "path": "src/nvim/winfloat.c",
            "position": 290,
            "pull_request_review_id": 3013828094,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203129008/reactions"
            },
            "side": "RIGHT",
            "start_line": 652,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T05:39:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203129008",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "ready for review",
            "created_at": "2024-02-05T07:04:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/26799#issuecomment-1926346819",
            "id": 1926346819,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
            "node_id": "IC_kwDOAPphoM5y0bhD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1926346819/reactions"
            },
            "updated_at": "2024-02-05T07:04:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1926346819",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> From a usability standpoint, Vim's preview popups feel much better to use, as their sizes scale to fit the content, even when it changes (the width and height for its previewpopup is a minimum value, not an exact).\r\n\r\nOh i think i know how to do it . and something not correct now.",
            "created_at": "2024-02-13T06:17:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/26799#issuecomment-1940490331",
            "id": 1940490331,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
            "node_id": "IC_kwDOAPphoM5zqYhb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1940490331/reactions"
            },
            "updated_at": "2024-02-13T13:09:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1940490331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "does https://github.com/neovim/neovim/pull/25541 replace this PR?",
            "created_at": "2025-03-10T11:20:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/26799#issuecomment-2710251381",
            "id": 2710251381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
            "node_id": "IC_kwDOAPphoM6hiyd1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2710251381/reactions"
            },
            "updated_at": "2025-03-10T11:20:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2710251381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "two things. https://github.com/neovim/neovim/pull/25541 is completepopup see `:h complete-popup` in vim and #25541 also support add border to pum which vim doesn't have. ",
            "created_at": "2025-03-10T11:41:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/26799#issuecomment-2710299105",
            "id": 2710299105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
            "node_id": "IC_kwDOAPphoM6hi-Hh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2710299105/reactions"
            },
            "updated_at": "2025-03-10T11:41:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2710299105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Most of the C code here is just to parse an option. That's kind of crazy. Maybe it's time we started doing that in Lua, in a new file like `runtime/lua/vim/_core/options.lua`, then use `NLUA_EXEC_STATIC` to run it. It's just insane that we keep shoveling tons of C code just to parse strings.\r\n\r\nOr maybe there's existing C functions that can be re-used, instead of all the new code here.",
            "created_at": "2025-07-13T02:54:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/26799#issuecomment-3066383942",
            "id": 3066383942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
            "node_id": "IC_kwDOAPphoM62xU5G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3066383942/reactions"
            },
            "updated_at": "2025-07-13T02:55:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3066383942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Maybe it's time we started doing that in Lua, in a new file like runtime/lua/vim/_core/options.lua\r\n\r\ngive it a try.\r\n",
            "created_at": "2025-07-13T03:40:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/26799#issuecomment-3066510611",
            "id": 3066510611,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
            "node_id": "IC_kwDOAPphoM62xz0T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3066510611/reactions"
            },
            "updated_at": "2025-07-13T05:55:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3066510611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26799/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26799/commits",
    "created_at": "2023-12-30T04:13:44Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26799.diff",
    "draft": false,
    "head": {
        "label": "glepnir:previewpopup",
        "ref": "previewpopup",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/glepnir/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/glepnir/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/glepnir/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/glepnir/neovim/branches{/branch}",
            "clone_url": "https://github.com/glepnir/neovim.git",
            "collaborators_url": "https://api.github.com/repos/glepnir/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/glepnir/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/glepnir/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/glepnir/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/glepnir/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/glepnir/neovim/contributors",
            "created_at": "2022-07-17T05:15:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/glepnir/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/glepnir/neovim/downloads",
            "events_url": "https://api.github.com/repos/glepnir/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/glepnir/neovim/forks",
            "full_name": "glepnir/neovim",
            "git_commits_url": "https://api.github.com/repos/glepnir/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/glepnir/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/glepnir/neovim/git/tags{/sha}",
            "git_url": "git://github.com/glepnir/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/glepnir/neovim/hooks",
            "html_url": "https://github.com/glepnir/neovim",
            "id": 514752985,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/glepnir/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/glepnir/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/glepnir/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/glepnir/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/glepnir/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/glepnir/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/glepnir/neovim/merges",
            "milestones_url": "https://api.github.com/repos/glepnir/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHq6B2Q",
            "notifications_url": "https://api.github.com/repos/glepnir/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/glepnir/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T12:56:31Z",
            "releases_url": "https://api.github.com/repos/glepnir/neovim/releases{/id}",
            "size": 326523,
            "ssh_url": "git@github.com:glepnir/neovim.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/glepnir/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/glepnir/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/glepnir/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/glepnir/neovim/subscription",
            "svn_url": "https://github.com/glepnir/neovim",
            "tags_url": "https://api.github.com/repos/glepnir/neovim/tags",
            "teams_url": "https://api.github.com/repos/glepnir/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/glepnir/neovim/git/trees{/sha}",
            "updated_at": "2025-07-14T07:00:30Z",
            "url": "https://api.github.com/repos/glepnir/neovim",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
            "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
            "followers_url": "https://api.github.com/users/glepnir/followers",
            "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
            "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/glepnir",
            "id": 41671631,
            "login": "glepnir",
            "node_id": "MDQ6VXNlcjQxNjcxNjMx",
            "organizations_url": "https://api.github.com/users/glepnir/orgs",
            "received_events_url": "https://api.github.com/users/glepnir/received_events",
            "repos_url": "https://api.github.com/users/glepnir/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/glepnir",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26799",
    "id": 1660314339,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26799",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "floating windows, popups, hover",
            "id": 3234818716,
            "name": "floatwin",
            "node_id": "MDU6TGFiZWwzMjM0ODE4NzE2",
            "url": "https://api.github.com/repos/neovim/neovim/labels/floatwin"
        }
    ],
    "locked": false,
    "merge_commit_sha": "4be424f0bf70983342cb7f5513cdbb0e7ac79f9c",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 96,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 70,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-07-13T20:43:29Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "PR_kwDOAPphoM5i9mLj",
    "number": 26799,
    "patch_url": "https://github.com/neovim/neovim/pull/26799.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26799/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ef4c339d7a8da16ca6ef7f1d08bb622af4607ad7",
    "title": "feat(float): add previewpopup option",
    "updated_at": "2025-07-13T05:55:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26799",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
        "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
        "followers_url": "https://api.github.com/users/glepnir/followers",
        "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
        "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/glepnir",
        "id": 41671631,
        "login": "glepnir",
        "node_id": "MDQ6VXNlcjQxNjcxNjMx",
        "organizations_url": "https://api.github.com/users/glepnir/orgs",
        "received_events_url": "https://api.github.com/users/glepnir/received_events",
        "repos_url": "https://api.github.com/users/glepnir/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/glepnir",
        "user_view_type": "public"
    }
}