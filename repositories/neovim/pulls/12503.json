{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/12503/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12503/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/12503"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/12503"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12503/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/12503"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/da9802a46e55d4b505863ba08dc73c91bbe94f4c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6168,
            "forks_count": 6168,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1965,
            "open_issues_count": 1965,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-08T01:56:22Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332418,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90922,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-08T02:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90922,
            "watchers_count": 90922,
            "web_commit_signoff_required": false
        },
        "sha": "2ea3127697692b0b2c480d585ef6529e90a72b0e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Continuation of https://github.com/neovim/neovim/pull/7062\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12503#discussion_r443151958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12503"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/443151958"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Removing this line from the code as it causes the `encoding` test given at [test/functional/ex_cmds/encoding_spec.lua:24](https://github.com/neovim/neovim/blob/master/test/functional/ex_cmds/encoding_spec.lua#L24) to wait indefinitely.",
            "commit_id": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
            "created_at": "2020-06-20T18:51:58Z",
            "diff_hunk": "@@ -411,7 +411,6 @@ end\n function module.clear(...)\n   local argv, env = module.new_argv(...)\n   module.set_session(module.spawn(argv, nil, env))\n-  module.request('nvim_set_client_info', 'testclient', {}, 'remote', {}, {})",
            "html_url": "https://github.com/neovim/neovim/pull/12503#discussion_r443151958",
            "id": 443151958,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1MTk1OA==",
            "original_commit_id": "cf4670b48e2f3adde0ee20ad1cdc51e7944bfab1",
            "original_line": 414,
            "original_position": 4,
            "original_start_line": null,
            "path": "test/functional/helpers.lua",
            "position": null,
            "pull_request_review_id": 434447024,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12503",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/443151958/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-01-06T08:06:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/443151958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12503#discussion_r445621150"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12503"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/445621150"
                }
            },
            "author_association": "MEMBER",
            "body": "> If someone could help with the travis build issue, the PR is pretty much complete.\r\n\r\nAs you can see from https://travis-ci.org/github/neovim/neovim/jobs/700527410#L3452, there's probably a problem here, so Isn't it? I don't think the length of the `prefix` is 32 bytes. I haven't looked closely, but how about passing `p` to `rpc_chan_desc` as shown below?\r\n\r\n```C\r\n  if (prefix[0] == '\\0') {\r\n    // Generate a default category/group/prefix.\r\n    rpc_chan_desc(channel_id, p, sizeof(p) - 2);\r\n  } else {\r\n    snprintf(p, sizeof(p), \"%s: \", prefix);\r\n  }\r\n```",
            "commit_id": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
            "created_at": "2020-06-25T14:54:47Z",
            "diff_hunk": "@@ -74,6 +74,72 @@ void api_vim_free_all_mem(void)\n   map_free(String, handle_T)(namespace_ids);\n }\n \n+/// Posts a message to the global logger (which by default synchronously writes\n+/// to |$NVIM_LOG_FILE| using a best-effort, naive implementation).\n+///\n+/// Message is ignored (not logged) if `level` is not \"error\", unless 'verbose'\n+/// is set.\n+///\n+/// Example log message:\n+///\n+/// <pre>\n+///   ERROR 2020-01-12T01:56:19.484 93296 pynvim:remote: connected…\n+///   ^level ^timestamp             ^pid  ^category      ^message\n+/// </pre>\n+///\n+/// @see |nvim_get_chan_info()|\n+/// @see |nvim_set_client_info()|\n+///\n+/// @param channel_id Channel id (implicit dispatcher arg)\n+/// @param level  Log level (from highest to lowest: \"error\", \"warn\", \"info\",\n+///   \"debug\").  If 'verbose' is not set, only \"error\" messages are written to\n+///   |$NVIM_LOG_FILE|.\n+/// @param msg  Message body\n+/// @param opt  Map of optional parameters:\n+///   - type: String name of the subsystem or grouping (e.g. \"UI\", \"RPC\",\n+///     \"MyPlugin\", …). For API clients this defaults to the `client.name`\n+///     field of |nvim_get_chan_info()|.\n+///   - join: (boolean, default=false)\n+///   - trunc: (integer, default=0) Constrain the message body to this size.\n+void nvim_log(uint64_t channel_id, String level, String msg, Dictionary opt,\n+              Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  int loglevel = log_level_from_name(level.data);\n+  if (loglevel == -1) {\n+    api_set_error(err, kErrorTypeValidation, \"invalid level: %s\", level.data);\n+    return;\n+  }\n+  Object rv = OBJECT_INIT;\n+  Array args = ARRAY_DICT_INIT;\n+  ADD(args, DICTIONARY_OBJ(opt));\n+  rv = nvim_exec_lua(STATIC_CSTR_AS_STRING(\n+      \"local o = ...\\n\"\n+      \"vim.validate{trunc={o.trunc,'n',true},join={o.join,'b',true}}\\n\"\n+      \"return {(o.join and true or false), (o.trunc and o.trunc or 0),\\n\"\n+      \"  (o.type and o.type or '')}\\n\"),\n+                     args, err);\n+  if (ERROR_SET(err)) {\n+    goto theend;\n+  }\n+  assert(rv.type == kObjectTypeArray);\n+  Object *items = rv.data.array.items;\n+  bool join = items[0].data.boolean;\n+  int64_t trunc = items[1].data.integer >= 0 ? items[1].data.integer : 0;\n+  char *prefix = items[2].data.string.data;\n+\n+  char p[32];  // Formatted prefix.\n+  if (prefix[0] == '\\0') {\n+    // Generate a default category/group/prefix.\n+    rpc_chan_desc(channel_id, prefix, sizeof(p) - 2);",
            "html_url": "https://github.com/neovim/neovim/pull/12503#discussion_r445621150",
            "id": 445621150,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyMTE1MA==",
            "original_commit_id": "831c0da79d637b38e39718ff92d94d00b550446c",
            "original_line": 134,
            "original_position": 61,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 437577651,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12503",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/445621150/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-01-06T08:06:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/445621150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11682285?v=4",
                "events_url": "https://api.github.com/users/erw7/events{/privacy}",
                "followers_url": "https://api.github.com/users/erw7/followers",
                "following_url": "https://api.github.com/users/erw7/following{/other_user}",
                "gists_url": "https://api.github.com/users/erw7/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/erw7",
                "id": 11682285,
                "login": "erw7",
                "node_id": "MDQ6VXNlcjExNjgyMjg1",
                "organizations_url": "https://api.github.com/users/erw7/orgs",
                "received_events_url": "https://api.github.com/users/erw7/received_events",
                "repos_url": "https://api.github.com/users/erw7/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/erw7/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/erw7/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/erw7",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12503#discussion_r446499280"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12503"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/446499280"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sorry for the late response :sweat_smile: \r\nI didn't get a notification from github regarding this and only came across this today when I came here to try and check things again. I will try this and run the tests again.",
            "commit_id": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
            "created_at": "2020-06-27T08:02:33Z",
            "diff_hunk": "@@ -74,6 +74,72 @@ void api_vim_free_all_mem(void)\n   map_free(String, handle_T)(namespace_ids);\n }\n \n+/// Posts a message to the global logger (which by default synchronously writes\n+/// to |$NVIM_LOG_FILE| using a best-effort, naive implementation).\n+///\n+/// Message is ignored (not logged) if `level` is not \"error\", unless 'verbose'\n+/// is set.\n+///\n+/// Example log message:\n+///\n+/// <pre>\n+///   ERROR 2020-01-12T01:56:19.484 93296 pynvim:remote: connected…\n+///   ^level ^timestamp             ^pid  ^category      ^message\n+/// </pre>\n+///\n+/// @see |nvim_get_chan_info()|\n+/// @see |nvim_set_client_info()|\n+///\n+/// @param channel_id Channel id (implicit dispatcher arg)\n+/// @param level  Log level (from highest to lowest: \"error\", \"warn\", \"info\",\n+///   \"debug\").  If 'verbose' is not set, only \"error\" messages are written to\n+///   |$NVIM_LOG_FILE|.\n+/// @param msg  Message body\n+/// @param opt  Map of optional parameters:\n+///   - type: String name of the subsystem or grouping (e.g. \"UI\", \"RPC\",\n+///     \"MyPlugin\", …). For API clients this defaults to the `client.name`\n+///     field of |nvim_get_chan_info()|.\n+///   - join: (boolean, default=false)\n+///   - trunc: (integer, default=0) Constrain the message body to this size.\n+void nvim_log(uint64_t channel_id, String level, String msg, Dictionary opt,\n+              Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  int loglevel = log_level_from_name(level.data);\n+  if (loglevel == -1) {\n+    api_set_error(err, kErrorTypeValidation, \"invalid level: %s\", level.data);\n+    return;\n+  }\n+  Object rv = OBJECT_INIT;\n+  Array args = ARRAY_DICT_INIT;\n+  ADD(args, DICTIONARY_OBJ(opt));\n+  rv = nvim_exec_lua(STATIC_CSTR_AS_STRING(\n+      \"local o = ...\\n\"\n+      \"vim.validate{trunc={o.trunc,'n',true},join={o.join,'b',true}}\\n\"\n+      \"return {(o.join and true or false), (o.trunc and o.trunc or 0),\\n\"\n+      \"  (o.type and o.type or '')}\\n\"),\n+                     args, err);\n+  if (ERROR_SET(err)) {\n+    goto theend;\n+  }\n+  assert(rv.type == kObjectTypeArray);\n+  Object *items = rv.data.array.items;\n+  bool join = items[0].data.boolean;\n+  int64_t trunc = items[1].data.integer >= 0 ? items[1].data.integer : 0;\n+  char *prefix = items[2].data.string.data;\n+\n+  char p[32];  // Formatted prefix.\n+  if (prefix[0] == '\\0') {\n+    // Generate a default category/group/prefix.\n+    rpc_chan_desc(channel_id, prefix, sizeof(p) - 2);",
            "html_url": "https://github.com/neovim/neovim/pull/12503#discussion_r446499280",
            "id": 446499280,
            "in_reply_to_id": 445621150,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5OTI4MA==",
            "original_commit_id": "831c0da79d637b38e39718ff92d94d00b550446c",
            "original_line": 134,
            "original_position": 61,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 438681670,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12503",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/446499280/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-01-06T08:06:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/446499280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12503#discussion_r446506073"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12503"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/446506073"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thanks a lot @erw7. That fixed it. Now there is this memory leak to debug.\r\nThank you once again. I was stuck on this from more than a week, and never even looked at that line.I just saw the first few errors and thought they were to blame :/ \r\nAstute observation I must say :)",
            "commit_id": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
            "created_at": "2020-06-27T09:31:56Z",
            "diff_hunk": "@@ -74,6 +74,72 @@ void api_vim_free_all_mem(void)\n   map_free(String, handle_T)(namespace_ids);\n }\n \n+/// Posts a message to the global logger (which by default synchronously writes\n+/// to |$NVIM_LOG_FILE| using a best-effort, naive implementation).\n+///\n+/// Message is ignored (not logged) if `level` is not \"error\", unless 'verbose'\n+/// is set.\n+///\n+/// Example log message:\n+///\n+/// <pre>\n+///   ERROR 2020-01-12T01:56:19.484 93296 pynvim:remote: connected…\n+///   ^level ^timestamp             ^pid  ^category      ^message\n+/// </pre>\n+///\n+/// @see |nvim_get_chan_info()|\n+/// @see |nvim_set_client_info()|\n+///\n+/// @param channel_id Channel id (implicit dispatcher arg)\n+/// @param level  Log level (from highest to lowest: \"error\", \"warn\", \"info\",\n+///   \"debug\").  If 'verbose' is not set, only \"error\" messages are written to\n+///   |$NVIM_LOG_FILE|.\n+/// @param msg  Message body\n+/// @param opt  Map of optional parameters:\n+///   - type: String name of the subsystem or grouping (e.g. \"UI\", \"RPC\",\n+///     \"MyPlugin\", …). For API clients this defaults to the `client.name`\n+///     field of |nvim_get_chan_info()|.\n+///   - join: (boolean, default=false)\n+///   - trunc: (integer, default=0) Constrain the message body to this size.\n+void nvim_log(uint64_t channel_id, String level, String msg, Dictionary opt,\n+              Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  int loglevel = log_level_from_name(level.data);\n+  if (loglevel == -1) {\n+    api_set_error(err, kErrorTypeValidation, \"invalid level: %s\", level.data);\n+    return;\n+  }\n+  Object rv = OBJECT_INIT;\n+  Array args = ARRAY_DICT_INIT;\n+  ADD(args, DICTIONARY_OBJ(opt));\n+  rv = nvim_exec_lua(STATIC_CSTR_AS_STRING(\n+      \"local o = ...\\n\"\n+      \"vim.validate{trunc={o.trunc,'n',true},join={o.join,'b',true}}\\n\"\n+      \"return {(o.join and true or false), (o.trunc and o.trunc or 0),\\n\"\n+      \"  (o.type and o.type or '')}\\n\"),\n+                     args, err);\n+  if (ERROR_SET(err)) {\n+    goto theend;\n+  }\n+  assert(rv.type == kObjectTypeArray);\n+  Object *items = rv.data.array.items;\n+  bool join = items[0].data.boolean;\n+  int64_t trunc = items[1].data.integer >= 0 ? items[1].data.integer : 0;\n+  char *prefix = items[2].data.string.data;\n+\n+  char p[32];  // Formatted prefix.\n+  if (prefix[0] == '\\0') {\n+    // Generate a default category/group/prefix.\n+    rpc_chan_desc(channel_id, prefix, sizeof(p) - 2);",
            "html_url": "https://github.com/neovim/neovim/pull/12503#discussion_r446506073",
            "id": 446506073,
            "in_reply_to_id": 445621150,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwNjA3Mw==",
            "original_commit_id": "831c0da79d637b38e39718ff92d94d00b550446c",
            "original_line": 134,
            "original_position": 61,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 438685790,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12503",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/446506073/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-01-06T08:06:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/446506073",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/12503#discussion_r1519249254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/12503"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1519249254"
                }
            },
            "author_association": "MEMBER",
            "body": "this can be replaced by a `Dict(nvim_log)` keyset now.",
            "commit_id": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
            "created_at": "2024-03-11T07:25:45Z",
            "diff_hunk": "@@ -75,6 +74,75 @@ void api_vim_free_all_mem(void)\n   map_free(String, handle_T)(namespace_ids);\n }\n \n+/// Posts a message to the global logger (which by default synchronously writes\n+/// to |$NVIM_LOG_FILE| using a best-effort, naive implementation).\n+///\n+/// Message is ignored (not logged) if `level` is not \"error\", unless 'verbose'\n+/// is set.\n+///\n+/// Example log message:\n+///\n+/// <pre>\n+///   ERROR 2020-01-12T01:56:19.484 93296 pynvim:remote: connected…\n+///   ^level ^timestamp             ^pid  ^category      ^message\n+/// </pre>\n+///\n+/// @see |nvim_get_chan_info()|\n+/// @see |nvim_set_client_info()|\n+///\n+/// @param channel_id Channel id (implicit dispatcher arg)\n+/// @param level  Log level (from highest to lowest: \"error\", \"warn\", \"info\",\n+///   \"debug\").  If 'verbose' is not set, only \"error\" messages are written to\n+///   |$NVIM_LOG_FILE|.\n+/// @param msg  Message body\n+/// @param opt  Map of optional parameters:\n+///   - type: String name of the subsystem or grouping (e.g. \"UI\", \"RPC\",\n+///     \"MyPlugin\", …). For API clients this defaults to the `client.name`\n+///     field of |nvim_get_chan_info()|.\n+///   - join: (boolean, default=false)\n+///   - trunc: (integer, default=0) Constrain the message body to this size.\n+void nvim_log(uint64_t channel_id, String level, String msg, Dictionary opt,\n+              Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  int loglevel = log_level_from_name(level.data);\n+  if (loglevel == -1) {\n+    api_set_error(err, kErrorTypeValidation, \"invalid level: %s\", level.data);\n+    return;\n+  }\n+  Object rv = OBJECT_INIT;\n+  Array args = ARRAY_DICT_INIT;\n+  ADD(args, DICTIONARY_OBJ(opt));\n+  rv = nvim_exec_lua(STATIC_CSTR_AS_STRING(\n+      \"local o = ...\\n\"\n+      \"vim.validate{trunc={o.trunc,'n',true},join={o.join,'b',true}}\\n\"\n+      \"return {(o.join and true or false), (o.trunc and o.trunc or 0),\\n\"\n+      \"  (o.type and o.type or '')}\\n\"),\n+                     args, err);\n+  if (ERROR_SET(err)) {\n+    goto theend;\n+  }\n+  assert(rv.type == kObjectTypeArray);\n+  Object *items = rv.data.array.items;\n+  bool join = items[0].data.boolean;\n+  int64_t trunc = items[1].data.integer >= 0 ? items[1].data.integer : 0;\n+  char *prefix = items[2].data.string.data;",
            "html_url": "https://github.com/neovim/neovim/pull/12503#discussion_r1519249254",
            "id": 1519249254,
            "line": 129,
            "node_id": "PRRC_kwDOAPphoM5ajedm",
            "original_commit_id": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
            "original_line": 129,
            "original_position": 61,
            "original_start_line": 113,
            "path": "src/nvim/api/vim.c",
            "position": 61,
            "pull_request_review_id": 1927075577,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/12503",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1519249254/reactions"
            },
            "side": "RIGHT",
            "start_line": 113,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-03-11T07:25:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1519249254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "you have linting errors in your PR, you can run make clint, make lualint (IIRC) to check them locally",
            "created_at": "2020-06-18T22:36:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/12503#issuecomment-646339192",
            "id": 646339192,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12503",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjMzOTE5Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/646339192/reactions"
            },
            "updated_at": "2020-06-18T22:36:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/646339192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can't seem to pass the Travis CI builds. I thought I wasn't able to create the logfile and so I changed it's path to `$TRAVIS_BUILD_DIR/Xtest-logpath` but now I am getting a `SIGPIPE`. Unfortunately I am not seeing these errors on my machine and can't help a lot with this. If someone could help with the travis build issue, the PR is pretty much complete.",
            "created_at": "2020-06-25T07:07:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/12503#issuecomment-649287955",
            "id": 649287955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12503",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTI4Nzk1NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/649287955/reactions"
            },
            "updated_at": "2020-06-25T07:07:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/649287955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Using `module.request` [here](https://github.com/neovim/neovim/pull/7062/files#diff-33008990d305461ece636fb5f89a6b7bR414) creates a blocking request.\r\n```\r\n   module.request('nvim_set_client_info', 'testclient', {}, 'remote', {}, {})\r\n```\r\nWhen we start neovim with an error, in [this](https://github.com/neovim/neovim/blob/master/test/functional/ex_cmds/encoding_spec.lua#L24) test:\r\n```\r\n  it('cannot be changed before startup', function()\r\n    clear('--cmd', 'set enc=latin1')\r\n    -- error message expected\r\n    feed('<cr>')\r\n    neq(nil, string.find(eval('v:errmsg'), '^E519:'))\r\n    eq('utf-8', eval('&encoding'))\r\n    eq(3, eval('strwidth(\"Bär\")'))\r\n  end)\r\n```\r\nthe request created above blocks the session and hence the test hangs. I tried using `module.nvim_async`, but that resulted in a few open handles as shown in the current log [here](https://travis-ci.org/github/neovim/neovim/jobs/704994838#L7733).\r\n\r\nAny suggestions on how to proceed? I couldn't find a way of cleaning up the handles after `nvim_async`. ",
            "created_at": "2020-08-24T22:27:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/12503#issuecomment-679397916",
            "id": 679397916,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12503",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTM5NzkxNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/679397916/reactions"
            },
            "updated_at": "2020-08-24T22:27:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/679397916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12503/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/12503/commits",
    "created_at": "2020-06-18T11:01:01Z",
    "diff_url": "https://github.com/neovim/neovim/pull/12503.diff",
    "draft": false,
    "head": {
        "label": "BK1603:log-api",
        "ref": "log-api",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/BK1603/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/BK1603/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/BK1603/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/BK1603/neovim/branches{/branch}",
            "clone_url": "https://github.com/BK1603/neovim.git",
            "collaborators_url": "https://api.github.com/repos/BK1603/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/BK1603/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/BK1603/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/BK1603/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/BK1603/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/BK1603/neovim/contributors",
            "created_at": "2020-01-31T08:50:18Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/BK1603/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/BK1603/neovim/downloads",
            "events_url": "https://api.github.com/repos/BK1603/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/BK1603/neovim/forks",
            "full_name": "BK1603/neovim",
            "git_commits_url": "https://api.github.com/repos/BK1603/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/BK1603/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/BK1603/neovim/git/tags{/sha}",
            "git_url": "git://github.com/BK1603/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/BK1603/neovim/hooks",
            "html_url": "https://github.com/BK1603/neovim",
            "id": 237392279,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/BK1603/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/BK1603/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/BK1603/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/BK1603/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/BK1603/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/BK1603/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/BK1603/neovim/merges",
            "milestones_url": "https://api.github.com/repos/BK1603/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzczOTIyNzk=",
            "notifications_url": "https://api.github.com/repos/BK1603/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
                "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
                "followers_url": "https://api.github.com/users/BK1603/followers",
                "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
                "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BK1603",
                "id": 29245744,
                "login": "BK1603",
                "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
                "organizations_url": "https://api.github.com/users/BK1603/orgs",
                "received_events_url": "https://api.github.com/users/BK1603/received_events",
                "repos_url": "https://api.github.com/users/BK1603/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BK1603",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/BK1603/neovim/pulls{/number}",
            "pushed_at": "2022-11-19T03:51:16Z",
            "releases_url": "https://api.github.com/repos/BK1603/neovim/releases{/id}",
            "size": 210690,
            "ssh_url": "git@github.com:BK1603/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/BK1603/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/BK1603/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/BK1603/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/BK1603/neovim/subscription",
            "svn_url": "https://github.com/BK1603/neovim",
            "tags_url": "https://api.github.com/repos/BK1603/neovim/tags",
            "teams_url": "https://api.github.com/repos/BK1603/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/BK1603/neovim/git/trees{/sha}",
            "updated_at": "2020-07-19T17:39:53Z",
            "url": "https://api.github.com/repos/BK1603/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "da9802a46e55d4b505863ba08dc73c91bbe94f4c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
            "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
            "followers_url": "https://api.github.com/users/BK1603/followers",
            "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
            "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/BK1603",
            "id": 29245744,
            "login": "BK1603",
            "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
            "organizations_url": "https://api.github.com/users/BK1603/orgs",
            "received_events_url": "https://api.github.com/users/BK1603/received_events",
            "repos_url": "https://api.github.com/users/BK1603/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/BK1603",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/12503",
    "id": 436395429,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12503",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim core functionality or code",
            "id": 858327504,
            "name": "core",
            "node_id": "MDU6TGFiZWw4NTgzMjc1MDQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/core"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1548913774,
            "name": "logging",
            "node_id": "MDU6TGFiZWwxNTQ4OTEzNzc0",
            "url": "https://api.github.com/repos/neovim/neovim/labels/logging"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 726,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 630,
        "state": "open",
        "title": "backlog",
        "updated_at": "2025-07-07T03:51:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDM2Mzk1NDI5",
    "number": 12503,
    "patch_url": "https://github.com/neovim/neovim/pull/12503.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/12503/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/da9802a46e55d4b505863ba08dc73c91bbe94f4c",
    "title": "logging: nvim_log(), other improvements",
    "updated_at": "2025-07-02T08:57:57Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/12503",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29245744?v=4",
        "events_url": "https://api.github.com/users/BK1603/events{/privacy}",
        "followers_url": "https://api.github.com/users/BK1603/followers",
        "following_url": "https://api.github.com/users/BK1603/following{/other_user}",
        "gists_url": "https://api.github.com/users/BK1603/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/BK1603",
        "id": 29245744,
        "login": "BK1603",
        "node_id": "MDQ6VXNlcjI5MjQ1NzQ0",
        "organizations_url": "https://api.github.com/users/BK1603/orgs",
        "received_events_url": "https://api.github.com/users/BK1603/received_events",
        "repos_url": "https://api.github.com/users/BK1603/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/BK1603/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BK1603/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/BK1603",
        "user_view_type": "public"
    }
}