{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33972/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33972/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33972"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33972"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33972/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/231d5175f9190ffddaa8c639531258fd6d554a35"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6179,
            "forks_count": 6179,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1956,
            "open_issues_count": 1956,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T22:14:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332755,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91117,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-15T02:58:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91117,
            "watchers_count": 91117,
            "web_commit_signoff_required": false
        },
        "sha": "7bf04bc01fdba15c2ec55de2fe22a74683a318cf",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "\r\n[inline_completion.webm](https://github.com/user-attachments/assets/32f178f9-a26f-43f7-9a8b-a9d7554eacb2)\r\n\r\n\r\nSupported language servers like [copilot-language-server](https://www.npmjs.com/package/@github/copilot-language-server) need user authentication, which relies on custom methods. If you want to test this PR, check [my configuration for copilot](https://github.com/ofseed/nvim/blob/main/lsp/copilot.lua), which added handlers for it.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2123719177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123719177"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we integrate this with `vim.lsp.completion`, instead of adding a new interface?\r\n\r\nEven if inline_completion ends up presenting differently, I think we don't want multiple ways to *configure* LSP completions. `vim.lsp.completion` (and the various vim completion-related options) is the interface for enabling completions.\r\n\r\ninline_completions may even have a different mapping. But still, it may make sense for that mapping to invoke `vim.lsp.completion.*()` with different parameters, rather than duplicating most of it in `vim.lsp.inline_completion`.\r\n\r\n",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-06-03T12:50:45Z",
            "diff_hunk": "@@ -2116,6 +2122,39 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+*vim.lsp.inline_completion.BufState*",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2123719177",
            "id": 2123719177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-lWIJ",
            "original_commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "original_line": 2172,
            "original_position": 27,
            "original_start_line": 2126,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2892210020,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123719177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-03T13:18:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123719177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2123721440"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123721440"
                }
            },
            "author_association": "MEMBER",
            "body": "does it make sense for this to live in `runtime/lua/vim/lsp/completion.lua` ?",
            "commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "created_at": "2025-06-03T12:51:46Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2123721440",
            "id": 2123721440,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5-lWrg",
            "original_commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": 1,
            "pull_request_review_id": 2892213747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123721440/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-06-03T12:51:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123721440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2123724327"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123724327"
                }
            },
            "author_association": "MEMBER",
            "body": "there are some completion-related core highlight groups such as `ComplMatchIns`. is that relevant here? maybe we should add another `ComplFoo` hl group instead of a `LspInline...` groups",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-06-03T12:53:05Z",
            "diff_hunk": "@@ -217,6 +217,8 @@ static const char *highlight_init_both[] = {\n   \"default link LspCodeLens                 NonText\",\n   \"default link LspCodeLensSeparator        LspCodeLens\",\n   \"default link LspInlayHint                NonText\",\n+  \"default link LspInlineCompletion         NonText\",\n+  \"default link LspInlineCompletionSuffix   Title\",",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2123724327",
            "id": 2123724327,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-lXYn",
            "original_commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "original_line": 221,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 2892218355,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123724327/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-03T12:53:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2123724327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2184126942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2184126942"
                }
            },
            "author_association": "NONE",
            "body": "`utf-16` > `client.offset_encoding` ?",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-04T01:56:00Z",
            "diff_hunk": "@@ -0,0 +1,243 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class vim.lsp.inline_completion.State\n+---@field items lsp.InlineCompletionItem[]\n+---@field current integer index of currently active completion item\n+---@field extmark integer id of the currently visible extmark\n+---@field autocmd integer id of the autocmd\n+\n+---@type table<integer, vim.lsp.inline_completion.State?>\n+local bufstates = {}\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+local augroup = api.nvim_create_augroup('nvim.lsp.inline_completion', {})\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+local function clear(bufnr)\n+  local bufstate = assert(bufstates[bufnr])\n+  api.nvim_buf_del_extmark(bufnr, namespace, bufstate.extmark)\n+  api.nvim_del_autocmd(bufstate.autocmd)\n+  bufstates[bufnr] = nil\n+end\n+\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+---@type lsp.MultiHandler\n+local function handler(results, ctx)\n+  local items = {}\n+  for _, result in pairs(results) do\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        table.insert(items, item)\n+      end\n+    end\n+  end\n+\n+  if #items == 0 then\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  bufstates[bufnr] = {\n+    items = items,\n+    current = 1,\n+    extmark = set_extmark(bufnr, items[1]),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      group = augroup,\n+      buffer = bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        clear(bufnr)\n+      end,\n+    }),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+local function request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,\n+    }\n+  end, handler)\n+end\n+\n+---@class vim.lsp.inline_completion.JumpOpts\n+---@inlinedoc\n+---\n+---(default: current)\n+---@field bufnr? integer\n+---\n+---(default: 1)\n+---@field count? integer\n+---\n+---(default: true)\n+---@field wrap? boolean\n+\n+---@param opts vim.lsp.inline_completion.JumpOpts\n+function M.jump(opts)\n+  opts = opts or {}\n+  local bufnr = vim._resolve_bufnr(opts.bufnr)\n+  local bufstate = bufstates[bufnr]\n+  if not bufstate then\n+    return\n+  end\n+\n+  local count = opts.count or 1\n+  local wrap = opts.wrap or true\n+\n+  local items = bufstate.items\n+  local active = bufstate.current + count\n+  active = wrap and (active - 1) % #items + 1 or math.min(math.max(1, active), #items)\n+  api.nvim_buf_del_extmark(bufnr, namespace, bufstate.extmark)\n+  bufstate.extmark = set_extmark(bufnr, items[active], (' (%d/%d)'):format(active, #items))\n+  bufstate.current = active\n+end\n+\n+---@param bufnr? integer\n+function M.trigger(bufnr)\n+  bufnr = vim._resolve_bufnr(bufnr)\n+  local bufstate = bufstates[bufnr]\n+  if not bufstate then -- Trigger\n+    ---@type lsp.InlineCompletionContext\n+    local context = { triggerKind = 1 }\n+    request(bufnr, context)\n+  else -- Accept\n+    local item = bufstate.items[bufstate.current]\n+    local text = item.insertText\n+    local range = item.range\n+    if type(text) ~= 'string' then\n+      vim.snippet.expand(text.value)\n+    elseif range then\n+      util.apply_text_edits({ { newText = text, range = range } }, bufnr, 'utf-16')",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2184126942",
            "id": 2184126942,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CLyHe",
            "original_commit_id": "14dace2ddb9719ece852c77bdc63c474b7ef1390",
            "original_line": 178,
            "original_position": 178,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2985184224,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2184126942/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-04T01:56:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2184126942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/90168447?v=4",
                "events_url": "https://api.github.com/users/luozhiya/events{/privacy}",
                "followers_url": "https://api.github.com/users/luozhiya/followers",
                "following_url": "https://api.github.com/users/luozhiya/following{/other_user}",
                "gists_url": "https://api.github.com/users/luozhiya/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luozhiya",
                "id": 90168447,
                "login": "luozhiya",
                "node_id": "MDQ6VXNlcjkwMTY4NDQ3",
                "organizations_url": "https://api.github.com/users/luozhiya/orgs",
                "received_events_url": "https://api.github.com/users/luozhiya/received_events",
                "repos_url": "https://api.github.com/users/luozhiya/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luozhiya/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luozhiya/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luozhiya",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2184175563"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2184175563"
                }
            },
            "author_association": "NONE",
            "body": "We already have `next_debounce` infrastructure in `lsp/_changetracking.lua`. Can we reuse this part of the code?\r\n \r\nRef: `client.flags.debounce_text_changes`",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-04T02:46:50Z",
            "diff_hunk": "@@ -0,0 +1,243 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class vim.lsp.inline_completion.State\n+---@field items lsp.InlineCompletionItem[]\n+---@field current integer index of currently active completion item\n+---@field extmark integer id of the currently visible extmark\n+---@field autocmd integer id of the autocmd\n+\n+---@type table<integer, vim.lsp.inline_completion.State?>\n+local bufstates = {}\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+local augroup = api.nvim_create_augroup('nvim.lsp.inline_completion', {})\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+local function clear(bufnr)\n+  local bufstate = assert(bufstates[bufnr])\n+  api.nvim_buf_del_extmark(bufnr, namespace, bufstate.extmark)\n+  api.nvim_del_autocmd(bufstate.autocmd)\n+  bufstates[bufnr] = nil\n+end\n+\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+---@type lsp.MultiHandler\n+local function handler(results, ctx)\n+  local items = {}\n+  for _, result in pairs(results) do\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        table.insert(items, item)\n+      end\n+    end\n+  end\n+\n+  if #items == 0 then\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  bufstates[bufnr] = {\n+    items = items,\n+    current = 1,\n+    extmark = set_extmark(bufnr, items[1]),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      group = augroup,\n+      buffer = bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        clear(bufnr)\n+      end,\n+    }),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+local function request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,\n+    }\n+  end, handler)\n+end\n+\n+---@class vim.lsp.inline_completion.JumpOpts\n+---@inlinedoc\n+---\n+---(default: current)\n+---@field bufnr? integer\n+---\n+---(default: 1)\n+---@field count? integer\n+---\n+---(default: true)\n+---@field wrap? boolean\n+\n+---@param opts vim.lsp.inline_completion.JumpOpts\n+function M.jump(opts)\n+  opts = opts or {}\n+  local bufnr = vim._resolve_bufnr(opts.bufnr)\n+  local bufstate = bufstates[bufnr]\n+  if not bufstate then\n+    return\n+  end\n+\n+  local count = opts.count or 1\n+  local wrap = opts.wrap or true\n+\n+  local items = bufstate.items\n+  local active = bufstate.current + count\n+  active = wrap and (active - 1) % #items + 1 or math.min(math.max(1, active), #items)\n+  api.nvim_buf_del_extmark(bufnr, namespace, bufstate.extmark)\n+  bufstate.extmark = set_extmark(bufnr, items[active], (' (%d/%d)'):format(active, #items))\n+  bufstate.current = active\n+end\n+\n+---@param bufnr? integer\n+function M.trigger(bufnr)\n+  bufnr = vim._resolve_bufnr(bufnr)\n+  local bufstate = bufstates[bufnr]\n+  if not bufstate then -- Trigger\n+    ---@type lsp.InlineCompletionContext\n+    local context = { triggerKind = 1 }\n+    request(bufnr, context)\n+  else -- Accept\n+    local item = bufstate.items[bufstate.current]\n+    local text = item.insertText\n+    local range = item.range\n+    if type(text) ~= 'string' then\n+      vim.snippet.expand(text.value)\n+    elseif range then\n+      util.apply_text_edits({ { newText = text, range = range } }, bufnr, 'utf-16')\n+    end\n+    clear(bufnr)\n+  end\n+end\n+\n+---@generic T: function\n+---@param f T\n+---@param timeout integer\n+---@return T\n+local function debunce(f, timeout)\n+  ---@type uv.uv_timer_t?\n+  local timer = nil\n+  return function(...)\n+    local args = { ... }\n+    if timer then\n+      vim.uv.timer_stop(timer)\n+      timer:close()\n+      timer = nil\n+    end\n+    timer = assert(vim.uv.new_timer())\n+    vim.uv.timer_start(\n+      timer,\n+      timeout,\n+      0,\n+      vim.schedule_wrap(function()\n+        if timer then\n+          vim.uv.timer_stop(timer)\n+          timer:close()\n+          timer = nil\n+        end\n+        f(unpack(args))\n+      end)\n+    )\n+  end\n+end\n+\n+---@param bufnr integer\n+local function automatic_request(bufnr)\n+  request(bufnr, { triggerKind = 2 })\n+end\n+\n+---(default: true)\n+---@param enable? boolean\n+---\n+---(default: current)\n+---@param bufnr? integer\n+function M.enable(enable, bufnr)\n+  enable = enable == nil or enable\n+  bufnr = vim._resolve_bufnr(bufnr)\n+  local debounced_request = debunce(automatic_request, 100)",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2184175563",
            "id": 2184175563,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CL9_L",
            "original_commit_id": "14dace2ddb9719ece852c77bdc63c474b7ef1390",
            "original_line": 228,
            "original_position": 228,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2985243019,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2184175563/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-04T02:54:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2184175563",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/90168447?v=4",
                "events_url": "https://api.github.com/users/luozhiya/events{/privacy}",
                "followers_url": "https://api.github.com/users/luozhiya/followers",
                "following_url": "https://api.github.com/users/luozhiya/following{/other_user}",
                "gists_url": "https://api.github.com/users/luozhiya/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luozhiya",
                "id": 90168447,
                "login": "luozhiya",
                "node_id": "MDQ6VXNlcjkwMTY4NDQ3",
                "organizations_url": "https://api.github.com/users/luozhiya/orgs",
                "received_events_url": "https://api.github.com/users/luozhiya/received_events",
                "repos_url": "https://api.github.com/users/luozhiya/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luozhiya/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luozhiya/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luozhiya",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188124666"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188124666"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The main significance lies in reducing the number of files, as the logic of `inline_completion` basically cannot be shared with `completion`.\r\n\r\nI am not opposed to this approach, but I am not sure if it is still necessary to do so now, considering that we have decided to continue using the `vim.lsp.{feature}.enable` pattern?",
            "commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "created_at": "2025-07-06T09:07:01Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188124666",
            "id": 2188124666,
            "in_reply_to_id": 2123721440,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6CbCH6",
            "original_commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": 1,
            "pull_request_review_id": 2991113523,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188124666/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-07-06T09:07:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188124666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188126137"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188126137"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "According to my understanding of `Compl`, it doesn't seem relevant. The purpose of these highlight groups is to display the ghost text of completion candidates. Are we interested in supporting similar functionality? For example, displaying ghost text for candidates in the cmdline.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T09:13:23Z",
            "diff_hunk": "@@ -217,6 +217,8 @@ static const char *highlight_init_both[] = {\n   \"default link LspCodeLens                 NonText\",\n   \"default link LspCodeLensSeparator        LspCodeLens\",\n   \"default link LspInlayHint                NonText\",\n+  \"default link LspInlineCompletion         NonText\",\n+  \"default link LspInlineCompletionSuffix   Title\",",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188126137",
            "id": 2188126137,
            "in_reply_to_id": 2123724327,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbCe5",
            "original_commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "original_line": 221,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 2991115184,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188126137/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T09:13:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188126137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188127049"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188127049"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Many other places in various LSP modules also require debouncing, most of which are to prevent a large number of requests caused by users frequently changing the text. I will keep an eye on this issue, but for now, I prefer to refactor it in a subsequent PR.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T09:17:20Z",
            "diff_hunk": "@@ -0,0 +1,243 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class vim.lsp.inline_completion.State\n+---@field items lsp.InlineCompletionItem[]\n+---@field current integer index of currently active completion item\n+---@field extmark integer id of the currently visible extmark\n+---@field autocmd integer id of the autocmd\n+\n+---@type table<integer, vim.lsp.inline_completion.State?>\n+local bufstates = {}\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+local augroup = api.nvim_create_augroup('nvim.lsp.inline_completion', {})\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+local function clear(bufnr)\n+  local bufstate = assert(bufstates[bufnr])\n+  api.nvim_buf_del_extmark(bufnr, namespace, bufstate.extmark)\n+  api.nvim_del_autocmd(bufstate.autocmd)\n+  bufstates[bufnr] = nil\n+end\n+\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+---@type lsp.MultiHandler\n+local function handler(results, ctx)\n+  local items = {}\n+  for _, result in pairs(results) do\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        table.insert(items, item)\n+      end\n+    end\n+  end\n+\n+  if #items == 0 then\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  bufstates[bufnr] = {\n+    items = items,\n+    current = 1,\n+    extmark = set_extmark(bufnr, items[1]),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      group = augroup,\n+      buffer = bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        clear(bufnr)\n+      end,\n+    }),\n+  }\n+end\n+\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+local function request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,\n+    }\n+  end, handler)\n+end\n+\n+---@class vim.lsp.inline_completion.JumpOpts\n+---@inlinedoc\n+---\n+---(default: current)\n+---@field bufnr? integer\n+---\n+---(default: 1)\n+---@field count? integer\n+---\n+---(default: true)\n+---@field wrap? boolean\n+\n+---@param opts vim.lsp.inline_completion.JumpOpts\n+function M.jump(opts)\n+  opts = opts or {}\n+  local bufnr = vim._resolve_bufnr(opts.bufnr)\n+  local bufstate = bufstates[bufnr]\n+  if not bufstate then\n+    return\n+  end\n+\n+  local count = opts.count or 1\n+  local wrap = opts.wrap or true\n+\n+  local items = bufstate.items\n+  local active = bufstate.current + count\n+  active = wrap and (active - 1) % #items + 1 or math.min(math.max(1, active), #items)\n+  api.nvim_buf_del_extmark(bufnr, namespace, bufstate.extmark)\n+  bufstate.extmark = set_extmark(bufnr, items[active], (' (%d/%d)'):format(active, #items))\n+  bufstate.current = active\n+end\n+\n+---@param bufnr? integer\n+function M.trigger(bufnr)\n+  bufnr = vim._resolve_bufnr(bufnr)\n+  local bufstate = bufstates[bufnr]\n+  if not bufstate then -- Trigger\n+    ---@type lsp.InlineCompletionContext\n+    local context = { triggerKind = 1 }\n+    request(bufnr, context)\n+  else -- Accept\n+    local item = bufstate.items[bufstate.current]\n+    local text = item.insertText\n+    local range = item.range\n+    if type(text) ~= 'string' then\n+      vim.snippet.expand(text.value)\n+    elseif range then\n+      util.apply_text_edits({ { newText = text, range = range } }, bufnr, 'utf-16')\n+    end\n+    clear(bufnr)\n+  end\n+end\n+\n+---@generic T: function\n+---@param f T\n+---@param timeout integer\n+---@return T\n+local function debunce(f, timeout)\n+  ---@type uv.uv_timer_t?\n+  local timer = nil\n+  return function(...)\n+    local args = { ... }\n+    if timer then\n+      vim.uv.timer_stop(timer)\n+      timer:close()\n+      timer = nil\n+    end\n+    timer = assert(vim.uv.new_timer())\n+    vim.uv.timer_start(\n+      timer,\n+      timeout,\n+      0,\n+      vim.schedule_wrap(function()\n+        if timer then\n+          vim.uv.timer_stop(timer)\n+          timer:close()\n+          timer = nil\n+        end\n+        f(unpack(args))\n+      end)\n+    )\n+  end\n+end\n+\n+---@param bufnr integer\n+local function automatic_request(bufnr)\n+  request(bufnr, { triggerKind = 2 })\n+end\n+\n+---(default: true)\n+---@param enable? boolean\n+---\n+---(default: current)\n+---@param bufnr? integer\n+function M.enable(enable, bufnr)\n+  enable = enable == nil or enable\n+  bufnr = vim._resolve_bufnr(bufnr)\n+  local debounced_request = debunce(automatic_request, 100)",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188127049",
            "id": 2188127049,
            "in_reply_to_id": 2184175563,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbCtJ",
            "original_commit_id": "14dace2ddb9719ece852c77bdc63c474b7ef1390",
            "original_line": 228,
            "original_position": 228,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991116241,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188127049/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T09:17:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188127049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188268943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188268943"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this can be simplified:\r\n```suggestion\r\n  local virt_lines = { unpack(lines, 2) }\r\n```",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T13:17:37Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188268943",
            "id": 2188268943,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CblWP",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 79,
            "original_position": 79,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991272238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188268943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:37:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188268943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188271876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188271876"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe the `triggerKind` values could be added to `constants` in `lsp/protocol.lua`, and then that value could be used here for more clarity? Or maybe even just a comment here explaining that this `2` means that it is an automatic completion",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T13:20:18Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188271876",
            "id": 2188271876,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbmEE",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991272238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188271876/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:37:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188271876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188274095"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188274095"
                }
            },
            "author_association": "MEMBER",
            "body": "`make_position_params` also returns the `textDocument`, maybe we could just call this to create the params and inject the `context` field? Or keep it how it is now but put the result of `make_position_params()` in another variable and read its fields to populate both `textDocument` and `position`?",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T13:23:19Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188274095",
            "id": 2188274095,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cbmmv",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 160,
            "original_position": 160,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991272238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188274095/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:37:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188274095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188277063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188277063"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit, but could this be simplified to the following?\r\n```suggestion\r\n  Completor.active[bufnr] = Completor.active[bufnr] or Completor.new(bufnr)\r\n```",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T13:27:43Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,\n+    }\n+  end, function(...)\n+    self:handler(...)\n+  end)\n+end\n+\n+---@param bufnr integer\n+function M._start(bufnr)\n+  local completor = Completor.active[bufnr]\n+  if not completor then\n+    completor = Completor.new(bufnr)\n+    Completor.active[bufnr] = completor\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188277063",
            "id": 2188277063,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbnVH",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 216,
            "original_position": 173,
            "original_start_line": 169,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991272238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188277063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-06T13:37:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188277063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188309540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188309540"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There is a corresponding type in `protocol.lua`, but this type corresponds to a JavaScript `enum`, so the value is either `1` or `2`, and it can only be an alias in lucats. We can get the corresponding description by hovering \r\n![image](https://github.com/user-attachments/assets/24475188-76c2-4720-93fa-59ae713351bc)\r\n\r\n",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T13:54:33Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188309540",
            "id": 2188309540,
            "in_reply_to_id": 2188271876,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbvQk",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991318633,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188309540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:54:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188309540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188310332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188310332"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thanks, not aware of `unpack`'s other parameter.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T13:55:59Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188310332",
            "id": 2188310332,
            "in_reply_to_id": 2188268943,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cbvc8",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 79,
            "original_position": 79,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991319394,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188310332/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:55:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188310332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188317596"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188317596"
                }
            },
            "author_association": "MEMBER",
            "body": "That makes sense, but I think we can still put it in the `constants` table? For example, we do this for the code action trigger kind which is the same type as here:\r\n\r\nhttps://github.com/neovim/neovim/blob/4f141dca8c888d62b332f31fd51fa3e9b2e6cb89/runtime/lua/vim/lsp/protocol.lua#L301\r\n\r\nimo this makes it clearer than having a magic number",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T14:00:24Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188317596",
            "id": 2188317596,
            "in_reply_to_id": 2188271876,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbxOc",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991328012,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188317596/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T14:00:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188317596",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188323115"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188323115"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Although this approach is more concise, it does not assign a value to `completor`. Even though it is not needed at the moment, once we support `enable`, we will need to use `completor:request` below to send new requests. ",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T14:02:31Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,\n+    }\n+  end, function(...)\n+    self:handler(...)\n+  end)\n+end\n+\n+---@param bufnr integer\n+function M._start(bufnr)\n+  local completor = Completor.active[bufnr]\n+  if not completor then\n+    completor = Completor.new(bufnr)\n+    Completor.active[bufnr] = completor\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188323115",
            "id": 2188323115,
            "in_reply_to_id": 2188277063,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cbykr",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 216,
            "original_position": 173,
            "original_start_line": 169,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991335499,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188323115/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-06T14:02:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188323115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188335063"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188335063"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I chose the first approach. I noticed that `make_position_params` and `make_range_params` directly return the completed parameters instead of `lsp.Position` or `lsp.Range`, which makes their behavior somewhat inconsistent with `make_text_document_params` and a bit awkward to use. I hope there can be a better solution.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T14:13:34Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }\n+\n+  vim.lsp.buf_request_all(bufnr, ms.textDocument_inlineCompletion, function(client)\n+    ---@type lsp.InlineCompletionParams\n+    return {\n+      context = context,\n+      textDocument = util.make_text_document_params(bufnr),\n+      position = util.make_position_params(nil, client.offset_encoding).position,",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188335063",
            "id": 2188335063,
            "in_reply_to_id": 2188274095,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cb1fX",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 160,
            "original_position": 160,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991350789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188335063/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T14:13:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188335063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188339790"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188339790"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh, sorry, I didn't know such usage already existed.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T14:16:16Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188339790",
            "id": 2188339790,
            "in_reply_to_id": 2188271876,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cb2pO",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991357368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188339790/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T14:16:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188339790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2188348202"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188348202"
                }
            },
            "author_association": "MEMBER",
            "body": "No worries :+1: ",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-06T14:25:52Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field item lsp.InlineCompletionItem\n+\n+---@class (private) vim.lsp.inline_completion.Completor\n+---@field active table<integer, vim.lsp.inline_completion.Completor?>\n+---@field bufnr integer\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local Completor = { active = {} }\n+\n+---@package\n+---@param bufnr integer\n+function Completor.new(bufnr)\n+  local self = setmetatable({}, { __index = Completor })\n+  self.bufnr = bufnr\n+  return self\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item lsp.InlineCompletionItem\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local line, col\n+\n+  if item.range then\n+    line = item.range['start'].line\n+    col = item.range['start'].character\n+  else\n+    local winid = vim.fn.bufwinid(bufnr)\n+    local pos = api.nvim_win_get_cursor(winid)\n+    line = pos[1] - 1\n+    col = pos[2]\n+  end\n+\n+  local text = item.insertText\n+  if type(text) ~= 'string' then\n+    text = tostring(grammar.parse(text.value))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do\n+    table.insert(lines, { { s, 'LspInlineCompletion' } })\n+  end\n+  if suffix then\n+    table.insert(lines[#lines], { suffix, 'LspInlineCompletionSuffix' })\n+  end\n+\n+  local virt_text = lines[1]\n+  local virt_lines = { select(2, unpack(lines)) }\n+  local skip =\n+    lcp(api.nvim_buf_get_lines(bufnr, line, line + 1, true)[1]:sub(col + 1), virt_text[1][1])\n+  virt_text[1][1] = virt_text[1][1]:sub(skip)\n+  return api.nvim_buf_set_extmark(bufnr, namespace, line, col + skip - 1, {\n+    virt_text = virt_text,\n+    virt_lines = virt_lines,\n+    virt_text_pos = 'overlay',\n+  })\n+end\n+\n+---@package\n+---@param results table<integer, { err: lsp.ResponseError?, result: lsp.InlineCompletionItem[]|lsp.InlineCompletionList? }>\n+function Completor:handler(results)\n+  ---@type vim.lsp.inline_completion.Item[]\n+  local items = {}\n+\n+  for client_id, result in pairs(results) do\n+    local client = assert(vim.lsp.get_client_by_id(client_id))\n+    if result.err then\n+      log.error(result.err)\n+    elseif result.result then\n+      for _, item in ipairs(result.result.items or result.result) do\n+        item.range['start'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['start'], client.offset_encoding)\n+        item.range['end'].character =\n+          util._get_line_byte_from_position(self.bufnr, item.range['end'], client.offset_encoding)\n+        table.insert(items, { client_id = client_id, item = item })\n+      end\n+    end\n+  end\n+\n+  if #items ~= 0 then\n+    self.items = items\n+    self:present(1)\n+  end\n+end\n+\n+---@package\n+---@param index integer\n+---@param show_index? boolean\n+function Completor:present(index, show_index)\n+  if self.current then\n+    self:dismiss()\n+  end\n+  self.current = {\n+    index = index,\n+    extmark = set_extmark(\n+      self.bufnr,\n+      self.items[index].item,\n+      show_index and (' (%d/%d)'):format(index, #self.items) or nil\n+    ),\n+    autocmd = api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {\n+      buffer = self.bufnr,\n+      desc = 'Clean up candidate inline completion items',\n+      callback = function()\n+        self:dismiss()\n+      end,\n+    }),\n+  }\n+end\n+\n+---@package\n+function Completor:dismiss()\n+  local current = assert(self.current)\n+  api.nvim_buf_del_extmark(self.bufnr, namespace, current.extmark)\n+  api.nvim_del_autocmd(current.autocmd)\n+  self.current = nil\n+end\n+\n+---@package\n+---@param bufnr integer\n+---@param context? lsp.InlineCompletionContext\n+function Completor:request(bufnr, context)\n+  context = context or { triggerKind = 2 }",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2188348202",
            "id": 2188348202,
            "in_reply_to_id": 2188271876,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cb4sq",
            "original_commit_id": "5c032b8b1496e42dd0d4289cc491a788d49b7723",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 2991367222,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188348202/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T14:25:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188348202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2190634342"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2190634342"
                }
            },
            "author_association": "MEMBER",
            "body": "Mention what it defaults to.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-07T16:54:54Z",
            "diff_hunk": "@@ -2160,6 +2166,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`)",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2190634342",
            "id": 2190634342,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Ckm1m",
            "original_commit_id": "8151eff96801e8e4b1c9ebf3f418bd3cb5f7c602",
            "original_line": 2177,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2994697670,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2190634342/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T16:58:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2190634342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2190636133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2190636133"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we want to enable this by default?",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-07T16:55:55Z",
            "diff_hunk": "@@ -1085,6 +1085,9 @@ function Client:on_attach(bufnr)\n     if vim.tbl_get(self.server_capabilities, 'foldingRangeProvider') then\n       lsp._folding_range._setup(bufnr)\n     end\n+    if vim.tbl_get(self.server_capabilities, 'inlineCompletionProvider') then\n+      lsp.inline_completion._start(bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2190636133",
            "id": 2190636133,
            "line": 1087,
            "node_id": "PRRC_kwDOAPphoM6CknRl",
            "original_commit_id": "8151eff96801e8e4b1c9ebf3f418bd3cb5f7c602",
            "original_line": 1087,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 13,
            "pull_request_review_id": 2994697670,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2190636133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T16:58:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2190636133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203160417"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203160417"
                }
            },
            "author_association": "MEMBER",
            "body": "Perhaps we should think of names that describe the general concept rather than being specific to lsp (and even more specific lsp sub-features). Something like `ComplHint` and `ComplSuffix` (I don't know the semantics so I'm just guessing).\r\n\r\n",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T05:07:24Z",
            "diff_hunk": "@@ -217,6 +217,8 @@ static const char *highlight_init_both[] = {\n   \"default link LspCodeLens                 NonText\",\n   \"default link LspCodeLensSeparator        LspCodeLens\",\n   \"default link LspInlayHint                NonText\",\n+  \"default link LspInlineCompletion         NonText\",\n+  \"default link LspInlineCompletionSuffix   Title\",",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203160417",
            "id": 2203160417,
            "in_reply_to_id": 2123724327,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUY9h",
            "original_commit_id": "d68b8a09282832b7153ad3f888fe2992017cc47f",
            "original_line": 221,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 3013877254,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203160417/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T05:07:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203160417",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203216251"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203216251"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This doesn't mean it is enabled by default, because it currently cannot be `enabled` and can only be triggered manually. I am about to add the `enable` logic, based on the same logic as #34797.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T07:20:50Z",
            "diff_hunk": "@@ -1085,6 +1085,9 @@ function Client:on_attach(bufnr)\n     if vim.tbl_get(self.server_capabilities, 'foldingRangeProvider') then\n       lsp._folding_range._setup(bufnr)\n     end\n+    if vim.tbl_get(self.server_capabilities, 'inlineCompletionProvider') then\n+      lsp.inline_completion._start(bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203216251",
            "id": 2203216251,
            "in_reply_to_id": 2190636133,
            "line": 1087,
            "node_id": "PRRC_kwDOAPphoM6DUml7",
            "original_commit_id": "8151eff96801e8e4b1c9ebf3f418bd3cb5f7c602",
            "original_line": 1087,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 13,
            "pull_request_review_id": 3013957636,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203216251/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T07:20:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203216251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203423067"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203423067"
                }
            },
            "author_association": "MEMBER",
            "body": "👍  [ref](https://github.com/neovim/neovim/pull/33972#discussion_r2123724327) do these names make sense to people @echasnovski @neovim/core ",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T15:14:28Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203423067",
            "id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVZFb",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3014193867,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203423067/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T15:15:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203423067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203425324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203425324"
                }
            },
            "author_association": "MEMBER",
            "body": "👍 select() already has 2 other overloaded meanings, so `accept()` seems like the right choice here.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T15:22:50Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203425324",
            "id": 2203425324,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVZos",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2166,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3014196047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203425324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T15:22:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203425324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203425530"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203425530"
                }
            },
            "author_association": "MEMBER",
            "body": "however, in `vim.lsp.completion` we settled on `vim.lsp.completion.get()` to mean \"get the list of candidates\"",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T15:23:48Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203425530",
            "id": 2203425530,
            "line": 2168,
            "node_id": "PRRC_kwDOAPphoM6DVZr6",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2168,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 17,
            "pull_request_review_id": 3014196284,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203425530/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T15:23:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203425530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203431252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203431252"
                }
            },
            "author_association": "MEMBER",
            "body": "From only reading highlight group name I could not infer what `ComplSuffix` is for. Even after reading its help I was not sure. And only watching demo helped me understand.\r\n\r\nI think using `Suffix` unnecessarily reduces group's scope. If it is meant to only show hint's extra details, then maybe something like `ComplHintDetails` or `ComplHintMore`? If more general - then `ComplInfo`.\r\n\r\nThe `ComplHint` is fine, but to me personally something like `ComplGhost` would be more to the point.\r\n\r\nCurrently I'd opt for `ComplGhost` and `ComplGhostInfo`, probably.\r\n\r\n---\r\n\r\nThe default links look good to me.\r\n\r\nIn case names end up being `ComplHint` and `ComplInfo`, there might be merit in linking to `DiagnosticVirtualTextHint` and `DiagnosticVirtualTextInfo`. But that will make them more colorful in general and blue/cyan in default color scheme. Whereas inline completion suggestion is indeed usually shown \"dark grey\" to not stand out too much.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T15:44:14Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203431252",
            "id": 2203431252,
            "in_reply_to_id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVbFU",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3014201712,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203431252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T15:44:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203431252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203431912"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203431912"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a reason 'colors/vim.lua' and this have different link for `ComplSuffix`? The `MoreMsg` seems like a better highlight group (despite it being designed for command line).",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T15:46:50Z",
            "diff_hunk": "@@ -177,6 +177,8 @@ static const char *highlight_init_both[] = {\n   \"default link PmenuKindSel     PmenuSel\",\n   \"default link PmenuSbar        Pmenu\",\n   \"default link ComplMatchIns    NONE\",\n+  \"default link ComplHint        NonText\",\n+  \"default link ComplSuffix      Title\",",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203431912",
            "id": 2203431912,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVbPo",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 181,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 3014202390,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203431912/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T15:46:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203431912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203436976"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203436976"
                }
            },
            "author_association": "MEMBER",
            "body": "sounds good. but \"ghost text\" is called \"virtual text\" in Nvim. let's not add another variation\r\n\r\n",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T16:05:26Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203436976",
            "id": 2203436976,
            "in_reply_to_id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVcew",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3014207026,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203436976/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T16:11:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203436976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203438068"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203438068"
                }
            },
            "author_association": "MEMBER",
            "body": "does this navigate the buffer while the user is selecting items in the completion menu? a bit more hints in the docs will be useful",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T16:09:55Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)\n+\n+jump({opts})                                *vim.lsp.inline_completion.jump()*\n+    Jumps to another inline completion candidate.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203438068",
            "id": 2203438068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVcv0",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2174,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3014208117,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203438068/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T16:09:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203438068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203439013"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203439013"
                }
            },
            "author_association": "MEMBER",
            "body": "dedent() allows indenting the values to be more readable\n```suggestion\n  local text = dedent([[\n    function fibonacci()\n    ]])\n```",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T16:13:34Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local t_lsp = require('test.functional.plugin.lsp.testutil')\n+local Screen = require('test.functional.ui.screen')\n+\n+local dedent = t.dedent\n+\n+local api = n.api\n+local exec_lua = n.exec_lua\n+local insert = n.insert\n+local feed = n.feed\n+\n+local clear_notrace = t_lsp.clear_notrace\n+local create_server_definition = t_lsp.create_server_definition\n+\n+describe('vim.lsp.inline_completion', function()\n+  local text = dedent([[\n+function fibonacci()\n+]])",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203439013",
            "id": 2203439013,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVc-l",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": 17,
            "path": "test/functional/plugin/lsp/inline_completion_spec.lua",
            "position": null,
            "pull_request_review_id": 3014208924,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203439013/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T16:13:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203439013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203439195"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203439195"
                }
            },
            "author_association": "MEMBER",
            "body": "screen:expect() dedents, so we can indent here. same for other cases.\n```suggestion\n  local grid_without_candidates = [[\n    function fibonacci()                                 |\n    ^                                                     |\n    {1:~                                                    }|*11\n                                                         |\n  ]]\n```",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T16:14:18Z",
            "diff_hunk": "@@ -0,0 +1,231 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local t_lsp = require('test.functional.plugin.lsp.testutil')\n+local Screen = require('test.functional.ui.screen')\n+\n+local dedent = t.dedent\n+\n+local api = n.api\n+local exec_lua = n.exec_lua\n+local insert = n.insert\n+local feed = n.feed\n+\n+local clear_notrace = t_lsp.clear_notrace\n+local create_server_definition = t_lsp.create_server_definition\n+\n+describe('vim.lsp.inline_completion', function()\n+  local text = dedent([[\n+function fibonacci()\n+]])\n+\n+  local grid_without_candidates = [[\n+  function fibonacci()                                 |\n+  ^                                                     |\n+  {1:~                                                    }|*11\n+                                                       |\n+]]",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203439195",
            "id": 2203439195,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVdBb",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 26,
            "original_position": 26,
            "original_start_line": 21,
            "path": "test/functional/plugin/lsp/inline_completion_spec.lua",
            "position": null,
            "pull_request_review_id": 3014209077,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203439195/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T16:14:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203439195",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203465380"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203465380"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, makes sense.\r\n\r\nAnother option is to be as straightforward as possible: `ComplInline` and `ComplInlineInfo`.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T16:56:52Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203465380",
            "id": 2203465380,
            "in_reply_to_id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVjak",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3014251275,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203465380/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T16:56:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203465380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203488739"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203488739"
                }
            },
            "author_association": "MEMBER",
            "body": "We tend to describe this as `Buffer handle, or 0 for current. (default: 0)`",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T18:36:01Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203488739",
            "id": 2203488739,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVpHj",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2171,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3014277000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203488739/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T19:35:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203488739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203498009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203498009"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                • {wrap}? (`boolean`, default: `true`) Whether to loop around\r\n                  the file or not. Similar to 'wrapscan'.\r\n```",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T19:14:21Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)\n+\n+jump({opts})                                *vim.lsp.inline_completion.jump()*\n+    Jumps to another inline completion candidate.\n+\n+    Parameters: ~\n+      • {opts}  (`table?`) A table with the following fields:\n+                • {bufnr}? (`integer`) (default: current buffer)\n+                • {count}? (`integer`, default: v:count1) The number of\n+                  candidates to move by. A positive integer moves forward by\n+                  {count} candidates, while a negative integer moves backward\n+                  by {count} candidates.\n+                • {wrap}? (`boolean`, default: `true`) Whether to loop around\n+                  file or not. Similar to 'wrapscan'.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203498009",
            "id": 2203498009,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVrYZ",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2184,
            "original_position": 33,
            "original_start_line": 2183,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3014277000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203498009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-13T19:35:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203498009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203499433"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203499433"
                }
            },
            "author_association": "MEMBER",
            "body": "We need to add this method to this table since the request supports static registration:\r\nhttps://github.com/neovim/neovim/blob/444a8b3ec6375b03f1483a97095a00b067a499ec/runtime/lua/vim/lsp/client.lua#L587",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T19:21:01Z",
            "diff_hunk": "@@ -1082,6 +1082,9 @@ function Client:on_attach(bufnr)\n     if vim.tbl_get(self.server_capabilities, 'foldingRangeProvider') then\n       lsp._folding_range._setup(bufnr)\n     end\n+    if vim.tbl_get(self.server_capabilities, 'inlineCompletionProvider') then",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203499433",
            "id": 2203499433,
            "line": 1086,
            "node_id": "PRRC_kwDOAPphoM6DVrup",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 1086,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 12,
            "pull_request_review_id": 3014277000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203499433/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T19:35:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203499433",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203501101"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203501101"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  for s in vim.gsplit(text, '\\n', { plain = true }) do\r\n```",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T19:28:08Z",
            "diff_hunk": "@@ -0,0 +1,301 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local protocol = require('vim.lsp.protocol')\n+local ms = require('vim.lsp.protocol').Methods\n+local grammar = require('vim.lsp._snippet_grammar')\n+local api = vim.api\n+\n+local Capability = require('vim.lsp._capability')\n+\n+local M = {}\n+\n+---@class (private) vim.lsp.inline_completion.CurrentItem\n+---@field index integer\n+---@field extmark integer\n+---@field autocmd integer\n+\n+---@class (private) vim.lsp.inline_completion.Item\n+---@field client_id integer\n+---@field kind 'text' | 'snippet'\n+---@field value string\n+---@field filter_text? string\n+---@field range Range4\n+---@field command? lsp.Command\n+\n+---@class (private) vim.lsp.inline_completion.State : vim.lsp.Capability\n+---@field active table<integer, vim.lsp.inline_completion.State?>\n+---@field items vim.lsp.inline_completion.Item[]\n+---@field current? vim.lsp.inline_completion.CurrentItem\n+local State = { name = 'inline_completion', active = {} }\n+State.__index = State\n+setmetatable(State, Capability)\n+\n+---@package\n+---@param bufnr integer\n+---@return vim.lsp.inline_completion.State\n+function State:new(bufnr)\n+  return Capability.new(self, bufnr)\n+end\n+\n+local namespace = api.nvim_create_namespace('nvim.lsp.inline_completion')\n+\n+--- Longest common prefix\n+---\n+---@param a string\n+---@param b string\n+---@return integer index where the common prefix ends, exclusive\n+local function lcp(a, b)\n+  local i = 1\n+  while a:sub(i, i) == b:sub(i, i) do\n+    i = i + 1\n+  end\n+  return i\n+end\n+\n+---@param bufnr integer\n+---@param item vim.lsp.inline_completion.Item\n+---@param suffix? string\n+local function set_extmark(bufnr, item, suffix)\n+  ---@type integer, integer\n+  local row, col = unpack(item.range)\n+\n+  local text = item.value\n+  if item.kind == 'snippet' then\n+    text = tostring(grammar.parse(text))\n+  end\n+\n+  ---@type [string, string][][]\n+  local lines = {}\n+  for s in vim.gsplit(text, '\\n') do",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203501101",
            "id": 2203501101,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVsIt",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 69,
            "original_position": 69,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inline_completion.lua",
            "position": null,
            "pull_request_review_id": 3014277000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203501101/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T19:35:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203501101",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2203505884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203505884"
                }
            },
            "author_association": "MEMBER",
            "body": "those sound good too...",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-13T19:48:11Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2203505884",
            "id": 2203505884,
            "in_reply_to_id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DVtTc",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3014293907,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203505884/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T19:48:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203505884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204174838"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204174838"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Although `ComplInline` is more self-descriptive and accurate here, I think it would be better if we made it more general.\r\n\r\nNot only inline completions, but traditional completions can also leverage ghost text. Plugins like blink.cmp or nvim-cmp already have this feature. We could add a highlight group for 'ghost text of completion', so I think `CompHint` or `ComplGhost` would be better. Comparing these two, I think we just need one word for present 'ghost text', I prefer hint in this case because 'ghost' for 'ghost text' is not that easy to associate with if users are used to calling it 'virtual text'.\r\n\r\nFor `ComplHintSuffix`, would `ComplHintMsg` be better? Since we already have `MoreMsg` or `ModeMsg`, their meanings are quite close.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T08:19:17Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204174838",
            "id": 2204174838,
            "in_reply_to_id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DYQn2",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3015255783,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204174838/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T08:19:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204174838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204193540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204193540"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Then I tend to rename `accept()` to `get()`. `accept()` here has two functionalities, \"accept the current active completion\" or \"request new completions\"; they could be \"get the current active completion\" or \"get new completions\".",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T08:23:51Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204193540",
            "id": 2204193540,
            "in_reply_to_id": 2203425530,
            "line": 2168,
            "node_id": "PRRC_kwDOAPphoM6DYVME",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2168,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 17,
            "pull_request_review_id": 3015280933,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204193540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T08:23:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204193540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204198882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204198882"
                }
            },
            "author_association": "MEMBER",
            "body": "> For `ComplHintSuffix`, would `ComplHintMsg` be better? Since we already have `MoreMsg` or `ModeMsg`, their meanings are quite close.\r\n\r\nSpecifically because of `Msg` suffix in those groups, I'd assume that `ComplHintMsg` is meant for command line. But that might be me reading too much into it, so might be fine.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T08:26:02Z",
            "diff_hunk": "@@ -62,6 +62,8 @@ hi('PmenuMatchSel',  { link = 'PmenuSel' })\n hi('PmenuExtra',     { link = 'Pmenu' })\n hi('PmenuExtraSel',  { link = 'PmenuSel' })\n hi('ComplMatchIns',  {})\n+hi('ComplHint',      { link = 'NonText' })\n+hi('ComplSuffix',    { link = 'MoreMsg' })",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204198882",
            "id": 2204198882,
            "in_reply_to_id": 2203423067,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DYWfi",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 66,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/colors/vim.lua",
            "position": null,
            "pull_request_review_id": 3015289378,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204198882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T08:26:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204198882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204201010"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204201010"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh, that was just a mistake. I originally linked it to `Title`, but then I realized `MoreMsg` would be better. Thanks!",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T08:27:01Z",
            "diff_hunk": "@@ -177,6 +177,8 @@ static const char *highlight_init_both[] = {\n   \"default link PmenuKindSel     PmenuSel\",\n   \"default link PmenuSbar        Pmenu\",\n   \"default link ComplMatchIns    NONE\",\n+  \"default link ComplHint        NonText\",\n+  \"default link ComplSuffix      Title\",",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204201010",
            "id": 2204201010,
            "in_reply_to_id": 2203431912,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DYXAy",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 181,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 3015292330,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204201010/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T08:27:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204201010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204225726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204225726"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It is for switching between inline completion candidates in a single buffer. Choosing `jump` is because we have `vim.diagnostic.jump` using a negative value for the previous one and a positive value for the next one, and we don't want `prev()` and `next()`. I will modify the doc to make it easier to understand.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T08:37:54Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)\n+\n+jump({opts})                                *vim.lsp.inline_completion.jump()*\n+    Jumps to another inline completion candidate.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204225726",
            "id": 2204225726,
            "in_reply_to_id": 2203438068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DYdC-",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2174,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3015328483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204225726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T08:37:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204225726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204303590"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204303590"
                }
            },
            "author_association": "MEMBER",
            "body": "`jump` is a more or less established name for moving cursor and/or changing buffer. Cycling through completion candidates is not really any of them.\r\n\r\nCurrently there is a precedent with `vim.lsp.buf.signature_help()` cycle through candidates directly, but only in one direction. There might be better approaches, though.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T09:06:40Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)\n+\n+jump({opts})                                *vim.lsp.inline_completion.jump()*\n+    Jumps to another inline completion candidate.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204303590",
            "id": 2204303590,
            "in_reply_to_id": 2203438068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DYwDm",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2174,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3015454285,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204303590/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T09:06:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204303590",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204347009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204347009"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Makes sense, it's just switching between candidates. I think the problem here is finding a name for a function that can go forward or backward. How about `navigate`? I don't have a good idea.\r\n\r\nThe difference here is that `vim.lsp.buf.signature_help()` has both \"trigger\" and \"cycling\" functions, while inline completion's \"trigger\" function is completed by `vim.lsp.inline_completion.get()`, and `get()` also has the function of \"applying\" changes, so we need a separate function to navigate.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T09:27:14Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)\n+\n+jump({opts})                                *vim.lsp.inline_completion.jump()*\n+    Jumps to another inline completion candidate.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204347009",
            "id": 2204347009,
            "in_reply_to_id": 2203438068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DY6qB",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2174,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3015518507,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204347009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T09:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204347009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2204350136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204350136"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I noticed that `vim.diagnostic` has `vim.diagnostic.get_prev()` and `vim.diagnostic.get_next()`. Perhaps two separate functions would be better?",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T09:28:45Z",
            "diff_hunk": "@@ -2159,6 +2160,30 @@ is_enabled({filter})                         *vim.lsp.inlay_hint.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.inline_completion                  *lsp-inline_completion*\n+\n+accept({bufnr})                           *vim.lsp.inline_completion.accept()*\n+    Accepts the currently presented inline completion candidate, or requests a\n+    new inline completion.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer?`) (default: current)\n+\n+jump({opts})                                *vim.lsp.inline_completion.jump()*\n+    Jumps to another inline completion candidate.",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2204350136",
            "id": 2204350136,
            "in_reply_to_id": 2203438068,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DY7a4",
            "original_commit_id": "ba7afcd3ea324c86aa8d670bd28daeaed9d171ad",
            "original_line": 2174,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 3015523257,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204350136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T09:28:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2204350136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2205514656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2205514656"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: Could we move this above `inlineValue` to keep the rough alphabetical order?",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T18:06:17Z",
            "diff_hunk": "@@ -593,6 +593,7 @@ local static_registration_capabilities = {\n   [ms.textDocument_implementation] = 'implementationProvider',\n   [ms.textDocument_inlayHint] = 'inlayHintProvider',\n   [ms.textDocument_inlineValue] = 'inlineValueProvider',\n+  [ms.textDocument_inlineCompletion] = 'inlineCompletionProvider',",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2205514656",
            "id": 2205514656,
            "line": 596,
            "node_id": "PRRC_kwDOAPphoM6DdXug",
            "original_commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "original_line": 596,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 4,
            "pull_request_review_id": 3017291571,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2205514656/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T18:07:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2205514656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33972#discussion_r2205576937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33972"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2205576937"
                }
            },
            "author_association": "MEMBER",
            "body": "It should be universally either `ComplHintMore` or `ComplHintMsg`. After thinking more about it, I think `Msg` suffix for not command-line stuff is indeed more confusing than not. So I'd choose `ComplHintMore` among the two.",
            "commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "created_at": "2025-07-14T18:40:22Z",
            "diff_hunk": "@@ -5292,6 +5292,10 @@ PmenuMatchSel\tPopup menu: Matched text in selected item. Combined with\n \t\t|hl-PmenuMatch| and |hl-PmenuSel|.\n \t\t\t\t\t\t\t*hl-ComplMatchIns*\n ComplMatchIns\tMatched text of the currently inserted completion.\n+\t\t\t\t\t\t\t*hl-ComplHint*\n+ComplHint\tVirtual text of the currently selected completion.\n+\t\t\t\t\t\t\t*hl-ComplHintMore*",
            "html_url": "https://github.com/neovim/neovim/pull/33972#discussion_r2205576937",
            "id": 2205576937,
            "line": 5297,
            "node_id": "PRRC_kwDOAPphoM6Ddm7p",
            "original_commit_id": "231d5175f9190ffddaa8c639531258fd6d554a35",
            "original_line": 5297,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/syntax.txt",
            "position": 6,
            "pull_request_review_id": 3017398130,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2205576937/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-14T18:40:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2205576937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Note: support for multiline completions was [recently added](https://github.com/neovim/neovim/issues/7769#issuecomment-2614654005). However, I've noticed a bug in some cases; we should plan to fix bugs, but otherwise expect that the standard completion menu supports multiline items.\r\n\r\nWe can *also*, optionally, support an alternative presentation for inline_completion. But the basic support can/should leverage the normal completion UI.",
            "created_at": "2025-06-03T13:19:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/33972#issuecomment-2935193196",
            "id": 2935193196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
            "node_id": "IC_kwDOAPphoM6u835s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935193196/reactions"
            },
            "updated_at": "2025-06-03T13:19:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2935193196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I designed this feature so that autocomplete does not have to be enabled; it can be triggered manually only when needed. Autocomplete is also planned and easy to implement, but I want to wait until #34797 is merged before adding this feature. I think this PR should be ready for review.",
            "created_at": "2025-07-06T10:29:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/33972#issuecomment-3041298102",
            "id": 3041298102,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
            "node_id": "IC_kwDOAPphoM61Roa2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3041298102/reactions"
            },
            "updated_at": "2025-07-06T10:29:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3041298102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It seems that this addition of highlight caused the highlight ID to change, failing extui-related tests. @luukvbaal  Do you have any suggestions for modifying this test?",
            "created_at": "2025-07-07T06:19:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/33972#issuecomment-3043609898",
            "id": 3043609898,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
            "node_id": "IC_kwDOAPphoM61ac0q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043609898/reactions"
            },
            "updated_at": "2025-07-07T06:19:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043609898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The expected highlight IDs just need to be updated according to the new actual output. IDK of a way to avoid this breakage if that's what you meant.",
            "created_at": "2025-07-07T07:38:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/33972#issuecomment-3043819172",
            "id": 3043819172,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
            "node_id": "IC_kwDOAPphoM61bP6k",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043819172/reactions"
            },
            "updated_at": "2025-07-07T07:38:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043819172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thank you. I will update it to the new actual value here.",
            "created_at": "2025-07-07T07:59:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/33972#issuecomment-3043879840",
            "id": 3043879840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
            "node_id": "IC_kwDOAPphoM61beug",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043879840/reactions"
            },
            "updated_at": "2025-07-07T07:59:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043879840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I will update it to the new actual value here.\r\n\r\nThis should no longer be necessary after a rebase (on 3a3484be2991beb977a18bead293d5933250798a).",
            "created_at": "2025-07-09T16:14:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/33972#issuecomment-3053250711",
            "id": 3053250711,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
            "node_id": "IC_kwDOAPphoM61_OiX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3053250711/reactions"
            },
            "updated_at": "2025-07-09T16:14:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3053250711",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33972/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33972/commits",
    "created_at": "2025-05-11T16:20:34Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33972.diff",
    "draft": false,
    "head": {
        "label": "ofseed:lsp-inline-comp",
        "ref": "lsp-inline-comp",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ofseed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ofseed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ofseed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ofseed/neovim/branches{/branch}",
            "clone_url": "https://github.com/ofseed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ofseed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ofseed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ofseed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ofseed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ofseed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ofseed/neovim/contributors",
            "created_at": "2021-11-30T18:13:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ofseed/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ofseed/neovim/downloads",
            "events_url": "https://api.github.com/repos/ofseed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ofseed/neovim/forks",
            "full_name": "ofseed/neovim",
            "git_commits_url": "https://api.github.com/repos/ofseed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ofseed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ofseed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ofseed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ofseed/neovim/hooks",
            "html_url": "https://github.com/ofseed/neovim",
            "id": 433537354,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ofseed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ofseed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ofseed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ofseed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ofseed/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ofseed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ofseed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ofseed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGddBSg",
            "notifications_url": "https://api.github.com/repos/ofseed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ofseed/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T09:40:52Z",
            "releases_url": "https://api.github.com/repos/ofseed/neovim/releases{/id}",
            "size": 324276,
            "ssh_url": "git@github.com:ofseed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ofseed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ofseed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ofseed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ofseed/neovim/subscription",
            "svn_url": "https://github.com/ofseed/neovim",
            "tags_url": "https://api.github.com/repos/ofseed/neovim/tags",
            "teams_url": "https://api.github.com/repos/ofseed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ofseed/neovim/git/trees{/sha}",
            "updated_at": "2025-07-13T05:07:55Z",
            "url": "https://api.github.com/repos/ofseed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "231d5175f9190ffddaa8c639531258fd6d554a35",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
            "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofseed/followers",
            "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofseed",
            "id": 61115159,
            "login": "ofseed",
            "node_id": "MDQ6VXNlcjYxMTE1MTU5",
            "organizations_url": "https://api.github.com/users/ofseed/orgs",
            "received_events_url": "https://api.github.com/users/ofseed/received_events",
            "repos_url": "https://api.github.com/users/ofseed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofseed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33972",
    "id": 2512203996,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33972",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "43ad73414e10ea4d711052508fca1266365974ae",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6VvTDc",
    "number": 33972,
    "patch_url": "https://github.com/neovim/neovim/pull/33972.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33972/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/231d5175f9190ffddaa8c639531258fd6d554a35",
    "title": "feat(lsp): support `textDocument/inlineCompletion`",
    "updated_at": "2025-07-14T18:40:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33972",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}