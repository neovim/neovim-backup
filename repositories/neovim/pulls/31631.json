{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31631/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31631/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31631"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31631"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31631/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/bd4ca22d0334a3323313dfd6975a80218ec65e36"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5811,
            "forks_count": 5811,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1839,
            "open_issues_count": 1839,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-01-13T23:17:24Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 303311,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85218,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-01-14T02:06:03Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85218,
            "watchers_count": 85218,
            "web_commit_signoff_required": false
        },
        "sha": "3fdc4302415972eb5d98ba832372236be3d22572",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "**Problem:** Parsing can be slow for large files, and it is a blocking operation which can be disruptive and annoying.\r\n\r\n**Solution:** Provide a function for asynchronous parsing, which accepts a callback to be run after parsing completes.\r\n\r\nThis borrows from #22420 and from the pulsar implementation a bit. It currently works with the big linux file in my local testing, and I think the code is a bit simpler than before.\r\n\r\nThat said, there are still some stutters at times (with the gigantic file), which is disappointing. Start up time is massively improved but cursor movement stalls towards the end of parsing completion. ~If anyone can provide some insights on how to smooth over the asynchronous chunks it would be much appreciated.~\r\n\r\nThanks to some digging by @vanaigr, it is clear that the stutters are due to injection processing, specifically in the `iter_matches()` call in `LanguageTree:_get_injections()`. This is essentially the only highlighting bottleneck now. Deleting injection queries for the language gives no stutter whatsoever, and completely asynchronous highlighting.",
    "closed_at": "2025-01-13T06:58:34Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1891086046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891086046"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a bit dangerous because we return `self` right after this- imo this function should not parse at all but I would like to hear some feedback on this\r\n\r\n(I tested removing `parse()` completely and not many tests failed, but it would mean that uses would have to manually parse in more cases than usual, e.g. when using `get_node()`)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T03:30:59Z",
            "diff_hunk": "@@ -61,7 +61,7 @@ function M._create_parser(bufnr, lang, opts)\n     { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\n   )\n \n-  self:parse()\n+  self:async_parse()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1891086046",
            "id": 1891086046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wt67e",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 64,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": null,
            "pull_request_review_id": 2513242634,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891086046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T03:30:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891086046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1891101316"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891101316"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is it possible for this parse to change the tree outside the provided range (e.g. a full reparse, combined injections)?\r\n\r\nIn that case, If the user scrolls up/down before the parse finishes, these newly visible lines would need to be redrawn as well when it does finish.\r\n\r\nUPD: I guess not, since a new parse will be requested for them as well.\r\n\r\n[Sorry, didn't highlight the lines below]",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T04:01:00Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1891101316",
            "id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wt-qE",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2513264187,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891101316/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T04:18:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891101316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1891123444"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891123444"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Though this does happen if there are 2 windows:\r\n<details>\r\n<summary>image</summary>\r\n\r\n![image](https://github.com/user-attachments/assets/1dc6e484-7a61-4bfd-9f2b-80f513c07520)\r\n\r\n</details>\r\n",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T04:26:58Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1891123444",
            "id": 1891123444,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wuED0",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2513295283,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891123444/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T05:31:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891123444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1891171204"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891171204"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It seems that the parser becomes desynchronized from the buffer. Not sure what I did to make this happen\r\n<details>\r\n<summary>image</summary>\r\n\r\n![image](https://github.com/user-attachments/assets/612ccf5f-625d-4d0f-8560-33f18e10d047)\r\n\r\n</details>",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T05:21:52Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1891171204",
            "id": 1891171204,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wuPuE",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2513374949,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891171204/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T05:31:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891171204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1891217040"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891217040"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, thanks so much for the thorough testing. I can't find how to replicate this, do you mind if I ask what you did for the buffer split one? That one looks bad lol",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T06:25:24Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1891217040",
            "id": 1891217040,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wua6Q",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2513456799,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891217040/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T06:25:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891217040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1891237615"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891237615"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "test.lua:\r\n```\r\nlocal _ = \"\r\nvim.api.nvim_set_hl(0, 'Test2', { bg = 'green' }) --repeated until line 50'000\r\nvim.api.nvim_set_hl(0, 'Test3', { bg = 'blue' })\r\n```\r\n\r\n1. Open a split window.\r\n2. Place the cursor on `\"`\r\n3. Enter insert mode and hold `\"` for ~5sec",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T06:52:11Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1891237615",
            "id": 1891237615,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5wuf7v",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2513489164,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891237615/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T07:06:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1891237615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1892856406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892856406"
                }
            },
            "author_association": "MEMBER",
            "body": "For the two windows case I have noticed that after a few seconds for another reparse, the windows again come into sync with their highlighting despite the initial loss of sync due to parser lag. Are you able to confirm this happening?\r\n\r\nAs for the `:InspectTree` weirdness my guess is maybe that since the parser there is parsing synchronously it interferes/is different from the main highlighter parsing which runs async?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T17:37:58Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1892856406",
            "id": 1892856406,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w0rJW",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2515739274,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892856406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T17:37:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892856406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1892892023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892892023"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> For the two windows case I have noticed that after a few seconds for another reparse, the windows again come into sync with their highlighting despite the initial loss of sync due to parser lag. Are you able to confirm this happening?\r\n> \r\n> As for the `:InspectTree` weirdness my guess is maybe that since the parser there is parsing synchronously it interferes/is different from the main highlighter parsing which runs async?\r\n\r\nYes, they almost always synchronize if not many actions are performed. I typed and removed the `\"` quickly and this happened. \r\n\r\nI assume both are essentially the same issue. When multiple parses are requested and the buffer is modified, sometimes the parser state becomes desynchronized.\r\n\r\nIn the `:InspectTree` case, I opened the preview to show that the root chunk is broken. The menu was opened after the fact. Before the issue happened, I also had the 2 windows.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T17:49:15Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1892892023",
            "id": 1892892023,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w0z13",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2515785262,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892892023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T17:53:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892892023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1892915270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892915270"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks, that makes sense. I am realizing now how nice it would be to have first class async support in nvim",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T17:56:52Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1892915270",
            "id": 1892915270,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w05hG",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2515816343,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892915270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T17:56:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892915270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1892921767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892921767"
                }
            },
            "author_association": "MEMBER",
            "body": "In your opinion, should this issue block this PR? I'm unaware how much of this is just a natural result of using async functionality vs true edge cases I still need to account for",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-19T17:58:55Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1892921767",
            "id": 1892921767,
            "in_reply_to_id": 1891101316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w07Gn",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 391,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2515824960,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892921767/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-19T17:59:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1892921767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1893854340"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893854340"
                }
            },
            "author_association": "MEMBER",
            "body": "Seems natural for this to be on the existing `:parse()`. If a callback isn't provided then it's synchronous. Don't think we what `async_` variants of functions everywhere.\r\n\r\n```suggestion\r\n      • {opts}   (`ParseOpts?`) Options:\r\n      * {on_parse} (fun(trees: table<integer, TSTree>)?)\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T11:59:12Z",
            "diff_hunk": "@@ -1479,6 +1482,21 @@ anyway as they will be very frequent. Rather a plugin that does any kind of\n analysis on a tree should use a timer to throttle too frequent updates.\n \n \n+LanguageTree:async_parse({range}, {opts})         *LanguageTree:async_parse()*\n+    Like |LanguageTree:parse()|, but asynchronous.\n+\n+    Parameters: ~\n+      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n+                 Set to `true` to run a complete parse of the source (Note:\n+                 Can be slow!) Set to `false|nil` to only parse regions with\n+                 empty ranges (typically only the root tree without\n+                 injections).\n+      • {opts}   (`AsyncParseOpts?`) Options:",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1893854340",
            "id": 1893854340,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4eyE",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 1494,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2517404917,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893854340/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T12:09:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893854340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1893855406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893855406"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, that's what I originally did.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T12:00:24Z",
            "diff_hunk": "@@ -1479,6 +1482,21 @@ anyway as they will be very frequent. Rather a plugin that does any kind of\n analysis on a tree should use a timer to throttle too frequent updates.\n \n \n+LanguageTree:async_parse({range}, {opts})         *LanguageTree:async_parse()*\n+    Like |LanguageTree:parse()|, but asynchronous.\n+\n+    Parameters: ~\n+      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n+                 Set to `true` to run a complete parse of the source (Note:\n+                 Can be slow!) Set to `false|nil` to only parse regions with\n+                 empty ranges (typically only the root tree without\n+                 injections).\n+      • {opts}   (`AsyncParseOpts?`) Options:",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1893855406",
            "id": 1893855406,
            "in_reply_to_id": 1893854340,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4fCu",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 1494,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2517407039,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893855406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T12:00:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893855406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1893858657"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893858657"
                }
            },
            "author_association": "MEMBER",
            "body": "> This is a bit dangerous because we return `self` right after this\r\n\r\nWhat is the worst case scenario?\r\n\r\nIf we want to make it safe, we could proxy the self methods to force waiting on the parse result. But I guess that could force synchronous behavior in more places than we want? Or throw an error if a self method is called before parse is finished.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T12:03:53Z",
            "diff_hunk": "@@ -61,7 +61,7 @@ function M._create_parser(bufnr, lang, opts)\n     { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\n   )\n \n-  self:parse()\n+  self:async_parse()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1893858657",
            "id": 1893858657,
            "in_reply_to_id": 1891086046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4f1h",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 64,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": null,
            "pull_request_review_id": 2517414431,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893858657/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T12:03:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893858657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1893859656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893859656"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nlocal default_parse_timeout_ms = 3\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T12:05:01Z",
            "diff_hunk": "@@ -44,6 +44,8 @@ local query = require('vim.treesitter.query')\n local language = require('vim.treesitter.language')\n local Range = require('vim.treesitter._range')\n \n+local DEFAULT_PARSE_TIMEOUT_MS = 3",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1893859656",
            "id": 1893859656,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4gFI",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 47,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2517416124,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893859656/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T12:05:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893859656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1893860720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893860720"
                }
            },
            "author_association": "MEMBER",
            "body": "maybe this is generally useful?\r\n```suggestion\r\nfunction LanguageTree:_buf()\r\n  return vim.b[self._source]\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T12:06:22Z",
            "diff_hunk": "@@ -98,6 +105,12 @@ local LanguageTree = {}\n \n LanguageTree.__index = LanguageTree\n \n+--- @return integer\n+function LanguageTree:_changedtick()\n+  --- @type integer\n+  return vim.b[self._source].changedtick",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1893860720",
            "id": 1893860720,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w4gVw",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 111,
            "original_position": 28,
            "original_start_line": 109,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2517418144,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893860720/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-20T12:06:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1893860720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894169600"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894169600"
                }
            },
            "author_association": "MEMBER",
            "body": "> What is the worst case scenario?\r\n\r\nWorst case scenario, we call this and then call a function which expects parsing to be complete (e.g. `get_node()`) but it is not yet complete (because it is running async) and now an error is thrown\r\n\r\nI think forcing a wait would not be ideal, that was basically what it was before with the sync parse but it destroyed the perf gains of async stuff because just retrieving the parser (which calls this function) would always run a (potentially slow) synchronous parse\r\n\r\nIn my opinion this should be removed, as it is weird (albeit helpful) side effect. Even the swap for `async_parse` is not ideal. I don't think removing this would be terribly breaking (by which I mean I think the breaking scenarios are pretty specific). Maybe we could massage the breaking effects by calling a synchronous parse inside the `get_node()` function (and other places where we deem it necessary)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T16:54:58Z",
            "diff_hunk": "@@ -61,7 +61,7 @@ function M._create_parser(bufnr, lang, opts)\n     { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\n   )\n \n-  self:parse()\n+  self:async_parse()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894169600",
            "id": 1894169600,
            "in_reply_to_id": 1891086046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w5rwA",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 64,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": null,
            "pull_request_review_id": 2517956562,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894169600/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T16:54:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894169600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894183319"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894183319"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah I am fine to change it back but I did make it two separate functions for a few reasons:\r\n\r\n1. Combining them would have to change the function signature of `parse()` from `Trees` to `Trees?`. This is not that intuitive because a sync parse always returns a list of trees and an async parse always returns `nil`. Things are slightly more confusing now, and returning the `Trees` in the async parse (to prevent function signature change) is out of the question because the trees are not yet parsed and it would be bad to return this to a user that might otherwise think async parsing was completed\r\n2. There are times where one might just want to do something like `:async_parse()` (no arguments). If we combine the functions we will have to pass an empty callback `function() end`. Maybe `{ async = true }` would be acceptable actually...\r\n3. If #19624 is ever completed and we want to change the async version to return a promise (or equivalent), it might be preferable to have two different functions (each with different coloring) so we can know exactly when it is safe to, say, `:await()` the result and when we can just use our returned `trees` immediately. Same issue as 1. I guess",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T17:07:11Z",
            "diff_hunk": "@@ -1479,6 +1482,21 @@ anyway as they will be very frequent. Rather a plugin that does any kind of\n analysis on a tree should use a timer to throttle too frequent updates.\n \n \n+LanguageTree:async_parse({range}, {opts})         *LanguageTree:async_parse()*\n+    Like |LanguageTree:parse()|, but asynchronous.\n+\n+    Parameters: ~\n+      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n+                 Set to `true` to run a complete parse of the source (Note:\n+                 Can be slow!) Set to `false|nil` to only parse regions with\n+                 empty ranges (typically only the root tree without\n+                 injections).\n+      • {opts}   (`AsyncParseOpts?`) Options:",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894183319",
            "id": 1894183319,
            "in_reply_to_id": 1893854340,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w5vGX",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 1494,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2517979578,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894183319/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T17:07:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894183319",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894239060"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894239060"
                }
            },
            "author_association": "MEMBER",
            "body": "I think (at least for now) we need to distinguish between \"background\" processing -- such as highlighting -- and \"on demand\" processing -- such as textobjects. Async is absolutely necessary for the former but can be deferred for the latter.\r\n\r\nSo I'd focus on highlighting performance and everything else not breaking; we can then make those properly async one by one (where it makes sense). This may require duplicating API for a while (with one being private/experimental).",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T18:06:28Z",
            "diff_hunk": "@@ -61,7 +61,7 @@ function M._create_parser(bufnr, lang, opts)\n     { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\n   )\n \n-  self:parse()\n+  self:async_parse()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894239060",
            "id": 1894239060,
            "in_reply_to_id": 1891086046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w58tU",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 64,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": null,
            "pull_request_review_id": 2518075970,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894239060/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T18:07:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894239060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894272506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894272506"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree. In this case the bare minimum to allow async highlighting is this change (in `_create_parser`, either running an async parse or removing that parse step altogether) and then the other one I have in `highlighter.new`",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-20T18:43:13Z",
            "diff_hunk": "@@ -61,7 +61,7 @@ function M._create_parser(bufnr, lang, opts)\n     { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\n   )\n \n-  self:parse()\n+  self:async_parse()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894272506",
            "id": 1894272506,
            "in_reply_to_id": 1891086046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w6E36",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 64,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": null,
            "pull_request_review_id": 2518132466,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894272506/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-20T18:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894272506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894523909"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894523909"
                }
            },
            "author_association": "MEMBER",
            "body": "Most of the UV functions combine sync and async into the same signature and it's generally been a well received design. Changing the static signature to return `tree?` isn't a big deal. If no callback is given then it still always returns `tree`. I also don't think passing an empty callback is a big deal either, or passing `{ async = true }` would be fine too.\n\nI'd also consider making the callback a positional parameter at the end instead of an option (as Justin has suggested). UV functions also do this, and will make wrapping functions nicer when we add `vim.async`.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T01:00:24Z",
            "diff_hunk": "@@ -1479,6 +1482,21 @@ anyway as they will be very frequent. Rather a plugin that does any kind of\n analysis on a tree should use a timer to throttle too frequent updates.\n \n \n+LanguageTree:async_parse({range}, {opts})         *LanguageTree:async_parse()*\n+    Like |LanguageTree:parse()|, but asynchronous.\n+\n+    Parameters: ~\n+      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n+                 Set to `true` to run a complete parse of the source (Note:\n+                 Can be slow!) Set to `false|nil` to only parse regions with\n+                 empty ranges (typically only the root tree without\n+                 injections).\n+      • {opts}   (`AsyncParseOpts?`) Options:",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894523909",
            "id": 1894523909,
            "in_reply_to_id": 1893854340,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7CQF",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 1494,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2518539993,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894523909/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T01:03:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894523909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894526087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894526087"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok that sounds perfect, thanks a ton :+1: ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T01:12:30Z",
            "diff_hunk": "@@ -1479,6 +1482,21 @@ anyway as they will be very frequent. Rather a plugin that does any kind of\n analysis on a tree should use a timer to throttle too frequent updates.\n \n \n+LanguageTree:async_parse({range}, {opts})         *LanguageTree:async_parse()*\n+    Like |LanguageTree:parse()|, but asynchronous.\n+\n+    Parameters: ~\n+      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n+                 Set to `true` to run a complete parse of the source (Note:\n+                 Can be slow!) Set to `false|nil` to only parse regions with\n+                 empty ranges (typically only the root tree without\n+                 injections).\n+      • {opts}   (`AsyncParseOpts?`) Options:",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894526087",
            "id": 1894526087,
            "in_reply_to_id": 1893854340,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7CyH",
            "original_commit_id": "5df81d70ae5d3bd4ff9894855dd126261f77f227",
            "original_line": 1494,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2518543029,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894526087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T01:12:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894526087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894626464"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894626464"
                }
            },
            "author_association": "MEMBER",
            "body": "If we need {opts} later it can be an overload 👍 ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T13:10:34Z",
            "diff_hunk": "@@ -1594,7 +1597,7 @@ LanguageTree:node_for_range({range}, {opts})\n     Return: ~\n         (`TSNode?`)\n \n-LanguageTree:parse({range})                             *LanguageTree:parse()*\n+LanguageTree:parse({range}, {callback})                 *LanguageTree:parse()*",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894626464",
            "id": 1894626464,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7bSg",
            "original_commit_id": "45591027cc852a1c0cf3c2ea0bc416cb64a725af",
            "original_line": 1600,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2518656859,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894626464/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T13:10:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894626464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894626691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894626691"
                }
            },
            "author_association": "MEMBER",
            "body": "Use `on_` prefix for callbacks. I'm being a bit dogmatic about this because people copy existing things, so every case matters.\r\n\r\n```suggestion\r\n      • {on_parse}  (`fun(trees: Trees)?`) Function invoked when parsing\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T13:12:21Z",
            "diff_hunk": "@@ -1605,14 +1608,16 @@ LanguageTree:parse({range})                             *LanguageTree:parse()*\n     if {range} is `true`).\n \n     Parameters: ~\n-      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n-                 Set to `true` to run a complete parse of the source (Note:\n-                 Can be slow!) Set to `false|nil` to only parse regions with\n-                 empty ranges (typically only the root tree without\n-                 injections).\n+      • {range}     (`boolean|Range?`) Parse this range in the parser's\n+                    source. Set to `true` to run a complete parse of the\n+                    source (Note: Can be slow!) Set to `false|nil` to only\n+                    parse regions with empty ranges (typically only the root\n+                    tree without injections).\n+      • {callback}  (`fun(trees: Trees)?`) A callback to be run when parsing",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894626691",
            "id": 1894626691,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7bWD",
            "original_commit_id": "45591027cc852a1c0cf3c2ea0bc416cb64a725af",
            "original_line": 1616,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2518657094,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894626691/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T13:13:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894626691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894627380"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894627380"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a good thread to leave un-resolved, so it can be found in the future.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T13:16:31Z",
            "diff_hunk": "@@ -61,7 +61,7 @@ function M._create_parser(bufnr, lang, opts)\n     { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\n   )\n \n-  self:parse()\n+  self:async_parse()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894627380",
            "id": 1894627380,
            "in_reply_to_id": 1891086046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7bg0",
            "original_commit_id": "56e5a04f94660c093c40233ac1187827869ebc40",
            "original_line": 64,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": null,
            "pull_request_review_id": 2518658063,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894627380/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T13:16:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894627380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652410"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652410"
                }
            },
            "author_association": "MEMBER",
            "body": "This should be called outside of the loop as the final statement. Also we need to make sure this isn't called in the coroutine so should probably wrap with vim.schedule.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:15:03Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652410",
            "id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7hn6",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518684265,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652410/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:21:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652410",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652456"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652456"
                }
            },
            "author_association": "MEMBER",
            "body": "Would it be simpler to remove this and just break from the loop when it's finished?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:15:37Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652456",
            "id": 1894652456,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7hoo",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 442,
            "original_position": 104,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518684265,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652456/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:22:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652582"
                }
            },
            "author_association": "MEMBER",
            "body": "We should add some loop protection to avoid cases that hang or take too long to parse. For now we can just have a hard coded timeout which we may expose as an option in the future.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:16:41Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652582",
            "id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7hqm",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518684265,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652582/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:22:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652716"
                }
            },
            "author_association": "MEMBER",
            "body": "Since this coroutine is a closure, wouldn't it be better to not pass these in and use upvalues?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:17:34Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)\n+        end\n+      end\n+    end),\n+    range,",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652716",
            "id": 1894652716,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7hss",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 466,
            "original_position": 128,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518684265,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:21:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652869"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652869"
                }
            },
            "author_association": "MEMBER",
            "body": "Would coroutine.wrap be applicable here?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:18:31Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894652869",
            "id": 1894652869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7hvF",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 439,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518684265,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652869/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:21:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894652869",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894654592"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654592"
                }
            },
            "author_association": "MEMBER",
            "body": "could we use ['redrawtime'](https://github.com/neovim/neovim/pull/22420#issuecomment-1446362921) for that?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:32:42Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894654592",
            "id": 1894654592,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7iKA",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518686498,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654592/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:33:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894654870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654870"
                }
            },
            "author_association": "MEMBER",
            "body": "~~No, I'd say this is different.~~ `redrawtime` is a timeout (\"stop doing anything after x ms\"), while this is chunking (\"don't block for more than x ms\"). In particular, if we get things right, I don't expect anybody (reasonable) to have to adjust this. (And a global value might not even make sense.)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:35:09Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894654870",
            "id": 1894654870,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7iOW",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518686826,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:49:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894654924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654924"
                }
            },
            "author_association": "MEMBER",
            "body": "I had wrapped in `vim.schedule` initially and noticed lots of highlight flickering due to the slow injection code which takes place (I can upload a screencast). Running without schedule removes all flicker. Is it not safe to just run immediately here (no schedule) since we assume we got here by a `vim.schedule` in the first place, and we ensure that there are no more `coroutine.yield()`s after this point?\r\n\r\n[Screencast_20241221_083605.webm](https://github.com/user-attachments/assets/d00c09c8-3323-4faa-ac93-90256d809ebf)\r\n\r\n(With vim.schedule; there is also a quick flicker when editing which didn't show up well on the recording)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:35:39Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894654924",
            "id": 1894654924,
            "in_reply_to_id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7iPM",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518686883,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654924/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:41:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894654924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894655257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894655257"
                }
            },
            "author_association": "MEMBER",
            "body": "I could be wrong but I think here `redrawtime` *would* mean a timeout; the chunking would be the segment parse time, no?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:39:06Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894655257",
            "id": 1894655257,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7iUZ",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518687288,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894655257/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:39:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894655257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894656690"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894656690"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops, sorry, I misread. Yes, a hard \"bailout\" timeout as in Lewis' comment would make sense to tie to `redrawtime`.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:50:19Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894656690",
            "id": 1894656690,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7iqy",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518688887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894656690/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:50:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894656690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894657037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894657037"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah this is because you pass the callback in on_win. In that case if we ever go pass the segment time there will be some stutter, and the common case is we never reach the parse timeout, so there is no stutter.\n\nIn that case can we make it so the first call to parse runs outside of the coroutine and subsequent iterations happen within the coroutine, then we should be able to wrap the callback in schedule. If the first iteration of parse returns a tree then we can call the callback without schedule.\n\nHope that makes sense.\n\nEDIT: or there might be some way to write this so parse is always run on the main thread. Might even be possible to do without a coroutine.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T16:53:26Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894657037",
            "id": 1894657037,
            "in_reply_to_id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7iwN",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518689358,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894657037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T16:57:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894657037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894667866"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894667866"
                }
            },
            "author_association": "MEMBER",
            "body": "Question: should the callback still be fired if `redrawtime` is reached before parsing finishes? If so, `trees` will just be an empty list. For whatever reason, in the highlighter callback if we fire it even when `redrawtime` timeout is reached, running `for_each_tree` causes async parsing to continue, which means `redrawtime` is not respected. Of course we can just run a conditional check to only run the highlighter callback if `#trees ~= 0` but it still seems odd that this happens...",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T18:22:18Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894667866",
            "id": 1894667866,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7lZa",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518778479,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894667866/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T18:22:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894667866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894668340"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894668340"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, the callback as a continuation which should always be called. It may be wise to pass back an error argument too which we can set to the timeout error/code.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T18:25:57Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894668340",
            "id": 1894668340,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7lg0",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518785758,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894668340/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T18:25:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894668340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894668345"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894668345"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we have fully solved the \"error\" scenario for this, which this (unlike the async parsing) is part of. (There were some _very_ heated discussions in the past...)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T18:26:00Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894668345",
            "id": 1894668345,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7lg5",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518785841,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894668345/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T18:26:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894668345",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894677599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894677599"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe, but reading the description it looks like using wrap means calling `parse()` again will resume the coroutine, whereas right now it can only be resumed from within itself after a parsing segment is completed. I modeled the `resume(create(...` after coop.nvim's \"fire and forget\" concept\r\n\r\nAlso why change? I would guess that at best using `coroutine.wrap` is just the same as now",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T19:39:28Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894677599",
            "id": 1894677599,
            "in_reply_to_id": 1894652869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7nxf",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 439,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518929604,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894677599/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T19:39:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894677599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894678072"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894678072"
                }
            },
            "author_association": "MEMBER",
            "body": "I opted to pass a boolean indicating whether timeout was reached; in treesitter.c if there is a timeout set, then parse() cannot throw a lua error so there are no other codes that could be needed right now",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T19:42:05Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894678072",
            "id": 1894678072,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7n44",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518934595,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894678072/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T19:42:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894678072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894680062"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894680062"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry, it's still not clear to me what problem this is trying to solve. It's an issue if the callback is run within the coroutine? I haven't found any problems so far with the current implementation\r\n\r\n> EDIT: or there might be some way to write this so parse is always run on the main thread. Might even be possible to do without a coroutine.\r\n\r\nIs this not the definition of just running a synchonous parse?\r\n\r\nEdit: I am testing a version which runs the first parse iteration (and callback, if complete) outside the coroutine, then further iterations inside it; both ways cause highlight flickering when using `vim.schedule` for the callback. I again think this is more related to the slow injections. Applying this patch to disable them removes the flicker even when using `vim.schedule`\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/treesitter/languagetree.lua b/runtime/lua/vim/treesitter/languagetree.lua\r\nindex 52b1e97ec5..298fcb8a00 100644\r\n--- a/runtime/lua/vim/treesitter/languagetree.lua\r\n+++ b/runtime/lua/vim/treesitter/languagetree.lua\r\n@@ -903,7 +903,7 @@ end\r\n --- @private\r\n --- @return table<string, Range6[][]>\r\n function LanguageTree:_get_injections()\r\n-  if not self._injection_query then\r\n+  if true then\r\n     return {}\r\n   end\r\n ```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T20:00:44Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894680062",
            "id": 1894680062,
            "in_reply_to_id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7oX-",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2518971064,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894680062/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T20:08:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894680062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894689459"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894689459"
                }
            },
            "author_association": "MEMBER",
            "body": "I suggested as a potential simplification since you are starting the coroutine directly after creating it. However I think it's probably best to do this without coroutines, I'll post a patch later.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T21:17:04Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894689459",
            "id": 1894689459,
            "in_reply_to_id": 1894652869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7qqz",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 439,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519113785,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894689459/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T21:17:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894689459",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894698118"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698118"
                }
            },
            "author_association": "MEMBER",
            "body": "Also at `:help 'redrawtime'`, would you mind adding `... and async |LanguageTree:parse()|`.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T22:41:46Z",
            "diff_hunk": "@@ -1605,14 +1608,20 @@ LanguageTree:parse({range})                             *LanguageTree:parse()*\n     if {range} is `true`).\n \n     Parameters: ~\n-      • {range}  (`boolean|Range?`) Parse this range in the parser's source.\n-                 Set to `true` to run a complete parse of the source (Note:\n-                 Can be slow!) Set to `false|nil` to only parse regions with\n-                 empty ranges (typically only the root tree without\n-                 injections).\n+      • {range}     (`boolean|Range?`) Parse this range in the parser's\n+                    source. Set to `true` to run a complete parse of the\n+                    source (Note: Can be slow!) Set to `false|nil` to only\n+                    parse regions with empty ranges (typically only the root\n+                    tree without injections).\n+      • {on_parse}  (`fun(trees: TSTrees, timeout_reached: boolean)?`)\n+                    Function invoked when parsing completes. When provided,\n+                    parsing will run asynchronously. The function is passed\n+                    the list of trees returned by the parse, as well as a\n+                    boolean indicating whether or not the parse timed out,\n+                    determined by 'redrawtime'.",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894698118",
            "id": 1894698118,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7syG",
            "original_commit_id": "5245fe86c51c899500dc8c002a00fc5dd0b0eab0",
            "original_line": 1621,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 2519265480,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698118/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T22:41:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894698328"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698328"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: \"expired\" is the usual term I think\r\n\r\n```suggestion\r\n--- @param on_parse fun(trees: TSTrees, timeout_expired: boolean)\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T22:44:43Z",
            "diff_hunk": "@@ -409,6 +428,45 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees, timeout_reached: boolean)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894698328",
            "id": 1894698328,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7s1Y",
            "original_commit_id": "5245fe86c51c899500dc8c002a00fc5dd0b0eab0",
            "original_line": 434,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519270832,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698328/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T22:44:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894698681"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698681"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\r\n  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >\r\n    local p = vim.treesitter.get_parser(0, 'c')\r\n    p:parse()\r\n<\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T22:48:06Z",
            "diff_hunk": "@@ -158,6 +158,9 @@ TREESITTER\n • New |TSNode:child_with_descendant()|, which is nearly identical to\n   |TSNode:child_containing_descendant()| except that it can return the\n   descendant itself.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Users must manually ensure that the tree is\n+  parsed after these functions, using |LanguageTree:parse()|.",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894698681",
            "id": 1894698681,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7s65",
            "original_commit_id": "5245fe86c51c899500dc8c002a00fc5dd0b0eab0",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": 161,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2519276929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698681/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-21T22:48:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894698681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894699027"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894699027"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n• |LanguageTree:parse()| optionally supports asynchronous invocation, which is\r\n  activated by passing the `on_parse` callback parameter.\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T22:51:04Z",
            "diff_hunk": "@@ -303,6 +307,8 @@ TREESITTER\n • |treesitter-directive-trim!| can trim all whitespace (not just empty lines)\n   from both sides of a node.\n • |vim.treesitter.get_captures_at_pos()| now returns the `id` of each capture\n+• |LanguageTree:parse()| can now take a callback which causes the parse to run\n+  asynchronously, running the callback upon completion.",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894699027",
            "id": 1894699027,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7tAT",
            "original_commit_id": "5245fe86c51c899500dc8c002a00fc5dd0b0eab0",
            "original_line": 311,
            "original_position": 23,
            "original_start_line": 310,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2519282148,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894699027/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-21T22:51:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894699027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894700180"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894700180"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a private variable not used anywhere that likely just exists for debugging purposes? Moving it without renaming doesn't seem to make much sense. The \"redraw count\" increments in the `on_win` callback. I would suggest any of; leaving `redraw_count` in `on_win`, adding `parse_count?` in `_asyn_parse_callback`, removing both?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-21T23:03:14Z",
            "diff_hunk": "@@ -391,12 +388,22 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\n   if not self then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n-  self.redraw_count = self.redraw_count + 1\n+  local range = { topline, botline + 1 }\n+  self.tree:parse(range, function(_, timeout_reached)\n+    if not timeout_reached then\n+      self:_async_parse_callback(range)\n+    end\n+  end)\n   return true\n end\n \n+--- @param range [integer, integer]\n+function TSHighlighter:_async_parse_callback(range)\n+  self:prepare_highlight_states(unpack(range))\n+  self.redraw_count = self.redraw_count + 1",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894700180",
            "id": 1894700180,
            "line": 400,
            "node_id": "PRRC_kwDOAPphoM5w7tSU",
            "original_commit_id": "5245fe86c51c899500dc8c002a00fc5dd0b0eab0",
            "original_line": 400,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": 40,
            "pull_request_review_id": 2519303617,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894700180/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-21T23:03:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894700180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894710811"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894710811"
                }
            },
            "author_association": "MEMBER",
            "body": "Can this be `>lua ...`?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T01:00:17Z",
            "diff_hunk": "@@ -158,6 +158,9 @@ TREESITTER\n • New |TSNode:child_with_descendant()|, which is nearly identical to\n   |TSNode:child_containing_descendant()| except that it can return the\n   descendant itself.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Users must manually ensure that the tree is\n+  parsed after these functions, using |LanguageTree:parse()|.",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894710811",
            "id": 1894710811,
            "in_reply_to_id": 1894698681,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w7v4b",
            "original_commit_id": "5245fe86c51c899500dc8c002a00fc5dd0b0eab0",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": 161,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2519509511,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894710811/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-22T01:00:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894710811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894747953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894747953"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "\r\n\r\nI think that `'redrawtime'` is not the right option for limiting the total time of the parse.\r\n\r\nThe total time an async parse takes doesn't, in a major way, influence how responsive the editor is: the parse blocks for only 3ms and can execute during idle periods. Parsing a file even for 2 seconds is barely noticeable (ignoring the final parse with injections and the bug), so the limit should probably be much higher.\r\n\r\nAll other features that respect `'redrawtime'` can block the editor for an unknown amount of time, (and are not interruptible in any other way?). ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T03:09:40Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894747953",
            "id": 1894747953,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w748x",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519539301,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894747953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T03:09:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894747953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894955052"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894955052"
                }
            },
            "author_association": "MEMBER",
            "body": "Here's an implementation that doesn't use coroutines.\r\n\r\n```lua\r\n--- Run an asynchronous parse, calling {on_parse} when complete.\r\n---\r\n--- @param range boolean|Range?\r\n--- @param on_parse fun(trees?: TSTrees, err?: string)\r\nfunction LanguageTree:_async_parse(range, on_parse)\r\n  local ct = self:_buf().changedtick\r\n  local total_parse_time = 0\r\n  local redrawtime = vim.o.redrawtime\r\n\r\n  local function step()\r\n    -- If buffer was changed in the middle of parsing, reset parse state\r\n    if self:_buf().changedtick ~= ct then\r\n      self._parser:reset()\r\n      self:invalidate()\r\n      ct = self:_buf().changedtick\r\n      total_parse_time = 0\r\n    end\r\n\r\n    local parse_time, trees, finished = tcall(self._parse, self, range, default_parse_timeout_ms)\r\n    total_parse_time = total_parse_time + parse_time\r\n\r\n    if finished then\r\n      on_parse(trees)\r\n    elseif total_parse_time > redrawtime then\r\n      on_parse(nil, 'TIMEOUT')\r\n    else\r\n      vim.schedule(step)\r\n    end\r\n  end\r\n\r\n  step()\r\nend\r\n```\r\n\r\nNote I've changes the signature of `on_parse` to match the UV style more.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T14:40:25Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894955052",
            "id": 1894955052,
            "in_reply_to_id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w8rgs",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519643854,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894955052/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T15:17:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894955052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894955580"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894955580"
                }
            },
            "author_association": "MEMBER",
            "body": "See https://github.com/neovim/neovim/pull/31631#discussion_r1894955052",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T14:41:57Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894955580",
            "id": 1894955580,
            "in_reply_to_id": 1894652869,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w8ro8",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 439,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519644209,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894955580/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T14:41:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894955580",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894970989"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894970989"
                }
            },
            "author_association": "MEMBER",
            "body": "> Parsing a file even for 2 seconds is barely noticeable\r\n\r\nFair point, but nevertheless if a parse takes >2 seconds this is not something we should casually accept. So for now, 'redrawtime' is a reasonable limit.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T15:32:19Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894970989",
            "id": 1894970989,
            "in_reply_to_id": 1894652582,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w8vZt",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 446,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519653576,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894970989/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T15:32:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894970989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894996174"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996174"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- @private\r\nfunction LanguageTree:_buf()\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:03:14Z",
            "diff_hunk": "@@ -98,6 +102,10 @@ local LanguageTree = {}\n \n LanguageTree.__index = LanguageTree\n \n+function LanguageTree:_buf()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894996174",
            "id": 1894996174,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w81jO",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 104,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996174/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:18:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894996407"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996407"
                }
            },
            "author_association": "MEMBER",
            "body": "Awesome, super cool that you got this working without coroutines, I couldn't figure it out myself.\r\n\r\nOne thing to bring up: do you think it's fine to have the tcall here as a time measurement? This will account for e.g. the slow injection processing taking ~1.5 seconds for the big linux file, whereas the parse time would still be on average 3ms. Before I had each iteration only add the parse timeout so as to not skew the time from other processing noise. Do you think we should include this additional timing data?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:04:01Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894996407",
            "id": 1894996407,
            "in_reply_to_id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w81m3",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668426,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996407/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:11:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894996452"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996452"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd prefer if we remove this alias if that's ok?\r\n\r\nWe need to rename all the ts types anyway so they have a `vim.treesitter.*` prefix.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:04:08Z",
            "diff_hunk": "@@ -58,6 +60,8 @@ local Range = require('vim.treesitter._range')\n ---| 'on_child_added'\n ---| 'on_child_removed'\n \n+---@alias TSTrees table<integer, TSTree>",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894996452",
            "id": 1894996452,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w81nk",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 63,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996452/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:19:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894996452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997244"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997244"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      self._parser:set_timeout(timeout and timeout * 1000 or 0) -- ms -> micros\r\n\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:06:19Z",
            "diff_hunk": "@@ -357,9 +367,18 @@ function LanguageTree:_parse_regions(range)\n       )\n     then\n       self._parser:set_included_ranges(ranges)\n+      if timeout then\n+        self._parser:set_timeout(timeout * 1000) -- ms -> micros\n+      else\n+        self._parser:set_timeout(0)\n+      end",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997244",
            "id": 1894997244,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w81z8",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 374,
            "original_position": 69,
            "original_start_line": 370,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997244/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-22T17:18:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997406"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the logic works out a bit better if you invert this (to `finished`).",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:07:06Z",
            "diff_hunk": "@@ -334,10 +342,12 @@ end\n \n --- @private\n --- @param range boolean|Range?\n+--- @param timeout integer?\n --- @return Range6[] changes\n --- @return integer no_regions_parsed\n --- @return number total_parse_time\n-function LanguageTree:_parse_regions(range)\n+--- @return boolean is_unfinished whether async parsing still needs time",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997406",
            "id": 1894997406,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w812e",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 349,
            "original_position": 56,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997647"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997647"
                }
            },
            "author_association": "MEMBER",
            "body": "This `yield` looks wrong to me since we don't `resume` before. I would have thought this works properly without the yields.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:08:08Z",
            "diff_hunk": "@@ -409,6 +428,45 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees, timeout_expired: boolean)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(coroutine.create(function()\n+    local co = coroutine.running()\n+    local ct = self:_buf().changedtick\n+    local total_parse_time = 0\n+    local redrawtime = vim.o.redrawtime\n+    ---@type TSTrees, boolean\n+    local trees, unfinished\n+\n+    while total_parse_time <= redrawtime do\n+      -- If buffer was changed in the middle of parsing, reset parse state\n+      if self:_buf().changedtick ~= ct then\n+        self._parser:reset()\n+        self:invalidate()\n+        total_parse_time = 0\n+        coroutine.yield()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997647",
            "id": 1894997647,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w816P",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 450,
            "original_position": 112,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997647/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997842"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997842"
                }
            },
            "author_association": "MEMBER",
            "body": "We should add the time it actually took to parse rather than adding the timeout value. We can use `tcall()` for that.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:08:47Z",
            "diff_hunk": "@@ -409,6 +428,45 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees, timeout_expired: boolean)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(coroutine.create(function()\n+    local co = coroutine.running()\n+    local ct = self:_buf().changedtick\n+    local total_parse_time = 0\n+    local redrawtime = vim.o.redrawtime\n+    ---@type TSTrees, boolean\n+    local trees, unfinished\n+\n+    while total_parse_time <= redrawtime do\n+      -- If buffer was changed in the middle of parsing, reset parse state\n+      if self:_buf().changedtick ~= ct then\n+        self._parser:reset()\n+        self:invalidate()\n+        total_parse_time = 0\n+        coroutine.yield()\n+      end\n+\n+      trees, unfinished = self:_parse(range, default_parse_timeout_ms)\n+      total_parse_time = total_parse_time + default_parse_timeout_ms",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1894997842",
            "id": 1894997842,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w819S",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 454,
            "original_position": 116,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519668310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997842/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1894997842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1895002474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895002474"
                }
            },
            "author_association": "MEMBER",
            "body": "I had a question about this actually, in [this comment](https://github.com/neovim/neovim/pull/31631#discussion_r1894996407)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:27:00Z",
            "diff_hunk": "@@ -409,6 +428,45 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees, timeout_expired: boolean)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(coroutine.create(function()\n+    local co = coroutine.running()\n+    local ct = self:_buf().changedtick\n+    local total_parse_time = 0\n+    local redrawtime = vim.o.redrawtime\n+    ---@type TSTrees, boolean\n+    local trees, unfinished\n+\n+    while total_parse_time <= redrawtime do\n+      -- If buffer was changed in the middle of parsing, reset parse state\n+      if self:_buf().changedtick ~= ct then\n+        self._parser:reset()\n+        self:invalidate()\n+        total_parse_time = 0\n+        coroutine.yield()\n+      end\n+\n+      trees, unfinished = self:_parse(range, default_parse_timeout_ms)\n+      total_parse_time = total_parse_time + default_parse_timeout_ms",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1895002474",
            "id": 1895002474,
            "in_reply_to_id": 1894997842,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w83Fq",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 454,
            "original_position": 116,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519671662,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895002474/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:27:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895002474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1895007317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895007317"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Would it cause an infinite number of parses to be called if a user holds a key in a big file? \r\n\r\nThe old parser doesn't finish under 3ms and goes to the next iteration, sees that the buffer has changed, resets the state and continues to parse (instead of being suspended indefinitely). Meanwhile the new parser (called in `on_win()`) also starts to parse. And this happens every time a key is typed.\r\n",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:46:57Z",
            "diff_hunk": "@@ -409,6 +428,45 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees, timeout_expired: boolean)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(coroutine.create(function()\n+    local co = coroutine.running()\n+    local ct = self:_buf().changedtick\n+    local total_parse_time = 0\n+    local redrawtime = vim.o.redrawtime\n+    ---@type TSTrees, boolean\n+    local trees, unfinished\n+\n+    while total_parse_time <= redrawtime do\n+      -- If buffer was changed in the middle of parsing, reset parse state\n+      if self:_buf().changedtick ~= ct then\n+        self._parser:reset()\n+        self:invalidate()\n+        total_parse_time = 0\n+        coroutine.yield()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1895007317",
            "id": 1895007317,
            "in_reply_to_id": 1894997647,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w84RV",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 450,
            "original_position": 112,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519674302,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895007317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895007317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1895010301"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895010301"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes I think we should. The goal here is to limit the amount of time parsing blocks the main thread for, so this must included everything. Just doing it for `TSParser:parse()` is just the first step.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T17:58:20Z",
            "diff_hunk": "@@ -409,6 +428,46 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(\n+    --- @param co_range boolean|Range|nil\n+    --- @param co_cb fun(trees: TSTrees)\n+    coroutine.create(function(co_range, co_cb)\n+      local co = coroutine.running()\n+      local ct = self:_buf().changedtick\n+      local unfinished = true\n+      --- @type TSTrees\n+      local trees\n+\n+      while unfinished do\n+        -- If buffer was changed in the middle of parsing, reset parse state\n+        if self:_buf().changedtick ~= ct then\n+          self._parser:reset()\n+          self:invalidate()\n+          coroutine.yield()\n+        end\n+\n+        trees, unfinished = self:_parse(co_range, default_parse_timeout_ms)\n+\n+        if unfinished then\n+          vim.schedule(function()\n+            coroutine.resume(co)\n+          end)\n+          coroutine.yield()\n+        else\n+          co_cb(trees)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1895010301",
            "id": 1895010301,
            "in_reply_to_id": 1894652410,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w84_9",
            "original_commit_id": "733dddd6cf742fc06d8e369f78f665c170fa1eef",
            "original_line": 462,
            "original_position": 124,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519675777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895010301/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T17:58:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895010301",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1895019023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895019023"
                }
            },
            "author_association": "MEMBER",
            "body": "Pulled in the version that does not use coroutines, so this yield isn't needed",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-22T18:31:11Z",
            "diff_hunk": "@@ -409,6 +428,45 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range|nil\n+--- @param on_parse fun(trees: TSTrees, timeout_expired: boolean)\n+function LanguageTree:_async_parse(range, on_parse)\n+  coroutine.resume(coroutine.create(function()\n+    local co = coroutine.running()\n+    local ct = self:_buf().changedtick\n+    local total_parse_time = 0\n+    local redrawtime = vim.o.redrawtime\n+    ---@type TSTrees, boolean\n+    local trees, unfinished\n+\n+    while total_parse_time <= redrawtime do\n+      -- If buffer was changed in the middle of parsing, reset parse state\n+      if self:_buf().changedtick ~= ct then\n+        self._parser:reset()\n+        self:invalidate()\n+        total_parse_time = 0\n+        coroutine.yield()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1895019023",
            "id": 1895019023,
            "in_reply_to_id": 1894997647,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5w87IP",
            "original_commit_id": "7cfba422a89936daf7ba887a07e707b76dae6e6c",
            "original_line": 450,
            "original_position": 112,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2519679954,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895019023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-22T18:31:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1895019023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896170488"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896170488"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "(continuation of https://github.com/neovim/neovim/pull/31631#issuecomment-2558550960)\r\nThis line causes the crash. Parser reset frees up the old subtree with some of its children, and then the child is used by query cursor somehow.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T22:32:32Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896170488",
            "id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBUP4",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521214648,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896170488/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-28T18:12:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896170488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896182648"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896182648"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "My hypothesis is that:\r\n1. Redraw starts (`_highlight_states` contain query cursor from previous redraw)\r\n2. `Languagetree` resets the current parser, it frees the old tree (used by query cursor from previous redraw)\r\n3. Parse times out, callback is never called. `_highlight_states` aren't cleared.\r\n4. `on_line()` tries to use cursor from previous redraw. Cursor tries to read from the old tree. It is freed",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T22:51:14Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896182648",
            "id": 1896182648,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBXN4",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521230252,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896182648/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T22:57:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896182648",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896185160"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896185160"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@ribru17 ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T22:56:14Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896185160",
            "id": 1896185160,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBX1I",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521232777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896185160/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T22:56:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896185160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896191731"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896191731"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also, does this mean anyone can trigger this from lua by using a stale `iter_captures()` iterator? \r\n\r\nAll APIs are public",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T23:09:15Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896191731",
            "id": 1896191731,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBZbz",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521241690,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896191731/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T23:18:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896191731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896195929"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896195929"
                }
            },
            "author_association": "MEMBER",
            "body": "> My hypothesis is that:\r\n> \r\n> 1. Redraw starts (`_highlight_states` contain query cursor from previous redraw)\r\n> 2. `Languagetree` resets the current parser, it frees the old tree (used by query cursor from previous redraw)\r\n> 3. Parse times out, callback is never called. `_highlight_states` aren't cleared.\r\n> 4. `on_line()` tries to use cursor from previous redraw. Cursor tries to read from the old tree. It is freed\r\n\r\nNice, yeah I believe this is exactly the issue\r\n\r\n> Also, does this mean anyone can trigger this from lua by using a stale `iter_captures()` iterator?\r\n\r\nI worried the same thing, and I believe it is possible but very unlikely, since most of the time you parse right before getting the root node, and then pass that node into the iterator. But that said this *really* should be fixed on the TS side of things, and I am surprised other editors have not raised this issue yet\r\n\r\nIs there a way we can guard against this in neovim, maybe with `TSNode:has_changes()`?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T23:18:36Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896195929",
            "id": 1896195929,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBadZ",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521246811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896195929/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T23:18:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896195929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896199127"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896199127"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Keep changetick for a parser and check each call to the iterator that it is the same. ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T23:25:36Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896199127",
            "id": 1896199127,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBbPX",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521250584,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896199127/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T23:25:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896199127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896200254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896200254"
                }
            },
            "author_association": "MEMBER",
            "body": "~~Interestingly, this `nvim__redraw()` seems to be redundant, seemingly all we need to do in this callback is to unset `self.parsing`. (Currently) the `on_changedtree` callback already triggers a sufficient redraw during parsing. The code responsible has a TODO note attached to it though so maybe that will change:~~\r\n\r\n~~In which case maybe we should keep this anyhow~~ not sure about the arguments though.\r\nIf other redraws are likely, `flush`ing here is actually unwanted so maybe should be set to `false`.\r\n\r\nI used `valid = false` as opposed to a `topline/botline` range which we could still pass here, because there there is no guarantee that the topline will still be the same. IDK if this makes a difference in practice, (currently it doesn't because of the above🤷🏻).",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T23:28:08Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)\n+    end\n+  end) --[[@as boolean]]\n+  if self.parsing then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n   self.redraw_count = self.redraw_count + 1\n+  self:prepare_highlight_states(topline, botline)\n   return true\n end\n \n+---@param buf integer\n+function TSHighlighter:_async_parse_callback(buf)\n+  if self.parsing then\n+    self.parsing = false\n+    api.nvim__redraw({ buf = buf, valid = false, flush = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896200254",
            "id": 1896200254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBbg-",
            "original_commit_id": "2a43a2c0f7b03f6f35886ee6b2a6f934f5f2a0cb",
            "original_line": 408,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521251843,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896200254/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T23:46:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896200254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896205222"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896205222"
                }
            },
            "author_association": "MEMBER",
            "body": "Interesting... have you noticed this for large files as well? For me removing the redraw is the same for small files that can presumably get parsed synchronously, but with large files my highlights will not apply without the redraw",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T23:39:41Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)\n+    end\n+  end) --[[@as boolean]]\n+  if self.parsing then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n   self.redraw_count = self.redraw_count + 1\n+  self:prepare_highlight_states(topline, botline)\n   return true\n end\n \n+---@param buf integer\n+function TSHighlighter:_async_parse_callback(buf)\n+  if self.parsing then\n+    self.parsing = false\n+    api.nvim__redraw({ buf = buf, valid = false, flush = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896205222",
            "id": 1896205222,
            "in_reply_to_id": 1896200254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBcum",
            "original_commit_id": "2a43a2c0f7b03f6f35886ee6b2a6f934f5f2a0cb",
            "original_line": 408,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521257376,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896205222/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T23:39:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896205222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896207841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896207841"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah you're right, I was testing in a large file but small window😅\r\nIn that case, I think this is the best we can do:\r\n```suggestion\r\n    api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n```\r\n\r\nUnless if we keep track of what lines are actually drawn since the `on_win` call associated with the async callback. Then we could limit the range to those lines and redraw only those that would have been redrawn originally...",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-23T23:45:43Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)\n+    end\n+  end) --[[@as boolean]]\n+  if self.parsing then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n   self.redraw_count = self.redraw_count + 1\n+  self:prepare_highlight_states(topline, botline)\n   return true\n end\n \n+---@param buf integer\n+function TSHighlighter:_async_parse_callback(buf)\n+  if self.parsing then\n+    self.parsing = false\n+    api.nvim__redraw({ buf = buf, valid = false, flush = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896207841",
            "id": 1896207841,
            "in_reply_to_id": 1896200254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBdXh",
            "original_commit_id": "2a43a2c0f7b03f6f35886ee6b2a6f934f5f2a0cb",
            "original_line": 408,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521260341,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896207841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-23T23:47:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896207841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896249595"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896249595"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991\r\n\r\nDoes everything that depend on the tree (e.g. nodes and iterators) get invalidated after a reparse? How do the nodes/iterators check if the subtree they are referencing hasn't been freed? \r\n\r\nI tried changing the entire buffer buffer, reparsing, and then querying e.g. a child from an old node or the next capture from an old iterator. But they just return empty nodes and don't crash. \r\n\r\nIt ssems strange that it only crashes when explicitly resetting the parser.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T00:59:00Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896249595",
            "id": 1896249595,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBnj7",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521310828,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896249595/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T00:59:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896249595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896279784"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896279784"
                }
            },
            "author_association": "MEMBER",
            "body": "Perfect, I'll update it :+1:  Out of curiosity, what is the difference here between `buf = buf` and `win = win`, or `valid = false` and `range = ...`?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T01:54:46Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)\n+    end\n+  end) --[[@as boolean]]\n+  if self.parsing then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n   self.redraw_count = self.redraw_count + 1\n+  self:prepare_highlight_states(topline, botline)\n   return true\n end\n \n+---@param buf integer\n+function TSHighlighter:_async_parse_callback(buf)\n+  if self.parsing then\n+    self.parsing = false\n+    api.nvim__redraw({ buf = buf, valid = false, flush = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896279784",
            "id": 1896279784,
            "in_reply_to_id": 1896200254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xBu7o",
            "original_commit_id": "2a43a2c0f7b03f6f35886ee6b2a6f934f5f2a0cb",
            "original_line": 408,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521344701,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896279784/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T01:54:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896279784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896343205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896343205"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think it's better to return the trees if we have them, and otherwise return nil.\r\n\r\nThis would change how the highligher interprets the timeput case (if redrawtime is less than 3ms & the buffer is big), but it should be fine either way.\r\n",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T03:42:29Z",
            "diff_hunk": "@@ -409,6 +423,42 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+--- @return boolean async true if parsing asynchronously\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()\n+      self:invalidate()\n+      ct = self:_buf().changedtick\n+      total_parse_time = 0\n+    end\n+\n+    local parse_time, trees, finished = tcall(self._parse, self, range, default_parse_timeout_ms)\n+    total_parse_time = total_parse_time + parse_time\n+\n+    if finished then\n+      on_parse(trees)\n+    elseif total_parse_time > redrawtime then\n+      on_parse(nil, 'TIMEOUT')\n+    else\n+      vim.schedule(step)\n+      return true\n+    end\n+    return false",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896343205",
            "id": 1896343205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xB-al",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 456,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2521417117,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896343205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T04:46:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896343205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896352978"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896352978"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If the buffer times out asynchronously, then the parsing flag is never reset and buffer is never highlighted. Even when parsed successfully (by someone other than the highlighter).\r\nI think it should reset the `parsing` flag if it times out. But ideally only when the changetick is different (so that the buffer isn't reparsed if it timed out & hasn't changed). ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T04:02:11Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896352978",
            "id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCAzS",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521427757,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896352978/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T22:52:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896352978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896381986"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896381986"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Does it work if `prepare_callback_states()` checks if individual trees are valid instead of using the flag?\r\n(and returns true if number of highlight states is >0)\r\n\r\nAlso IIUC, one unparsed injection currently makes the highlighter skip the window, but this is unlikely.\r\n",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T04:50:17Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896381986",
            "id": 1896381986,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCH4i",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521461005,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896381986/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T08:52:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896381986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896414116"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896414116"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "End line in `nvim__redraw()` overflows:\r\n```console\r\nChanges: { { 0, 0, 0, 4294967295, 4294967295, 4294967295 } }\r\nRedrawing from 1 to 0  \r\n```\r\n\r\nAlso the `changedtree` callback is called with tree changes. If a character is deleted inside of an AST node, changes are empty list.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T05:39:17Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)\n+    end\n+  end) --[[@as boolean]]\n+  if self.parsing then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n   self.redraw_count = self.redraw_count + 1\n+  self:prepare_highlight_states(topline, botline)\n   return true\n end\n \n+---@param buf integer\n+function TSHighlighter:_async_parse_callback(buf)\n+  if self.parsing then\n+    self.parsing = false\n+    api.nvim__redraw({ buf = buf, valid = false, flush = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896414116",
            "id": 1896414116,
            "in_reply_to_id": 1896200254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCPuk",
            "original_commit_id": "2a43a2c0f7b03f6f35886ee6b2a6f934f5f2a0cb",
            "original_line": 408,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521499085,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896414116/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-26T05:26:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896414116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896522259"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896522259"
                }
            },
            "author_association": "MEMBER",
            "body": "`buf = buf` marks all windows that contain a buffer to be redrawn, `win = win` targets a specific window, `valid = false` redraws from topline until botline and `range` redraws a specific range.\r\n\r\nSince the user can still scroll during the asynchronous parse, when it returns, the topline may not be the same as the one we might have passed to this callback from `on_win`. What we could do is keep track of the min/max line number redrawn since a particular async parse started. That could potentially be more efficient (would have to still return `true` in `on_win`, then update the `min/max` in `on_line` but return without placing marks while it is parsing...).",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T08:10:45Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)\n+    end\n+  end) --[[@as boolean]]\n+  if self.parsing then\n     return false\n   end\n-  self.tree:parse({ topline, botline + 1 })\n-  self:prepare_highlight_states(topline, botline + 1)\n   self.redraw_count = self.redraw_count + 1\n+  self:prepare_highlight_states(topline, botline)\n   return true\n end\n \n+---@param buf integer\n+function TSHighlighter:_async_parse_callback(buf)\n+  if self.parsing then\n+    self.parsing = false\n+    api.nvim__redraw({ buf = buf, valid = false, flush = true })",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896522259",
            "id": 1896522259,
            "in_reply_to_id": 1896200254,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCqIT",
            "original_commit_id": "2a43a2c0f7b03f6f35886ee6b2a6f934f5f2a0cb",
            "original_line": 408,
            "original_position": 59,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521639650,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896522259/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T08:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896522259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896538364"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896538364"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe? It highlights some parts of a line in the big linux file after an edit (until the parse is finished), so yeah seems to work.\r\nI'm not familiar enough with treesitter to tell if this makes sense or would fail somewhere: <details><summary>patch</summary>\r\n```diff\r\n@@ -171,7 +171,7 @@ function TSHighlighter:prepare_highlight_states(srow, erow)\r\n   self._highlight_states = {}\r\n\r\n   self.tree:for_each_tree(function(tstree, tree)\r\n-    if not tstree then\r\n+    if not tstree or not tree:is_valid(true) then\r\n       return\r\n     end\r\n\r\n@@ -393,12 +393,9 @@ function TSHighlighter._on_win(_, _, buf, topline, botline)\r\n       self:_async_parse_callback(buf)\r\n     end\r\n   end) --[[@as boolean]]\r\n-  if self.parsing then\r\n-    return false\r\n-  end\r\n   self.redraw_count = self.redraw_count + 1\r\n   self:prepare_highlight_states(topline, botline)\r\n-  return true\r\n+  return #self._highlight_states > 0\r\n end\r\n\r\n ---@param buf integer\r\n```\r\n</details>",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T08:30:50Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896538364",
            "id": 1896538364,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCuD8",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521660885,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896538364/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T23:14:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896538364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896549556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896549556"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Does it cause double redraw for 2 windows?\r\n\r\nI noticed it redraws twice when I was testing if the condition on `nvim__redraw()` is needed",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T08:44:25Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896549556",
            "id": 1896549556,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCwy0",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521676928,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896549556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T08:44:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896549556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896559514"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896559514"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh yeah we still shouldn't call nvim__redraw in the synchronous case.\r\n\r\nEDIT: so the `self.parsing` field is still necessary, updated the patch a few times.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T08:56:15Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896559514",
            "id": 1896559514,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xCzOa",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521690068,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896559514/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T11:33:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896559514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896569371"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896569371"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "During the same testing, I also noticed that in big files, it for some reason doesn't redraw all the lines when the tree is invalidated if `nvim__redraw()` isn't called in `on_win()`.\r\n\r\nI.e. in this file:\r\n\r\n```lua\r\nvim.api.nvim_feedkeys('a', '', false)\r\nlocal _ = \"\r\nvim.api.nvim_feedkeys('a', '', false) -- repeated many times\r\n```\r\n\r\nthe redraw after deleting the `local _ = \"` line still displays the lines below as string until the parse completes/cursor updates them.\r\n\r\nBoth with and without https://github.com/neovim/neovim/pull/31710",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T09:07:38Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896569371",
            "id": 1896569371,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xC1ob",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521703477,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896569371/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T09:07:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896569371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896576671"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896576671"
                }
            },
            "author_association": "MEMBER",
            "body": "For the first redraw that happens, I think that is expected. Deleting a line normally uses the \"scroll redraw\" path, where lines below the changes are scrolled up without actually calling `win_line()`. I don't think tree invalidation happens before the first redraw?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T09:15:00Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896576671",
            "id": 1896576671,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xC3af",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2521712998,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896576671/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T09:15:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896576671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896846928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896846928"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Deleting a single `\"` also has the same effect. The `onchangedtree` doesn't happen until reparse is complete",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T16:01:04Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896846928",
            "id": 1896846928,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xD5ZQ",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522088936,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896846928/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T16:04:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896846928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896852888"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896852888"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah I couldn't make sense of that either while first working with the tree sitter module working on the conceal_lines PR.\r\n\r\nBut if there is an issue there, it's separate from this PR right? Or are you seeing changed behavior?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T16:13:14Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896852888",
            "id": 1896852888,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xD62Y",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522096872,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896852888/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T20:27:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896852888",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896900879"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896900879"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks for the discussion, I will apply the above patch. Is there any other work to be done here?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T17:57:51Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896900879",
            "id": 1896900879,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xEGkP",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522152930,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896900879/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T17:58:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896900879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1896903547"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896903547"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think no, other things are outside the scope",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-24T18:04:44Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1896903547",
            "id": 1896903547,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xEHN7",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522155853,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896903547/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-24T18:05:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1896903547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897104039"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897104039"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Just noticed the original bug (no highlighting when timed out) is still present since the flag is still checked at the top of `on_win()`. Though removing it would mean a parse will be reattempted for timed out buffer on the subsequent redraw.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-25T04:56:51Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897104039",
            "id": 1897104039,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xE4Kn",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522327538,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897104039/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-25T05:18:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897104039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897114095"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897114095"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't that intended? If timeout was reached how can highlighting be applied\n\nIt still applies later with subsequent parses or calls to treesitter.start()",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-25T05:25:42Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897114095",
            "id": 1897114095,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xE6nv",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522336676,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897114095/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-25T05:25:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897114095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897147316"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897147316"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> It still applies later with subsequent parses or calls to treesitter.start()\r\n\r\nIt does? When I was checking, it never resumed highlighting, even when I removed most of the file. I assumed that the `parsing` flag is never reset if it times out.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-25T06:46:23Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897147316",
            "id": 1897147316,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xFCu0",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522370177,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897147316/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-25T06:47:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897147316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897230728"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897230728"
                }
            },
            "author_association": "MEMBER",
            "body": "It should; a timeout still calls the `on_parse` callback, which resets `parsing`.\r\nUnless if the first synchronous `step()` somehow times out (IDK if that can happen), maybe due to the aforementioned treesitter APIs not respecting the timeout limit? That _would_ currently leave the highlighter in a perpetual `parsing` state.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-25T09:32:29Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897230728",
            "id": 1897230728,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xFXGI",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522463248,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897230728/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-25T12:20:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897230728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897579653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897579653"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If it times out, sync or async, `trees` are `nil` and `_async_parse_callback()`, which resets `parsing`, is never called. `parsing` is set only in 2 places (callback and `_on_win()`), and `_on_win()` returns early if `parsing` is `false`.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T02:54:49Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897579653",
            "id": 1897579653,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xGsSF",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522744172,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897579653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-26T02:54:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897579653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897586124"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897586124"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, I missed the `trees` guard in the highlighter's `on_parse`. (Do we need the separate  `_async_parse_callback()` method? If we keep it, I think we should at least pass it as the `on_parse` argument directly, to keep it's logic contained in one place.)\r\n\r\nI guess that guard should be removed. Though that does beg to question what the point of the timeout is, because as you say the next redraw we simply try again. ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T03:10:56Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897586124",
            "id": 1897586124,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xGt3M",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2522750831,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897586124/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-26T03:15:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897586124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1897850800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897850800"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Injection parsers also need to be reset, I assume.\r\n\r\nTree sitted docs say reset need to bу called every time the parse is restarted. ~This logic should probably happen when the tree is invalidated~ (because of this: https://github.com/neovim/neovim/pull/31631#issuecomment-2562135903)\r\nShould happen when the tree is _edited_",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T11:05:07Z",
            "diff_hunk": "@@ -409,6 +423,41 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+--- @return table<integer, TSTree>? trees the list of parsed trees, if parsing completed synchronously\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1897850800",
            "id": 1897850800,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xHuew",
            "original_commit_id": "1ff59bd7dd2ce5103af03d986624329b8d4fbe19",
            "original_line": 439,
            "original_position": 76,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2523088899,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897850800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-28T20:19:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1897850800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898103653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898103653"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`TSTree`s are reference counted (retain & release are +1 and -1 to refcount), so the full story is:\r\n\r\n1. First full parse creates `tree1` [refcount=1]\r\n2. Redraw occurs. Since the parse succedes synchronously, highlight states are prepaed. A new query cursor is created (it references the nodes in `tree1`, but doesn't retain it, so refcount=1)\r\n---\r\n3. An edit occurs. `ts_tree_edit()` is called on `tree1`, but since its refcount=1, it is edited in-place. (It shouldn't! The query cursor is referencing it)\r\n4. Redraw occurs and starts an async parse. A new parse starts, parser retains `tree1` [refcount=2]\r\n---\r\n5. Another edit occurs. `ts_tree_edit()` is called on `tree1`, and now since its refcount > 1, a new `tree2` [refcount=1] is created with modifications. `tree1` is released [refcount=1]\r\n6. Async parse step is executed. Since the changetick is different, the parser is reset. Resetting the parser releases `tree1` [refcount=0]. `tree1` is freed.\r\n7. Redraw occurs. Starts a new async parse but continues to redraw. Highlight states still keep a reference to query cursor with `tree1`. Query cursor tries to iterate nodes of `tree1` and crashes, because it's been freed.\r\n\r\nThis doesn't happen when parse is synchronous, since the tree edited in `ts_tree_edit()` has refcount=1 (because not retained in the parser) and thus modified in-place. And when it is freed after a parse, it's children are not since they are referenced by the new tree.\r\n\r\nI.e. retaining the subtree before edit, and releasing after edit on a synchronous parse will also crash under the same circumstances:\r\n\r\n<details>\r\n\r\n<summary>Reproduction on (modified) master branch</summary>\r\n\r\n```console\r\nNVIM v0.11.0-dev-1417+g487c48ec86-dirty\r\nBuild type: Debug\r\nLuaJIT 2.1.1734355927\r\n```\r\n\r\n```diff\r\ndiff --git a/src/nvim/lua/treesitter.c b/src/nvim/lua/treesitter.c\r\nindex 28ad2cf4d3..156a331ab4 100644\r\n--- a/src/nvim/lua/treesitter.c\r\n+++ b/src/nvim/lua/treesitter.c\r\n@@ -746,6 +746,29 @@ static int tree_copy(lua_State *L)\r\n   return 1;\r\n }\r\n \r\n+\r\n+typedef union {\r\n+  uint64_t data;\r\n+  const void *ptr;\r\n+} Subtree;\r\n+\r\n+#define Array(T)       \\\r\n+  struct {             \\\r\n+    T *contents;       \\\r\n+    uint32_t size;     \\\r\n+    uint32_t capacity; \\\r\n+  }\r\n+\r\n+typedef Array(Subtree) SubtreeArray;\r\n+typedef Array(Subtree) MutableSubtreeArray;\r\n+\r\n+typedef struct {\r\n+  MutableSubtreeArray free_trees;\r\n+  MutableSubtreeArray tree_stack;\r\n+} SubtreePool;\r\n+\r\n+SubtreePool ts_subtree_pool_new(int);\r\n+\r\n static int tree_edit(lua_State *L)\r\n {\r\n   if (lua_gettop(L) < 10) {\r\n@@ -765,7 +788,12 @@ static int tree_edit(lua_State *L)\r\n   TSInputEdit edit = { start_byte, old_end_byte, new_end_byte,\r\n                        start_point, old_end_point, new_end_point };\r\n \r\n+  uint64_t subtree = *(uint64_t*)ud->tree;\r\n+  ts_subtree_retain(subtree);\r\n   ts_tree_edit(ud->tree, &edit);\r\n+  SubtreePool pool = ts_subtree_pool_new(0);\r\n+  ts_subtree_release(&pool, subtree);\r\n+  ts_subtree_pool_delete(&pool);\r\n \r\n   return 0;\r\n }\r\n```\r\n\r\nminimal.lua:\r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git'\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { \"lua\" },\r\n  highlight = { enable = true },\r\n}\r\n\r\n-----\r\n\r\nlocal line = 'printf(\"some text\");'\r\nlocal lines = {}\r\nfor i = 1, 200 do lines[i] = line end\r\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\r\n\r\nvim.treesitter.start(0, 'c')\r\nlocal parser = vim.treesitter.get_parser(0)\r\nlocal tree = parser:parse(true)[1]\r\nlocal q = vim.treesitter.query.parse('c', \"((identifier) @cap)\")\r\nlocal iter = q:iter_captures(tree:root(), 0)\r\niter()\r\n\r\nfor depth = 0, 3 do\r\n  vim.api.nvim_buf_set_text(0, 25 + depth, 4, 25 + depth, 5, {})\r\n  parser:parse(true)\r\nend\r\n\r\nvim.keymap.set('n', 'a', function()\r\n  for _ = 1, 50 do iter() end\r\nend)\r\n```\r\n\r\n```shell\r\nnvim --clean -u minimal.lua\r\n```\r\n\r\nPressing 'a' will crash neovim\r\n\r\n</details>\r\n\r\nAlso reproduction for current commit on this PR:\r\n\r\n<details>\r\n\r\n<summary>details</summary>\r\n\r\n```console\r\nNVIM v0.11.0-dev-1385+g1ff59bd7dd\r\nBuild type: Debug\r\nLuaJIT 2.1.1734355927\r\n```\r\n\r\nminimal.lua:\r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git'\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { \"lua\" },\r\n  highlight = { enable = true },\r\n}\r\n\r\n-----\r\n\r\nlocal line = 'printf(\"some text\");'\r\nlocal lines = {}\r\nfor i = 1, 2000 do lines[i] = line end\r\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\r\n\r\nvim.treesitter.start(0, 'c')\r\nlocal parser = vim.treesitter.get_parser(0)\r\nlocal tree = parser:parse(true)[1]\r\nlocal q = vim.treesitter.query.parse('c', \"((identifier) @cap)\")\r\nlocal iter = q:iter_captures(tree:root(), 0)\r\niter()\r\n\r\nfor depth = 0, 3 do\r\n  vim.api.nvim_buf_set_text(0, 25 + depth, 4, 25 + depth, 5, {})\r\n  parser._parser:reset()\r\n  parser._parse(parser, true, 3)\r\nend\r\nparser:parse(true)\r\n\r\nvim.keymap.set('n', 'a', function()\r\n  for _ = 1, 50 do iter() end\r\nend)\r\n```\r\n\r\n```shell\r\nnvim --clean -u minimal.lua\r\n```\r\n\r\n<details>",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T20:50:26Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898103653",
            "id": 1898103653,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xIsNl",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2523480331,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898103653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-28T04:41:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898103653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898109446"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898109446"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems to me we should move the call to `parser:reset()` to `_on_bytes()`, and remove the call to `invalidate()` which `_on_bytes` does anyway. That way, whenever changetick is updated, `parser:reset()` is guaranteed to be called.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T21:10:02Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898109446",
            "id": 1898109446,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xItoG",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2523488981,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898109446/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-26T21:11:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898109446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898112869"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898112869"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Also everything that needs the tree should either retain it and release on GC (tree-sitter doesn't seem to have API for that). Or they need to be invalidated on tree changes & parses.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T21:21:45Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898112869",
            "id": 1898112869,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xIudl",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2523493802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898112869/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-26T21:21:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898112869",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898119526"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898119526"
                }
            },
            "author_association": "MEMBER",
            "body": "Perhaps, but the userdata objects from treesitter are supposed to be low level, and the languagetree object is higher level which always invalidates on changes. Users of the userdata objects should be aware of this and make sure they don't hang on to references too long.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-26T21:45:55Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898119526",
            "id": 1898119526,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xIwFm",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2523503148,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898119526/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-26T21:45:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898119526",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898598635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898598635"
                }
            },
            "author_association": "MEMBER",
            "body": "Is it acceptable to move the `:reset()` call to invalidate since it is called by `_on_bytes()`? So that child parsers will be recursively reset as well per https://github.com/neovim/neovim/pull/31631#discussion_r1897850800",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T16:03:07Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898598635",
            "id": 1898598635,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xKlDr",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524202413,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898598635/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T16:03:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898598635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898612541"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898612541"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes that makes sense since `invalidate()` is called in other places too where the parser should be reset.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T16:35:06Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898612541",
            "id": 1898612541,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xKoc9",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524223875,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898612541/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T16:35:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898612541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898627347"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898627347"
                }
            },
            "author_association": "MEMBER",
            "body": "@vanaigr I think this patch fixes the segfault in all cases\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/treesitter/query.lua b/runtime/lua/vim/treesitter/query.lua\r\nindex dbe3d54c2f..cf8620770b 100644\r\n--- a/runtime/lua/vim/treesitter/query.lua\r\n+++ b/runtime/lua/vim/treesitter/query.lua\r\n@@ -893,6 +893,10 @@ function Query:iter_captures(node, source, start, stop)\r\n   local match_preds = memoize(match_id_hash, self.match_preds, true)\r\n \r\n   local function iter(end_line)\r\n+    if node:has_changes() then\r\n+      return\r\n+    end\r\n+\r\n     local capture, captured_node, match = cursor:next_capture()\r\n \r\n     if not capture then\r\n@@ -965,6 +969,10 @@ function Query:iter_matches(node, source, start, stop, opts)\r\n   local cursor = vim._create_ts_querycursor(node, self.query, start, stop, opts)\r\n \r\n   local function iter()\r\n+    if node:has_changes() then\r\n+      return\r\n+    end\r\n+\r\n     local match = cursor:next_match()\r\n \r\n     if not match then\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T17:10:07Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898627347",
            "id": 1898627347,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xKsET",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524247140,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898627347/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T17:10:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898627347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898655940"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898655940"
                }
            },
            "author_association": "MEMBER",
            "body": "For some reason changing \r\n```lua\r\nif not tstree then\r\n```\r\nto\r\n```lua\r\nif not tstree or not tree:is_valid(true) then\r\n```\r\nbreaks injection highlighting, at least in `:h treesitter.txt`. Even on master, where this is the only delta (no async highlighting).\r\n\r\nI don't think we need it though, especially after the patch to prevent the segfault when iterating captures after a parser has been reset",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T18:16:43Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898655940",
            "id": 1898655940,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xKzDE",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2524295023,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898655940/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T18:16:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898655940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898664892"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898664892"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Since `has_changes()` uses the subtree, it can also cause a crash: \r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git'\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { \"lua\" },\r\n  highlight = { enable = true },\r\n}\r\n\r\n-----\r\n\r\nlocal line = 'printf(\"some text\");'\r\nlocal lines = {}\r\nfor i = 1, 2000 do lines[i] = line end\r\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\r\n\r\nvim.treesitter.start(0, 'c')\r\nlocal parser = vim.treesitter.get_parser(0)\r\nlocal tree = parser:parse(true)[1]\r\nlocal q = vim.treesitter.query.parse('c', \"((identifier) @cap)\")\r\nlocal iter = q:iter_captures(tree:root(), 0)\r\nlocal nodes = {}\r\nlocal function addAll(node)\r\n  table.insert(nodes, node:child())\r\n  for child in node:iter_children() do\r\n    addAll(child)\r\n  end\r\nend\r\naddAll(tree:root())\r\n\r\nfor depth = 0, 30 do\r\n  vim.api.nvim_buf_set_text(0, 25 + depth, 4, 25 + depth, 5, {})\r\n  parser._parser:reset()\r\n  parser._parse(parser, true, 3)\r\n  collectgarbage(\"collect\")\r\nend\r\n\r\nvim.keymap.set('n', 'a', function()\r\n  for _, node in ipairs(nodes) do\r\n    node:has_changes()\r\n  end\r\nend)\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T18:39:28Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898664892",
            "id": 1898664892,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xK1O8",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524307960,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898664892/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T18:39:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898664892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898668788"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898668788"
                }
            },
            "author_association": "MEMBER",
            "body": "Damn, how frustrating. I think we must wait until this is fixed in tree-sitter",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T18:49:00Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898668788",
            "id": 1898668788,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xK2L0",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524313520,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898668788/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T18:49:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898668788",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898681435"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898681435"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It starts working after scrolling through the entire file. `LanguageTree` is not valid until all ranges are parsed. I also think it is not needed.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-27T19:23:17Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898681435",
            "id": 1898681435,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xK5Rb",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2524332635,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898681435/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-27T19:23:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898681435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898795822"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898795822"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think we can call `ts_tree_copy()` when we create a new lua node/querycursor, and store the tree clone internally. Copying a tree doesn't seem to be that expensive (atomic increment for subtree + copying the included ranges). \r\n\r\nOnly thing is that tree edits will get more expensive since the nodes we allocate might not get garbage collected in time and still hold references to the old tree.\r\n\r\n---\r\n\r\nAlternatively, we can make another allocation when we create a new tree, which stores the number of times a tree was modified, and the number of nodes and cursors that references it. \r\nFor each new node and cursor, we would incrememt this count and record the current revision. And then on access we check and throw an error if the revision doesn't match the number we expected it to be.\r\nOn GC we decrement the reference counter and deallocate if it is 0.\r\nThis should perform better, and may be more desirable in some cases (~why would the code reference an old node without cloning the tree first, this never worked correctly before~)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-28T04:34:51Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898795822",
            "id": 1898795822,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xLVMu",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524494049,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898795822/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-29T08:35:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898795822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898965048"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898965048"
                }
            },
            "author_association": "MEMBER",
            "body": "Brilliant @vanaigr , thank you! I have fixed `iter_(captures|matches)`, let me know if you think the implementation should be adjusted.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-28T18:40:42Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898965048",
            "id": 1898965048,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xL-g4",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524776649,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898965048/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-28T18:40:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898965048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898976598"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898976598"
                }
            },
            "author_association": "MEMBER",
            "body": "Note: other crashes occur even without async parsing, tracked by #31758",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-28T19:24:43Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898976598",
            "id": 1898976598,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xMBVW",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524788649,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898976598/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-28T19:24:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898976598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1898979624"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898979624"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Brilliant @vanaigr , thank you! I have fixed `iter_(captures|matches)`, let me know if you think the implementation should be adjusted.\r\n\r\nI think it's good :+1: \r\n",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2024-12-28T19:43:57Z",
            "diff_hunk": "@@ -409,6 +423,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()\n+    -- If buffer was changed in the middle of parsing, reset parse state\n+    if self:_buf().changedtick ~= ct then\n+      self._parser:reset()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1898979624",
            "id": 1898979624,
            "in_reply_to_id": 1896170488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xMCEo",
            "original_commit_id": "9131d42b1b12ca2d6005f012b1fd3b60d53f0d03",
            "original_line": 439,
            "original_position": 75,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2524792661,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898979624/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-28T19:43:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1898979624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903268116"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903268116"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we inline this? I think it over-abstracts a bit too much and is only used in one function.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T13:09:28Z",
            "diff_hunk": "@@ -98,6 +100,11 @@ local LanguageTree = {}\n \n LanguageTree.__index = LanguageTree\n \n+--- @private\n+function LanguageTree:_buf()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903268116",
            "id": 1903268116,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xcZEU",
            "original_commit_id": "46727470bf3d1227721847c71f6adfb1a35f15eb",
            "original_line": 104,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2530894374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903268116/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T13:21:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903268116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903268966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903268966"
                }
            },
            "author_association": "MEMBER",
            "body": "Just to note, I expect to change this in the future. I want to propose the convention that async-callback functions return an object with a close method to match UV. Detecting whether the parse happened without a schedule will need to be done some other way.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T13:13:53Z",
            "diff_hunk": "@@ -420,11 +468,31 @@ end\n ---     Set to `true` to run a complete parse of the source (Note: Can be slow!)\n ---     Set to `false|nil` to only parse regions with empty ranges (typically\n ---     only the root tree without injections).\n---- @return table<integer, TSTree>\n-function LanguageTree:parse(range)\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)? Function invoked when parsing completes.\n+---     When provided, parsing will run asynchronously. The first argument to the function is the\n+---     list of trees returned by the parse (upon success), or `nil` if the parse timed out\n+---     (determined by 'redrawtime'). In the case of a failure, a string representing the error type\n+---     will also be passed to the callback (currently only possible for timeouts).\n+---\n+---     If parsing was still able to finish synchronously (within 3ms), `parse()` returns the list\n+---     of trees. Otherwise, it returns `nil`.\n+--- @return table<integer, TSTree>?",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903268966",
            "id": 1903268966,
            "line": 524,
            "node_id": "PRRC_kwDOAPphoM5xcZRm",
            "original_commit_id": "46727470bf3d1227721847c71f6adfb1a35f15eb",
            "original_line": 524,
            "original_position": 121,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 173,
            "pull_request_review_id": 2530894374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903268966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T13:21:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903268966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903269028"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903269028"
                }
            },
            "author_association": "MEMBER",
            "body": "Needs `@private`",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T13:14:22Z",
            "diff_hunk": "@@ -409,6 +424,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+--- @return table<integer, TSTree>? trees the list of parsed trees, if parsing completed synchronously\n+function LanguageTree:_async_parse(range, on_parse)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903269028",
            "id": 1903269028,
            "line": 463,
            "node_id": "PRRC_kwDOAPphoM5xcZSk",
            "original_commit_id": "46727470bf3d1227721847c71f6adfb1a35f15eb",
            "original_line": 463,
            "original_position": 76,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 114,
            "pull_request_review_id": 2530894374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903269028/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T13:21:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903269028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903269257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903269257"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we reverse the order of the arguments here to match UV and LSP callbacks. So `err, trees`",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T13:15:51Z",
            "diff_hunk": "@@ -420,11 +468,31 @@ end\n ---     Set to `true` to run a complete parse of the source (Note: Can be slow!)\n ---     Set to `false|nil` to only parse regions with empty ranges (typically\n ---     only the root tree without injections).\n---- @return table<integer, TSTree>\n-function LanguageTree:parse(range)\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)? Function invoked when parsing completes.",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903269257",
            "id": 1903269257,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xcZWJ",
            "original_commit_id": "46727470bf3d1227721847c71f6adfb1a35f15eb",
            "original_line": 471,
            "original_position": 113,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2530894374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903269257/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T13:21:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903269257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903270010"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903270010"
                }
            },
            "author_association": "MEMBER",
            "body": "One issue with this implementation is that for every plugin that calls `parse` will effectively add the timeout each for each event loop iteration. E.g. if there are 3 plugins that need to parse the tree on every change then the effective timeout becomes 3x3ms.\n\nTo avoid this, we will need to add plumbing so async parse is invoked once, and additional calls that happen within a parse just queue the callback.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T13:19:47Z",
            "diff_hunk": "@@ -409,6 +424,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+--- @return table<integer, TSTree>? trees the list of parsed trees, if parsing completed synchronously\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903270010",
            "id": 1903270010,
            "line": 480,
            "node_id": "PRRC_kwDOAPphoM5xcZh6",
            "original_commit_id": "46727470bf3d1227721847c71f6adfb1a35f15eb",
            "original_line": 480,
            "original_position": 81,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 131,
            "pull_request_review_id": 2530894374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903270010/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T13:21:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903270010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903303735"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903303735"
                }
            },
            "author_association": "MEMBER",
            "body": "Note: without the callback queue logic (i.e. how it was originally) this value would be 12.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T16:37:38Z",
            "diff_hunk": "@@ -90,6 +91,207 @@ describe('treesitter parser API', function()\n     eq(true, exec_lua('return parser:parse()[1] == tree2'))\n   end)\n \n+  it('parses buffer asynchronously', function()\n+    insert([[\n+      int main() {\n+        int x = 3;\n+      }]])\n+\n+    exec_lua(function()\n+      _G.parser = vim.treesitter.get_parser(0, 'c')\n+      _G.lang = vim.treesitter.language.inspect('c')\n+      _G.parser:parse(nil, function(_, trees)\n+        _G.tree = trees[1]\n+        _G.root = _G.tree:root()\n+      end)\n+      vim.wait(100, function() end)\n+    end)\n+\n+    eq('<tree>', exec_lua('return tostring(tree)'))\n+    eq('<node translation_unit>', exec_lua('return tostring(root)'))\n+    eq({ 0, 0, 3, 0 }, exec_lua('return {root:range()}'))\n+\n+    eq(1, exec_lua('return root:child_count()'))\n+    exec_lua('child = root:child(0)')\n+    eq('<node function_definition>', exec_lua('return tostring(child)'))\n+    eq({ 0, 0, 2, 1 }, exec_lua('return {child:range()}'))\n+\n+    eq('function_definition', exec_lua('return child:type()'))\n+    eq(true, exec_lua('return child:named()'))\n+    eq('number', type(exec_lua('return child:symbol()')))\n+    eq(true, exec_lua('return lang.symbols[child:type()]'))\n+\n+    exec_lua('anon = root:descendant_for_range(0,8,0,9)')\n+    eq('(', exec_lua('return anon:type()'))\n+    eq(false, exec_lua('return anon:named()'))\n+    eq('number', type(exec_lua('return anon:symbol()')))\n+    eq(false, exec_lua([=[return lang.symbols[string.format('\"%s\"', anon:type())]]=]))\n+\n+    exec_lua('descendant = root:descendant_for_range(1,2,1,12)')\n+    eq('<node declaration>', exec_lua('return tostring(descendant)'))\n+    eq({ 1, 2, 1, 12 }, exec_lua('return {descendant:range()}'))\n+    eq(\n+      '(declaration type: (primitive_type) declarator: (init_declarator declarator: (identifier) value: (number_literal)))',\n+      exec_lua('return descendant:sexpr()')\n+    )\n+\n+    feed('2G7|ay')\n+    exec_lua(function()\n+      _G.parser:parse(nil, function(_, trees)\n+        _G.tree2 = trees[1]\n+        _G.root2 = _G.tree2:root()\n+        _G.descendant2 = _G.root2:descendant_for_range(1, 2, 1, 13)\n+      end)\n+      vim.wait(100, function() end)\n+    end)\n+    eq(false, exec_lua('return tree2 == tree1'))\n+    eq(false, exec_lua('return root2 == root'))\n+    eq('<node declaration>', exec_lua('return tostring(descendant2)'))\n+    eq({ 1, 2, 1, 13 }, exec_lua('return {descendant2:range()}'))\n+\n+    eq(true, exec_lua('return child == child'))\n+    -- separate lua object, but represents same node\n+    eq(true, exec_lua('return child == root:child(0)'))\n+    eq(false, exec_lua('return child == descendant2'))\n+    eq(false, exec_lua('return child == nil'))\n+    eq(false, exec_lua('return child == tree'))\n+\n+    eq('string', exec_lua('return type(child:id())'))\n+    eq(true, exec_lua('return child:id() == child:id()'))\n+    -- separate lua object, but represents same node\n+    eq(true, exec_lua('return child:id() == root:child(0):id()'))\n+    eq(false, exec_lua('return child:id() == descendant2:id()'))\n+    eq(false, exec_lua('return child:id() == nil'))\n+    eq(false, exec_lua('return child:id() == tree'))\n+\n+    -- unchanged buffer: return the same tree\n+    eq(true, exec_lua('return parser:parse()[1] == tree2'))\n+  end)\n+\n+  it('does not crash when editing large files', function()\n+    insert([[printf(\"%s\", \"some text\");]])\n+    feed('yy49999p')\n+\n+    exec_lua(function()\n+      _G.parser = vim.treesitter.get_parser(0, 'c')\n+      _G.done = false\n+      vim.treesitter.start(0, 'c')\n+      _G.parser:parse(nil, function()\n+        _G.done = true\n+      end)\n+      while not _G.done do\n+        -- Busy wait until async parsing has completed\n+        vim.wait(100, function() end)\n+      end\n+    end)\n+\n+    eq(true, exec_lua([[return done]]))\n+    exec_lua(function()\n+      vim.api.nvim_input('Lxj')\n+    end)\n+    exec_lua(function()\n+      vim.api.nvim_input('xj')\n+    end)\n+    exec_lua(function()\n+      vim.api.nvim_input('xj')\n+    end)\n+    assert_alive()\n+  end)\n+\n+  it('resets parsing state on tree changes', function()\n+    insert([[vim.api.nvim_set_hl(0, 'test2', { bg = 'green' })]])\n+    feed('yy1000p')\n+\n+    exec_lua(function()\n+      vim.cmd('set ft=lua')\n+\n+      vim.treesitter.start(0)\n+      local parser = assert(vim.treesitter.get_parser(0))\n+\n+      parser:parse(true, function() end)\n+      vim.api.nvim_buf_set_lines(0, 1, -1, false, {})\n+      parser:parse(true)\n+    end)\n+  end)\n+\n+  it('resets when buffer was editing during an async parse', function()\n+    insert([[printf(\"%s\", \"some text\");]])\n+    feed('yy49999p')\n+    feed('gg4jO// Comment<Esc>')\n+\n+    exec_lua(function()\n+      _G.parser = vim.treesitter.get_parser(0, 'c')\n+      _G.done = false\n+      vim.treesitter.start(0, 'c')\n+      _G.parser:parse(nil, function()\n+        _G.done = true\n+      end)\n+    end)\n+\n+    exec_lua(function()\n+      vim.api.nvim_input('ggdj')\n+    end)\n+\n+    eq(false, exec_lua([[return done]]))\n+    exec_lua(function()\n+      while not _G.done do\n+        -- Busy wait until async parsing finishes\n+        vim.wait(100, function() end)\n+      end\n+    end)\n+    eq(true, exec_lua([[return done]]))\n+    eq('comment', exec_lua([[return parser:parse()[1]:root():named_child(2):type()]]))\n+    eq({ 2, 0, 2, 10 }, exec_lua([[return {parser:parse()[1]:root():named_child(2):range()}]]))\n+  end)\n+\n+  it('handles multiple async parse calls', function()\n+    insert([[printf(\"%s\", \"some text\");]])\n+    feed('yy49999p')\n+\n+    exec_lua(function()\n+      -- Spy on vim.schedule\n+      local schedule = vim.schedule\n+      vim.schedule = function(fn)\n+        _G.schedules = _G.schedules + 1\n+        schedule(fn)\n+      end\n+      _G.schedules = 0\n+      _G.parser = vim.treesitter.get_parser(0, 'c')\n+      _G.done1, _G.done2, _G.done3, _G.done4, _G.done5 = false, false, false, false, false\n+      _G.parser:parse(nil, function()\n+        _G.done1 = true\n+      end)\n+      _G.parser:parse(nil, function()\n+        _G.done2 = true\n+      end)\n+      _G.parser:parse(nil, function()\n+        _G.done3 = true\n+      end)\n+      _G.parser:parse(nil, function()\n+        _G.done4 = true\n+      end)\n+      _G.parser:parse(nil, function()\n+        _G.done5 = true\n+      end)\n+      schedule(function()\n+        _G.schedules_snapshot = _G.schedules\n+      end)\n+    end)\n+\n+    eq(2, exec_lua([[return schedules_snapshot]]))",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903303735",
            "id": 1903303735,
            "line": 271,
            "node_id": "PRRC_kwDOAPphoM5xchw3",
            "original_commit_id": "1d8cb74a07b61c9a8d896fb989302fc86d12a4e4",
            "original_line": 271,
            "original_position": 199,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": 189,
            "pull_request_review_id": 2530931452,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903303735/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T16:37:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903303735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903321848"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903321848"
                }
            },
            "author_association": "MEMBER",
            "body": "~Maybe we can instead read from `self.tree._parsing` for simplicity? can be done in a follow up i guess~ I don't think we can do this, upon further thinking.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-05T18:51:29Z",
            "diff_hunk": "@@ -382,19 +383,33 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903321848",
            "id": 1903321848,
            "line": 391,
            "node_id": "PRRC_kwDOAPphoM5xcmL4",
            "original_commit_id": "d7c4a896d976cf3cb7c196c5a7580d03019e934f",
            "original_line": 391,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": 29,
            "pull_request_review_id": 2530948419,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903321848/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T03:05:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903321848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1903612237"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903612237"
                }
            },
            "author_association": "MEMBER",
            "body": "Now `LanguageTree` is given a table of callback queues (and async parsing state), keyed by `range` (so that different ranges don't interfere with each others' parsing)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T03:24:41Z",
            "diff_hunk": "@@ -409,6 +424,39 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- Run an asynchronous parse, calling {on_parse} when complete.\n+---\n+--- @param range boolean|Range?\n+--- @param on_parse fun(trees?: table<integer, TSTree>, err?: string)\n+--- @return table<integer, TSTree>? trees the list of parsed trees, if parsing completed synchronously\n+function LanguageTree:_async_parse(range, on_parse)\n+  local ct = self:_buf().changedtick\n+  local total_parse_time = 0\n+  local redrawtime = vim.o.redrawtime\n+\n+  local function step()",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1903612237",
            "id": 1903612237,
            "in_reply_to_id": 1903270010,
            "line": 480,
            "node_id": "PRRC_kwDOAPphoM5xdtFN",
            "original_commit_id": "46727470bf3d1227721847c71f6adfb1a35f15eb",
            "original_line": 480,
            "original_position": 81,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 131,
            "pull_request_review_id": 2531265055,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903612237/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T03:24:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903612237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904200548"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904200548"
                }
            },
            "author_association": "MEMBER",
            "body": "let's also mention here an example showing how to  opt-out",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T14:12:44Z",
            "diff_hunk": "@@ -287,6 +292,7 @@ PERFORMANCE\n   highlighting.\n • LSP diagnostics and inlay hints are de-duplicated (new requests cancel\n   inflight requests). This greatly improves performance with slow LSP servers.\n+• Treesitter highlighting is now asynchronous.",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904200548",
            "id": 1904200548,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xf8tk",
            "original_commit_id": "4df75acf72727a8e91587f4f853f79641370766b",
            "original_line": 295,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2532225002,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904200548/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T14:12:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904200548",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904207510"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904207510"
                }
            },
            "author_association": "MEMBER",
            "body": "off-topic: this is the [\"event emitter\"](https://nodejs.org/en/learn/asynchronous-work/the-nodejs-event-emitter) pattern. Do we need a stdlib util for this?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T14:18:47Z",
            "diff_hunk": "@@ -409,6 +425,81 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- @param range boolean|Range?\n+--- @return string\n+local function range_to_string(range)\n+  return type(range) == 'table' and table.concat(range, ',') or tostring(range)\n+end\n+\n+--- @private\n+--- @param range boolean|Range?\n+--- @param callback fun(err?: string, trees?: table<integer, TSTree>)\n+function LanguageTree:_push_async_callback(range, callback)\n+  local key = range_to_string(range)\n+  self._cb_queues[key] = self._cb_queues[key] or {}\n+  local queue = self._cb_queues[key]\n+  queue[#queue + 1] = callback",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904207510",
            "id": 1904207510,
            "line": 441,
            "node_id": "PRRC_kwDOAPphoM5xf-aW",
            "original_commit_id": "4df75acf72727a8e91587f4f853f79641370766b",
            "original_line": 441,
            "original_position": 92,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 92,
            "pull_request_review_id": 2532238158,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904207510/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T14:18:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904207510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904237857"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904237857"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't that basically user autocommands without vim baggage?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T14:43:50Z",
            "diff_hunk": "@@ -409,6 +425,81 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- @param range boolean|Range?\n+--- @return string\n+local function range_to_string(range)\n+  return type(range) == 'table' and table.concat(range, ',') or tostring(range)\n+end\n+\n+--- @private\n+--- @param range boolean|Range?\n+--- @param callback fun(err?: string, trees?: table<integer, TSTree>)\n+function LanguageTree:_push_async_callback(range, callback)\n+  local key = range_to_string(range)\n+  self._cb_queues[key] = self._cb_queues[key] or {}\n+  local queue = self._cb_queues[key]\n+  queue[#queue + 1] = callback",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904237857",
            "id": 1904237857,
            "in_reply_to_id": 1904207510,
            "line": 441,
            "node_id": "PRRC_kwDOAPphoM5xgF0h",
            "original_commit_id": "4df75acf72727a8e91587f4f853f79641370766b",
            "original_line": 441,
            "original_position": 92,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 92,
            "pull_request_review_id": 2532292433,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904237857/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T14:43:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904237857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904249105"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904249105"
                }
            },
            "author_association": "MEMBER",
            "body": "yeah I think it should probably be a (more ergonomic) feature of autocmds somehow.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T14:53:06Z",
            "diff_hunk": "@@ -409,6 +425,81 @@ function LanguageTree:_add_injections()\n   return query_time\n end\n \n+--- @param range boolean|Range?\n+--- @return string\n+local function range_to_string(range)\n+  return type(range) == 'table' and table.concat(range, ',') or tostring(range)\n+end\n+\n+--- @private\n+--- @param range boolean|Range?\n+--- @param callback fun(err?: string, trees?: table<integer, TSTree>)\n+function LanguageTree:_push_async_callback(range, callback)\n+  local key = range_to_string(range)\n+  self._cb_queues[key] = self._cb_queues[key] or {}\n+  local queue = self._cb_queues[key]\n+  queue[#queue + 1] = callback",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904249105",
            "id": 1904249105,
            "in_reply_to_id": 1904207510,
            "line": 441,
            "node_id": "PRRC_kwDOAPphoM5xgIkR",
            "original_commit_id": "4df75acf72727a8e91587f4f853f79641370766b",
            "original_line": 441,
            "original_position": 92,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 92,
            "pull_request_review_id": 2532312204,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904249105/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T14:53:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904249105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904266199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904266199"
                }
            },
            "author_association": "MEMBER",
            "body": "We enable treesitter by default for some languages. How do we opt-out of async for those?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:06:14Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904266199",
            "id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgMvX",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532342046,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904266199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:06:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904266199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904270387"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904270387"
                }
            },
            "author_association": "MEMBER",
            "body": "If users add their own ftplugin files (or filetype autocmds) with the sync version of `treesitter.start` then this should take precedence over the async parses, but maybe there should be a better way. I'm also not sure if reparses would still be sync in this case",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:09:45Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904270387",
            "id": 1904270387,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgNwz",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532349395,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904270387/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:09:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904270387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904274072"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904274072"
                }
            },
            "author_association": "MEMBER",
            "body": "We do this for vimdoc and lua (and markdown hovers), which tend not to suffer from performance issues. We might keep these sync for now, and preserve async parsing for manual `vim.treesitter.start()` (and nvim-treesitter).",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:12:39Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904274072",
            "id": 1904274072,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgOqY",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532355574,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904274072/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:12:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904274072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904274172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904274172"
                }
            },
            "author_association": "MEMBER",
            "body": "> Do we need the separate _async_parse_callback() method?\r\n\r\nIs this not a reasonable simplification?\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\nindex 10a022be2a..1ab264f2e7 100644\r\n--- a/runtime/lua/vim/treesitter/highlighter.lua\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -70,7 +70,7 @@ end\r\n ---@field private _queries table<string,vim.treesitter.highlighter.Query>\r\n ---@field tree vim.treesitter.LanguageTree\r\n ---@field private redraw_count integer\r\n----@field private parsing boolean true if we are parsing asynchronously\r\n+---@field parsing boolean true if we are parsing asynchronously\r\n local TSHighlighter = {\r\n   active = {},\r\n }\r\n@@ -391,25 +391,15 @@ function TSHighlighter._on_win(_, _, buf, topline, botline)\r\n   if not self or self.parsing then\r\n     return false\r\n   end\r\n-  self.parsing = self.tree:parse({ topline, botline + 1 }, self:_create_async_parse_callback(buf))\r\n-    == nil\r\n-  self.redraw_count = self.redraw_count + 1\r\n-  self:prepare_highlight_states(topline, botline)\r\n-  return #self._highlight_states > 0\r\n-end\r\n-\r\n----@param buf integer\r\n----@return function?\r\n-function TSHighlighter:_create_async_parse_callback(buf)\r\n-  if self._sync then\r\n-    return nil\r\n-  end\r\n-  return function(_, trees)\r\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, not self._sync and function(_, trees)\r\n     if trees and self.parsing then\r\n       self.parsing = false\r\n       api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n     end\r\n-  end\r\n+  end or nil) == nil\r\n+  self.redraw_count = self.redraw_count + 1\r\n+  self:prepare_highlight_states(topline, botline)\r\n+  return #self._highlight_states > 0\r\n end\r\n \r\n api.nvim_set_decoration_provider(ns, {\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:12:43Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904274172",
            "id": 1904274172,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xgOr8",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2532355723,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904274172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:12:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904274172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904285163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904285163"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice thanks, I'll incorporate that",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:21:31Z",
            "diff_hunk": "@@ -382,21 +380,35 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\n end\n \n ---@private\n----@param _win integer\n ---@param buf integer\n ---@param topline integer\n ---@param botline integer\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\n+function TSHighlighter._on_win(_, _, buf, topline, botline)\n   local self = TSHighlighter.active[buf]\n-  if not self then\n+  if not self or self.parsing then\n+    return false\n+  end\n+  self.parsing = self.tree:parse({ topline, botline + 1 }, function(trees)\n+    if trees then\n+      self:_async_parse_callback(buf)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904285163",
            "id": 1904285163,
            "in_reply_to_id": 1896352978,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xgRXr",
            "original_commit_id": "c885db4421200a476440ec14ce231bcf922f7248",
            "original_line": 393,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/highlighter.lua",
            "position": null,
            "pull_request_review_id": 2532373880,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904285163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:21:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904285163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904287960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904287960"
                }
            },
            "author_association": "MEMBER",
            "body": "If we did that I don't think there would there be a way for users to opt in to asynchronous parsing of these languages though, unless these ftplugin files get ignored when using a superseding one",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:23:43Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904287960",
            "id": 1904287960,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgSDY",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532378443,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904287960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:23:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904287960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904291716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904291716"
                }
            },
            "author_association": "MEMBER",
            "body": "They can stop and start in an autocommand or ftplugin? This is not meant to be permanent; just reduce the risk of unforeseen regressions right after landing this. (\"Principle of least surprise\") Ideally, async parsing is a no-brainer and there's zero need for choosing synchronous parsing over it.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:26:33Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904291716",
            "id": 1904291716,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgS-E",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532384377,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904291716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:27:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904291716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904295725"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904295725"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm starting to feel like an option to `vim.treesitter.start()` isn't the right approach. I'd be more comfortable with something like `g:treesitter_async_disable` or introduce `vim.treesitter.config({ sync = true })`.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:30:06Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904295725",
            "id": 1904295725,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgT8t",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532391642,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904295725/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:30:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904295725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904295956"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904295956"
                }
            },
            "author_association": "MEMBER",
            "body": "(But the same answer -- stop and restart -- also applies for opting _out_ of async, of course.)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:30:16Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904295956",
            "id": 1904295956,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgUAU",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532391992,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904295956/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:30:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904295956",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904300460"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904300460"
                }
            },
            "author_association": "MEMBER",
            "body": "> I'm starting to feel like an option to `vim.treesitter.start()` isn't the right approach. I'd be more comfortable with something like `g:treesitter_async_disable` or introduce `vim.treesitter.config({ sync = true })`.\r\n\r\nIn general, we _need_ more granular control. If this is only about a temporary \"kill switch\" in case things go pear-shaped, that's different (but should be clearly marked as such: `g:_ts_no_async`).",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:34:03Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904300460",
            "id": 1904300460,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgVGs",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532399699,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904300460/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:34:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904300460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904302316"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904302316"
                }
            },
            "author_association": "MEMBER",
            "body": "For more granular we can use `b:_ts_no_async` then?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:35:39Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904302316",
            "id": 1904302316,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgVjs",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532402933,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904302316/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:35:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904302316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904303096"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904303096"
                }
            },
            "author_association": "MEMBER",
            "body": "Shall I replace with the global variable configuration? (Also would this kill switch only apply to treesitter *highlighting*? If so I think the name should suggest that)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:36:17Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904303096",
            "id": 1904303096,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgVv4",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532404282,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904303096/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:36:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904303096",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904305222"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904305222"
                }
            },
            "author_association": "MEMBER",
            "body": "> For more granular we can use `b:_ts_no_async` then?\r\n\r\nNo objection; my point about granularity only applied to a permanent interface, not a temporary testing switch.\r\n\r\n> Also would this kill switch only apply to treesitter highlighting? If so I think the name should suggest that\r\n\r\nWell, `vim.treesitter.start()` only applies to highlighting, anyway (for now) ;)\r\n\r\nI think it's simpler for now for this to be global (assuming other features are converted subsequently).\r\n\r\nCould also name it `_ts_force_sync[_parsing]`.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:38:05Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904305222",
            "id": 1904305222,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgWRG",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532408051,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904305222/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:40:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904305222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904310542"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904310542"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok let's just do `g:_ts_force_sync_parsing` for now.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:42:07Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904310542",
            "id": 1904310542,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgXkO",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532416594,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904310542/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:42:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904310542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1904312972"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904312972"
                }
            },
            "author_association": "MEMBER",
            "body": "Yep, let's start simple -- we can always add more control later on, after we've gotten initial feedback.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-06T15:44:11Z",
            "diff_hunk": "@@ -156,6 +156,11 @@ TREESITTER\n   if no languages are explicitly registered.\n • |vim.treesitter.language.add()| returns `true` if a parser was loaded\n   successfully and `nil,errmsg` otherwise instead of throwing an error.\n+• |vim.treesitter.get_parser()| and |vim.treesitter.start()| no longer parse\n+  the tree before returning. Scripts must call |LanguageTree:parse()| explicitly. >lua\n+    local p = vim.treesitter.get_parser(0, 'c')",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1904312972",
            "id": 1904312972,
            "in_reply_to_id": 1904266199,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5xgYKM",
            "original_commit_id": "16c00d17972cd3dbf97927a2efb04c237d9922b2",
            "original_line": 163,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 6,
            "pull_request_review_id": 2532420768,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904312972/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-06T15:44:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1904312972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1905193214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905193214"
                }
            },
            "author_association": "MEMBER",
            "body": "If there are lots of children then this can also stack the timeout. We need to treat timeout like a quota which each step takes from.\r\n\r\n```suggestion\r\n    local ctime, _, child_finished = tcall(child._parse, child, range, timeout)\r\n    timeout = timeout and math.max(timeout - ctime, 0)\r\n    if timeout == 0 or not child_finished then\r\n      return self._trees, child_finished\r\n    end\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-07T09:54:07Z",
            "diff_hunk": "@@ -457,10 +575,13 @@ function LanguageTree:parse(range)\n   })\n \n   for _, child in pairs(self._children) do\n-    child:parse(range)\n+    local _, child_finished = child:_parse(range, timeout)\n+    if not child_finished then\n+      return self._trees, child_finished\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1905193214",
            "id": 1905193214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xjvD-",
            "original_commit_id": "8fe2c0197f06e9bc26cd5d102906b6df930ad857",
            "original_line": 586,
            "original_position": 219,
            "original_start_line": 578,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2533874821,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905193214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-07T09:56:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905193214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1905197392"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905197392"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    ptime, changes, no_regions_parsed, total_parse_time, is_finished = tcall(self._parse_regions, self, range, timeout)\r\n    timeout = timeout and math.max(timeout - ptime, 0)\r\n    if timeout == 0 or not is_finished then\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-07T09:57:11Z",
            "diff_hunk": "@@ -433,10 +547,14 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    if not is_finished then",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1905197392",
            "id": 1905197392,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xjwFQ",
            "original_commit_id": "8fe2c0197f06e9bc26cd5d102906b6df930ad857",
            "original_line": 556,
            "original_position": 205,
            "original_start_line": 554,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2533881639,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905197392/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-07T09:57:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905197392",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1905631216"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905631216"
                }
            },
            "author_association": "MEMBER",
            "body": "Is it acceptable to just use the `total_parse_time` that `_parse_regions` already returns?",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-07T15:30:59Z",
            "diff_hunk": "@@ -433,10 +547,14 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    if not is_finished then",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1905631216",
            "id": 1905631216,
            "in_reply_to_id": 1905197392,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xlZ_w",
            "original_commit_id": "8fe2c0197f06e9bc26cd5d102906b6df930ad857",
            "original_line": 556,
            "original_position": 205,
            "original_start_line": 554,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2534642927,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905631216/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-07T15:30:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905631216",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1905638870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905638870"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, sorry didn't realise that was there.",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-07T15:34:13Z",
            "diff_hunk": "@@ -433,10 +547,14 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    if not is_finished then",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1905638870",
            "id": 1905638870,
            "in_reply_to_id": 1905197392,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xlb3W",
            "original_commit_id": "8fe2c0197f06e9bc26cd5d102906b6df930ad857",
            "original_line": 556,
            "original_position": 205,
            "original_start_line": 554,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2534656406,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905638870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-07T15:34:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905638870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1905666689"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905666689"
                }
            },
            "author_association": "MEMBER",
            "body": "One thing I just thought of: what if we do this instead?\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/treesitter/languagetree.lua b/runtime/lua/vim/treesitter/languagetree.lua\r\nindex cc508e13cf..98983e220e 100644\r\n--- a/runtime/lua/vim/treesitter/languagetree.lua\r\n+++ b/runtime/lua/vim/treesitter/languagetree.lua\r\n@@ -552,6 +552,7 @@ function LanguageTree:_parse(range, timeout)\r\n   -- At least 1 region is invalid\r\n   if not self:is_valid(true) then\r\n     changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\r\n+    timeout = timeout and math.max(timeout - total_parse_time)\r\n     if not is_finished then\r\n       return self._trees, is_finished\r\n     end\r\n@@ -575,7 +576,11 @@ function LanguageTree:_parse(range, timeout)\r\n   })\r\n \r\n   for _, child in pairs(self._children) do\r\n-    local _, child_finished = child:_parse(range, timeout)\r\n+    if timeout == 0 then\r\n+      return self._trees, false\r\n+    end\r\n+    local ctime, _, child_finished = tcall(child._parse, child, range, timeout)\r\n+    timeout = timeout and math.max(timeout - ctime, 0)\r\n     if not child_finished then\r\n       return self._trees, child_finished\r\n     end\r\n```\r\n\r\nbefore, we would return from `_parse()` if e.g. the last child finished parsing, but went over the time limit. Now if the last child finished parsing over the time limit, we just return the finished result and else check the timeout case\r\n\r\nAdditionally, if `_parse_regions` completed over the time limit and there are no child trees, we now also just return the finished tree state ",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-07T15:52:18Z",
            "diff_hunk": "@@ -433,10 +547,14 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    if not is_finished then",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1905666689",
            "id": 1905666689,
            "in_reply_to_id": 1905197392,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xliqB",
            "original_commit_id": "8fe2c0197f06e9bc26cd5d102906b6df930ad857",
            "original_line": 556,
            "original_position": 205,
            "original_start_line": 554,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2534703267,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905666689/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-07T15:53:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905666689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1905678019"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905678019"
                }
            },
            "author_association": "MEMBER",
            "body": "SGTM",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-07T15:59:56Z",
            "diff_hunk": "@@ -433,10 +547,14 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    if not is_finished then",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1905678019",
            "id": 1905678019,
            "in_reply_to_id": 1905197392,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xllbD",
            "original_commit_id": "8fe2c0197f06e9bc26cd5d102906b6df930ad857",
            "original_line": 556,
            "original_position": 205,
            "original_start_line": 554,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2534723112,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905678019/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-07T15:59:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1905678019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1907144689"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1907144689"
                }
            },
            "author_association": "NONE",
            "body": "```suggestion\r\n    timeout = timeout and math.max(timeout - total_parse_time, 0)\r\n```",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-08T12:57:54Z",
            "diff_hunk": "@@ -433,10 +547,15 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    timeout = timeout and math.max(timeout - total_parse_time)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1907144689",
            "id": 1907144689,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xrLfx",
            "original_commit_id": "c5150cb4c497c9607d8933deb74cdd9fb149b075",
            "original_line": 555,
            "original_position": 205,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2537080374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1907144689/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-08T12:57:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1907144689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20242530?v=4",
                "events_url": "https://api.github.com/users/iurimateus/events{/privacy}",
                "followers_url": "https://api.github.com/users/iurimateus/followers",
                "following_url": "https://api.github.com/users/iurimateus/following{/other_user}",
                "gists_url": "https://api.github.com/users/iurimateus/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iurimateus",
                "id": 20242530,
                "login": "iurimateus",
                "node_id": "MDQ6VXNlcjIwMjQyNTMw",
                "organizations_url": "https://api.github.com/users/iurimateus/orgs",
                "received_events_url": "https://api.github.com/users/iurimateus/received_events",
                "repos_url": "https://api.github.com/users/iurimateus/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iurimateus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iurimateus/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iurimateus",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31631#discussion_r1907429638"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31631"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1907429638"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops, thank you :)",
            "commit_id": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
            "created_at": "2025-01-08T16:05:32Z",
            "diff_hunk": "@@ -433,10 +547,15 @@ function LanguageTree:parse(range)\n   local no_regions_parsed = 0\n   local query_time = 0\n   local total_parse_time = 0\n+  local is_finished --- @type boolean\n \n   -- At least 1 region is invalid\n   if not self:is_valid(true) then\n-    changes, no_regions_parsed, total_parse_time = self:_parse_regions(range)\n+    changes, no_regions_parsed, total_parse_time, is_finished = self:_parse_regions(range, timeout)\n+    timeout = timeout and math.max(timeout - total_parse_time)",
            "html_url": "https://github.com/neovim/neovim/pull/31631#discussion_r1907429638",
            "id": 1907429638,
            "in_reply_to_id": 1907144689,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xsREG",
            "original_commit_id": "c5150cb4c497c9607d8933deb74cdd9fb149b075",
            "original_line": 555,
            "original_position": 205,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2537570071,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1907429638/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-08T16:05:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1907429638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That said, there are still some stutters at times (with the gigantic file), which is disappointing. Start up time is massively improved but cursor movement stalls towards the end of parsing completion. If anyone can provide some insights on how to smooth over the asynchronous chunks it would be much appreciated.\r\n\r\nThis looks to be a treesitter issue. `ts_subtree_balance()` called [here](https://github.com/tree-sitter/tree-sitter/blob/7d3dbc062d8be6575f8e6e4ada18af989ba4e6ef/lib/src/parser.c#L2112) exceeds the time limit. From the arguments, it looks like it doesn't have access to the timeout, so I assume it doesn't check it.\r\n",
            "created_at": "2024-12-19T07:00:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2552928482",
            "id": 2552928482,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YKpji",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2552928482/reactions"
            },
            "updated_at": "2024-12-19T07:00:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2552928482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "made a patch that tries (poorly) to make parsing respect the timeout:\r\n\r\n<details>\r\n\r\n<summary>patch</summary>\r\n\r\n```diff\r\ndiff --git a/lib/src/parser.c b/lib/src/parser.c\r\nindex 5fccc2ec..c76bb160 100644\r\n--- a/lib/src/parser.c\r\n+++ b/lib/src/parser.c\r\n@@ -115,6 +115,7 @@ struct TSParser {\r\n   TSRangeArray included_range_differences;\r\n   unsigned included_range_difference_index;\r\n   bool has_scanner_error;\r\n+  bool finished_parsing;\r\n };\r\n \r\n typedef struct {\r\n@@ -1990,6 +1991,7 @@ void ts_parser_reset(TSParser *self) {\r\n   }\r\n   self->accept_count = 0;\r\n   self->has_scanner_error = false;\r\n+  self->finished_parsing = false;\r\n }\r\n \r\n TSTree *ts_parser_parse(\r\n@@ -2000,6 +2002,7 @@ TSTree *ts_parser_parse(\r\n   TSTree *result = NULL;\r\n   if (!self->language || !input.read) return NULL;\r\n \r\n+  if (!self->finished_parsing) {\r\n   if (ts_language_is_wasm(self->language)) {\r\n     if (!self->wasm_store) return NULL;\r\n     ts_wasm_store_start(self->wasm_store, &self->lexer.data, self->language);\r\n@@ -2100,8 +2103,24 @@ TSTree *ts_parser_parse(\r\n     }\r\n   } while (version_count != 0);\r\n \r\n+    array_clear(&self->tree_pool.tree_stack);\r\n+\r\n+    if (ts_subtree_child_count(self->finished_tree) > 0 && self->finished_tree.ptr->ref_count == 1) {\r\n+      array_push(&self->tree_pool.tree_stack, ts_subtree_to_mut_unsafe(self->finished_tree));\r\n+    }\r\n+    self->finished_parsing = true;\r\n+  }\r\n+\r\n   ts_assert(self->finished_tree.ptr);\r\n-  ts_subtree_balance(self->finished_tree, &self->tree_pool, self->language);\r\n+  while (true) {\r\n+    if(ts_subtree_balance(&self->tree_pool, self->language)) break;\r\n+    if (\r\n+      ((self->cancellation_flag && atomic_load(self->cancellation_flag)) ||\r\n+       (!clock_is_null(self->end_clock) && clock_is_gt(clock_now(), self->end_clock)))\r\n+    ) {\r\n+      return false;\r\n+    }\r\n+  }\r\n   LOG(\"done\");\r\n   LOG_TREE(self->finished_tree);\r\n \r\ndiff --git a/lib/src/subtree.c b/lib/src/subtree.c\r\nindex 069f0467..1322d249 100644\r\n--- a/lib/src/subtree.c\r\n+++ b/lib/src/subtree.c\r\n@@ -334,14 +334,12 @@ static void ts_subtree__compress(\r\n   }\r\n }\r\n \r\n-void ts_subtree_balance(Subtree self, SubtreePool *pool, const TSLanguage *language) {\r\n-  array_clear(&pool->tree_stack);\r\n-\r\n-  if (ts_subtree_child_count(self) > 0 && self.ptr->ref_count == 1) {\r\n-    array_push(&pool->tree_stack, ts_subtree_to_mut_unsafe(self));\r\n-  }\r\n-\r\n+bool ts_subtree_balance(SubtreePool *pool, const TSLanguage *language) {\r\n+  int ops_count = 0;\r\n   while (pool->tree_stack.size > 0) {\r\n+    if (ops_count >= 1000) return false;\r\n+    ops_count++;\r\n+\r\n     MutableSubtree tree = array_pop(&pool->tree_stack);\r\n \r\n     if (tree.ptr->repeat_depth > 0) {\r\n@@ -351,6 +349,7 @@ void ts_subtree_balance(Subtree self, SubtreePool *pool, const TSLanguage *langu\r\n       if (repeat_delta > 0) {\r\n         unsigned n = (unsigned)repeat_delta;\r\n         for (unsigned i = n / 2; i > 0; i /= 2) {\r\n+          ops_count += i * 10;\r\n           ts_subtree__compress(tree, i, language, &pool->tree_stack);\r\n           n -= i;\r\n         }\r\n@@ -359,11 +358,13 @@ void ts_subtree_balance(Subtree self, SubtreePool *pool, const TSLanguage *langu\r\n \r\n     for (uint32_t i = 0; i < tree.ptr->child_count; i++) {\r\n       Subtree child = ts_subtree_children(tree)[i];\r\n+      ops_count += 1;\r\n       if (ts_subtree_child_count(child) > 0 && child.ptr->ref_count == 1) {\r\n         array_push(&pool->tree_stack, ts_subtree_to_mut_unsafe(child));\r\n       }\r\n     }\r\n   }\r\n+  return true;\r\n }\r\n \r\n // Assign all of the node's properties that depend on its children.\r\ndiff --git a/lib/src/subtree.h b/lib/src/subtree.h\r\nindex f140ecdb..83e829ef 100644\r\n--- a/lib/src/subtree.h\r\n+++ b/lib/src/subtree.h\r\n@@ -204,7 +204,7 @@ int ts_subtree_compare(Subtree, Subtree, SubtreePool *);\r\n void ts_subtree_set_symbol(MutableSubtree *, TSSymbol, const TSLanguage *);\r\n void ts_subtree_summarize(MutableSubtree, const Subtree *, uint32_t, const TSLanguage *);\r\n void ts_subtree_summarize_children(MutableSubtree, const TSLanguage *);\r\n-void ts_subtree_balance(Subtree, SubtreePool *, const TSLanguage *);\r\n+bool ts_subtree_balance(SubtreePool *, const TSLanguage *);\r\n Subtree ts_subtree_edit(Subtree, const TSInputEdit *edit, SubtreePool *);\r\n char *ts_subtree_string(Subtree, TSSymbol, bool, const TSLanguage *, bool include_all);\r\n void ts_subtree_print_dot_graph(Subtree, const TSLanguage *, FILE *);\r\n```\r\n\r\n</details>\r\n\r\nApplies to https://github.com/tree-sitter/tree-sitter/commit/1a983b7e2c45d9b9f45b2133a4e3a829f7e961be\r\n\r\nAfter building tree-sitter, I copy `libtree-sitter.*` into neovim's `.deps/usr/lib/` and build neovim. ",
            "created_at": "2024-12-19T10:06:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2553305889",
            "id": 2553305889,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YMFsh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2553305889/reactions"
            },
            "updated_at": "2024-12-19T10:07:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2553305889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That said, there are still some stutters at times (with the gigantic file), which is disappointing. \r\n\r\nThis may also be cause by injections, since injection queries run on the whole file after each change (related https://github.com/neovim/neovim/pull/26827).\r\n\r\nDeleting the `queries/<filetype>/injections.scm` file in e.g. nvim-treesitter should disable injections.",
            "created_at": "2024-12-19T19:06:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2555578395",
            "id": 2555578395,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YUwgb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555578395/reactions"
            },
            "updated_at": "2024-12-19T19:06:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555578395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You are right, this makes editing much snappier :tada: There is still a bit of stuttering (likely due to the subtree balancing you mention above) but the effect is a lot less severe",
            "created_at": "2024-12-19T19:15:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2555593943",
            "id": 2555593943,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YU0TX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555593943/reactions"
            },
            "updated_at": "2024-12-19T19:16:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2555593943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just tried this locally, wow, this kicks ass. \r\n\r\n(For anyone testing: be sure to use `VIMRUNTIME=./runtime/ ./build/bin/nvim --luamod-dev`)\r\n\r\nNotes:\r\n\r\n- Mention in \"Performance\" section of news.txt\r\n- Would be nice to [respect 'redrawtime' somehow](https://github.com/neovim/neovim/pull/22420#issuecomment-1446362921), but could track that as a backlog issue.",
            "created_at": "2024-12-20T11:52:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2556853291",
            "id": 2556853291,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YZnwr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 3,
                "rocket": 10,
                "total_count": 17,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556853291/reactions"
            },
            "updated_at": "2024-12-20T12:11:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556853291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't know if all edge cases are handled by applying this patch, but it completely removes all stutter. Opening the big linux file and large lua file are both instant with no stutters ever. Works wonderfully, hopefully we can get a followup PR for this soon. Basically just a poor man's #26827\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/treesitter/languagetree.lua b/runtime/lua/vim/treesitter/languagetree.lua\r\nindex 171baebd48..026fd84473 100644\r\n--- a/runtime/lua/vim/treesitter/languagetree.lua\r\n+++ b/runtime/lua/vim/treesitter/languagetree.lua\r\n@@ -917,16 +917,18 @@ function LanguageTree:_get_injections()\r\n \r\n   for index, tree in pairs(self._trees) do\r\n     local root_node = tree:root()\r\n-    local start_line, _, end_line, _ = root_node:range()\r\n-\r\n-    for pattern, match, metadata in\r\n-      self._injection_query:iter_matches(root_node, self._source, start_line, end_line + 1)\r\n-    do\r\n-      local lang, combined, ranges = self:_get_injection(match, metadata)\r\n-      if lang then\r\n-        add_injection(injections, index, pattern, lang, combined, ranges)\r\n-      else\r\n-        self:_log('match from injection query failed for pattern', pattern)\r\n+\r\n+    for _, win in pairs(vim.api.nvim_tabpage_list_wins(0)) do\r\n+      local topline, botline = vim.fn.line('w0', win) - 1, vim.fn.line('w$', win)\r\n+      for pattern, match, metadata in\r\n+        self._injection_query:iter_matches(root_node, self._source, topline, botline)\r\n+      do\r\n+        local lang, combined, ranges = self:_get_injection(match, metadata)\r\n+        if lang then\r\n+          add_injection(injections, index, pattern, lang, combined, ranges)\r\n+        else\r\n+          self:_log('match from injection query failed for pattern', pattern)\r\n+        end\r\n       end\r\n     end\r\n   end\r\n```",
            "created_at": "2024-12-20T21:31:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557742970",
            "id": 2557742970,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YdA96",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557742970/reactions"
            },
            "updated_at": "2024-12-20T21:31:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557742970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Have you tested this change on https://raw.githubusercontent.com/torvalds/linux/master/drivers/gpu/drm/amd/include/asic_reg/dcn/dcn_3_2_0_sh_mask.h ?\n\nLast time I tried there was a bug in treesitter which meant it never parsed and just hung. That's kinda what derailed me working on the PR.",
            "created_at": "2024-12-21T00:54:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557925416",
            "id": 2557925416,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ydtgo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557925416/reactions"
            },
            "updated_at": "2024-12-21T00:54:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557925416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yea that was the main file I tested this PR with, it works with that file. Not sure why yours didn't- I remember months ago when I tested it, setting a very low segment time like 1ms also meant it did not work with smaller files so I had wondered at the time if that PR for some reason didn't continue parsing if it exceeded the segment time, but I didn't dig deep enough then\r\n\r\nThe only real bottleneck now for files like that is the injection stuff",
            "created_at": "2024-12-21T01:02:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557928916",
            "id": 2557928916,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YduXU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557928916/reactions"
            },
            "updated_at": "2024-12-21T01:02:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557928916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Does 1ms work with this PR?\n\nAt the time I did debug it and was confident it was a treesitter bug.\n\n> The only real bottleneck now for files like that is the injection stuff\n\n#26827 will be the way to go I think, however I think the code in that PR needs a little more abstraction to make it more maintainable. The languagetree is already quite complicated.",
            "created_at": "2024-12-21T01:04:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557929605",
            "id": 2557929605,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YduiF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557929605/reactions"
            },
            "updated_at": "2024-12-21T01:07:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557929605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "1ms does work with this one, maybe the bug was fixed in TS side?\r\n\r\nMaybe unrelated, but I also have a hunch that the `check_timeout()` function from the previous PR was problematic; currently there is a bug in TS reported by vanaigr that the subtree balancing does not respect the timeout. So maybe `check_timeout()` expects parsing to fall within e.g. a 10ms range but the very last call to `parse()` takes 24ms due to this bug, which maybe was the root bug you encountered",
            "created_at": "2024-12-21T01:10:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557932035",
            "id": 2557932035,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YdvID",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557932035/reactions"
            },
            "updated_at": "2024-12-21T01:10:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557932035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe, but I definitely remember just trying to force the thing to parse, regardless of any code I had. I even remember digging into the C code on the treesitter side to see what was happening. This is also the time I added the logging integration into treesitter.c, but by then I'd had enough. This was a while ago so hopefully it has been fixed since, which is good.\n\nReally pleased to hear that issue seems to have gone.",
            "created_at": "2024-12-21T01:16:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557934182",
            "id": 2557934182,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ydvpm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557934182/reactions"
            },
            "updated_at": "2024-12-21T01:16:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557934182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ugh that sounds awful :laughing: I really appreciate all the work you've put into this, thanks so much",
            "created_at": "2024-12-21T01:18:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2557934989",
            "id": 2557934989,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ydv2N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557934989/reactions"
            },
            "updated_at": "2024-12-21T01:18:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557934989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I would also like to add a test for editing before an async parse has finished, as well as one for the `redrawtime` timeout, but maybe this can be done in a follow up? :)",
            "created_at": "2024-12-22T16:31:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558511560",
            "id": 2558511560,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Yf8nI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558511560/reactions"
            },
            "updated_at": "2024-12-22T16:31:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558511560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I managed to crash neovim with this PR and find a reproduction.\r\n\r\n1. `make distclean && make`\r\n2. `VIMRUNTIME=./runtime/ ./build/bin/nvim --clean -u minimal.lua file.lua`\r\n3. Wait until the parse finishes (highlighting is visible)\r\n4. Open a new window (CTRL-W s). No need to switch into it\r\n5. Repeatedly press `xj`\r\n\r\nNeovim should crash.\r\n\r\nVersion:\r\n```console\r\nNVIM v0.11.0-dev-1385+g400ce42d0\r\nBuild type: Debug\r\nLuaJIT 2.1.1734355927\r\n```\r\n\r\nminimal.lua:\r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git'\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { \"lua\" },\r\n  highlight = { enable = true },\r\n}\r\n```\r\n\r\nfile.lua:\r\n```lua\r\nvim.api.nvim_win_set_var('string') \r\n```\r\nrepeated 20'000 times",
            "created_at": "2024-12-22T18:34:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558550960",
            "id": 2558550960,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YgGOw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558550960/reactions"
            },
            "updated_at": "2024-12-22T18:43:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558550960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This looks like an issue when changing the last visible line: even without opening a new window just opening a file, waiting for highlighting to apply, then `L` and `xj` a few times also crashes...\r\n\r\nbacktrace:\r\n\r\n```\r\n           PID: 106353 (nvim)\r\n           UID: 1000 (whoami)\r\n           GID: 100 (users)\r\n        Signal: 11 (SEGV)\r\n     Timestamp: Sun 2024-12-22 10:59:58 PST (10min ago)\r\n  Command Line: /home/whoami/neovim/bin/nvim --embed --luamod-dev --clean large_file.lua\r\n    Executable: /home/whoami/neovim/bin/nvim\r\n Control Group: /user.slice/user-1000.slice/user@1000.service/app.slice/kitty-3051-11.scope\r\n          Unit: user@1000.service\r\n     User Unit: kitty-3051-11.scope\r\n         Slice: user-1000.slice\r\n     Owner UID: 1000 (whoami)\r\n       Boot ID: 824b443d7c1e415298ffd5832121e1f4\r\n    Machine ID: 6541f6ca719247c8b00690cbc51ddae1\r\n      Hostname: frametop\r\n       Storage: /var/lib/systemd/coredump/core.nvim.1000.824b443d7c1e415298ffd5832121e1f4.106353.1734893998000000.zst (present)\r\n  Size on Disk: 8.9M\r\n       Message: Process 106353 (nvim) of user 1000 dumped core.\r\n                \r\n                Module libgcc_s.so.1 without build-id.\r\n                Stack trace of thread 106353:\r\n                #0  0x000000000084a760 n/a (n/a + 0x0)\r\n                #1  0x000000000084a8f9 n/a (n/a + 0x0)\r\n                #2  0x000000000084b7eb n/a (n/a + 0x0)\r\n                #3  0x000000000084b997 n/a (n/a + 0x0)\r\n                #4  0x000000000083f394 n/a (n/a + 0x0)\r\n                #5  0x0000000000840fa7 n/a (n/a + 0x0)\r\n                #6  0x000000000061907a n/a (n/a + 0x0)\r\n                #7  0x00000000008775d6 n/a (n/a + 0x0)\r\n                ELF object binary architecture: AMD x86-64\r\n\r\nGNU gdb (GDB) 15.2\r\nCopyright (C) 2024 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\nType \"show copying\" and \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-unknown-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<https://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n    <http://www.gnu.org/software/gdb/documentation/>.\r\n\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /home/whoami/neovim/bin/nvim...\r\n\r\nwarning: Can't open file anon_inode:[io_uring] which was expanded to anon_inode:[io_uring] during file-backed mapping note processing\r\n[New LWP 106353]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/nix/store/wn7v2vhyyyi6clcyn0s9ixvl7d4d87ic-glibc-2.40-36/lib/libthread_db.so.1\".\r\nCore was generated by `/home/whoami/neovim/bin/nvim --embed --luamod-dev --clean large_file.lua'.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  ts_tree_cursor_is_entry_visible (self=0x11d23738, index=14)\r\n    at /home/whoami/Documents/CodeProjects/neovim/.deps/build/src/treesitter/lib/src/tree_cursor.c:26\r\n26\t      parent_entry->subtree->ptr->production_id,\r\n\u001b[?2004h\u001b[5 q(gdb) exit\r\n\u001b[?2004l\r\n```",
            "created_at": "2024-12-22T18:48:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558555543",
            "id": 2558555543,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YgHWX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558555543/reactions"
            },
            "updated_at": "2024-12-22T19:11:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558555543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "gdb backtrace:\r\n\r\n```console\r\n#0  0x00005555559faca7 in ts_tree_cursor_parent_node ()\r\n#1  0x00005555559ee971 in ts_query_cursor.advance ()\r\n#2  0x00005555559f02e5 in ts_query_cursor_next_capture ()\r\n#3  0x00005555557b6c57 in querycursor_next_capture (L=0x7ffff7e6b380)\r\n#4  0x0000555555a24d56 in lj_BC_FUNCC ()\r\n#5  0x0000555555a10da9 in lua_pcall (L=0x7ffff7e6b380, nargs=<optimized out>, nresults=1, errfunc=<optimized out>) at lj_api.c:1122\r\n#6  0x00005555557a8ef8 in nlua_pcall (lstate=0x7ffff7e6b380, nargs=4, nresults=1)\r\n#7  0x00005555557acdc0 in nlua_call_ref_ctx (fast=false, ref=65, name=0x555555aa7b93 \"line\", args=..., mode=kRetNilBool, arena=0x0, err=0x7fffffffbea0)\r\n#8  0x00005555557acc7f in nlua_call_ref (ref=65, name=0x555555aa7b93 \"line\", args=..., mode=kRetNilBool, arena=0x0, err=0x7fffffffbea0)\r\n#9  0x000055555567b06d in decor_provider_invoke (provider_idx=0, name=0x555555aa7b93 \"line\", ref=65, args=..., default_true=true)\r\n#10 0x000055555567bb2e in decor_providers_invoke_line (wp=0x555555c4a820, row=47, has_decor=0x7fffffffc030)\r\n#11 0x00005555556886ba in win_line (wp=0x555555c4a820, lnum=48, startrow=40, endrow=41, col_rows=0, spv=0x7fffffffd970, foldinfo=...)\r\n#12 0x0000555555694be3 in win_update (wp=0x555555c4a820)\r\n#13 0x000055555569011a in update_screen ()\r\n#14 0x0000555555818b7b in normal_redraw (s=0x7fffffffdb10)\r\n#15 0x0000555555818dfb in normal_check (state=0x7fffffffdb10)\r\n#16 0x00005555558f8458 in state_enter (s=0x7fffffffdb10)\r\n#17 0x00005555558168c2 in normal_enter (cmdwin=false, noexmode=false)\r\n#18 0x00005555557b9c44 in main (argc=6, argv=0x7fffffffdf18)\r\n```\r\n",
            "created_at": "2024-12-22T19:24:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558567331",
            "id": 2558567331,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YgKOj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558567331/reactions"
            },
            "updated_at": "2024-12-22T19:24:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558567331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We shouldn't be running the `on_line` callback before the async parse is done in `on_win`. This prob should be handled on ts side so as to not segfault, but this is a working (I think) patch in the meantime:\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\nindex 22fadf7490..125e112380 100644\r\n--- a/runtime/lua/vim/treesitter/highlighter.lua\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -381,11 +381,11 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\r\n end\r\n \r\n ---@private\r\n----@param _win integer\r\n+---@param win integer\r\n ---@param buf integer\r\n ---@param topline integer\r\n ---@param botline integer\r\n-function TSHighlighter._on_win(_, _win, buf, topline, botline)\r\n+function TSHighlighter._on_win(_, win, buf, topline, botline)\r\n   local self = TSHighlighter.active[buf]\r\n   if not self then\r\n     return false\r\n@@ -393,17 +393,23 @@ function TSHighlighter._on_win(_, _win, buf, topline, botline)\r\n   local range = { topline, botline + 1 }\r\n   self.tree:parse(range, function(trees)\r\n     if trees then\r\n-      self:_async_parse_callback(range)\r\n+      self:_async_parse_callback(win, buf, topline, botline + 1)\r\n     end\r\n   end)\r\n   self.redraw_count = self.redraw_count + 1\r\n-  return true\r\n+  return false\r\n end\r\n \r\n---- @param range [integer, integer]\r\n-function TSHighlighter:_async_parse_callback(range)\r\n-  self:prepare_highlight_states(unpack(range))\r\n-  api.nvim__redraw({ buf = self.bufnr, range = range, flush = false })\r\n+---@param win integer\r\n+---@param buf integer\r\n+---@param topline integer\r\n+---@param botline integer\r\n+function TSHighlighter:_async_parse_callback(win, buf, topline, botline)\r\n+  self:prepare_highlight_states(topline, botline)\r\n+  for line = topline, botline do\r\n+    self:_on_line(win, buf, line)\r\n+  end\r\n+  api.nvim__redraw({ buf = self.bufnr, range = { topline, botline }, flush = false })\r\n end\r\n \r\n api.nvim_set_decoration_provider(ns, {\r\n```",
            "created_at": "2024-12-22T21:28:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558607030",
            "id": 2558607030,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YgT62",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558607030/reactions"
            },
            "updated_at": "2024-12-22T21:28:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558607030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For incremental parses, it's likely the parse will happen without a single schedule. In such cases we should avoid calling nvim_redraw if we can since we will technically still be in the `on_win` handler.",
            "created_at": "2024-12-22T21:57:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558616947",
            "id": 2558616947,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YgWVz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558616947/reactions"
            },
            "updated_at": "2024-12-22T21:57:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558616947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Great point- is there a more elegant solution than just giving the callback another parameter indicating whether or not it ran with 1+ schedules?",
            "created_at": "2024-12-23T02:07:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558762550",
            "id": 2558762550,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Yg542",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558762550/reactions"
            },
            "updated_at": "2024-12-23T02:07:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558762550",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Great point- is there a more elegant solution than just giving the callback another parameter indicating whether or not it ran with 1+ schedules?\r\n\r\nOne solution would be to make `parse()` accept a timeout and make async parse schedule a parse.\r\nThis way the highlighter can call the first parse itself and decide what to do based on the result.\r\n\r\n\r\n\r\n\r\n\r\n",
            "created_at": "2024-12-23T03:49:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558852568",
            "id": 2558852568,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YhP3Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558852568/reactions"
            },
            "updated_at": "2024-12-23T03:50:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558852568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "But if we schedule the parse from the start, the callback will be scheduled as well which will cause the highlight flickering",
            "created_at": "2024-12-23T04:03:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558864202",
            "id": 2558864202,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YhStK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558864202/reactions"
            },
            "updated_at": "2024-12-23T04:03:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558864202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "First parse will be called synchronously by the highlighter. If it finishes, the redrawing proceeds as normal. Otherwise the highlighter schedules an async parse. ",
            "created_at": "2024-12-23T04:06:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558867151",
            "id": 2558867151,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YhTbP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558867151/reactions"
            },
            "updated_at": "2024-12-23T04:08:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558867151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah I see. I worry that this solution might make for a less simplistic api though",
            "created_at": "2024-12-23T04:38:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558894614",
            "id": 2558894614,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YhaIW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558894614/reactions"
            },
            "updated_at": "2024-12-23T04:38:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558894614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can `uv` functions call the callback before returning? Since the signature was modeled after them, I think it should match their behavior",
            "created_at": "2024-12-23T04:58:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2558910672",
            "id": 2558910672,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YheDQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558910672/reactions"
            },
            "updated_at": "2024-12-23T04:58:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558910672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "They don't, but that doesn't mean they can't or shouldn't. UV functions run their callbacks in fast events if they return immediately which can happen during the same event loop iteration, but at a later point.",
            "created_at": "2024-12-23T07:20:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559057442",
            "id": 2559057442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YiB4i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559057442/reactions"
            },
            "updated_at": "2024-12-23T07:20:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559057442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this works.\r\n\r\n```lua\r\n---@private\r\n---@param _win integer\r\n---@param buf integer\r\n---@param topline integer\r\n---@param botline integer\r\nfunction TSHighlighter._on_win(_, _win, buf, topline, botline)\r\n  local self = TSHighlighter.active[buf]\r\n  if not self then\r\n    return false\r\n  end\r\n  local range = { topline, botline + 1 }\r\n\r\n  local did_schedule = nil\r\n\r\n  self.tree:parse(range, function(trees)\r\n    if did_schedule == nil then\r\n      -- Callback executed immediately so it must not have scheduled\r\n      did_schedule = false\r\n    elseif trees then\r\n      self:_async_parse_callback(range)\r\n    end\r\n  end)\r\n\r\n  self.redraw_count = self.redraw_count + 1\r\n\r\n  if did_schedule == nil then\r\n    -- Callback didn't execute immediately so it must have scheduled\r\n    did_schedule = true\r\n    return false\r\n  end\r\n\r\n  return true\r\nend\r\n```",
            "created_at": "2024-12-23T08:54:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559235353",
            "id": 2559235353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YitUZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559235353/reactions"
            },
            "updated_at": "2024-12-23T08:54:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559235353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For incremental parses, it's likely the parse will happen without a single schedule. In such cases we should avoid calling nvim_redraw if we can since we will technically still be in the on_win handler.\r\n\r\nConversely, I think we also need avoid calling the `on_line` method for lines that haven't been parsed yet (so not from `topline` until `botline` but only the parsed range), and avoid calling `on_line` at all from scheduled `_async_parse_callback()`, which should call `nvim__redraw` instead.\r\n\r\n> I think this works.\r\n\r\nShould `LanguageTree:_async_parse` return whether it `finished`?",
            "created_at": "2024-12-23T10:21:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559378214",
            "id": 2559378214,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YjQMm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559378214/reactions"
            },
            "updated_at": "2024-12-23T10:21:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559378214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Putting this here for the record: would https://github.com/tree-sitter/tree-sitter/pull/3843 help with this in any way?",
            "created_at": "2024-12-23T11:09:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559473648",
            "id": 2559473648,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Yjnfw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559473648/reactions"
            },
            "updated_at": "2024-12-23T11:09:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559473648",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think this works.\r\n> \r\n> ```lua\r\n> -- ...\r\n> ```\r\n\r\nFor some reason, for me this doesn't redraw small files (that didn't require `vim.schedule`). Doing some debugging shows all the expected variable values/correct return values in `on_win` but my screen doesn't get colorful still. Works for large files that do need `vim.schedule` though\r\n\r\n> Should `LanguageTree:_async_parse` return whether it `finished`?\r\n\r\nI just tested this (along with passing whether it called `vim.schedule` into its own callback) and the result works for schedule and no-schedule cases, but there are not enough redraws. For example with the repeated `xj` example, every line where we press `x` does not get redrawn until the cursor moves down *after* waiting ~1.5 seconds for a parse refresh.\r\n\r\nWhat are the downsides of calling `nvim__redraw` in the callback no matter what, and always returning false in `on_win`? Are they disastrous or can they be accepted, given that (currently) my patch from [this comment](https://github.com/neovim/neovim/pull/31631#issuecomment-2558607030) seems to be the only thing working for all these cases (in my observations anyway)\r\n",
            "created_at": "2024-12-23T16:02:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559953976",
            "id": 2559953976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ylcw4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559953976/reactions"
            },
            "updated_at": "2024-12-23T16:02:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559953976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What are the downsides of calling nvim__redraw in the callback no matter what, and always returning false in on_win?\n\nThe downsides don't matter. If on_win isn't working as it is expected/designed to, then we should ideally resolve/debug that.\n\nIf you haven't already, maybe update the PR with the code you are running and lost the testcase that's failing for you. May even be worth adding that as an actual testcase into the testsuite.",
            "created_at": "2024-12-23T16:07:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559959857",
            "id": 2559959857,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YleMx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559959857/reactions"
            },
            "updated_at": "2024-12-23T16:07:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2559959857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have been trying to add this test case, but it doesn't catch segfault errors as it always passes:\r\n\r\n```lua\r\n  it('does not crash when editing large files', function()\r\n    insert([[printf(\"%s\", \"some text\");]])\r\n    feed('yy49999p')\r\n\r\n    exec_lua(function()\r\n      _G.parser = vim.treesitter.get_parser(0, 'c')\r\n      _G.done = false\r\n      -- vim.treesitter.start(0, 'c')\r\n      _G.parser:parse(nil, function()\r\n        _G.done = true\r\n      end)\r\n      while not _G.done do\r\n        -- Busy wait until async parsing has completed\r\n        vim.wait(100, function() end)\r\n      end\r\n      -- vim.wait(3000, function() end)\r\n      -- vim.treesitter.start(0, 'c')\r\n    end)\r\n\r\n    eq(true, exec_lua([[return done]]))\r\n    -- feed_command('norm Lxjxjxjxj')\r\n    -- feed('Lxjxjxjxj') -- this should not segfault\r\n    feed('Lxj')\r\n    exec_lua(function()\r\n      _G.done = false\r\n      _G.parser:parse(nil, function()\r\n        _G.done = true\r\n      end)\r\n    end)\r\n    eq(false, exec_lua([[return done]]))\r\n    feed('xj')\r\n    eq(false, exec_lua([[return done]]))\r\n    feed('xj')\r\n    eq(false, exec_lua([[return done]]))\r\n    feed('xj')\r\n    assert_alive()\r\n    -- exec_lua(function()\r\n    --   vim.wait(20)\r\n    -- end)\r\n    -- feed('xj')\r\n    -- exec_lua(function()\r\n    --   vim.wait(20)\r\n    -- end)\r\n    -- feed('xj')\r\n    -- exec_lua(function()\r\n    --   vim.wait(20)\r\n    -- end)\r\n    -- feed('xj')\r\n    -- exec_lua(function()\r\n    --   vim.wait(20)\r\n    -- end)\r\n    assert_alive()\r\n  end)\r\n```",
            "created_at": "2024-12-23T16:53:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560023316",
            "id": 2560023316,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YltsU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560023316/reactions"
            },
            "updated_at": "2024-12-23T16:53:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560023316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Based on the time it takes for the test to run, my theory is that `nvim_feed` waits until all `vim.schedule` type code has run until sending keys, so my test isn't properly spamming edits which is what segfaults",
            "created_at": "2024-12-23T16:56:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560026637",
            "id": 2560026637,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YlugN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560026637/reactions"
            },
            "updated_at": "2024-12-23T16:56:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560026637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Conversely, I think we also need avoid calling the `on_line` method for lines that haven't been parsed yet (so not from `topline` until `botline` but only the parsed range), and avoid calling `on_line` at all from scheduled `_async_parse_callback()`, which should call `nvim__redraw` instead.\r\n\r\nI thought topline to botline would be the parsed range? Also would it be acceptable to add a TODO for this, or is this critical enough that it should be done now",
            "created_at": "2024-12-23T17:20:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560059305",
            "id": 2560059305,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Yl2ep",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560059305/reactions"
            },
            "updated_at": "2024-12-23T17:20:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560059305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This crashes when I run it in the editor, but not in functional test:\r\n```lua\r\nlocal line = [[printf(\"%s\", \"some text\");]]\r\nlocal lines = {}\r\nfor _ = 1, 50000 do\r\n  table.insert(lines, line)\r\nend\r\nvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\r\nvim.api.nvim_win_set_cursor(0, { 1, 7 })\r\n\r\nvim.treesitter.start(0, 'c')\r\nlocal parser = vim.treesitter.get_parser(0, 'c')\r\nparser:parse(true)\r\nvim.cmd('redraw!')\r\n\r\nvim.api.nvim_input('L')\r\n\r\nlocal i = 1\r\nlocal function step()\r\n  i = i + 1\r\n  if i > 1000 then\r\n    return\r\n  end\r\n  vim.api.nvim_input('xj')\r\n  vim.cmd('redraw!')\r\n  vim.defer_fn(step, 10)\r\nend\r\n\r\nvim.defer_fn(step, 10)\r\n```\r\n\r\nseems that `defer_fn()` doesn't defer in tests; setting timeout to 1000 doesn't slow down the test\r\n\r\nTest version:\r\n\r\n<details>\r\n\r\n<summary>test code</summary>\r\n\r\n```lua\r\n  it('does not crash when editing large files', function()\r\n    exec_lua(function()\r\n      local line = [[printf(\"%s\", \"some text\");]]\r\n      local lines = {}\r\n      for _ = 1, 50000 do\r\n        table.insert(lines, line)\r\n      end\r\n      vim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\r\n      vim.api.nvim_win_set_cursor(0, { 1, 7 })\r\n\r\n      vim.treesitter.start(0, 'c')\r\n      local parser = vim.treesitter.get_parser(0, 'c')\r\n      parser:parse(true)\r\n      vim.cmd('redraw!')\r\n\r\n      vim.api.nvim_input('L')\r\n\r\n      local i = 1\r\n      local function step()\r\n        i = i + 1\r\n        if i > 1000 then\r\n          return\r\n        end\r\n        vim.api.nvim_input('xj')\r\n        vim.cmd('redraw!')\r\n        vim.defer_fn(step, 10)\r\n      end\r\n\r\n      vim.defer_fn(step, 10)\r\n    end)\r\n\r\n    assert_alive()\r\n  end)\r\n```\r\n\r\n</details>\r\n\r\nUPD: does this crash for the right reason?\r\n\r\n```lua\r\n  it('does not crash when editing large files', function()\r\n    exec_lua(function()\r\n      local line = [[printf(\"%s\", \"some text\");]]\r\n      local lines = {}\r\n      for _ = 1, 50000 do\r\n        table.insert(lines, line)\r\n      end\r\n      vim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\r\n      vim.api.nvim_win_set_cursor(0, { 1, 7 })\r\n\r\n      vim.treesitter.start(0, 'c')\r\n      local parser = vim.treesitter.get_parser(0, 'c')\r\n      parser:parse(true)\r\n      vim.cmd('redraw!')\r\n\r\n      vim.api.nvim_input('L')\r\n\r\n      local i = 1\r\n      local function step()\r\n        i = i + 1\r\n        if i > 1000 then\r\n          return\r\n        end\r\n        vim.api.nvim_input('xj')\r\n        vim.cmd('redraw!')\r\n        vim.defer_fn(step, 10)\r\n      end\r\n\r\n      vim.defer_fn(step, 10)\r\n    end)\r\n\r\n    -- wait until the test above finishes...\r\n    local found = false\r\n    local a = ('_'):rep(1000000)\r\n    for i = 1, 1000000 do\r\n      local new_found = a:find('1', i)\r\n      found = found or new_found\r\n    end\r\n    print(found)\r\n\r\n    assert_alive()\r\n  end)\r\n```",
            "created_at": "2024-12-23T18:26:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560134154",
            "id": 2560134154,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmIwK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560134154/reactions"
            },
            "updated_at": "2024-12-23T18:41:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560134154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice, I didn't know about `nvim_input`. This test successfully reproduces the crash for me:\r\n\r\n```lua\r\n  it('does not crash when editing large files', function()\r\n    insert([[printf(\"%s\", \"some text\");]])\r\n    feed('yy49999p')\r\n\r\n    exec_lua(function()\r\n      _G.parser = vim.treesitter.get_parser(0, 'c')\r\n      _G.done = false\r\n      vim.treesitter.start(0, 'c')\r\n      _G.parser:parse(nil, function()\r\n        _G.done = true\r\n      end)\r\n      while not _G.done do\r\n        -- Busy wait until async parsing has completed\r\n        vim.wait(100, function() end)\r\n      end\r\n    end)\r\n\r\n    eq(true, exec_lua([[return done]]))\r\n    exec_lua(function()\r\n      vim.api.nvim_input('Lxj')\r\n    end)\r\n    exec_lua(function()\r\n      vim.api.nvim_input('xj')\r\n    end)\r\n    exec_lua(function()\r\n      vim.api.nvim_input('xj')\r\n    end)\r\n    assert_alive()\r\n  end)\r\n```",
            "created_at": "2024-12-23T18:42:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560152124",
            "id": 2560152124,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmNI8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560152124/reactions"
            },
            "updated_at": "2024-12-23T18:42:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560152124",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I thought topline to botline would be the parsed range\r\n\r\nSorry, yes that seems right, I hadn't looked at the PR in detail yet and had a wrong picture of how this actually works. I thought there could be a situation where `async_parse_callback` could be called for a partially parsed range.\r\n\r\nFrom my understanding of `drawscreen.c` and the decor provider mechanism, the way this is currently implemented does still seem like we are misusing it a bit. Something like this seems better to me:\r\n```diff\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -394,7 +394,7 @@ function TSHighlighter._on_win(_, win, buf, topline, botline)\r\n     end\r\n   end)\r\n   self.redraw_count = self.redraw_count + 1\r\n-  return false\r\n+  return true\r\n end\r\n\r\n ---@param win integer\r\n@@ -403,10 +403,7 @@ end\r\n ---@param botline integer\r\n function TSHighlighter:_async_parse_callback(win, buf, topline, botline)\r\n   self:prepare_highlight_states(topline, botline)\r\n-  for line = topline, botline do\r\n-    self:_on_line(win, buf, line)\r\n-  end\r\n-  api.nvim__redraw({ buf = self.bufnr, range = { topline, botline + 1 }, flush = false })\r\n+  api.nvim__redraw({ buf = self.bufnr, flush = true })\r\n end\r\n\r\n api.nvim_set_decoration_provider(ns, {\r\n```\r\nThat seems to work on my end, with seemingly better performance too. (Didn't check the issue you are currently investigating).\r\n\r\nBut don't look to me to block this, as you can tell my own understanding is lacking😅\r\n\r\n\r\n",
            "created_at": "2024-12-23T18:47:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560156803",
            "id": 2560156803,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmOSD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560156803/reactions"
            },
            "updated_at": "2024-12-23T18:47:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560156803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah ok I will try that. Thanks, I really appreciate the input :D\r\n\r\nEdit: unfortunately still causes the segfault: I think we can never `return true` from on_win when using async stuff, because it means trying to iterate captures of a stale tree. I think we must move it into the callback to ensure that the parse is complete first",
            "created_at": "2024-12-23T18:49:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560158791",
            "id": 2560158791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmOxH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560158791/reactions"
            },
            "updated_at": "2024-12-23T19:05:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560158791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> unfortunately still causes the segfault: I think we can never return true from on_win when using async stuff\r\n\r\nYeah sorry, I think conditionally returning `true/false` (like in @lewis6991's patch) should still be applied as well.\r\n\r\nMy main point was that calling `on_line` explicitly from the callback seems off, especially in the scheduled context. That places ephemeral marks that will be cleared again before the window is redrawn. It seems to me that in scheduled context we should only prepare the highlight state, and trigger a redraw. In unscheduled context, where we are still in `on_win`, we should make sure `on_win` returns `true` and have the decor provider invoke its `on_line` callbacks as intended.",
            "created_at": "2024-12-23T19:22:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560194963",
            "id": 2560194963,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmXmT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560194963/reactions"
            },
            "updated_at": "2024-12-23T19:27:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560194963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm. Lewis' patch still doesn't apply highlighting to small files (non scheduled parse), even with the on_line change. In fact, with that one, highlighting doesn't apply to any files for some reason. This is also reflected by `highlight_spec.lua`",
            "created_at": "2024-12-23T19:34:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560206914",
            "id": 2560206914,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmahC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560206914/reactions"
            },
            "updated_at": "2024-12-23T19:34:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560206914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "https://github.com/neovim/neovim/pull/31631#issuecomment-2559057442\r\n> They don't, but that doesn't mean they can't or shouldn't. \r\n\r\nI assumed that \"asynchronous\" implies that the work executes after the current code finishes running (similar to JS). \r\nBut this is not the direction Neovim is going, correct?\r\n\r\n",
            "created_at": "2024-12-23T19:49:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560222417",
            "id": 2560222417,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmeTR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560222417/reactions"
            },
            "updated_at": "2024-12-23T19:49:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560222417",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\"asynchronous\" implies that the work _can_ execute after the current code finishes running, but nothing requires it can't finish immediately.",
            "created_at": "2024-12-23T19:59:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560232245",
            "id": 2560232245,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ymgs1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560232245/reactions"
            },
            "updated_at": "2024-12-23T19:59:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560232245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This PR is good to go from my end. If there is anything I missed that would get the above changes to work let me know, maybe I could just make a follow up PR for them if they aren't too critical",
            "created_at": "2024-12-23T20:21:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560255057",
            "id": 2560255057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YmmRR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560255057/reactions"
            },
            "updated_at": "2024-12-23T20:21:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560255057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'll push a fixup when I get a chance. We need to do what @luukvbaal mentioned as the current code is really working against the decoration provider and I don't think strictly speaking it should work since you are adding ephemeral marks and then triggering a redraw, which then calls `on_win` again, and somehow still has the information for those ephemeral marks, which I'm pretty sure the API doesn't guarantee. The implementation may allow that now, but could change in the future.\n\nTo be strict about this, I think ephemeral marks should only be added during the provider callbacks and never via a scheduled event.",
            "created_at": "2024-12-23T20:32:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560265265",
            "id": 2560265265,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ymowx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560265265/reactions"
            },
            "updated_at": "2024-12-23T20:33:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560265265",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was excited about this so I applied the patch on my MacBook Pro M1 Max. On a ~1000 LOC rust file, while scrolling (C-e/y) I see noticeably more stutter at 120hz than before. Sorry for the lack of metrics, I'm not sure how or what to measure.",
            "created_at": "2024-12-23T21:25:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560313783",
            "id": 2560313783,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym0m3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560313783/reactions"
            },
            "updated_at": "2024-12-23T21:25:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560313783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14058796?v=4",
                "events_url": "https://api.github.com/users/diocletiann/events{/privacy}",
                "followers_url": "https://api.github.com/users/diocletiann/followers",
                "following_url": "https://api.github.com/users/diocletiann/following{/other_user}",
                "gists_url": "https://api.github.com/users/diocletiann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/diocletiann",
                "id": 14058796,
                "login": "diocletiann",
                "node_id": "MDQ6VXNlcjE0MDU4Nzk2",
                "organizations_url": "https://api.github.com/users/diocletiann/orgs",
                "received_events_url": "https://api.github.com/users/diocletiann/received_events",
                "repos_url": "https://api.github.com/users/diocletiann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/diocletiann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/diocletiann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/diocletiann",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Weird, I don't see any stutter at all (1800 lines rust), I am on 60hz though. Maybe lewis' patch will improve things. Have you pulled from the latest changes in this PR?\r\n\r\nAlso stutters as in lag when scrolling, or lag when highlights show up on lines?\r\n\r\nNote: I ran without applying highlights with `nvim-treesitter`, only used `nvim-treesitter` for queries and parser shared object. Then ran `vim.treesitter.start()` with `--clean`",
            "created_at": "2024-12-23T21:35:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560322469",
            "id": 2560322469,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym2ul",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560322469/reactions"
            },
            "updated_at": "2024-12-23T21:37:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560322469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Note: I ran without applying highlights with nvim-treesitter, only used nvim-treesitter for queries and parser shared object. Then ran vim.treesitter.start() \r\n\r\n... which is all nvim-treesitter does (regarding highlighting; anything else -- such as indents -- are not touched by this PR so irrelevant).",
            "created_at": "2024-12-23T21:41:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560328136",
            "id": 2560328136,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym4HI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560328136/reactions"
            },
            "updated_at": "2024-12-23T21:42:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560328136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Weird, I don't see any stutter at all (1800 lines rust), I am on 60hz though. Maybe lewis' patch will improve things. Have you pulled from the latest changes in this PR?\r\n> \r\n> Also stutters as in lag when scrolling, or lag when highlights show up on lines?\r\n> \r\n> Note: I ran without applying highlights with `nvim-treesitter`, only used `nvim-treesitter` for queries and parser shared object. Then ran `vim.treesitter.start()` with `--clean`\r\n\r\nYes I merged this PR. The stutter while scrolling (with maxed out macOS repeat rate) is subtle, but more frequent. I can see it in Ghostty, Kitty, and Neovide (`termsync` is disabled). Wanted to let you know just in case something regressed between 60 and 120hz.",
            "created_at": "2024-12-23T21:44:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560331392",
            "id": 2560331392,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym46A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560331392/reactions"
            },
            "updated_at": "2024-12-23T21:44:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560331392",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14058796?v=4",
                "events_url": "https://api.github.com/users/diocletiann/events{/privacy}",
                "followers_url": "https://api.github.com/users/diocletiann/followers",
                "following_url": "https://api.github.com/users/diocletiann/following{/other_user}",
                "gists_url": "https://api.github.com/users/diocletiann/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/diocletiann",
                "id": 14058796,
                "login": "diocletiann",
                "node_id": "MDQ6VXNlcjE0MDU4Nzk2",
                "organizations_url": "https://api.github.com/users/diocletiann/orgs",
                "received_events_url": "https://api.github.com/users/diocletiann/received_events",
                "repos_url": "https://api.github.com/users/diocletiann/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/diocletiann/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/diocletiann/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/diocletiann",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Does it not also use its own implementation of certain predicates, like a slower `has-ancestor?`, as well as some functions from `nvim-treesitter.utils` rather than newer core functions?\r\n\r\nJust checked and I guess a lot of that stuff is gone, including the old `has-ancestor?`",
            "created_at": "2024-12-23T21:45:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560332162",
            "id": 2560332162,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym5GC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560332162/reactions"
            },
            "updated_at": "2024-12-23T21:45:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560332162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not anymore.\r\n\r\nPlease, provide reproducible examples; simply commenting \"I noticed _bad_!\" without details is chaff and  not helpful.",
            "created_at": "2024-12-23T21:47:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560333375",
            "id": 2560333375,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym5Y_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560333375/reactions"
            },
            "updated_at": "2024-12-23T21:48:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560333375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Gotcha. Also while investigating this I noticed `:h treesitter.txt` gives\r\n```\r\nError executing vim.schedule lua callback: ...jects/neovim/runtime//lua/vim/treesitter/highlighter.lua:327: not yet implemented\r\n```\r\n\r\nlooks like this needs more time in the oven ",
            "created_at": "2024-12-23T21:49:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560335209",
            "id": 2560335209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ym51p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560335209/reactions"
            },
            "updated_at": "2024-12-23T21:49:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560335209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I took a stab at it; I think something like this is closer to what we need:\r\nhttps://github.com/luukvbaal/neovim/commit/35663ac09a2fb47f16d4c70aaa6ac2c03e91b38f.",
            "created_at": "2024-12-23T22:43:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560395054",
            "id": 2560395054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YnIcu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560395054/reactions"
            },
            "updated_at": "2024-12-23T22:43:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560395054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Beautiful, this works wonderfully (and solves the `not yet implemented` bug from above), thank you @luukvbaal !! Pulling these changes in now",
            "created_at": "2024-12-23T22:59:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2560407570",
            "id": 2560407570,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6YnLgS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560407570/reactions"
            },
            "updated_at": "2024-12-23T22:59:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2560407570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk I think this is ready if you want to give it another look",
            "created_at": "2024-12-24T18:21:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2561334645",
            "id": 2561334645,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Yqt11",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 3,
                "laugh": 0,
                "rocket": 8,
                "total_count": 11,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2561334645/reactions"
            },
            "updated_at": "2024-12-24T18:21:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2561334645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I would really like to give this a proper review with the final changes.\n\nCan we hold off on merging a little bit? The change is only 6 days old with a lot of development and discussion, and it's Xmas eve/ new year.\n\n---\n\nOne other request I'd like to make now is that we provide some way to make this opt-in/out, and revisit the final default before the release.\n\n",
            "created_at": "2024-12-24T18:36:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2561341531",
            "id": 2561341531,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Yqvhb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2561341531/reactions"
            },
            "updated_at": "2024-12-24T18:36:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2561341531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If a parse times out and some lines are deleted, reparsing may cause OOB error:\r\n```console\r\nE5113: Error while calling lua chunk: runtime/lua/vim/treesitter.lua:193: Index out of bounds\r\nstack traceback:\r\n        [C]: in function 'nvim_buf_get_text'\r\n        runtime/lua/vim/treesitter.lua:193: in function 'get_node_text'\r\n        runtime/lua/vim/treesitter/query.lua:272: in function 'handler'\r\n        runtime/lua/vim/treesitter/query.lua:786: in function 'match_preds'\r\n        runtime/lua/vim/treesitter/query.lua:976: in function '(for generator)'\r\n        runtime/lua/vim/treesitter/languagetree.lua:912: in function 'f'\r\n        runtime/lua/vim/treesitter/languagetree.lua:197: in function 'tcall'\r\n        runtime/lua/vim/treesitter/languagetree.lua:398: in function '_add_injections'\r\n        runtime/lua/vim/treesitter/languagetree.lua:520: in function '_parse'\r\n        runtime/lua/vim/treesitter/languagetree.lua:485: in function 'parse'\r\n```\r\n\r\nHappens because the node in the parser has positions from the old buffer. \r\nThe reparse completes successfully (neovim's `input_cb()` returns 0 for the first nonexisting line, the parsing stops, but the node still has the same range, is that intentional in tree-sitter? In any case the parsing state should've been invalidated, I assume).\r\nThen the injections iterator errors on trying to get the node's text.\r\n\r\n<details>\r\n\r\n<summary>reproduction</summary>\r\n\r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git'\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { \"lua\" },\r\n  highlight = { enable = true },\r\n}\r\n\r\n------------\r\n\r\nlocal buf = vim.api.nvim_get_current_buf()\r\nlocal line = [[vim.api.nvim_set_hl(0, 'test2', { bg = 'green' })]]\r\nlocal lines = {}\r\nfor i = 1, 1000 do\r\n  lines[i] = line\r\nend\r\nvim.api.nvim_buf_set_lines(buf, 0, -1, true, lines)\r\n\r\nvim.cmd'set redrawtime=1'\r\nvim.cmd'set ft=lua'\r\n\r\nvim.treesitter.start(buf)\r\nlocal parser = vim.treesitter.get_parser(buf)\r\n\r\nparser:parse(true, function(_, err)\r\n  if err == 'TIMEOUT' then\r\n    vim.cmd'set redrawtime=1000'\r\n    vim.api.nvim_buf_set_lines(buf, 1, -1, true, {})\r\n    parser:parse(true)\r\n  end\r\nend)\r\n\r\nvim.cmd'enew' -- so that the highlighter doesn't interfere\r\n``` \r\n\r\n```shell\r\nnvim --clean -u minimal.lua\r\n```\r\n\r\n</details>",
            "created_at": "2024-12-26T04:13:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2562135903",
            "id": 2562135903,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Ytxdf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2562135903/reactions"
            },
            "updated_at": "2024-12-26T11:06:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2562135903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If a parse times out and some lines are deleted, reparsing may cause OOB error:\r\n\r\nThanks for the report, this is indeed fixed by resetting the parser upon timeout. Added that repro to the test suite",
            "created_at": "2024-12-28T19:07:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2564406466",
            "id": 2564406466,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Y2bzC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564406466/reactions"
            },
            "updated_at": "2024-12-28T19:14:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564406466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Sorry, the fix I suggested was not covering all cases. The parser also needs to be reset on tree edits.\r\nAlso removed `invalidate()` from async parsing since both things it does (resetting `valid` and the parser) now happen when the tree is edited (in `_iter_regions()` and this patch).\r\n\r\n<details>\r\n\r\n<summary>Patch for  2b07b14eacf31</summary>\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/treesitter/languagetree.lua b/runtime/lua/vim/treesitter/languagetree.lua\r\nindex 5aee2b5211..af9b891af4 100644\r\n--- a/runtime/lua/vim/treesitter/languagetree.lua\r\n+++ b/runtime/lua/vim/treesitter/languagetree.lua\r\n@@ -437,7 +437,6 @@ function LanguageTree:_async_parse(range, on_parse)\r\n   local function step()\r\n     -- If buffer was changed in the middle of parsing, reset parse state\r\n     if self:_buf().changedtick ~= ct then\r\n-      self:invalidate()\r\n       ct = self:_buf().changedtick\r\n       total_parse_time = 0\r\n     end\r\n@@ -449,7 +448,6 @@ function LanguageTree:_async_parse(range, on_parse)\r\n       on_parse(trees)\r\n       return trees\r\n     elseif total_parse_time > redrawtime then\r\n-      self:invalidate()\r\n       on_parse(nil, 'TIMEOUT')\r\n     else\r\n       vim.schedule(step)\r\n@@ -984,6 +982,7 @@ function LanguageTree:_edit(\r\n     )\r\n   end\r\n \r\n+  self._parser:reset()\r\n   self._regions = nil\r\n \r\n   local changed_range = {\r\ndiff --git a/test/functional/treesitter/parser_spec.lua b/test/functional/treesitter/parser_spec.lua\r\nindex 32f2d87854..a86b3180cc 100644\r\n--- a/test/functional/treesitter/parser_spec.lua\r\n+++ b/test/functional/treesitter/parser_spec.lua\r\n@@ -198,26 +198,19 @@ describe('treesitter parser API', function()\r\n     assert_alive()\r\n   end)\r\n \r\n-  it('invalidates tree on async parse timeout', function()\r\n+  it('resets parsing state on tree changes', function()\r\n     insert([[vim.api.nvim_set_hl(0, 'test2', { bg = 'green' })]])\r\n     feed('yy1000p')\r\n \r\n     exec_lua(function()\r\n-      vim.cmd('set redrawtime=1')\r\n       vim.cmd('set ft=lua')\r\n \r\n       vim.treesitter.start(0)\r\n       local parser = assert(vim.treesitter.get_parser(0))\r\n \r\n-      parser:parse(true, function(_, err)\r\n-        if err == 'TIMEOUT' then\r\n-          vim.cmd('set redrawtime=1000')\r\n-          vim.api.nvim_buf_set_lines(0, 1, -1, false, {})\r\n-          parser:parse(true)\r\n-        end\r\n-      end)\r\n-\r\n-      vim.cmd('enew') -- so that the highlighter doesn't interfere\r\n+      parser:parse(true, function() end)\r\n+      vim.api.nvim_buf_set_lines(0, 1, -1, false, {})\r\n+      parser:parse(true)\r\n     end)\r\n   end)\r\n```\r\n\r\n</details>",
            "created_at": "2024-12-28T20:17:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2564427840",
            "id": 2564427840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Y2hBA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 10,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 13,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564427840/reactions"
            },
            "updated_at": "2024-12-28T20:18:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2564427840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> other request I'd like to make now is that we provide some way to make this opt-in/out, and revisit the final default before the release.\r\n\r\nCan make it opt-out I guess. Want this enabled by default.",
            "created_at": "2025-01-01T16:20:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2567067717",
            "id": 2567067717,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZAlhF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 8,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2567067717/reactions"
            },
            "updated_at": "2025-01-01T16:20:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2567067717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I recently tried Helix and was surprised by how much snappier it feels when opening C++ or Rust files. After some investigation, I disabled Tree-sitter, and Neovim became as fast as Helix in this aspect. I was really excited when I saw this PR. However, when I tried it, I still noticed a delay when opening C++ files despite async parsing. This is especially noticeable on startup. Maybe I did something wrong? Can I diagnose this in another way?\r\n\r\n<details>\r\n  <summary>nvim main.cpp --startuptime startup_clean.txt --clean</summary>\r\n\r\n```\r\n  --- Startup times for process: Primary (or UI client) ---\r\n\r\ntimes in msec\r\n clock   self+sourced   self:  sourced script\r\n clock   elapsed:              other lines\r\n\r\n000.004  000.004: --- NVIM STARTING ---\r\n000.242  000.238: event init\r\n000.364  000.123: early init\r\n000.440  000.076: locale set\r\n000.562  000.122: init first window\r\n001.573  001.011: inits 1\r\n001.601  000.028: window checked\r\n001.716  000.115: parsing arguments\r\n003.153  000.075  000.075: require('vim.shared')\r\n003.345  000.074  000.074: require('vim.inspect')\r\n003.421  000.064  000.064: require('vim._options')\r\n003.422  000.265  000.126: require('vim._editor')\r\n003.424  000.432  000.093: require('vim._init_packages')\r\n003.426  001.278: init lua interpreter\r\n006.600  003.174: nvim_ui_attach\r\n006.918  000.318: nvim_set_client_info\r\n006.921  000.002: --- NVIM STARTED ---\r\n\r\n--- Startup times for process: Embedded ---\r\n\r\ntimes in msec\r\n clock   self+sourced   self:  sourced script\r\n clock   elapsed:              other lines\r\n\r\n000.003  000.003: --- NVIM STARTING ---\r\n000.172  000.169: event init\r\n000.268  000.096: early init\r\n000.349  000.081: locale set\r\n000.434  000.084: init first window\r\n000.884  000.451: inits 1\r\n000.904  000.020: window checked\r\n000.963  000.059: parsing arguments\r\n001.851  000.129  000.129: require('vim.shared')\r\n002.118  000.096  000.096: require('vim.inspect')\r\n002.234  000.095  000.095: require('vim._options')\r\n002.238  000.380  000.189: require('vim._editor')\r\n002.240  000.556  000.047: require('vim._init_packages')\r\n002.243  000.724: init lua interpreter\r\n002.471  000.228: expanding arguments\r\n002.509  000.038: inits 2\r\n002.787  000.278: init highlight\r\n002.788  000.001: waiting for UI\r\n002.967  000.179: done waiting for UI\r\n002.987  000.020: clear screen\r\n003.175  000.010  000.010: require('vim.keymap')\r\n004.481  001.490  001.481: require('vim._defaults')\r\n004.485  000.007: init default mappings & autocommands\r\n005.285  000.082  000.082: sourcing /usr/local/share/nvim/runtime/ftplugin.vim\r\n005.367  000.040  000.040: sourcing /usr/local/share/nvim/runtime/indent.vim\r\n005.380  000.773: sourcing vimrc file(s)\r\n005.607  000.190  000.190: sourcing /usr/local/share/nvim/runtime/filetype.lua\r\n005.925  000.177  000.177: sourcing /usr/local/share/nvim/runtime/syntax/synload.vim\r\n006.368  000.699  000.522: sourcing /usr/local/share/nvim/runtime/syntax/syntax.vim\r\n007.383  000.222  000.222: sourcing /usr/local/share/nvim/runtime/plugin/gzip.vim\r\n008.331  000.311  000.311: sourcing /usr/local/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim\r\n008.491  001.067  000.755: sourcing /usr/local/share/nvim/runtime/plugin/matchit.vim\r\n008.686  000.139  000.139: sourcing /usr/local/share/nvim/runtime/plugin/matchparen.vim\r\n009.112  000.397  000.397: sourcing /usr/local/share/nvim/runtime/plugin/netrwPlugin.vim\r\n009.242  000.057  000.057: sourcing /usr/local/share/nvim/runtime/plugin/rplugin.vim\r\n009.371  000.073  000.073: sourcing /usr/local/share/nvim/runtime/plugin/shada.vim\r\n009.488  000.025  000.025: sourcing /usr/local/share/nvim/runtime/plugin/spellfile.vim\r\n009.617  000.076  000.076: sourcing /usr/local/share/nvim/runtime/plugin/tarPlugin.vim\r\n009.691  000.016  000.016: sourcing /usr/local/share/nvim/runtime/plugin/tutor.vim\r\n009.885  000.163  000.163: sourcing /usr/local/share/nvim/runtime/plugin/zipPlugin.vim\r\n010.030  000.074  000.074: sourcing /usr/local/share/nvim/runtime/plugin/editorconfig.lua\r\n010.210  000.137  000.137: sourcing /usr/local/share/nvim/runtime/plugin/man.lua\r\n011.086  000.683  000.683: require('vim.termcap')\r\n011.182  000.075  000.075: require('vim.text')\r\n011.201  000.952  000.194: sourcing /usr/local/share/nvim/runtime/plugin/osc52.lua\r\n011.287  000.045  000.045: sourcing /usr/local/share/nvim/runtime/plugin/tohtml.lua\r\n011.316  001.603: loading rtp plugins\r\n011.580  000.265: loading packages\r\n011.582  000.002: loading after plugins\r\n011.594  000.012: inits 3\r\n011.603  000.009: reading ShaDa\r\n013.854  001.857  001.857: require('vim.filetype')\r\n015.574  001.509  001.509: require('vim.filetype.detect')\r\n016.677  000.100  000.100: sourcing /usr/local/share/nvim/runtime/ftplugin/c.vim\r\n016.812  000.096  000.096: sourcing /usr/local/share/nvim/runtime/ftplugin/c.lua\r\n017.198  001.081  000.885: sourcing /usr/local/share/nvim/runtime/ftplugin/cpp.vim\r\n017.853  000.024  000.024: sourcing /usr/local/share/nvim/runtime/indent/cpp.vim\r\n019.944  001.224  001.224: sourcing /usr/local/share/nvim/runtime/syntax/c.vim\r\n020.237  001.597  000.373: sourcing /usr/local/share/nvim/runtime/syntax/cpp.vim\r\n020.351  000.013  000.013: require('vim.F')\r\n020.622  000.264  000.264: require('editorconfig')\r\n020.658  000.032  000.032: require('vim.fs')\r\n020.891  002.911: opening buffers\r\n020.913  000.022: BufEnter autocommands\r\n020.915  000.002: editing files in windows\r\n021.035  000.120: VimEnter autocommands\r\n021.039  000.004: UIEnter autocommands\r\n021.040  000.001: before starting main loop\r\n024.629  003.589: first screen update\r\n024.632  000.003: --- NVIM STARTED ---\r\n\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>nvim main.cpp --startuptime startup_time_with_treesitter.txt</summary>\r\n\r\n```\r\n--- Startup times for process: Primary (or UI client) ---\r\n\r\ntimes in msec\r\n clock   self+sourced   self:  sourced script\r\n clock   elapsed:              other lines\r\n\r\n000.004  000.004: --- NVIM STARTING ---\r\n000.279  000.275: event init\r\n000.431  000.152: early init\r\n000.537  000.106: locale set\r\n000.662  000.125: init first window\r\n001.510  000.848: inits 1\r\n001.535  000.025: window checked\r\n001.705  000.170: parsing arguments\r\n002.905  000.085  000.085: require('vim.shared')\r\n003.203  000.107  000.107: require('vim.inspect')\r\n003.316  000.099  000.099: require('vim._options')\r\n003.319  000.405  000.199: require('vim._editor')\r\n003.321  000.577  000.087: require('vim._init_packages')\r\n003.326  001.044: init lua interpreter\r\n007.982  004.656: nvim_ui_attach\r\n008.410  000.429: nvim_set_client_info\r\n008.413  000.003: --- NVIM STARTED ---\r\n\r\n--- Startup times for process: Embedded ---\r\n\r\ntimes in msec\r\n clock   self+sourced   self:  sourced script\r\n clock   elapsed:              other lines\r\n\r\n000.003  000.003: --- NVIM STARTING ---\r\n000.259  000.255: event init\r\n000.397  000.138: early init\r\n000.504  000.107: locale set\r\n000.616  000.112: init first window\r\n001.274  000.659: inits 1\r\n001.298  000.023: window checked\r\n001.376  000.078: parsing arguments\r\n002.143  000.060  000.060: require('vim.shared')\r\n002.368  000.068  000.068: require('vim.inspect')\r\n002.442  000.058  000.058: require('vim._options')\r\n002.445  000.295  000.170: require('vim._editor')\r\n002.447  000.422  000.067: require('vim._init_packages')\r\n002.449  000.651: init lua interpreter\r\n002.558  000.110: expanding arguments\r\n002.585  000.027: inits 2\r\n002.928  000.344: init highlight\r\n002.930  000.001: waiting for UI\r\n003.143  000.214: done waiting for UI\r\n003.147  000.004: clear screen\r\n003.448  000.021  000.021: require('vim.keymap')\r\n005.053  001.903  001.882: require('vim._defaults')\r\n005.056  000.006: init default mappings & autocommands\r\n006.092  000.086  000.086: sourcing /usr/local/share/nvim/runtime/ftplugin.vim\r\n006.183  000.030  000.030: sourcing /usr/local/share/nvim/runtime/indent.vim\r\n008.188  001.492  001.492: require('lazy')\r\n008.349  000.114  000.114: require('ffi')\r\n008.467  000.050  000.050: require('vim.fs')\r\n008.680  000.196  000.196: require('vim.uri')\r\n008.700  000.344  000.099: require('vim.loader')\r\n008.997  000.272  000.272: require('lazy.stats')\r\n009.144  000.117  000.117: require('lazy.core.util')\r\n009.312  000.165  000.165: require('lazy.core.config')\r\n009.573  000.114  000.114: require('lazy.core.handler')\r\n010.084  000.134  000.134: require('lazy.pkg')\r\n010.101  000.295  000.160: require('lazy.core.meta')\r\n010.113  000.537  000.242: require('lazy.core.plugin')\r\n010.126  000.812  000.160: require('lazy.core.loader')\r\n010.501  000.128  000.128: require('lazy.core.fragments')\r\n011.087  000.182  000.182: require('lazy.core.handler.event')\r\n011.277  000.183  000.183: require('lazy.core.handler.keys')\r\n011.600  000.317  000.317: require('lazy.core.handler.cmd')\r\n011.858  000.252  000.252: require('lazy.core.handler.ft')\r\n012.318  000.345  000.345: sourcing /usr/local/share/nvim/runtime/filetype.lua\r\n012.597  000.067  000.067: sourcing /usr/local/share/nvim/runtime/plugin/editorconfig.lua\r\n012.847  000.200  000.200: sourcing /usr/local/share/nvim/runtime/plugin/gzip.vim\r\n012.962  000.067  000.067: sourcing /usr/local/share/nvim/runtime/plugin/man.lua\r\n013.623  000.224  000.224: sourcing /usr/local/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim\r\n013.651  000.637  000.413: sourcing /usr/local/share/nvim/runtime/plugin/matchit.vim\r\n013.850  000.148  000.148: sourcing /usr/local/share/nvim/runtime/plugin/matchparen.vim\r\n014.273  000.374  000.374: sourcing /usr/local/share/nvim/runtime/plugin/netrwPlugin.vim\r\n014.859  000.399  000.399: require('vim.termcap')\r\n015.053  000.156  000.156: require('vim.text')\r\n015.074  000.702  000.147: sourcing /usr/local/share/nvim/runtime/plugin/osc52.lua\r\n015.397  000.253  000.253: sourcing /usr/local/share/nvim/runtime/plugin/rplugin.vim\r\n015.529  000.071  000.071: sourcing /usr/local/share/nvim/runtime/plugin/shada.vim\r\n015.627  000.023  000.023: sourcing /usr/local/share/nvim/runtime/plugin/spellfile.vim\r\n015.814  000.109  000.109: sourcing /usr/local/share/nvim/runtime/plugin/tarPlugin.vim\r\n016.026  000.104  000.104: sourcing /usr/local/share/nvim/runtime/plugin/tohtml.lua\r\n016.127  000.025  000.025: sourcing /usr/local/share/nvim/runtime/plugin/tutor.vim\r\n016.367  000.187  000.187: sourcing /usr/local/share/nvim/runtime/plugin/zipPlugin.vim\r\n016.565  010.222  002.529: sourcing /home/miron/.config/nvim-experiments/init.lua\r\n016.576  001.181: sourcing vimrc file(s)\r\n016.869  000.052  000.052: sourcing /usr/local/share/nvim/runtime/filetype.lua\r\n017.133  000.081  000.081: sourcing /usr/local/share/nvim/runtime/syntax/synload.vim\r\n017.279  000.323  000.242: sourcing /usr/local/share/nvim/runtime/syntax/syntax.vim\r\n017.317  000.366: inits 3\r\n020.882  003.564: reading ShaDa\r\n022.436  000.095  000.095: require('nvim-treesitter.utils')\r\n024.788  000.531  000.531: require('vim.treesitter.language')\r\n024.911  000.119  000.119: require('vim.func')\r\n025.009  000.092  000.092: require('vim.func._memoize')\r\n025.030  001.158  000.416: require('vim.treesitter.query')\r\n025.093  000.060  000.060: require('vim.treesitter._range')\r\n025.111  001.546  000.328: require('vim.treesitter.languagetree')\r\n025.118  001.895  000.350: require('vim.treesitter')\r\n025.820  003.379  001.484: require('nvim-treesitter.parsers')\r\n026.224  000.084  000.084: require('nvim-treesitter.compat')\r\n026.371  000.072  000.072: require('nvim-treesitter.ts_utils')\r\n026.377  000.149  000.077: require('nvim-treesitter.tsrange')\r\n026.462  000.083  000.083: require('nvim-treesitter.caching')\r\n026.480  000.409  000.094: require('nvim-treesitter.query')\r\n026.499  000.525  000.115: require('nvim-treesitter.configs')\r\n026.503  000.670  000.146: require('nvim-treesitter.info')\r\n026.638  000.134  000.134: require('nvim-treesitter.shell_command_selectors')\r\n026.669  004.502  000.223: require('nvim-treesitter.install')\r\n026.735  000.063  000.063: require('nvim-treesitter.statusline')\r\n026.821  000.084  000.084: require('nvim-treesitter.query_predicates')\r\n026.824  004.986  000.338: require('nvim-treesitter')\r\n026.959  000.128  000.128: require('vim.iter')\r\n028.013  006.302  001.187: sourcing /home/miron/.local/share/nvim-experiments/lazy/nvim-treesitter/plugin/nvim-treesitter.lua\r\n028.627  000.133  000.133: require('nvim-treesitter.highlight')\r\n030.666  001.924  001.924: require('vim.filetype')\r\n031.709  000.826  000.826: require('vim.filetype.detect')\r\n033.131  000.137  000.137: sourcing /usr/local/share/nvim/runtime/ftplugin/c.vim\r\n033.330  000.155  000.155: sourcing /usr/local/share/nvim/runtime/ftplugin/c.lua\r\n033.851  001.407  001.115: sourcing /usr/local/share/nvim/runtime/ftplugin/cpp.vim\r\n034.658  000.023  000.023: sourcing /usr/local/share/nvim/runtime/indent/cpp.vim\r\n037.211  001.543  001.543: sourcing /usr/local/share/nvim/runtime/syntax/c.vim\r\n037.629  002.038  000.495: sourcing /usr/local/share/nvim/runtime/syntax/cpp.vim\r\n038.318  000.159  000.159: require('vim.F')\r\n058.579  000.476  000.476: require('vim.treesitter.highlighter')\r\n059.325  000.273  000.273: require('editorconfig')\r\n059.489  025.047: opening buffers\r\n059.520  000.031: BufEnter autocommands\r\n059.523  000.003: editing files in windows\r\n059.682  000.159: VimEnter autocommands\r\n059.737  000.054: UIEnter autocommands\r\n059.739  000.002: before starting main loop\r\n274.668  000.693  000.693: require('vim.hl')\r\n279.313  218.881: first screen update\r\n279.317  000.004: --- NVIM STARTED ---\r\n\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>init.lua for reproduction</summary>\r\n\r\n```lua\r\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\r\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\r\n  local lazyrepo = \"https://github.com/folke/lazy.nvim.git\"\r\n  local out = vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"--branch=stable\", lazyrepo, lazypath })\r\n  if vim.v.shell_error ~= 0 then\r\n    vim.api.nvim_echo({\r\n      { \"Failed to clone lazy.nvim:\\n\", \"ErrorMsg\" },\r\n      { out, \"WarningMsg\" },\r\n      { \"\\nPress any key to exit...\" },\r\n    }, true, {})\r\n    vim.fn.getchar()\r\n    os.exit(1)\r\n  end\r\nend\r\nvim.opt.rtp:prepend(lazypath)\r\n\r\n-- Setup lazy.nvim\r\nrequire(\"lazy\").setup({\r\n  spec = {\r\n    {\r\n    \"nvim-treesitter/nvim-treesitter\",\r\n    config = function()\r\n      ---@diagnostic disable-next-line: missing-fields\r\n      require(\"nvim-treesitter.configs\").setup({\r\n      ensure_installed = {\"cpp\"},\r\n      auto_install = true,\r\n        highlight = {\r\n          enable = true,\r\n        },\r\n      }\r\n      )\r\n    end,\r\n    },\r\n  },\r\n})\r\n\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>main.cpp</summary>\r\n\r\n```cpp\r\n#include <cstdlib>\r\n#include <iostream>\r\n\r\n#include \"src/WeatherPrinter/WeatherPrinter.h\"\r\n\r\n\r\nint main(int argc, char** argv) {\r\n  Config config{};\r\n\r\n\r\n  char* home_dir_path = std::getenv(\"HOME\");\r\n  if (home_dir_path == nullptr) {\r\n    std::cout << \"Env variable 'home' is missing. Error\";\r\n    return 1;\r\n  }\r\n\r\n  std::string config_path = std::string(home_dir_path) + \"/mwConfig.json\";\r\n  try {\r\n    config = ConfigParser::ParseConfig(config_path);\r\n  } catch (const std::exception& ex) {\r\n    std::cout << \"\\nConfig parser error!\\t\" << \"[\" << ex.what() << \"]\" << std::endl;\r\n    std::cout << \"Fix errors in config and try again\" << std::endl;\r\n    return 0;\r\n  }\r\n\r\n  try {\r\n    WeatherPrinter weather_printer(config);\r\n    weather_printer.Run();\r\n  } catch (const std::exception& ex) {\r\n    std::cout << ex.what();\r\n  }\r\n}\r\n```\r\n</details>",
            "created_at": "2025-01-06T13:31:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573116880",
            "id": 2573116880,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZXqXQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573116880/reactions"
            },
            "updated_at": "2025-01-06T13:33:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573116880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80050619?v=4",
                "events_url": "https://api.github.com/users/miroshQa/events{/privacy}",
                "followers_url": "https://api.github.com/users/miroshQa/followers",
                "following_url": "https://api.github.com/users/miroshQa/following{/other_user}",
                "gists_url": "https://api.github.com/users/miroshQa/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/miroshQa",
                "id": 80050619,
                "login": "miroshQa",
                "node_id": "MDQ6VXNlcjgwMDUwNjE5",
                "organizations_url": "https://api.github.com/users/miroshQa/orgs",
                "received_events_url": "https://api.github.com/users/miroshQa/received_events",
                "repos_url": "https://api.github.com/users/miroshQa/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/miroshQa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/miroshQa/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/miroshQa",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Helix uses different queries, so it's important to compare apples and apples here. (Also, `cpp` is an especially  nasty case.)",
            "created_at": "2025-01-06T13:33:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573120530",
            "id": 2573120530,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZXrQS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573120530/reactions"
            },
            "updated_at": "2025-01-06T13:33:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573120530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@miroshQa you need to use `VIMRUNTIME=./runtime/ ./build/bin/nvim --luamod-dev ` as mentioned in https://github.com/neovim/neovim/pull/31631#issuecomment-2556853291",
            "created_at": "2025-01-06T14:08:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573186898",
            "id": 2573186898,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZX7dS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573186898/reactions"
            },
            "updated_at": "2025-01-06T14:08:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573186898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Did we resolve the issue of quick successive edits spamming parses? I think with the current implementation it will just result in multiple redundant redraws since it will just queue callbacks?\r\n\r\nI'm not sure if this is too complicated, but it may be worth cancelling the callbacks when a new redraw occurs? If so, then we can implement it in a follow up. I'm not sure how harm(less/full) redundant calls to `nvim_redraw` are.",
            "created_at": "2025-01-06T16:19:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573446716",
            "id": 2573446716,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZY648",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573446716/reactions"
            },
            "updated_at": "2025-01-07T09:42:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573446716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There is a test for spammy edits (just making sure the editor doesn't crash), and I think the redundant redraws are mostly (entirely?) avoided by the logic in `highlighter.lua`. I could be wrong though, maybe Luuk can answer better",
            "created_at": "2025-01-06T16:24:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573456146",
            "id": 2573456146,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZY9MS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573456146/reactions"
            },
            "updated_at": "2025-01-07T09:42:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573456146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think the redundant redraws are mostly (entirely?) avoided by the logic in highlighter.lua.\r\n\r\nYes they are 👍 ",
            "created_at": "2025-01-06T16:28:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573463603",
            "id": 2573463603,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZY_Az",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573463603/reactions"
            },
            "updated_at": "2025-01-07T09:42:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573463603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Going to push one last change that ensures the `on_parse` callback is still fired even with `vim.g._ts_force_sync_parsing`",
            "created_at": "2025-01-06T18:15:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2573654549",
            "id": 2573654549,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6ZZtoV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573654549/reactions"
            },
            "updated_at": "2025-01-06T18:15:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573654549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looks like the logic to prevent the stacking timeouts is preventing highlighting from being applied. Could this be marked as a TODO, or is it too critical?",
            "created_at": "2025-01-09T19:26:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2581089136",
            "id": 2581089136,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Z2Etw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581089136/reactions"
            },
            "updated_at": "2025-01-09T19:26:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581089136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is it difficult to fix? I can't imagine it's that complicated? If so, it could be a signal that something deeper is going wrong.\n\nPerhaps a synchronous parse somewhere is breaking things?\n\nAnd in general we should really fix any problems we identify as early as we can. The only motivation for merging this sooner is to find more problems. If there are already known problems then the value of merging is reduced.",
            "created_at": "2025-01-09T20:21:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2581177836",
            "id": 2581177836,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Z2aXs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581177836/reactions"
            },
            "updated_at": "2025-01-09T20:22:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581177836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Got it, that makes sense. Thanks 👍\n\nUpon debugging it seems like there isnt an issue, rather there was one before where the redrawtime timeout wasn't fully respected. Now it is and the big linux file is no longer highlighted, but all other files which fit within that time are",
            "created_at": "2025-01-09T20:46:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2581215185",
            "id": 2581215185,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Z2jfR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581215185/reactions"
            },
            "updated_at": "2025-01-09T20:46:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581215185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Presumably if redrawtime is increased then the big Linux file is highlighted?\n\n---\n\nFollow-up would be to permanently disable parsing from the highlighter for any buffer that exceeds the timeout. If it fails on the initial parse it's very unlikely to satisfy the timeout, so best save the CPU cycles.\n\nAdditionally we could allow an extra allowance for the initial parse, since incremental parses will be quicker.",
            "created_at": "2025-01-09T21:32:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2581286183",
            "id": 2581286183,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Z200n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581286183/reactions"
            },
            "updated_at": "2025-01-09T21:32:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581286183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Presumably if redrawtime is increased then the big Linux file is highlighted?\r\n\r\nCorrect\r\n\r\nThe extra allowance would be good. For disabling parsing in the highlighter, would this make it impossible to manually apply highlights? Idk what the protocol is if timeout is reached but looks like another treesitter.start() is the way to go as of now\r\n\r\n(Edit: can discuss more in the follow-up)",
            "created_at": "2025-01-09T22:25:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2581360951",
            "id": 2581360951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6Z3HE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581360951/reactions"
            },
            "updated_at": "2025-01-12T16:07:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2581360951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Follow-up would be to permanently disable parsing from the highlighter for any buffer that exceeds the timeout. If it fails on the initial parse it's very unlikely to satisfy the timeout, so best save the CPU cycles.\r\n\r\nRelated: https://github.com/neovim/neovim/pull/18109",
            "created_at": "2025-01-12T16:11:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2585793801",
            "id": 2585793801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6aIBUJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585793801/reactions"
            },
            "updated_at": "2025-01-12T16:11:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585793801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Are we ready to pull the trigger?",
            "created_at": "2025-01-12T23:25:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2585961988",
            "id": 2585961988,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6aIqYE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 10,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585961988/reactions"
            },
            "updated_at": "2025-01-12T23:25:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585961988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think so :)",
            "created_at": "2025-01-12T23:29:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2585963120",
            "id": 2585963120,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6aIqpw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 32,
                "total_count": 32,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585963120/reactions"
            },
            "updated_at": "2025-01-12T23:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585963120",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Thanks to some digging by @vanaigr, it is clear that the stutters are due to injection processing, specifically in the iter_matches() call in LanguageTree:_get_injections(). This is essentially the only highlighting bottleneck now. Deleting injection queries for the language gives no stutter whatsoever, and completely asynchronous highlighting.\n\nAnother follow-up. The `iter_matches` call can also be broken up over multiple event loop iterations. Just need to add some state to know where to continue from and clear of a buftick change.\n\nWe may also be able to add some optimisations if there are no combined injections in a query (which applies to most languages) without too much complexity.",
            "created_at": "2025-01-13T08:10:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31631#issuecomment-2586447791",
            "id": 2586447791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
            "node_id": "IC_kwDOAPphoM6aKg-v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 3,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2586447791/reactions"
            },
            "updated_at": "2025-01-13T08:13:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2586447791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31631/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31631/commits",
    "created_at": "2024-12-19T03:16:09Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31631.diff",
    "draft": false,
    "head": {
        "label": "ribru17:async_parse_attempt_2",
        "ref": "async_parse_attempt_2",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ribru17/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ribru17/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ribru17/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ribru17/neovim/branches{/branch}",
            "clone_url": "https://github.com/ribru17/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ribru17/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ribru17/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ribru17/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ribru17/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ribru17/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ribru17/neovim/contributors",
            "created_at": "2023-12-31T05:02:30Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ribru17/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ribru17/neovim/downloads",
            "events_url": "https://api.github.com/repos/ribru17/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ribru17/neovim/forks",
            "full_name": "ribru17/neovim",
            "git_commits_url": "https://api.github.com/repos/ribru17/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ribru17/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ribru17/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ribru17/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ribru17/neovim/hooks",
            "html_url": "https://github.com/ribru17/neovim",
            "id": 737455179,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ribru17/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ribru17/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ribru17/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ribru17/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ribru17/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ribru17/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ribru17/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ribru17/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK_SsSw",
            "notifications_url": "https://api.github.com/repos/ribru17/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ribru17/neovim/pulls{/number}",
            "pushed_at": "2025-01-13T18:53:41Z",
            "releases_url": "https://api.github.com/repos/ribru17/neovim/releases{/id}",
            "size": 296039,
            "ssh_url": "git@github.com:ribru17/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ribru17/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ribru17/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ribru17/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ribru17/neovim/subscription",
            "svn_url": "https://github.com/ribru17/neovim",
            "tags_url": "https://api.github.com/repos/ribru17/neovim/tags",
            "teams_url": "https://api.github.com/repos/ribru17/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ribru17/neovim/git/trees{/sha}",
            "updated_at": "2025-01-13T16:14:33Z",
            "url": "https://api.github.com/repos/ribru17/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "bd4ca22d0334a3323313dfd6975a80218ec65e36",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31631",
    "id": 2243447503,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31631",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "99c4bd2f698345fd5706e0ff5d6221b8d3848cfb",
    "merged_at": "2025-01-13T06:58:34Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6FuErP",
    "number": 31631,
    "patch_url": "https://github.com/neovim/neovim/pull/31631.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31631/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/bd4ca22d0334a3323313dfd6975a80218ec65e36",
    "title": "feat(treesitter): async parsing",
    "updated_at": "2025-01-13T16:43:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31631",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17",
        "user_view_type": "public"
    }
}