{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30560/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30560/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30560"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30560"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30560/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/9205799a6bcdf32ee0e18e6480d00f99aa616715"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5841,
            "forks_count": 5841,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1854,
            "open_issues_count": 1854,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-02-04T02:07:35Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 307298,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85859,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-02-04T02:07:39Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85859,
            "watchers_count": 85859,
            "web_commit_signoff_required": false
        },
        "sha": "54249d051c3e0b97321939e6a3ae3d2e83971ce7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Refactoring to lua of str_byteindex to allow opts to be passed. This will allow `vim.lsp._str_byteindex_enc` to be deprecated.\r\n\r\nquestions:\r\n\r\nwhere should this function live, is _editor the right place?\r\nwhere should the opts class be defined\r\n\r\ndeprectation suggested in #25272",
    "closed_at": "2025-01-31T22:25:27Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742082"
                }
            },
            "author_association": "MEMBER",
            "body": "never need to mention \"helper\" in function names. all functions help, else they should not exist.\r\n```suggestion\r\n-- Decodes a UTF-8 character to a Unicode code point.\r\n```",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T19:30:10Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742082",
            "id": 1779742082,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFLWC",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 630,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335403032,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742082/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T19:30:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742186"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742186"
                }
            },
            "author_association": "MEMBER",
            "body": "even if the interface continues to live on `vim.x()`, perhaps the implementation should live in `runtime/lua/vim/text.lua` ? (as a private/internal function `text.__foo()`)\r\n\r\nCounterpoint: `_editor.lua` is guaranteed to be \"compiled\" in the `nvim` binary as lua byte code. I'm not sure if that applies to text.lua .",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T19:31:05Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- Opts can be a table containing: a \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- It can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\" }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742186",
            "id": 1779742186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFLXq",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 741,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335403147,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742186/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:00:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742503"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: it's a bit random that the code was added in between vim.notify and vim.notify_once :)\r\n\r\nif possible, it's nice to group families of functions together, or at least alphabetically.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T19:33:10Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742503",
            "id": 1779742503,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFLcn",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 630,
            "original_position": 2,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335403414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T19:33:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779750632"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779750632"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we want do duplicate the UTF-8 implementation in lua. A tight, simple \"inner loop\" like mb_utf_index_to_bytes is the kind of code which makes sense to keep in C.\r\n\r\nDoing the argument parsing and validation in lua makes sense, but then it could shell out to a private, smaller, lua wrapper around `mb_utf_index_to_bytes` .",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T20:29:22Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779750632",
            "id": 1779750632,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFNbo",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 724,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335410221,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779750632/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:29:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779750632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779752668"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779752668"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did look at `vim.text` as a home for this. But didn't want to change the namespace to keep this change non-breaking.\r\n\r\nHappy to move it with a wrapper if you think that is better (and will be bytecode compiled still)",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T20:44:44Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- Opts can be a table containing: a \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- It can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\" }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779752668",
            "id": 1779752668,
            "in_reply_to_id": 1779742186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFN7c",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 741,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335411677,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779752668/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:44:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779752668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779753153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779753153"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did it in Lua as thats what I know and kept the whole implementation more tightly coupled.\r\n\r\nHappy to do as you suggest and reach to C, but I might need some help with how best to action it",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T20:47:49Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779753153",
            "id": 1779753153,
            "in_reply_to_id": 1779750632,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFODB",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 724,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335411991,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779753153/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:47:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779753153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756448"
                }
            },
            "author_association": "MEMBER",
            "body": "> `_editor.lua` is guaranteed to be \"compiled\" in the `nvim` binary as lua byte code. I'm not sure if that applies to text.lua .\r\n\r\nfor this reason it should probably stay where you have it.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T21:10:11Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- Opts can be a table containing: a \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- It can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\" }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756448",
            "id": 1779756448,
            "in_reply_to_id": 1779742186,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFO2g",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 741,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335414540,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756448/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T21:10:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756601"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756601"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    opts = opts and { encoding = 'utf-16' } or { encoding = 'utf-32' }\r\n```\r\n",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-28T21:11:33Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  if type(opts) == 'boolean' then\n+    if opts then\n+      opts = { encoding = 'utf-16' }\n+    else\n+      opts = { encoding = 'utf-32' }\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756601",
            "id": 1779756601,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFO45",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 857,
            "original_position": 64,
            "original_start_line": 774,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335414686,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756601/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-28T21:11:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756601",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779920460"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779920460"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\n---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n```\n",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T06:25:03Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779920460",
            "id": 1779920460,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF25M",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 761,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335706964,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779920460/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-29T06:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779920460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779921136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779921136"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I should ```vim.validate()``` here",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T06:28:47Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779921136",
            "id": 1779921136,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF3Dw",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 741,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335706964,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779921136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-29T06:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779921136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779923529"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779923529"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  opts = opts or { encoding = 'utf-32', error = true }\r\n  if type(opts) == 'boolean' then\r\n    opts = opts and { encoding = 'utf-16' } or { encoding = 'utf-32' }\r\n  end\r\n\r\n  local encoding = opts.encoding or 'utf-32'\r\n  local valid_encodings = { utf_8 = true, utf_16 = true, utf_32 = true }\r\n  if not valid_encodings[encoding] then\r\n    error('Invalid encoding: ' .. encoding)\r\n  end\r\n```",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T06:42:29Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16' } or { encoding = 'utf-32' }\n+  end\n+\n+  if not opts or not opts.encoding then\n+    opts = { encoding = 'utf-32' }\n+  end\n+\n+  if not opts or not opts.error then\n+    opts.error = true\n+  end\n+\n+  local valid_encodings = { 'utf-8', 'utf-16', 'utf-32' }\n+  if not vim.tbl_contains(valid_encodings, opts.encoding) then\n+    error('Invalid encoding: ' .. opts.encoding)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779923529",
            "id": 1779923529,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF3pJ",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 862,
            "original_position": 74,
            "original_start_line": 773,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335710087,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779923529/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T06:42:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779923529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779925960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779925960"
                }
            },
            "author_association": "MEMBER",
            "body": "why not get them in once `local b1, b2, b3, b4 = s:byte(1, 4)`",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T06:56:12Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779925960",
            "id": 1779925960,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF4PI",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 723,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335712474,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779925960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-29T06:56:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779925960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780014183"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780014183"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  -- Prepare string by removing NUL characters\r\n  local prepared_string = s:gsub('%z', ' ')\r\n  local strlen = vim.fn.strchars(prepared_string)\r\n  local utf16_ptr, utf16_char = 0, 0\r\n  local utf32_ptr, utf32_char = 0, 0\r\n  local j = 0\r\n\r\n  -- Traverse the string and calculate pointers for UTF-16 and UTF-32\r\n  while j <= strlen do\r\n    j = j + 1\r\n    local char_len = vim.str_utf_end(s, j)\r\n    local c = utf_ptr2char(s:sub(j, j + char_len))\r\n\r\n    if c > 0xFFFF then\r\n      utf16_char = utf16_char + 2\r\n    else\r\n      utf16_char = utf16_char + 1\r\n    end\r\n    utf32_char = utf32_char + 1\r\n\r\n    if encoding == 'utf-16' and utf16_char >= index then\r\n      return utf16_ptr + char_len\r\n    elseif encoding == 'utf-32' and utf32_char >= index then\r\n      return utf32_ptr + char_len\r\n    end\r\n\r\n    utf32_ptr = utf32_ptr + char_len + 1\r\n    utf16_ptr = utf16_ptr + char_len + 1\r\n  end\r\n```",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T10:52:49Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780014183",
            "id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qGNxn",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 869,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335824567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780014183/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T10:52:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780014183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780041108"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780041108"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have taken some aspects from this comment to clean the loop up, but I think I need the str_pos() for edge cases around split bytes\n\nI will push a commit a bit later ",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T13:04:22Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780041108",
            "id": 1780041108,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qGUWU",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 869,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335851587,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780041108/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T13:04:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780041108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780072471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780072471"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have taken a bit of a merged approach, as we did need to track the byte index too for substringing when the byte is split.\r\n\r\nlet me know once you have taken a look @glepnir ",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-29T15:39:01Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780072471",
            "id": 1780072471,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qGcAX",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 869,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335882191,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780072471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T19:30:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780072471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780467100"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780467100"
                }
            },
            "author_association": "MEMBER",
            "body": "most LGTM just one thing shouldn't `if s:find('%z') then` do sub ? sub will have memory allocation to generate a new string.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-30T05:44:26Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780467100",
            "id": 1780467100,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qH8Wc",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 869,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2336437627,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780467100/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-30T05:44:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780467100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1781417791"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1781417791"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "i have added a conditional check, so the sub is only done if a NUL is found",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-09-30T16:16:50Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1781417791",
            "id": 1781417791,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qLkc_",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 869,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2338029284,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1781417791/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-30T16:16:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1781417791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1782105797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1782105797"
                }
            },
            "author_association": "MEMBER",
            "body": "LGTM now.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-01T04:49:34Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1782105797",
            "id": 1782105797,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qOMbF",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 869,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2339107387,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1782105797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-01T04:49:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1782105797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1783184672"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1783184672"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "As another thought. I could move the string to codepoint lua code to ```vim.text``` and potentially make it public for use it in other places\n\nIt is also used in my PR for ```str_utfindex``` #30600\n\nI do think that having the implementation all in pure lua is simpler",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-01T16:43:01Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1783184672",
            "id": 1783184672,
            "in_reply_to_id": 1779750632,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qST0g",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 724,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2340899535,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1783184672/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-01T16:43:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1783184672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1788676153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788676153"
                }
            },
            "author_association": "MEMBER",
            "body": "this could be renamed to:\r\n\r\n    lua_setfield(lstate, -2, \"__str_byteindex\");\r\n\r\nand then the `vim.str_byteindex` that you defined in `runtime/lua/vim/_editor.lua` can call into this.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-05T18:49:51Z",
            "diff_hunk": "@@ -696,9 +667,6 @@ void nlua_state_add_stdlib(lua_State *const lstate, bool is_thread)\n     // str_utfindex\n     lua_pushcfunction(lstate, &nlua_str_utfindex);\n     lua_setfield(lstate, -2, \"str_utfindex\");\n-    // str_byteindex\n-    lua_pushcfunction(lstate, &nlua_str_byteindex);\n-    lua_setfield(lstate, -2, \"str_byteindex\");",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1788676153",
            "id": 1788676153,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qnQg5",
            "original_commit_id": "c2a587121dcde5ca67e7350908d139a1304333ce",
            "original_line": 701,
            "original_position": 42,
            "original_start_line": null,
            "path": "src/nvim/lua/stdlib.c",
            "position": null,
            "pull_request_review_id": 2350030840,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788676153/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-05T18:49:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788676153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1788681626"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788681626"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "have pushed a fixup as a seperate commit, will squash once reviewed\r\n\r\nThanks for the advice/guidance",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-05T19:31:46Z",
            "diff_hunk": "@@ -696,9 +667,6 @@ void nlua_state_add_stdlib(lua_State *const lstate, bool is_thread)\n     // str_utfindex\n     lua_pushcfunction(lstate, &nlua_str_utfindex);\n     lua_setfield(lstate, -2, \"str_utfindex\");\n-    // str_byteindex\n-    lua_pushcfunction(lstate, &nlua_str_byteindex);\n-    lua_setfield(lstate, -2, \"str_byteindex\");",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1788681626",
            "id": 1788681626,
            "in_reply_to_id": 1788676153,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qnR2a",
            "original_commit_id": "c2a587121dcde5ca67e7350908d139a1304333ce",
            "original_line": 701,
            "original_position": 42,
            "original_start_line": null,
            "path": "src/nvim/lua/stdlib.c",
            "position": null,
            "pull_request_review_id": 2350103777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788681626/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-05T19:31:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788681626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1788987488"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788987488"
                }
            },
            "author_association": "MEMBER",
            "body": "This function should be fast, however a lot of the code here will add unnecessary overhead for typical call arguments.\n\nCan some of this logic be bypassed if opts isn't provided?",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T09:14:05Z",
            "diff_hunk": "@@ -715,6 +715,58 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  vim.validate({ s = { s, 'string' }, index = { index, 'number' } })\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    if opts.error then\n+      error('index out of range')\n+    end\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1788987488",
            "id": 1788987488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qochg",
            "original_commit_id": "62eaf148348fc9eeb2da3f76b0be6a2fc70a2fd0",
            "original_line": 869,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350489011,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788987488/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T09:14:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788987488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1788988278"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788988278"
                }
            },
            "author_association": "MEMBER",
            "body": "Pull this constant out as an upvalue.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T09:16:01Z",
            "diff_hunk": "@@ -715,6 +715,58 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  vim.validate({ s = { s, 'string' }, index = { index, 'number' } })\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    if opts.error then\n+      error('index out of range')\n+    end\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1788988278",
            "id": 1788988278,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qoct2",
            "original_commit_id": "62eaf148348fc9eeb2da3f76b0be6a2fc70a2fd0",
            "original_line": 754,
            "original_position": 40,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350489363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788988278/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T09:16:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1788988278",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789025507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789025507"
                }
            },
            "author_association": "MEMBER",
            "body": "does this need to be on the public interface?\r\n\r\n```suggestion\r\nlocal utfs = {\r\n```",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T10:48:20Z",
            "diff_hunk": "@@ -68,6 +68,13 @@ vim.log = {\n   },\n }\n \n+--- @private\n+vim.utfs = {",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789025507",
            "id": 1789025507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qolzj",
            "original_commit_id": "9d643adfbd33822a8afcb324dfc85ddd759094a1",
            "original_line": 72,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350504551,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789025507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T10:48:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789025507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789026469"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789026469"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "no, have made it local",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T10:50:49Z",
            "diff_hunk": "@@ -68,6 +68,13 @@ vim.log = {\n   },\n }\n \n+--- @private\n+vim.utfs = {",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789026469",
            "id": 1789026469,
            "in_reply_to_id": 1789025507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qomCl",
            "original_commit_id": "9d643adfbd33822a8afcb324dfc85ddd759094a1",
            "original_line": 72,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350504915,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789026469/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T10:50:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789026469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789033277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789033277"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "added an early return for a boolean or nil opts",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T11:08:27Z",
            "diff_hunk": "@@ -715,6 +715,58 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  vim.validate({ s = { s, 'string' }, index = { index, 'number' } })\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    if opts.error then\n+      error('index out of range')\n+    end\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789033277",
            "id": 1789033277,
            "in_reply_to_id": 1788987488,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qons9",
            "original_commit_id": "62eaf148348fc9eeb2da3f76b0be6a2fc70a2fd0",
            "original_line": 869,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350507861,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789033277/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T11:08:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789033277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789061209"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789061209"
                }
            },
            "author_association": "MEMBER",
            "body": "I would make all the values `true` and inline the unnecessary references to `utfs` below.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T12:20:41Z",
            "diff_hunk": "@@ -68,6 +68,12 @@ vim.log = {\n   },\n }\n \n+local utfs = {\n+  ['utf-8'] = 'utf-8',",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789061209",
            "id": 1789061209,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qouhZ",
            "original_commit_id": "6fed19b53d60de01d1c593a52f915c4150f584b8",
            "original_line": 72,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350521307,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789061209/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T12:20:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789061209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789217797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789217797"
                }
            },
            "author_association": "MEMBER",
            "body": "This line can be moved forward.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T19:25:00Z",
            "diff_hunk": "@@ -715,6 +721,57 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  vim.validate({ s = { s, 'string' }, index = { index, 'number' } })\n+  local len = #s",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789217797",
            "id": 1789217797,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qpUwF",
            "original_commit_id": "7b99b1b7a0ab6af5084173513fbafe0da1ceb136",
            "original_line": 743,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350588579,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789217797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T19:26:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789217797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789218133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789218133"
                }
            },
            "author_association": "MEMBER",
            "body": "If you make the above change then you can move vim.validate here. There is also an alternate version of vim.validate which is faster as it uses less tables, but requires multiple calls.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T19:25:59Z",
            "diff_hunk": "@@ -715,6 +721,57 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  vim.validate({ s = { s, 'string' }, index = { index, 'number' } })\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if type(opts) == 'boolean' or not opts then\n+    return vim.__str_byteindex(s, index, opts)\n+  end\n+",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789218133",
            "id": 1789218133,
            "line": 830,
            "node_id": "PRRC_kwDOAPphoM5qpU1V",
            "original_commit_id": "7b99b1b7a0ab6af5084173513fbafe0da1ceb136",
            "original_line": 830,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 105,
            "pull_request_review_id": 2350588579,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789218133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T19:26:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789218133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789220692"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789220692"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "With the C implementation, this will still error (even though error is false) as ```#str = 2``` which means that index goes out of range and throws from the C side\r\n\r\nRelated to: #30675",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T19:33:52Z",
            "diff_hunk": "@@ -319,20 +319,99 @@ describe('lua stdlib', function()\n       49,\n       51,\n     }\n+    local indices8 = {\n+      [0] = 0,\n+      1,\n+      2,\n+      3,\n+      4,\n+      5,\n+      6,\n+      7,\n+      8,\n+      9,\n+      10,\n+      11,\n+      12,\n+      13,\n+      14,\n+      15,\n+      16,\n+      17,\n+      18,\n+      19,\n+      20,\n+      21,\n+      22,\n+      23,\n+      24,\n+      25,\n+      26,\n+      27,\n+      28,\n+      29,\n+      30,\n+      31,\n+      32,\n+      33,\n+      34,\n+      35,\n+      36,\n+      37,\n+      38,\n+      39,\n+      40,\n+      41,\n+      42,\n+      43,\n+      44,\n+      45,\n+      46,\n+      47,\n+      48,\n+      49,\n+      50,\n+      51,\n+    }\n     for i, k in pairs(indices32) do\n       eq(k, exec_lua('return vim.str_byteindex(_G.test_text, ...)', i), i)\n+      eq(k, exec_lua('return vim.str_byteindex(_G.test_text, ..., false)', i), i)\n+      eq(k, exec_lua('return vim.str_byteindex(_G.test_text, ..., { encoding = \"utf-32\"})', i), i)\n     end\n     for i, k in pairs(indices16) do\n       eq(k, exec_lua('return vim.str_byteindex(_G.test_text, ..., true)', i), i)\n+      eq(k, exec_lua('return vim.str_byteindex(_G.test_text, ..., { encoding = \"utf-16\"})', i), i)\n     end\n-    eq(\n+    for i, k in pairs(indices8) do\n+      eq(k, exec_lua('return vim.str_byteindex(_G.test_text, ..., { encoding = \"utf-8\"})', i), i)\n+    end\n+    matches(\n       'index out of range',\n       pcall_err(exec_lua, 'return vim.str_byteindex(_G.test_text, ...)', #indices32 + 1)\n     )\n-    eq(\n+    matches(\n       'index out of range',\n       pcall_err(exec_lua, 'return vim.str_byteindex(_G.test_text, ..., true)', #indices16 + 1)\n     )\n+    eq(\n+      indices32[#indices32],\n+      exec_lua(\n+        'return vim.str_byteindex(_G.test_text, 99999, { encoding = \"utf-32\", error = false})'\n+      )\n+    )\n+    eq(\n+      indices16[#indices16],\n+      exec_lua(\n+        'return vim.str_byteindex(_G.test_text, 99999, { encoding = \"utf-16\", error = false})'\n+      )\n+    )\n+    eq(\n+      indices8[#indices8],\n+      exec_lua(\n+        'return vim.str_byteindex(_G.test_text, 99999, { encoding = \"utf-8\", error = false})'\n+      )\n+    )\n+    eq(2, exec_lua('return vim.str_byteindex(\"é\", 2, { encoding = \"utf-16\", error = false})'))",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789220692",
            "id": 1789220692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qpVdU",
            "original_commit_id": "e821d68d981eeeade97a4ee55692b100cfb5225c",
            "original_line": 414,
            "original_position": 98,
            "original_start_line": null,
            "path": "test/functional/lua/vim_spec.lua",
            "position": null,
            "pull_request_review_id": 2350589837,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789220692/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T19:34:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789220692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1789248279"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789248279"
                }
            },
            "author_association": "MEMBER",
            "body": "I can't see where `opts.error` is used.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-06T20:54:41Z",
            "diff_hunk": "@@ -715,6 +721,57 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  vim.validate({ s = { s, 'string' }, index = { index, 'number' } })\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if type(opts) == 'boolean' or not opts then\n+    return vim.__str_byteindex(s, index, opts)\n+  end\n+\n+  if index > len then\n+    if opts.error then\n+      error('index out of range')\n+    end\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1789248279",
            "id": 1789248279,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qpcMX",
            "original_commit_id": "54f93bce445ab58a17fc8907278fc7d133d4669f",
            "original_line": 759,
            "original_position": 52,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2350600708,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789248279/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-06T20:54:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1789248279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793722135"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793722135"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a reason of having a specific `error` opt instead of using `pcall`?",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T15:20:18Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793722135",
            "id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q6gcX",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357481114,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793722135/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T15:20:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793722135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793764110"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793764110"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "the idea was to avoid pcalls and handle the errors gracefully to replace ```vim.lsp.util._str_byteindex_enc()```\r\n\r\nThe inspiration for the interface was from the recent ```get_parser()``` changes",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T15:47:06Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793764110",
            "id": 1793764110,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q6qsO",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357549799,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793764110/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T15:49:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793764110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793908355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793908355"
                }
            },
            "author_association": "MEMBER",
            "body": "To me handling the error gracefully means detecting what the error is and acting appropriately. From what I can tell this change just ignores the error completely. I'm not sure how that is more graceful than using `pcall`?",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T17:33:27Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793908355",
            "id": 1793908355,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7N6D",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357785799,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793908355/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T17:33:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793908355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793917362"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793917362"
                }
            },
            "author_association": "MEMBER",
            "body": "@clason wdyt?",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T17:41:04Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793917362",
            "id": 1793917362,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7QGy",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357800225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793917362/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T17:41:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793917362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793931044"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793931044"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Gracefully as in what is called for in LSP in the lsp wrapper function here:\r\n\r\nhttps://github.com/neovim/neovim/blob/8ef3dd3afa20024f439d8b7a69f316069c1909d3/runtime/lua/vim/lsp/util.lua#L174-L178",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T17:53:05Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793931044",
            "id": 1793931044,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7Tck",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357822404,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793931044/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T17:53:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793931044",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793934648"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793934648"
                }
            },
            "author_association": "MEMBER",
            "body": "> The inspiration for the interface was from the recent `get_parser()` changes\r\n\r\nThe `error` flag added to `get_parser` is a temporary workaround, probably not relevant here. Instead see `:help dev-error-patterns` for recommended ways to pass errors/failure.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T17:56:14Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793934648",
            "id": 1793934648,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7UU4",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357828232,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793934648/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T17:56:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793934648",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793944500"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793944500"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> > The inspiration for the interface was from the recent `get_parser()` changes\r\n> \r\n> The `error` flag added to `get_parser` is a temporary workaround, probably not relevant here. Instead see `:help dev-error-patterns` for recommended ways to pass errors/failure.\r\n\r\nI have read that documentation. The point of the flag is essentially choosing between behaviour 3 or a fallback value.\r\n\r\nI could go with option 1, and provide\r\n```i, nil``` in a success case and ```#s, \"index out of range\"``` in a failure case. But given that the function throws at the moment, there may be other callers depending on the throw behaviour\r\n\r\nperhaps opts could be ``` { encoding = \"utf-16\", fallback = 'bytelength' }```",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T18:04:51Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793944500",
            "id": 1793944500,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7Wu0",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357844197,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793944500/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T18:07:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793944500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793947732"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793947732"
                }
            },
            "author_association": "MEMBER",
            "body": "> The point of the flag is essentially choosing between behaviour 3\r\n\r\nThe flag isn't a pattern that we want to continue. So unless it's a temporary bridge that we can't avoid, I'd suggest just throwing an error if that's how it was already done and we think changing that would break consumers.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T18:07:53Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793947732",
            "id": 1793947732,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7XhU",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357849692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793947732/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T18:07:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793947732",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1793953924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793953924"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> > The point of the flag is essentially choosing between behaviour 3\r\n> \r\n> The flag isn't a pattern that we want to continue. So unless it's a temporary bridge that we can't avoid, I'd suggest just throwing an error if that's how it was already done and we think changing that would break consumers.\r\n\r\nwe need to be able to suppress the throw and provide a fallback to be able to replace the ```vim.lsp.util._str_byteindex_enc()```\r\n\r\nWhat do you think about a fallback flag? I am trying to think of where we have a similar pattern for precedence",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T18:13:10Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1793953924",
            "id": 1793953924,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7ZCE",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2357859707,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793953924/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T18:13:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793953924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794138360"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794138360"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The closest I can think of is an ```on_error``` callback function that would be similar to ```on_init``` or ```on_attach```",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T19:45:11Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794138360",
            "id": 1794138360,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q8GD4",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2358169773,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794138360/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T19:45:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794138360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794199842"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794199842"
                }
            },
            "author_association": "MEMBER",
            "body": "What is the problem with using `pcall`?",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T20:42:03Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794199842",
            "id": 1794199842,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q8VEi",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2358270432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794199842/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T20:42:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794199842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794237082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794237082"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> What is the problem with using `pcall`?\r\n\r\nThe motivation for rewriting this was part of #25272 to ultimately be able to retire ```_str_byteindex_enc```\r\nWe don't want to have to call every LSP call to ```str_byteindex``` as that leads to overhead in callers code and  can mask errors.\r\n\r\n```\r\n                                                          *lua-error-handling*\r\nLua functions may throw |lua-errors| for exceptional (unexpected) failures,\r\nwhich you can handle with |pcall()|.\r\n```\r\n\r\nI would argue that an index being out of range isn't exceptional enough to throw\r\n\r\nI would think that a ```retval, errmsg``` return seems reasonable, although i don't know if this would be considered breaking\r\n",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T21:13:24Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794237082",
            "id": 1794237082,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q8eKa",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2358328624,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794237082/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T21:38:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794237082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794383431"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794383431"
                }
            },
            "author_association": "MEMBER",
            "body": "> The motivation for rewriting this was part of #25272\n\nI can't find anything in that issue that specifically mentions anything about avoiding pcall. All it says is \"Consider updating those functions to accept an encoding instead.\"\n\n> and can mask errors.\n\nWhat errors? The only error this can really throw is argument type, out of range or invalid encoding.\n\nOut of range seems exceptional to me. Using pcall seems like the most ideomatic route. This function just isn't complicated enough to justify doing anything else.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-09T23:22:19Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794383431",
            "id": 1794383431,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q9B5H",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2358543935,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794383431/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T23:28:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794383431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794773951"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794773951"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> > The motivation for rewriting this was part of #25272\r\n> \r\n> I can't find anything in that issue that specifically mentions anything about avoiding pcall. All it says is \"Consider updating those functions to accept an encoding instead.\"\r\n> \r\n\r\nBut there is a bounds check/fallback in the existing ```_str_byteindex_enc``` check here\r\nhttps://github.com/neovim/neovim/blob/8ef3dd3afa20024f439d8b7a69f316069c1909d3/runtime/lua/vim/lsp/util.lua#L174-L178\r\n\r\nAdditionally, the current bounds check isn't sufficient if you take the below code\r\n```lua\r\nstr = '世e'\r\n\r\nvim.print(vim.lsp.util._str_byteindex_enc(str, 1, 'utf-16'))\r\nvim.print(vim.lsp.util._str_byteindex_enc(str, 2, 'utf-16'))\r\n-- vim.print(vim.lsp.util._str_byteindex_enc(str, 3, 'utf-16'))\r\n-- vim.print(vim.lsp.util._str_byteindex_enc(str, 4, 'utf-16'))\r\nvim.print(vim.lsp.util._str_byteindex_enc(str, 5, 'utf-16'))\r\n```\r\n\r\nThe commented lines will currently throw, the others will return 2, 4, and 4 (and any index above 4 would return 4 too)\r\n\r\nso we would need to be able to use that bounds check in a higher level implementation too or we would just need another wrapper function",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-10T06:49:14Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794773951",
            "id": 1794773951,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q-hO_",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2359171192,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794773951/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-10T06:49:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794773951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794953147"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794953147"
                }
            },
            "author_association": "MEMBER",
            "body": "The function is called like 4 times. Why not just pull the bounds checking outside? Is it even completely necessary in each case?",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-10T08:21:35Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794953147",
            "id": 1794953147,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q_M-7",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2359477676,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794953147/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-10T08:21:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794953147",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1794968282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794968282"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I like the idea of stopping it throwing and moving it to a ```retval, errmsg``` return\r\n\r\nThen the lsp code can just use \r\n```lua\r\nvim.str_byteindex(string, 10, { encoding = 'utf-16' }) or #string\r\n```\r\n\r\nBut is that considered breaking for a function that used to throw previously",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-10T08:31:40Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1794968282",
            "id": 1794968282,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q_Qra",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2359501714,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794968282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-10T08:31:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1794968282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1795003709"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1795003709"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes. Please just use `pcall`, or just throw the error in the LSP code, or check for a valid index before calling the function.",
            "commit_id": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
            "created_at": "2024-10-10T08:55:10Z",
            "diff_hunk": "@@ -1772,6 +1756,29 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+vim.str_byteindex({s}, {index}, {opts})                  *vim.str_byteindex()*\n+    Convert UTF-32 or UTF-16 {index} to byte index. {opts} can be a table\n+    containing two properties:i\n+    • an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+    • an \"error\" property of true or false, if error is false then then an out\n+      of range index will return byte length instead of throwing an error.\n+\n+    {opts} can also be supplied as a boolean, true for utf-16 and false for\n+    utf-32. If {opts} is not supplied, it defaults to false (UTF-32). Returns\n+    the byte index.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}      (`string`)\n+      • {index}  (`integer`)\n+      • {opts}   (`boolean?|{ encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1795003709",
            "id": 1795003709,
            "in_reply_to_id": 1793722135,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q_ZU9",
            "original_commit_id": "cf2296dadb4cd47cd184e1a704995b17715292ea",
            "original_line": 1777,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2359559654,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1795003709/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-10T09:28:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1795003709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Okay, following my comment [here](https://github.com/neovim/neovim/pull/30560#discussion_r1789220692) about edge cases, and adding a failing test.\r\nI reverted back to the lua implementation for testing, \r\n\r\nI have taken all of the comments above onboard, and have implemented several performance improvements whilst still handling the edge cases around indexes and byte length and bfredls comments from Matrix around UTF-8 indices.\r\n\r\n1. Use faster vim validate\r\n2. Drop all string manipulations and use byte indicies\r\n3. Drop the vim script call out for charlen and track the loop via bytes\r\n\r\nUsing the below test code to run the loop 10 million times looking for the last character (worst case)\r\n```lua\r\nlocal str = \"jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\"\r\nlocal x = 10000000\r\nlocal total = 0\r\nwhile x > 0 do\r\n  x = x - 1\r\nlocal start = vim.uv.hrtime()\r\nvim.str_byteindex(str, 120, false)\r\nlocal stop = vim.uv.hrtime()\r\nlocal elapsed = stop - start\r\n  total = total + elapsed\r\nend\r\nlocal avg = total / 10000000\r\nprint(avg / 1000000)\r\n```\r\n\r\ncurrent master:\r\n0.0004058819099ms\r\n\r\nlua implementation:\r\n0.0003157661928\r\n\r\nso it is actually faster, and handles more edge cases and in my arguably easier to read/understand with the behaviour all in one place",
            "created_at": "2024-10-06T21:35:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/30560#issuecomment-2395593515",
            "id": 2395593515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
            "node_id": "IC_kwDOAPphoM6Oydsr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2395593515/reactions"
            },
            "updated_at": "2024-10-06T21:42:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2395593515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there any feedback on the latest findings. Apologies if I haven't made it clear.\r\n\r\nHowever, I think the lua \"wrapper\" around the existing C function can't deal with the edge cases sufficiently without pcalls, which isn't ideal.\r\n\r\nMy findings above seem to indicate that the performance in Lua is about the same/if not faster for most cases\n\nEdit: after sleeping I have an idea. Will submit a new PR later ",
            "created_at": "2024-10-08T22:30:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/30560#issuecomment-2400930685",
            "id": 2400930685,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
            "node_id": "IC_kwDOAPphoM6PG0t9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2400930685/reactions"
            },
            "updated_at": "2024-10-09T07:41:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2400930685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note that https://github.com/neovim/neovim/pull/30735 is a more incremental approach to this, which should probably be merged first, then this PR can be rebased on it, if needed.\r\n\r\n",
            "created_at": "2024-10-10T11:22:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/30560#issuecomment-2404824964",
            "id": 2404824964,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
            "node_id": "IC_kwDOAPphoM6PVreE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2404824964/reactions"
            },
            "updated_at": "2024-10-10T11:22:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2404824964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Do we still need this?",
            "created_at": "2024-12-17T12:20:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/30560#issuecomment-2548313471",
            "id": 2548313471,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
            "node_id": "IC_kwDOAPphoM6X5C1_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548313471/reactions"
            },
            "updated_at": "2024-12-17T12:20:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548313471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Do we still need this?\r\n\r\nIt is faster than the current implementation.\r\nI think Lewis found it was 15% faster, but then there is some discussion as to where we want the code to be\r\n\r\nBut the flexibility is already provided by the previous changes",
            "created_at": "2024-12-17T12:48:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/30560#issuecomment-2548374624",
            "id": 2548374624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
            "node_id": "IC_kwDOAPphoM6X5Rxg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548374624/reactions"
            },
            "updated_at": "2024-12-17T12:48:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548374624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "superseded by #30600",
            "created_at": "2025-01-31T22:25:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/30560#issuecomment-2628502057",
            "id": 2628502057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
            "node_id": "IC_kwDOAPphoM6cq8Ip",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628502057/reactions"
            },
            "updated_at": "2025-01-31T22:25:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2628502057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30560/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30560/commits",
    "created_at": "2024-09-28T19:22:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30560.diff",
    "draft": true,
    "head": {
        "label": "tris203:str_byte",
        "ref": "str_byte",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/tris203/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/tris203/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/tris203/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/tris203/neovim/branches{/branch}",
            "clone_url": "https://github.com/tris203/neovim.git",
            "collaborators_url": "https://api.github.com/repos/tris203/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/tris203/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/tris203/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/tris203/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/tris203/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/tris203/neovim/contributors",
            "created_at": "2024-09-01T13:29:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/tris203/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/tris203/neovim/downloads",
            "events_url": "https://api.github.com/repos/tris203/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/tris203/neovim/forks",
            "full_name": "tris203/neovim",
            "git_commits_url": "https://api.github.com/repos/tris203/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/tris203/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/tris203/neovim/git/tags{/sha}",
            "git_url": "git://github.com/tris203/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/tris203/neovim/hooks",
            "html_url": "https://github.com/tris203/neovim",
            "id": 850679366,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/tris203/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/tris203/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/tris203/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/tris203/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/tris203/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/tris203/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/tris203/neovim/merges",
            "milestones_url": "https://api.github.com/repos/tris203/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOMrRWRg",
            "notifications_url": "https://api.github.com/repos/tris203/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/tris203/neovim/pulls{/number}",
            "pushed_at": "2025-02-02T21:08:49Z",
            "releases_url": "https://api.github.com/repos/tris203/neovim/releases{/id}",
            "size": 301144,
            "ssh_url": "git@github.com:tris203/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/tris203/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/tris203/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/tris203/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/tris203/neovim/subscription",
            "svn_url": "https://github.com/tris203/neovim",
            "tags_url": "https://api.github.com/repos/tris203/neovim/tags",
            "teams_url": "https://api.github.com/repos/tris203/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/tris203/neovim/git/trees{/sha}",
            "updated_at": "2025-02-02T21:08:55Z",
            "url": "https://api.github.com/repos/tris203/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "9205799a6bcdf32ee0e18e6480d00f99aa616715",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
            "events_url": "https://api.github.com/users/tris203/events{/privacy}",
            "followers_url": "https://api.github.com/users/tris203/followers",
            "following_url": "https://api.github.com/users/tris203/following{/other_user}",
            "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/tris203",
            "id": 18444302,
            "login": "tris203",
            "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
            "organizations_url": "https://api.github.com/users/tris203/orgs",
            "received_events_url": "https://api.github.com/users/tris203/received_events",
            "repos_url": "https://api.github.com/users/tris203/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/tris203",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30560",
    "id": 2097202189,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM59AMQN",
    "number": 30560,
    "patch_url": "https://github.com/neovim/neovim/pull/30560.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30560/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/9205799a6bcdf32ee0e18e6480d00f99aa616715",
    "title": "refactor: convert str_byteindex to lua",
    "updated_at": "2025-01-31T22:25:27Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
        "events_url": "https://api.github.com/users/tris203/events{/privacy}",
        "followers_url": "https://api.github.com/users/tris203/followers",
        "following_url": "https://api.github.com/users/tris203/following{/other_user}",
        "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tris203",
        "id": 18444302,
        "login": "tris203",
        "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
        "organizations_url": "https://api.github.com/users/tris203/orgs",
        "received_events_url": "https://api.github.com/users/tris203/received_events",
        "repos_url": "https://api.github.com/users/tris203/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tris203",
        "user_view_type": "public"
    }
}