{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/22598/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/22598/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/22598"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/22598"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/22598/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/22daffeba1a114da5b4f6afce18ccb14be0f09e1"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5980,
            "forks_count": 5980,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1910,
            "open_issues_count": 1910,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-04-01T00:41:49Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 314758,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 88175,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-04-01T02:47:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 88175,
            "watchers_count": 88175,
            "web_commit_signoff_required": false
        },
        "sha": "d3ac5a342d27a3cbfca25a9e9b3f3496a77db68a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "## Problem:\r\n\r\n- No easy way to hook into:\r\n    - vim.paste\r\n    - vim.ui.x\r\n    - LSP request/response handlers. (No mention of \"before\" or \"after\" in `:help lsp`...)\r\n- Hooking into functions is not ergonomic.\r\n    - Not easy to remove temporary hooks (and restore the old one(s)).\r\n    - No visbility/tracing for debugging/performance/checkhealth.\r\n\r\n## Solution:\r\nIntroduce `vim.on_fun()`, a generic way to \"hook into\" any function before/after it is called.\r\n\r\nThis is a powerful escape-hatch to avoid needing to add formal events (autocmds) for every conceivable thing. And it leverages basic Lua features without becoming an \"inner platform\": it doesn't require consumers to buy-into the platform, they can continue to treat \"hooked\" functions like normal functions.\r\n\r\nExample:\r\n\r\n    vim.on_fun(vim.lsp.handlers, 'textDocument/definition', function(fn, args)\r\n      vim.notify('before, yay')\r\n      local rv = fn(unpack(args))\r\n      vim.notify('after, yay')\r\n      return rv\r\n    end)\r\n\r\nFixes #20568\r\nFixes #22075\r\nFixes #22323\r\nFixes #24229\r\nRelated: #13977\r\n\r\n## Todo\r\n\r\n- naming suggestions? (`on_fn`, `on_call`, ...)?\r\n- ✅  implement `:unhook()` ?\r\n- ✅  some way to have visibility into how many of these damn things are hooked into a given function? `on_fun()` has the same risk as \"autocmd spam\" where a user/plugin accidentally, redundantly registers a handler and overloads the editor.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1131852161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1131852161"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm surprised I couldn't find something like this in https://github.com/rxi/lume or https://github.com/luafun/luafun .\r\n\r\nDoes anyone have a util function like this in their plugins?",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-10T01:40:02Z",
            "diff_hunk": "@@ -1436,6 +1436,41 @@ notify_once({msg}, {level}, {opts})                        *vim.notify_once()*\n     Return: ~\n         (boolean) true if message was displayed, else false\n \n+on_fun({container}, {key}, {fn})                                *vim.on_fun()*\n+    Sets function `container[key]` to a new (wrapper) function that, if\n+    invoked, calls `fn()` before optionally calling the original (\"base\")\n+    function.",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1131852161",
            "id": 1131852161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5DdrGB",
            "original_commit_id": "7dd0d0e69c95ccb6f53636d4744db486173e5bab",
            "original_line": 1442,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1334051906,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1131852161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-10T01:40:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1131852161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1131885374"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1131885374"
                }
            },
            "author_association": "MEMBER",
            "body": "For what it's worth, there is `pack_len` and `unpack_len` in `vim.F` module that does this",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-10T02:25:22Z",
            "diff_hunk": "@@ -948,6 +948,63 @@ function vim._init_defaults()\n   vim._init_default_autocmds()\n end\n \n+table.pack = table.pack or function(...) return { n = select(\"#\", ...), ... } end",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1131885374",
            "id": 1131885374,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5DdzM-",
            "original_commit_id": "ff4ada7f90a8231d45fcb2970c5405ccdb9c152c",
            "original_line": 950,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1334079252,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1131885374/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-10T02:32:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1131885374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1132290893"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132290893"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we have a `compat.lua` module where we set `table.pack` (to match Lua 5.2)? Assuming it's \"less worse\" to use a common Lua 5.2 name instead of a custom name?",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-10T12:07:49Z",
            "diff_hunk": "@@ -948,6 +948,63 @@ function vim._init_defaults()\n   vim._init_default_autocmds()\n end\n \n+table.pack = table.pack or function(...) return { n = select(\"#\", ...), ... } end",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1132290893",
            "id": 1132290893,
            "in_reply_to_id": 1131885374,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5DfWNN",
            "original_commit_id": "ff4ada7f90a8231d45fcb2970c5405ccdb9c152c",
            "original_line": 950,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1334736350,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132290893/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-10T12:07:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132290893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1132684502"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132684502"
                }
            },
            "author_association": "MEMBER",
            "body": "💯 that's two steps closer to killing `F.lua` -- leaves only `vim.F.npcall` as actually used in our codebase, and that could just as well be moved directly under `vim`  to `_editor.lua`.",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-10T17:52:00Z",
            "diff_hunk": "@@ -948,6 +948,63 @@ function vim._init_defaults()\n   vim._init_default_autocmds()\n end\n \n+table.pack = table.pack or function(...) return { n = select(\"#\", ...), ... } end",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1132684502",
            "id": 1132684502,
            "in_reply_to_id": 1131885374,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Dg2TW",
            "original_commit_id": "ff4ada7f90a8231d45fcb2970c5405ccdb9c152c",
            "original_line": 950,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1335342915,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132684502/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-10T17:52:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132684502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1132691103"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132691103"
                }
            },
            "author_association": "MEMBER",
            "body": "But note that LuaJIT may be compiled with 5.2 extensions, in which case it already has `table.{un}pack`, so that would have to be checked first.\r\n\r\nIf we do go that route, we could also (conditionally) add useful extensions from openResty's LuaJIT2 like `table.isempty`, `table.isarray`, `table.nkeys`, and `table.clone` (which means we could deprecate `vim.tbl_isempty` etc., or at least offer LuaJIT2 users access to the compiled version).",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-10T17:55:46Z",
            "diff_hunk": "@@ -948,6 +948,63 @@ function vim._init_defaults()\n   vim._init_default_autocmds()\n end\n \n+table.pack = table.pack or function(...) return { n = select(\"#\", ...), ... } end",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1132691103",
            "id": 1132691103,
            "in_reply_to_id": 1131885374,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Dg36f",
            "original_commit_id": "ff4ada7f90a8231d45fcb2970c5405ccdb9c152c",
            "original_line": 950,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1335354189,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132691103/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-10T17:56:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1132691103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1133063161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1133063161"
                }
            },
            "author_association": "MEMBER",
            "body": "> If we do go that route, we could also (conditionally) add useful extensions from openResty's LuaJIT2 like table.isempty, table.isarray, table.nkeys, and table.clone (which means we could deprecate vim.tbl_isempty etc., or at least offer LuaJIT2 users access to the compiled version).\r\n\r\nSounds appealing. Would this play nicely with luals?",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-11T10:04:26Z",
            "diff_hunk": "@@ -948,6 +948,63 @@ function vim._init_defaults()\n   vim._init_default_autocmds()\n end\n \n+table.pack = table.pack or function(...) return { n = select(\"#\", ...), ... } end",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1133063161",
            "id": 1133063161,
            "in_reply_to_id": 1131885374,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5DiSv5",
            "original_commit_id": "ff4ada7f90a8231d45fcb2970c5405ccdb9c152c",
            "original_line": 950,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1335847220,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1133063161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-11T10:04:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1133063161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22598#discussion_r1133183196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22598"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1133183196"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of this \"control via return values\" approach, `fn()` could simply take the base function as the first arg, and the parameters are in a `table.pack()` table named `args`.  Then everything is much more natural.\r\n\r\n- pro/con of \"control via return values\" approach:\r\n    - pro: wrapper doesn't need to explicitly call the base function:\r\n      ```\r\n      vim.on_fun(vim, 'paste', function()\r\n        counter = counter + 1\r\n      end)\r\n      ```\r\n    - con: less obvious what's going on, more to explain in docs.\r\n    - con: if the wrapper wants to modify the args, it's less readable/obvious\r\n- pro/con of `fn(basefn, args)` approach:\r\n    - pro: easy and obvious how to modify args, \"cancel\", or \"go after\".\r\n    - pro: simpler docs and impl\r\n    - pro: wrapper funcs are future-proof if the base function adds more parameters!\r\n      ```\r\n      basefn(unpack(args))\r\n      ```\r\n",
            "commit_id": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
            "created_at": "2023-03-12T04:09:03Z",
            "diff_hunk": "@@ -2464,6 +2464,73 @@ parents({start})                                            *vim.fs.parents()*\n         (function) Iterator\n \n \n+==============================================================================\n+Lua module: func                                                    *lua-func*\n+\n+on_fun({container}, {key}, {fn})                           *vim.func.on_fun()*\n+    Sets function `container[key]` to a new (wrapper) function that calls\n+    `fn()` before optionally calling the original (\"base\") function.\n+\n+    The result of `fn()` decides how the base function is invoked. Given `fn()` : >lua",
            "html_url": "https://github.com/neovim/neovim/pull/22598#discussion_r1133183196",
            "id": 1133183196,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5DiwDc",
            "original_commit_id": "1decb7e78ec98305727b2eba03a4b970d2aa99aa",
            "original_line": 2475,
            "original_position": 62,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1335961919,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1133183196/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-03-12T04:25:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1133183196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't think this will solve https://github.com/neovim/neovim/issues/22075\r\n\r\n`vim.lsp.buf.rename` doesn't use the global handlers. Same with `vim.lsp.buf.code_action` and to fix https://github.com/neovim/neovim/issues/22318 we'll also need to change it to no longer call the global handlers.\r\n\r\nThe global handlers are fine for server-to-client requests, but for anything else they're not a good match and imho the vim.lsp.with mechanism was a mistake.\r\n\r\n- If you have multiple clients, a global handler is called once per client. That's usually not what you want as most operations require some sort of merge first\r\n\r\n- Many operations are not a simple request -> response pair, but involve several round-trips. Rename first calls `textDocument/prepareRename` and then `textDocument/rename`. Code actions involve `textDocument/codeAction`, optionally `codeAction/resolve` and then maybe a `workspace/executeCommand`. We need a mechanism that can deal with chained/sequenced actions.\r\n\r\nI don't mind having a generic `on_fun` monkey-patching mechanism  but I am fairly sure it's the wrong solution for hooking into LSP response handlers.\r\n\r\n\r\nI think instead we should:\r\n\r\n- Have some kind of future/promise/async-thunk/whatever (relates a bit to https://github.com/neovim/neovim/issues/19624) that each of the `vim.lsp.buf` methods returns that allows to\r\n  a) cancel\r\n  b) use the _synthesized_ result of the operation by being able to attach an additional callback or map the result. This would address https://github.com/neovim/neovim/pull/18372 and lots of other feature requests.\r\n  c) await (coroutine aware) or get(blocking) the result.\r\n\r\n  I already have some local version where I played around with this a bit. There I also have a new `vim.lsp.request` that would replace `buf_request`, `buf_request_all` and `buf_request_sync` and also solve the mixed-encoding warnings.\r\n\r\n- Maybe add a `LspResponse` autocmd that's triggered whenever a response is received with `data` set to the payload as a generic listener mechanism.\r\n\r\n",
            "created_at": "2023-03-10T07:07:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-1463367606",
            "id": 1463367606,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM5XOTe2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463367606/reactions"
            },
            "updated_at": "2023-03-10T07:09:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463367606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mfussenegger great insight, thank you!\r\n\r\n> I don't think this will solve #22075 , `vim.lsp.buf.rename` doesn't use the global handlers.\r\n\r\nOk. `on_fun` could be mildly useful for use-cases like \"I want to save all files after rename\" ...\r\n\r\n```\r\n  vim.on_fun(vim.lsp.handlers, 'textDocument/rename', function(...)\r\n    return function()\r\n      vim.cmd.wall()\r\n    end, ...\r\n  end)\r\n```\r\n...but that is arguably better achieved by creating a plain old function:\r\n\r\n```\r\n  function my_rename()\r\n    vim.lsp.buf.rename()\r\n    vim.cmd.wall()\r\n  end\r\n```\r\n\r\n\r\n> The global handlers are fine for server-to-client requests, but for anything else they're not a good match and imho the vim.lsp.with mechanism was a mistake.\r\n\r\nGreat insight. I will see if I can use that to improve the docs.\r\n\r\nYears ago when I suggested `vim.lsp.with` I was imagining something more like `vim.on_fun()`. But it still suffers from the lack of the \"synthesized\" semantics, as you mentioned.\r\n\r\n> I also have a new `vim.lsp.request` that would replace `buf_request`, `buf_request_all` and `buf_request_sync` and also solve the mixed-encoding warnings.\r\n\r\n💯 \r\n\r\n",
            "created_at": "2023-03-10T12:21:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-1463729166",
            "id": 1463729166,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM5XPrwO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463729166/reactions"
            },
            "updated_at": "2023-03-10T15:44:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463729166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> and imho the vim.lsp.with mechanism was a mistake.\r\n\r\nI gotta retract that statement,  or at least refine it: I think for requests that are pushed from servers it's fine. But using it as mechanism to configure user invoked functions is not ideal and I don't see a way to make it generally work for multiple clients or multi-step request sequences. \r\n\r\nThat btw. wasn't meant to say I'm against the vim.on_func. It looks like it addresses a separate use-case - although with some overlap. And it's probably an improvement over the lsp.with lsp specific version.\r\n\r\n",
            "created_at": "2023-03-10T14:41:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-1463902163",
            "id": 1463902163,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM5XQV_T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463902163/reactions"
            },
            "updated_at": "2023-03-10T14:41:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463902163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> wasn't meant to say I'm against the vim.on_func. It looks like it addresses a separate use-case\r\n\r\nyeah, the parameters you have laid out here are extremely helpful, for the LSP use-case. There are other use-cases like `vim.paste` and `vim.ui` where we currently don't have a great answer for \"hooking into without overriding\", so it seems like we still need a hook mechanism for those cases.",
            "created_at": "2023-03-10T15:42:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-1463986979",
            "id": 1463986979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM5XQqsj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463986979/reactions"
            },
            "updated_at": "2023-03-10T15:42:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1463986979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "**Update**: There is a lot of faff below. I had a lot of things confused in my mind, like asynchrony and concurrency. As well as the way the `vim.uv` (luv) functions interact with the Neovim scheduler when called in blocking fashion (without callback). One of the \"points\" still stands though: asynchronous APIs that don't provide a way to signal completion (e.g. via a callback)  are not as useful as they can be. The things done to get a synchronous version of `vim.lsp.buf.code_action()` in  #31176 should not be necessary.\r\n\r\nOld post:\r\n \r\n> 1. Synchronous (this may not block Neovim I think, if the synchronous function is tied into the event loop).\r\n> 2. Synchronous, but **becomes asynchronous** when optional `cb` parameter is passed. Example:  the luv API.\r\n> 3. Synchronous, but **becomes asynchronous** when called from a non-main coroutine thread (`coroutine.running() != nil`). (TODO: find an example.)\r\n> 4. Asynchronous, without callback parameter nor coroutine awareness. Example: `vim.lsp.buf.code_action()`, it is problematic that one can't determine when it is done. Leading to #28004, #25259, #31176, and likely others.\r\n> 5. Asynchronous, with a callback parameter. Example: `vim.lsp.rpc.request()`.\r\n> 6. Asynchronous, but yields when run from a non-main coroutine thread.\r\n> \r\n> Case 4 is the problematic one. I was wondering if there was already a more concrete plan of improving these APIs?  Options as I see them (not exhaustive):\r\n> \r\n>  - They could be turned into case 5 (add optional `cb` argument), but that is looked upon unfavorably (https://github.com/neovim/neovim/issues/25259#issuecomment-1727336789). \r\n>  - They could also be turned into case 6 (async with coroutine support), likely without breaking (too many) callers.\r\n>  - New APIs could be designed matching the other cases, and the existing ones deprecated.\r\n>  - `vim.func.on_func()`, though I dont' know how this would work.\r\n> \r\n> It's not clear to me whether the coroutine-enhanced variants (case 6) can express equivalent things as case 5. In the following example, the two prints happen concurrently using a callback-style API, but I don't see a clean way to structure the code to print concurrently using a coroutine-style API (unsure if that's desired or not):\r\n> \r\n> ```lua\r\n> -- callback style\r\n> local done = false\r\n> callback_api(function(op) \r\n>   print(\"op\", op, \"is done!\")\r\n>   done = true\r\n> end)\r\n> print(\"we happily continue processing here\") -- This runs concurrently.\r\n> vim.wait(1000000, function() done == true end)\r\n> ```\r\n> \r\n> While in a coroutine-enhanced API:\r\n> \r\n> ```lua\r\n> -- In main thread.\r\n> local op = coroutine_api() -- this is synchronous, no opportunity to print something while waiting for  the result.\r\n> print(\"op\", op, \"is done!\")\r\n> \r\n> -- In coroutine\r\n> coroutine.wrap(function()\r\n>   local op = coroutine_api() -- this looks synchronous\r\n>   print(\"op\", op, \"is done!\")\r\n> end)()\r\n> print(\"this does not run until the coroutine, it does not run concurrently\") \r\n> ```\r\n> \r\n> One might use `vim.schedule`:\r\n> \r\n> ```lua\r\n> vim.schedule(coroutine.wrap(function()\r\n>   local op = coroutine_api() -- this looks synchronous\r\n>   print(\"op\", op, \"is done!\")\r\n> end))\r\n> print(\"we happily continue processing here\") -- This runs concurrently.\r\n> ```\r\n> \r\n> Though it is not clear that this is either more intuitive or easier to read than the callback-style. Perhaps it is when there are a lot of asynchronous operations involved. Also thinking about it, in which way would `vim.schedule`+`coroutine.wrap` be different from `vim.schedule`'ing a synchronous API, as long as that synchronous API blocks in the Neovim event loop?",
            "created_at": "2024-11-12T16:36:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2471014974",
            "id": 2471014974,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6TSLI-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2471014974/reactions"
            },
            "updated_at": "2024-11-12T21:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2471014974",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The things done to get a synchronous version of `vim.lsp.buf.code_action()` in #31176 should not be necessary.\r\n\r\n@aktau thanks for your thoughts. See https://github.com/neovim/neovim/issues/31206 and https://github.com/neovim/neovim/issues/19624",
            "created_at": "2024-11-15T23:21:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2480117924",
            "id": 2480117924,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6T05ik",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2480117924/reactions"
            },
            "updated_at": "2024-11-15T23:21:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2480117924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Doesn't this provide the same functionality as an `autocmd`? It sounds like the same thing can be achieved with new autocommands.\r\n\r\nE.g.: instead of:\r\n\r\n```lua\r\nvim.on_fun(vim.lsp.handlers, 'textDocument/definition', my_func)\r\n```\r\n\r\nUse:\r\n\r\n```lua\r\nvim.api.nvim_create_autocmd(\"LspDefinition\", {\r\n  callback = my_func,\r\n})\r\n```\r\n\r\nUsing the autocmd machinery means that we also get pattern matching for this.",
            "created_at": "2024-12-21T15:14:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2558148473",
            "id": 2558148473,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6Yej95",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558148473/reactions"
            },
            "updated_at": "2024-12-21T16:41:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558148473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/730811?v=4",
                "events_url": "https://api.github.com/users/WhyNotHugo/events{/privacy}",
                "followers_url": "https://api.github.com/users/WhyNotHugo/followers",
                "following_url": "https://api.github.com/users/WhyNotHugo/following{/other_user}",
                "gists_url": "https://api.github.com/users/WhyNotHugo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/WhyNotHugo",
                "id": 730811,
                "login": "WhyNotHugo",
                "node_id": "MDQ6VXNlcjczMDgxMQ==",
                "organizations_url": "https://api.github.com/users/WhyNotHugo/orgs",
                "received_events_url": "https://api.github.com/users/WhyNotHugo/received_events",
                "repos_url": "https://api.github.com/users/WhyNotHugo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/WhyNotHugo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/WhyNotHugo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/WhyNotHugo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Doesn't this provide the same functionality as an `autocmd`? It sounds like the same thing can be achieved with new autocommands.\r\n\r\nVery similar. In fact I plan to make a full proposal that explains how autocmds (events) can cover almost any \"scoped\" event. If the events machinery is fast, then I agree that a \"function call\" event could make sense. And that avoids having to add buf/win/tab scopes to `on_func` ...",
            "created_at": "2024-12-21T16:41:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2558169923",
            "id": 2558169923,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6YepND",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558169923/reactions"
            },
            "updated_at": "2024-12-21T16:41:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2558169923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This is basically Emacs' \"advice\" system. I suggest looking at it for inspiration\r\n<https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html>\r\n\r\nIt has [many combinators](<https://www.gnu.org/software/emacs/manual/html_node/elisp/Advice-Combinators.html>\r\n). In addition to `:before` and `:after`, there is \r\n\r\n- `:before`\r\n- `:after`\r\n- `:override`\r\n- `:around`\r\n- `:before-while`\r\n- `:before-until`\r\n- `:after-while`\r\n- `:after-until`\r\n- `:filter-args`\r\n- `:filter-return`\r\n\r\n> ✅ implement :unhook() ?\r\n\r\nEmacs has `M-x advice-remove` which prompts for a function to remove\r\n\r\n> ✅ some way to have visibility into how many of these damn things are hooked into a given function? on_fun() has the same risk as \"autocmd spam\" where a user/plugin accidentally, redundantly registers a handler and overloads the editor.\r\n\r\nEmacs has `advice-mapc` for iterating over advices in a function\r\n",
            "created_at": "2025-03-30T10:42:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2764496939",
            "id": 2764496939,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6kxuAr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764496939/reactions"
            },
            "updated_at": "2025-03-30T10:42:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764496939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This is basically Emacs' \"advice\" system. I suggest looking at it for inspiration\r\n\r\nI did :) And yes, it requires Nvim Lua stdlib to have better \"functional\" utils, which are pretty lacking currently (and I've had pushback like \"why would you need that?\" when I propose utils for traversing trees of data...).",
            "created_at": "2025-03-30T14:22:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2764586002",
            "id": 2764586002,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6kyDwS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764586002/reactions"
            },
            "updated_at": "2025-03-30T15:10:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764586002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I've had pushback like \"why would you need that?\" when I propose utils for traversing trees of data\r\n\r\nDo you have any issues in mind? ",
            "created_at": "2025-03-30T17:50:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2764672960",
            "id": 2764672960,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6kyY_A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764672960/reactions"
            },
            "updated_at": "2025-03-30T17:50:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764672960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/issues/28449 is the bare minimum. I don't think there's a tracking issue for \"nested data traversal\", since we don't even have the basics yet.",
            "created_at": "2025-03-30T18:49:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/22598#issuecomment-2764695359",
            "id": 2764695359,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
            "node_id": "IC_kwDOAPphoM6kyec_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764695359/reactions"
            },
            "updated_at": "2025-03-30T18:49:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764695359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/22598/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/22598/commits",
    "created_at": "2023-03-10T01:34:41Z",
    "diff_url": "https://github.com/neovim/neovim/pull/22598.diff",
    "draft": true,
    "head": {
        "label": "justinmk:lsp",
        "ref": "lsp",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/justinmk/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/justinmk/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/justinmk/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/justinmk/neovim/branches{/branch}",
            "clone_url": "https://github.com/justinmk/neovim.git",
            "collaborators_url": "https://api.github.com/repos/justinmk/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/justinmk/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/justinmk/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/justinmk/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/justinmk/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/justinmk/neovim/contributors",
            "created_at": "2014-02-28T23:17:54Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/justinmk/neovim/deployments",
            "description": "somewhere in todo.txt",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/justinmk/neovim/downloads",
            "events_url": "https://api.github.com/repos/justinmk/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/justinmk/neovim/forks",
            "full_name": "justinmk/neovim",
            "git_commits_url": "https://api.github.com/repos/justinmk/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/justinmk/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/justinmk/neovim/git/tags{/sha}",
            "git_url": "git://github.com/justinmk/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "http://neovim.io",
            "hooks_url": "https://api.github.com/repos/justinmk/neovim/hooks",
            "html_url": "https://github.com/justinmk/neovim",
            "id": 17302877,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/justinmk/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/justinmk/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/justinmk/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/justinmk/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/justinmk/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/justinmk/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/justinmk/neovim/merges",
            "milestones_url": "https://api.github.com/repos/justinmk/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNzMwMjg3Nw==",
            "notifications_url": "https://api.github.com/repos/justinmk/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/justinmk/neovim/pulls{/number}",
            "pushed_at": "2025-03-31T14:12:00Z",
            "releases_url": "https://api.github.com/repos/justinmk/neovim/releases{/id}",
            "size": 307419,
            "ssh_url": "git@github.com:justinmk/neovim.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/justinmk/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/justinmk/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/justinmk/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/justinmk/neovim/subscription",
            "svn_url": "https://github.com/justinmk/neovim",
            "tags_url": "https://api.github.com/repos/justinmk/neovim/tags",
            "teams_url": "https://api.github.com/repos/justinmk/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/justinmk/neovim/git/trees{/sha}",
            "updated_at": "2025-01-13T16:10:06Z",
            "url": "https://api.github.com/repos/justinmk/neovim",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "22daffeba1a114da5b4f6afce18ccb14be0f09e1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/22598",
    "id": 1270508252,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22598",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5Lumrc",
    "number": 22598,
    "patch_url": "https://github.com/neovim/neovim/pull/22598.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/22598/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/22daffeba1a114da5b4f6afce18ccb14be0f09e1",
    "title": "feat(lua): vim.func.on_func()",
    "updated_at": "2025-03-30T18:49:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/22598",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}