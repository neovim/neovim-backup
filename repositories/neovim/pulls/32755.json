{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32755/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32755/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/32755"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32755"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32755/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32755"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/09b750d1f6789e270cbe7173ce1cd846110a0dbe"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5926,
            "forks_count": 5926,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1872,
            "open_issues_count": 1872,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-03-11T01:51:56Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 311541,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 87036,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-03-11T02:33:20Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 87036,
            "watchers_count": 87036,
            "web_commit_signoff_required": false
        },
        "sha": "8da59060c6dc9899d1f66d1c9b501b80496cc2e8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Resolves: #32753 \r\n\r\nThe multiqueue_process_events function drains a given multiqueue until it is empty. If an event on that queue reschedules itself (or another event) onto the same queue, then the queue will never drain and an infinite loop occurs.\r\n\r\nThis was happening in the terminal when the shell emitted an OSC sequence, triggering a TermRequest event. The TermRequest event is rescheduled because the terminal has pending scrollback (we do this because the TermRequest event includes the buffer row and column in the event data, and those values are invalid while there is pending buffer scrollback).\r\n\r\nThe pending buffer scrollback is not cleared until the terminal is refreshed. This happens on a timer, which requires the libuv event loop to turn. Under \"normal\" circumstances this all works because when user input arrives, we stop draining the main event queue and continue with the libuv event loop, which runs the timer, refreshes the terminal, and allows the TermRequest event to proceed without rescheduling itself.\r\n\r\nHowever, when a function like vim.wait() is used, we *continuously* drain the main event queue until it is empty, never stopping for user input. This means the libuv timer never runs and the terminal never gets refreshed, so emit_termrequest continously reschedules itself onto the same event queue, causing an infinite loop.\r\n\r\nThe solution in this commit is to use a separate \"pending\" event queue in the terminal which is where events that require a terminal refresh are temporarily placed. This queue is drained after a terminal refresh and events are copied back onto the main queue. This prevents infinite loops since the main event queue will always be able to properly drain.",
    "closed_at": "2025-03-07T18:16:39Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32755#discussion_r1984833669"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32755"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1984833669"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    MultiQueue *events;   ///< Events waiting for refresh.\r\n```",
            "commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "created_at": "2025-03-07T10:33:28Z",
            "diff_hunk": "@@ -178,6 +178,7 @@ struct terminal {\n     bool resize;          ///< pending width/height\n     bool cursor;          ///< pending cursor shape or blink change\n     StringBuilder *send;  ///< When there is a pending TermRequest autocommand, block and store input.\n+    MultiQueue *events;   ///< Separate queue for events waiting for refresh",
            "html_url": "https://github.com/neovim/neovim/pull/32755#discussion_r1984833669",
            "id": 1984833669,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52TiiF",
            "original_commit_id": "acf1a3b6d6722c460335a1625c87513d577b1da6",
            "original_line": 181,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/terminal.c",
            "position": null,
            "pull_request_review_id": 2666873887,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32755",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1984833669/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-07T10:33:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1984833669",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32755#discussion_r1984836854"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32755"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1984836854"
                }
            },
            "author_association": "MEMBER",
            "body": "This pattern might be useful in more places, WDYT about adding `multiqueue_move_events` ?",
            "commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "created_at": "2025-03-07T10:35:57Z",
            "diff_hunk": "@@ -2029,6 +2039,12 @@ static void refresh_terminal(Terminal *term)\n \n   int ml_added = buf->b_ml.ml_line_count - ml_before;\n   adjust_topline(term, buf, ml_added);\n+\n+  // Copy pending events back to the main event queue\n+  while (!multiqueue_empty(term->pending.events)) {\n+    Event event = multiqueue_get(term->pending.events);\n+    multiqueue_put_event(main_loop.events, event);",
            "html_url": "https://github.com/neovim/neovim/pull/32755#discussion_r1984836854",
            "id": 1984836854,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52TjT2",
            "original_commit_id": "acf1a3b6d6722c460335a1625c87513d577b1da6",
            "original_line": 2046,
            "original_position": 52,
            "original_start_line": 2044,
            "path": "src/nvim/terminal.c",
            "position": null,
            "pull_request_review_id": 2666879097,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32755",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1984836854/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-07T10:35:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1984836854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32755#discussion_r1985379140"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32755"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985379140"
                }
            },
            "author_association": "MEMBER",
            "body": "Yea, we use it in at least one other place already. I'll add that.",
            "commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "created_at": "2025-03-07T16:42:54Z",
            "diff_hunk": "@@ -2029,6 +2039,12 @@ static void refresh_terminal(Terminal *term)\n \n   int ml_added = buf->b_ml.ml_line_count - ml_before;\n   adjust_topline(term, buf, ml_added);\n+\n+  // Copy pending events back to the main event queue\n+  while (!multiqueue_empty(term->pending.events)) {\n+    Event event = multiqueue_get(term->pending.events);\n+    multiqueue_put_event(main_loop.events, event);",
            "html_url": "https://github.com/neovim/neovim/pull/32755#discussion_r1985379140",
            "id": 1985379140,
            "in_reply_to_id": 1984836854,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM52VntE",
            "original_commit_id": "acf1a3b6d6722c460335a1625c87513d577b1da6",
            "original_line": 2046,
            "original_position": 52,
            "original_start_line": 2044,
            "path": "src/nvim/terminal.c",
            "position": null,
            "pull_request_review_id": 2667804719,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32755",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985379140/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-07T16:42:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985379140",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32755#discussion_r1985431828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32755"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985431828"
                }
            },
            "author_association": "MEMBER",
            "body": "I ordered the arguments the same way as `memcpy`, `memmove`, etc. If anyone feels strongly about reversing the order let me know (putting `src` first).",
            "commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "created_at": "2025-03-07T17:23:24Z",
            "diff_hunk": "@@ -140,6 +140,16 @@ void multiqueue_put_event(MultiQueue *self, Event event)\n   }\n }\n \n+/// Move events from src to dest.\n+void multiqueue_move_events(MultiQueue *dest, MultiQueue *src)",
            "html_url": "https://github.com/neovim/neovim/pull/32755#discussion_r1985431828",
            "id": 1985431828,
            "line": 144,
            "node_id": "PRRC_kwDOAPphoM52V0kU",
            "original_commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "original_line": 144,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/event/multiqueue.c",
            "position": 5,
            "pull_request_review_id": 2667895323,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32755",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985431828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-07T17:23:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985431828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32755#discussion_r1985433573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32755"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985433573"
                }
            },
            "author_association": "MEMBER",
            "body": "This test successfully fails (hangs) on master.",
            "commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "created_at": "2025-03-07T17:24:44Z",
            "diff_hunk": "@@ -333,96 +333,123 @@ describe(':terminal buffer', function()\n     command('bdelete!')\n   end)\n \n-  it('emits TermRequest events #26972', function()\n-    local term = api.nvim_open_term(0, {})\n-    local termbuf = api.nvim_get_current_buf()\n-\n-    -- Test that <abuf> is the terminal buffer, not the current buffer\n-    command('au TermRequest * let g:termbuf = +expand(\"<abuf>\")')\n-    command('wincmd p')\n-\n-    -- cwd will be inserted in a file URI, which cannot contain backs\n-    local cwd = t.fix_slashes(fn.getcwd())\n-    local parent = cwd:match('^(.+/)')\n-    local expected = '\\027]7;file://host' .. parent\n-    api.nvim_chan_send(term, string.format('%s\\027\\\\', expected))\n-    eq(expected, eval('v:termrequest'))\n-    eq(termbuf, eval('g:termbuf'))\n-  end)\n-\n-  it('emits TermRequest events for APC', function()\n-    local term = api.nvim_open_term(0, {})\n-\n-    -- cwd will be inserted in a file URI, which cannot contain backs\n-    local cwd = t.fix_slashes(fn.getcwd())\n-    local parent = cwd:match('^(.+/)')\n-    local expected = '\\027_Gfile://host' .. parent\n-    api.nvim_chan_send(term, string.format('%s\\027\\\\', expected))\n-    eq(expected, eval('v:termrequest'))\n-  end)\n-\n-  it('TermRequest synchronization #27572', function()\n-    command('autocmd! nvim.terminal TermRequest')\n-    local term = exec_lua([[\n-      _G.input = {}\n-      local term = vim.api.nvim_open_term(0, {\n-        on_input = function(_, _, _, data)\n-          table.insert(_G.input, data)\n-        end,\n-        force_crlf = false,\n-      })\n-      vim.api.nvim_create_autocmd('TermRequest', {\n-        callback = function(args)\n-          if args.data.sequence == '\\027]11;?' then\n-            table.insert(_G.input, '\\027]11;rgb:0000/0000/0000\\027\\\\')\n+  describe('TermRequest', function()\n+    it('emits events #26972', function()\n+      local term = api.nvim_open_term(0, {})\n+      local termbuf = api.nvim_get_current_buf()\n+\n+      -- Test that <abuf> is the terminal buffer, not the current buffer\n+      command('au TermRequest * let g:termbuf = +expand(\"<abuf>\")')\n+      command('wincmd p')\n+\n+      -- cwd will be inserted in a file URI, which cannot contain backs\n+      local cwd = t.fix_slashes(fn.getcwd())\n+      local parent = cwd:match('^(.+/)')\n+      local expected = '\\027]7;file://host' .. parent\n+      api.nvim_chan_send(term, string.format('%s\\027\\\\', expected))\n+      eq(expected, eval('v:termrequest'))\n+      eq(termbuf, eval('g:termbuf'))\n+    end)\n+\n+    it('emits events for APC', function()\n+      local term = api.nvim_open_term(0, {})\n+\n+      -- cwd will be inserted in a file URI, which cannot contain backs\n+      local cwd = t.fix_slashes(fn.getcwd())\n+      local parent = cwd:match('^(.+/)')\n+      local expected = '\\027_Gfile://host' .. parent\n+      api.nvim_chan_send(term, string.format('%s\\027\\\\', expected))\n+      eq(expected, eval('v:termrequest'))\n+    end)\n+\n+    it('synchronization #27572', function()\n+      command('autocmd! nvim.terminal TermRequest')\n+      local term = exec_lua([[\n+        _G.input = {}\n+        local term = vim.api.nvim_open_term(0, {\n+          on_input = function(_, _, _, data)\n+            table.insert(_G.input, data)\n+          end,\n+          force_crlf = false,\n+        })\n+        vim.api.nvim_create_autocmd('TermRequest', {\n+          callback = function(args)\n+            if args.data.sequence == '\\027]11;?' then\n+              table.insert(_G.input, '\\027]11;rgb:0000/0000/0000\\027\\\\')\n+            end\n           end\n-        end\n-      })\n-      return term\n-    ]])\n-    api.nvim_chan_send(term, '\\027]11;?\\007\\027[5n\\027]11;?\\007\\027[5n')\n-    eq({\n-      '\\027]11;rgb:0000/0000/0000\\027\\\\',\n-      '\\027[0n',\n-      '\\027]11;rgb:0000/0000/0000\\027\\\\',\n-      '\\027[0n',\n-    }, exec_lua('return _G.input'))\n-  end)\n-\n-  it('TermRequest includes cursor position #31609', function()\n-    command('autocmd! nvim.terminal TermRequest')\n-    local screen = Screen.new(50, 10)\n-    local term = exec_lua([[\n-      _G.cursor = {}\n-      local term = vim.api.nvim_open_term(0, {})\n-      vim.api.nvim_create_autocmd('TermRequest', {\n-        callback = function(args)\n-          _G.cursor = args.data.cursor\n-        end\n-      })\n-      return term\n-    ]])\n-    -- Enter terminal mode so that the cursor follows the output\n-    feed('a')\n+        })\n+        return term\n+      ]])\n+      api.nvim_chan_send(term, '\\027]11;?\\007\\027[5n\\027]11;?\\007\\027[5n')\n+      eq({\n+        '\\027]11;rgb:0000/0000/0000\\027\\\\',\n+        '\\027[0n',\n+        '\\027]11;rgb:0000/0000/0000\\027\\\\',\n+        '\\027[0n',\n+      }, exec_lua('return _G.input'))\n+    end)\n \n-    -- Put some lines into the scrollback. This tests the conversion from terminal line to buffer\n-    -- line.\n-    api.nvim_chan_send(term, string.rep('>\\n', 20))\n-    screen:expect([[\n-      >                                                 |*8\n-      ^                                                  |\n-      {5:-- TERMINAL --}                                    |\n-    ]])\n+    it('includes cursor position #31609', function()\n+      command('autocmd! nvim.terminal TermRequest')\n+      local screen = Screen.new(50, 10)\n+      local term = exec_lua([[\n+        _G.cursor = {}\n+        local term = vim.api.nvim_open_term(0, {})\n+        vim.api.nvim_create_autocmd('TermRequest', {\n+          callback = function(args)\n+            _G.cursor = args.data.cursor\n+          end\n+        })\n+        return term\n+      ]])\n+      -- Enter terminal mode so that the cursor follows the output\n+      feed('a')\n \n-    -- Emit an OSC escape sequence\n-    api.nvim_chan_send(term, 'Hello\\nworld!\\027]133;D\\027\\\\')\n-    screen:expect([[\n-      >                                                 |*7\n-      Hello                                             |\n-      world!^                                            |\n-      {5:-- TERMINAL --}                                    |\n-    ]])\n-    eq({ 22, 6 }, exec_lua('return _G.cursor'))\n+      -- Put some lines into the scrollback. This tests the conversion from terminal line to buffer\n+      -- line.\n+      api.nvim_chan_send(term, string.rep('>\\n', 20))\n+      screen:expect([[\n+        >                                                 |*8\n+        ^                                                  |\n+        {5:-- TERMINAL --}                                    |\n+      ]])\n+\n+      -- Emit an OSC escape sequence\n+      api.nvim_chan_send(term, 'Hello\\nworld!\\027]133;D\\027\\\\')\n+      screen:expect([[\n+        >                                                 |*7\n+        Hello                                             |\n+        world!^                                            |\n+        {5:-- TERMINAL --}                                    |\n+      ]])\n+      eq({ 22, 6 }, exec_lua('return _G.cursor'))\n+    end)\n+\n+    it('does not cause hang in vim.wait() #32753', function()\n+      local screen = Screen.new(50, 10)\n+\n+      exec_lua(function()\n+        local term = vim.api.nvim_open_term(0, {})\n+\n+        -- Write OSC sequence with pending scrollback. TermRequest will\n+        -- reschedule itself onto an event queue until the pending scrollback is\n+        -- processed (i.e. the terminal is refreshed).\n+        vim.api.nvim_chan_send(term, string.format('%s\\027]133;;\\007', string.rep('a\\n', 100)))\n+\n+        -- vim.wait() drains the event queue. The terminal won't be refreshed\n+        -- until the event queue is empty. This test ensures that TermRequest\n+        -- does not continuously reschedule itself onto the same event queue,\n+        -- causing an infinite loop.\n+        vim.wait(100)\n+      end)\n+\n+      screen:expect([[\n+        ^a                                                 |\n+        a                                                 |*8\n+                                                          |\n+      ]])\n+    end)",
            "html_url": "https://github.com/neovim/neovim/pull/32755#discussion_r1985433573",
            "id": 1985433573,
            "line": 452,
            "node_id": "PRRC_kwDOAPphoM52V0_l",
            "original_commit_id": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
            "original_line": 452,
            "original_position": 207,
            "original_start_line": 429,
            "path": "test/functional/terminal/buffer_spec.lua",
            "position": 207,
            "pull_request_review_id": 2667897782,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32755",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985433573/reactions"
            },
            "side": "RIGHT",
            "start_line": 429,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-03-07T17:24:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1985433573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Add a test?",
            "created_at": "2025-03-07T00:09:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/32755#issuecomment-2705217104",
            "id": 2705217104,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32755",
            "node_id": "IC_kwDOAPphoM6hPlZQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2705217104/reactions"
            },
            "updated_at": "2025-03-07T00:09:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2705217104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Problem:\r\n\r\nWhen a function like `vim.wait()` is used, we continuously drain the main event queue until it is empty, never stopping for user input. This means the libuv timer never runs and the terminal never gets refreshed, so `emit_termrequest` continously reschedules itself onto the same event queue, causing an infinite loop.\r\n\r\nAnalysis:\r\n\r\n...\r\n\r\nSolution:\r\n\r\nUse a separate \"pending\" event queue, where events that require a terminal refresh are temporarily placed. Drain this queue after a terminal refresh and events are copied back onto the main queue. This prevents infinite loops since the main event queue will always be able to properly drain.",
            "created_at": "2025-03-07T10:40:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/32755#issuecomment-2706116368",
            "id": 2706116368,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32755",
            "node_id": "IC_kwDOAPphoM6hTA8Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2706116368/reactions"
            },
            "updated_at": "2025-03-07T10:40:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2706116368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32755/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/32755/commits",
    "created_at": "2025-03-06T17:18:57Z",
    "diff_url": "https://github.com/neovim/neovim/pull/32755.diff",
    "draft": false,
    "head": {
        "label": "gpanders:push-rnmpvvwxrtxo",
        "ref": "push-rnmpvvwxrtxo",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2025-03-10T20:30:05Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 304204,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2025-01-11T19:57:11Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "09b750d1f6789e270cbe7173ce1cd846110a0dbe",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/32755",
    "id": 2376842267,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32755",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "built-in :terminal or :shell",
            "id": 212696822,
            "name": "terminal",
            "node_id": "MDU6TGFiZWwyMTI2OTY4MjI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/terminal"
        }
    ],
    "locked": false,
    "merge_commit_sha": "3d49c55d3c33a243f4236cf57b179608c288b145",
    "merged_at": "2025-03-07T18:16:39Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 226,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2025-03-15T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 30,
        "state": "open",
        "title": "0.11",
        "updated_at": "2025-03-10T21:49:00Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "PR_kwDOAPphoM6Nq7wb",
    "number": 32755,
    "patch_url": "https://github.com/neovim/neovim/pull/32755.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/32755/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/09b750d1f6789e270cbe7173ce1cd846110a0dbe",
    "title": "fix(terminal): avoid rescheduling events onto the same queue",
    "updated_at": "2025-03-07T18:20:47Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/32755",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders",
        "user_view_type": "public"
    }
}