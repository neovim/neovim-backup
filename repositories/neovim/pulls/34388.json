{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34388/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34388/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34388"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34388"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34388/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6b1c3b67cf9bb4446af13206e638787f48ddf1e6"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6140,
            "forks_count": 6140,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1958,
            "open_issues_count": 1958,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-23T23:51:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 329345,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90542,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-24T01:55:09Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90542,
            "watchers_count": 90542,
            "web_commit_signoff_required": false
        },
        "sha": "fb5a51e77570ce2b548d22d250d503102aeac2fe",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "See https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_linkedEditingRange. Maybe some LSP experts can help point me in the right direction with some of the core logic, I don't fully trust myself with that :) \r\n\r\n[Screencast_20250608_191409.webm](https://github.com/user-attachments/assets/c29f0fe7-0325-4f38-a7e8-e4d7d90329f3)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2135695080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2135695080"
                }
            },
            "author_association": "MEMBER",
            "body": "I've noticed that undoing specifically adds an extra 1000ms to the test time, unsure why.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-09T13:10:32Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local t_lsp = require('test.functional.plugin.lsp.testutil')\n+\n+local eq = t.eq\n+local dedent = t.dedent\n+local exec_lua = n.exec_lua\n+local insert = n.insert\n+local feed = n.feed\n+\n+local clear_notrace = t_lsp.clear_notrace\n+local create_server_definition = t_lsp.create_server_definition\n+\n+describe('vim.lsp.linked_editing_range', function()\n+  local text = dedent([[\n+  hello\n+  hello]])\n+\n+  local response = [==[\n+{\"ranges\": [\n+  { \"start\": { \"line\": 0, \"character\": 0 }, \"end\": { \"line\": 0, \"character\": 5 } },\n+  { \"start\": { \"line\": 1, \"character\": 0 }, \"end\": { \"line\": 1, \"character\": 5 } }\n+]}\n+]==]\n+\n+  before_each(function()\n+    clear_notrace()\n+\n+    exec_lua(create_server_definition)\n+    exec_lua(function()\n+      _G.server = _G._create_server({\n+        capabilities = {\n+          linkedEditingRangeProvider = true,\n+        },\n+        handlers = {\n+          ['textDocument/linkedEditingRange'] = function(_, _, callback)\n+            callback(nil, vim.json.decode(response))\n+          end,\n+        },\n+      })\n+\n+      return vim.lsp.start({ name = 'dummy', cmd = _G.server.cmd })\n+    end)\n+\n+    insert(text)\n+  end)\n+\n+  describe('enable()', function()\n+    it('validation', function()\n+      t.matches(\n+        'enable: expected boolean, got table',\n+        t.pcall_err(exec_lua, function()\n+          --- @diagnostic disable-next-line:param-type-mismatch\n+          vim.lsp.linked_editing_range.enable({})\n+        end)\n+      )\n+      eq(\n+        false,\n+        exec_lua(function()\n+          return vim.lsp.linked_editing_range.is_enabled()\n+        end)\n+      )\n+      eq(\n+        true,\n+        exec_lua(function()\n+          vim.lsp.linked_editing_range.enable()\n+          return vim.lsp.linked_editing_range.is_enabled()\n+        end)\n+      )\n+      exec_lua(function()\n+        vim.lsp.linked_editing_range.enable(false)\n+      end)\n+      eq(\n+        false,\n+        exec_lua(function()\n+          return vim.lsp.linked_editing_range.is_enabled()\n+        end)\n+      )\n+    end)\n+  end)\n+\n+  describe('when enabled', function()\n+    it('initiates linked editing', function()\n+      exec_lua(function()\n+        local win = vim.api.nvim_get_current_win()\n+        vim.api.nvim_win_set_cursor(win, { 1, 0 })\n+        vim.lsp.linked_editing_range.enable()\n+      end)\n+      -- Deletion\n+      feed('ldw')\n+      eq(\n+        {\n+          'h',\n+          'h',\n+        },\n+        exec_lua(function()\n+          return vim.api.nvim_buf_get_lines(0, 0, -1, false)\n+        end)\n+      )\n+      -- Insertion\n+      feed('Apt<Esc>')\n+      eq(\n+        {\n+          'hpt',\n+          'hpt',\n+        },\n+        exec_lua(function()\n+          return vim.api.nvim_buf_get_lines(0, 0, -1, false)\n+        end)\n+      )\n+      -- Undo/redo\n+      feed('0xx')\n+      eq(\n+        {\n+          't',\n+          't',\n+        },\n+        exec_lua(function()\n+          return vim.api.nvim_buf_get_lines(0, 0, -1, false)\n+        end)\n+      )\n+      feed('u')",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2135695080",
            "id": 2135695080,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_TB7o",
            "original_commit_id": "cab191cb2b1879e0896e76049f33cda17667e984",
            "original_line": 98,
            "original_position": 122,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/linked_editing_range_spec.lua",
            "position": null,
            "pull_request_review_id": 2910027164,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2135695080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-09T13:10:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2135695080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136078149"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136078149"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe also `TextChangedP`?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-09T16:54:34Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not globalstate.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      globalstate.range_index = i\n+    end\n+  end\n+\n+  if not globalstate.range_index then\n+    globalstate.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  globalstate.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+---@param opts? vim.lsp.util._refresh.Opts Additional options to pass to util._refresh\n+---@private\n+local function _refresh(bufnr, opts)\n+  opts = opts or {}\n+  local win = api.nvim_get_current_win()\n+  opts['bufnr'] = bufnr\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if #clients == 0 then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients?\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    opts.handler,\n+    bufnr\n+  )\n+end\n+\n+--- Enable linked editing ranges for a buffer\n+local function _enable()\n+  if globalstate.enabled then\n+    return\n+  end\n+  globalstate.enabled = true\n+\n+  _refresh(0)\n+end\n+\n+api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136078149",
            "id": 2136078149,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_UfdF",
            "original_commit_id": "13934b059658c03e7b31de8b34b850a473822a91",
            "original_line": 96,
            "original_position": 115,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2910659272,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136078149/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-09T16:54:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136078149",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136698183"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136698183"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit:\r\n```suggestion\r\n    Enables or disables linked editing ranges.\r\n```",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:14:55Z",
            "diff_hunk": "@@ -2274,6 +2274,26 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136698183",
            "id": 2136698183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W21H",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 2281,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136698183/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136698183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136699137"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136699137"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe others will disagree but I can't think of why someone would want to toggle this. I do think we should keep `enable()` for API consistency, but I would lean towards killing `is_enabled()` (at least for the first iteration of the feature).",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:16:39Z",
            "diff_hunk": "@@ -2274,6 +2274,26 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges\n+\n+    To \"toggle\", pass the inverse of `is_enabled()`: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136699137",
            "id": 2136699137,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W3EB",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 2283,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136699137/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136699137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136701904"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136701904"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of adding the handler here, we can just pass the `handler` in `client:request`.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:20:39Z",
            "diff_hunk": "@@ -237,6 +237,11 @@ RCS[ms.textDocument_inlayHint] = function(...)\n   return vim.lsp.inlay_hint.on_inlayhint(...)\n end\n \n+--- @private\n+RCS[ms.textDocument_linkedEditingRange] = function(...)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136701904",
            "id": 2136701904,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W3vQ",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 241,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136701904/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136701904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136703076"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136703076"
                }
            },
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/pull/33440/commits/269688773269356c3af306fa695782411f2d73dc might provide some insight on how to do it.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:22:22Z",
            "diff_hunk": "@@ -237,6 +237,11 @@ RCS[ms.textDocument_inlayHint] = function(...)\n   return vim.lsp.inlay_hint.on_inlayhint(...)\n end\n \n+--- @private\n+RCS[ms.textDocument_linkedEditingRange] = function(...)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136703076",
            "id": 2136703076,
            "in_reply_to_id": 2136701904,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W4Bk",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 241,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136703076/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136703076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136703487"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136703487"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nfunction M.on_linked_editing_range(err, result, ctx)\r\n```",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:22:59Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136703487",
            "id": 2136703487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W4H_",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136703487/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136703487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136704047"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136704047"
                }
            },
            "author_association": "MEMBER",
            "body": "Also we should be able to make this a local function if we remove the handler in `handlers.lua`",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:23:46Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136704047",
            "id": 2136704047,
            "in_reply_to_id": 2136703487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W4Qv",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136704047/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136704047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136704974"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136704974"
                }
            },
            "author_association": "MEMBER",
            "body": "Local functions are private by default.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:24:57Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not globalstate.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      globalstate.range_index = i\n+    end\n+  end\n+\n+  if not globalstate.range_index then\n+    globalstate.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  globalstate.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+---@param opts? vim.lsp.util._refresh.Opts Additional options to pass to util._refresh\n+---@private",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136704974",
            "id": 2136704974,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W4fO",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 84,
            "original_position": 84,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136704974/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136704974",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136705379"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136705379"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: I think we like to use `not next(clients)` instead.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:25:33Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not globalstate.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      globalstate.range_index = i\n+    end\n+  end\n+\n+  if not globalstate.range_index then\n+    globalstate.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  globalstate.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+---@param opts? vim.lsp.util._refresh.Opts Additional options to pass to util._refresh\n+---@private\n+local function _refresh(bufnr, opts)\n+  opts = opts or {}\n+  local win = api.nvim_get_current_win()\n+  opts['bufnr'] = bufnr\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if #clients == 0 then",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136705379",
            "id": 2136705379,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W4lj",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 92,
            "original_position": 92,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136705379/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136705379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136705770"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136705770"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes :)",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:26:06Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not globalstate.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      globalstate.range_index = i\n+    end\n+  end\n+\n+  if not globalstate.range_index then\n+    globalstate.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  globalstate.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+---@param opts? vim.lsp.util._refresh.Opts Additional options to pass to util._refresh\n+---@private\n+local function _refresh(bufnr, opts)\n+  opts = opts or {}\n+  local win = api.nvim_get_current_win()\n+  opts['bufnr'] = bufnr\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if #clients == 0 then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients?",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136705770",
            "id": 2136705770,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W4rq",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 95,
            "original_position": 95,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136705770/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136705770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136706573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136706573"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: Remove the `_` from local functions. We use that prefix to skip docs for module methods, but we don't need to do that for local functions.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:27:14Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {\n+  enabled = false,\n+}\n+\n+local globalstate = M.globalstate\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+---@private\n+function M.on_linkededitingrange(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not globalstate.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      globalstate.range_index = i\n+    end\n+  end\n+\n+  if not globalstate.range_index then\n+    globalstate.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  globalstate.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+---@param opts? vim.lsp.util._refresh.Opts Additional options to pass to util._refresh\n+---@private\n+local function _refresh(bufnr, opts)\n+  opts = opts or {}\n+  local win = api.nvim_get_current_win()\n+  opts['bufnr'] = bufnr\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if #clients == 0 then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients?\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    opts.handler,\n+    bufnr\n+  )\n+end\n+\n+--- Enable linked editing ranges for a buffer\n+local function _enable()",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136706573",
            "id": 2136706573,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W44N",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 106,
            "original_position": 106,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136706573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136706573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2136707753"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136707753"
                }
            },
            "author_association": "MEMBER",
            "body": "Since there's no buffer-local state, I would just call this `state`.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-10T00:28:53Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.globalstate Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.globalstate\n+M.globalstate = {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2136707753",
            "id": 2136707753,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_W5Kp",
            "original_commit_id": "34e540c773397709131546bdab3382286e9e236a",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2911659510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136707753/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-10T00:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2136707753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139087454"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139087454"
                }
            },
            "author_association": "MEMBER",
            "body": "We can just make this a local table instead of attaching it to the module.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:47:45Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139087454",
            "id": 2139087454,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_f-Je",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139087454/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139087454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139088753"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139088753"
                }
            },
            "author_association": "MEMBER",
            "body": "For maintainability purposes it would be nice to include descriptions for these.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:48:16Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139088753",
            "id": 2139088753,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_f-dx",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": 10,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139088753/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139088753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139090206"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139090206"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh wait you did that in line 17. In that case there's no need to attach this to the module at all.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:49:04Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139090206",
            "id": 2139090206,
            "in_reply_to_id": 2139087454,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_f-0e",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139090206/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139090206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139093902"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139093902"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: This statement doesn't make sense to me. It's like \"we store this globally because only the local state makes sense\" (?).",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:50:56Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139093902",
            "id": 2139093902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_f_uO",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139093902/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139093902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139095025"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139095025"
                }
            },
            "author_association": "MEMBER",
            "body": "Is it possible for `err` and `result` to both be nil?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:51:38Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139095025",
            "id": 2139095025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_f__x",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139095025/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139095025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139096300"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139096300"
                }
            },
            "author_association": "MEMBER",
            "body": "Same comment here about using `not next(ranges)`",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:53:07Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not state.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  if not state.range_index then\n+    state.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+local function refresh(bufnr)\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if not next(clients) then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    on_linked_editing_range,\n+    bufnr\n+  )\n+end\n+\n+api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+  callback = function(args)\n+    if not state.enabled then\n+      return\n+    end\n+\n+    local buf = args.buf\n+    local ranges = api.nvim_buf_get_extmarks(buf, ns, 0, -1, { details = true })\n+    if #ranges == 0 then",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139096300",
            "id": 2139096300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gATs",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 108,
            "original_position": 108,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139096300/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139096300",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139097122"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139097122"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't we move these autocommands inside `enable`?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:54:10Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not state.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  if not state.range_index then\n+    state.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+local function refresh(bufnr)\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if not next(clients) then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    on_linked_editing_range,\n+    bufnr\n+  )\n+end\n+\n+api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139097122",
            "id": 2139097122,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gAgi",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 96,
            "original_position": 100,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139097122/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139097122",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139097700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139097700"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh no maybe Linux got hacked.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:54:54Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local t_lsp = require('test.functional.plugin.lsp.testutil')\n+\n+local eq = t.eq\n+local dedent = t.dedent\n+local exec_lua = n.exec_lua\n+local insert = n.insert\n+local feed = n.feed\n+\n+local clear_notrace = t_lsp.clear_notrace\n+local create_server_definition = t_lsp.create_server_definition\n+\n+describe('vim.lsp.linked_editing_range', function()\n+  local text = dedent([[\n+  hello\n+  hello]])\n+\n+  local response = [==[\n+{\"ranges\": [\n+  { \"start\": { \"line\": 0, \"character\": 0 }, \"end\": { \"line\": 0, \"character\": 5 } },\n+  { \"start\": { \"line\": 1, \"character\": 0 }, \"end\": { \"line\": 1, \"character\": 5 } }\n+]}\n+]==]\n+\n+  before_each(function()\n+    clear_notrace()\n+\n+    exec_lua(create_server_definition)\n+    exec_lua(function()\n+      _G.server = _G._create_server({\n+        capabilities = {\n+          linkedEditingRangeProvider = true,\n+        },\n+        handlers = {\n+          ['textDocument/linkedEditingRange'] = function(_, _, callback)\n+            callback(nil, vim.json.decode(response))\n+          end,\n+        },\n+      })\n+\n+      return vim.lsp.start({ name = 'dummy', cmd = _G.server.cmd })\n+    end)\n+\n+    insert(text)\n+  end)\n+\n+  describe('enable()', function()\n+    it('validation', function()\n+      t.matches(\n+        'enable: expected boolean, got table',\n+        t.pcall_err(exec_lua, function()\n+          --- @diagnostic disable-next-line:param-type-mismatch\n+          vim.lsp.linked_editing_range.enable({})\n+        end)\n+      )\n+      eq(\n+        false,\n+        exec_lua(function()\n+          return vim.lsp.linked_editing_range.is_enabled()\n+        end)\n+      )\n+      eq(\n+        true,\n+        exec_lua(function()\n+          vim.lsp.linked_editing_range.enable()\n+          return vim.lsp.linked_editing_range.is_enabled()\n+        end)\n+      )\n+      exec_lua(function()\n+        vim.lsp.linked_editing_range.enable(false)\n+      end)\n+      eq(\n+        false,\n+        exec_lua(function()\n+          return vim.lsp.linked_editing_range.is_enabled()\n+        end)\n+      )\n+    end)\n+  end)\n+\n+  describe('when enabled', function()\n+    it('initiates linked editing', function()\n+      exec_lua(function()\n+        local win = vim.api.nvim_get_current_win()\n+        vim.api.nvim_win_set_cursor(win, { 1, 0 })\n+        vim.lsp.linked_editing_range.enable()\n+      end)\n+      -- Deletion\n+      feed('ldw')\n+      eq(\n+        {\n+          'h',\n+          'h',\n+        },\n+        exec_lua(function()\n+          return vim.api.nvim_buf_get_lines(0, 0, -1, false)\n+        end)\n+      )\n+      -- Insertion\n+      feed('Apt<Esc>')\n+      eq(\n+        {\n+          'hpt',\n+          'hpt',\n+        },\n+        exec_lua(function()\n+          return vim.api.nvim_buf_get_lines(0, 0, -1, false)\n+        end)\n+      )\n+      -- Undo/redo\n+      feed('0xx')\n+      eq(\n+        {\n+          't',\n+          't',\n+        },\n+        exec_lua(function()\n+          return vim.api.nvim_buf_get_lines(0, 0, -1, false)\n+        end)\n+      )\n+      feed('u')",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139097700",
            "id": 2139097700,
            "in_reply_to_id": 2135695080,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gApk",
            "original_commit_id": "cab191cb2b1879e0896e76049f33cda17667e984",
            "original_line": 98,
            "original_position": 122,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/linked_editing_range_spec.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139097700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139097700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139098281"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139098281"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of decoding, why not just a vanilla Lua table for `response`?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T02:55:40Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local t_lsp = require('test.functional.plugin.lsp.testutil')\n+\n+local eq = t.eq\n+local dedent = t.dedent\n+local exec_lua = n.exec_lua\n+local insert = n.insert\n+local feed = n.feed\n+\n+local clear_notrace = t_lsp.clear_notrace\n+local create_server_definition = t_lsp.create_server_definition\n+\n+describe('vim.lsp.linked_editing_range', function()\n+  local text = dedent([[\n+  hello\n+  hello]])\n+\n+  local response = [==[\n+{\"ranges\": [\n+  { \"start\": { \"line\": 0, \"character\": 0 }, \"end\": { \"line\": 0, \"character\": 5 } },\n+  { \"start\": { \"line\": 1, \"character\": 0 }, \"end\": { \"line\": 1, \"character\": 5 } }\n+]}\n+]==]\n+\n+  before_each(function()\n+    clear_notrace()\n+\n+    exec_lua(create_server_definition)\n+    exec_lua(function()\n+      _G.server = _G._create_server({\n+        capabilities = {\n+          linkedEditingRangeProvider = true,\n+        },\n+        handlers = {\n+          ['textDocument/linkedEditingRange'] = function(_, _, callback)\n+            callback(nil, vim.json.decode(response))",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139098281",
            "id": 2139098281,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gAyp",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 37,
            "original_position": 37,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/linked_editing_range_spec.lua",
            "position": null,
            "pull_request_review_id": 2915494559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139098281/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T02:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139098281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139125409"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139125409"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah I worded that really poorly, maybe better just to omit that last bit...",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T03:32:25Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139125409",
            "id": 2139125409,
            "in_reply_to_id": 2139093902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gHah",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915544416,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139125409/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T03:32:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139125409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139134984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139134984"
                }
            },
            "author_association": "MEMBER",
            "body": "Just checked, it is not :+1: ",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T03:47:09Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139134984",
            "id": 2139134984,
            "in_reply_to_id": 2139095025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gJwI",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915558436,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139134984/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T03:47:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139134984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139138133"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139138133"
                }
            },
            "author_association": "MEMBER",
            "body": "In that case I would remove the `not result` bit from this condition as we don't want to handle an invalid scenario.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T03:51:46Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139138133",
            "id": 2139138133,
            "in_reply_to_id": 2139095025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gKhV",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915562550,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139138133/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T03:51:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139138133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139139654"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139139654"
                }
            },
            "author_association": "MEMBER",
            "body": "On it :+1: ",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T03:53:52Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139139654",
            "id": 2139139654,
            "in_reply_to_id": 2139095025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gK5G",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915564696,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139139654/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T03:53:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139139654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139143806"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139143806"
                }
            },
            "author_association": "MEMBER",
            "body": "I was wondering the same; to be honest, a lot of this was adapted from the inlay hint handler, which has an autocmd to run a function on every buffer change, regardless of whether or not inlay hints are disabled (of course, if they are disabled it just returns immediately). So basically the same as this autocmd, which also returns immediately if linked editing ranges are disabled. But I can look into only creating the autocmds on enable; if it doesn't make the logic much more complex, it would probably be slightly better.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T03:59:22Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not state.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  if not state.range_index then\n+    state.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+local function refresh(bufnr)\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if not next(clients) then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    on_linked_editing_range,\n+    bufnr\n+  )\n+end\n+\n+api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139143806",
            "id": 2139143806,
            "in_reply_to_id": 2139097122,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gL5-",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 96,
            "original_position": 100,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915570105,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139143806/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T03:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139143806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139174325"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139174325"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "IMO, the new `refresh` call should cancel previous request here.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T04:38:47Z",
            "diff_hunk": "@@ -0,0 +1,168 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern? string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = { enabled = false }\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not state.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  if not state.range_index then\n+    state.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+local function refresh(bufnr)\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if not next(clients) then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    on_linked_editing_range,\n+    bufnr\n+  )",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139174325",
            "id": 2139174325,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gTW1",
            "original_commit_id": "4e264f6e420ab4ab63a93a4ae4c4a49e0349bef6",
            "original_line": 105,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915613306,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139174325/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T04:38:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139174325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139247636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139247636"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually, despite the [spec mandating that `result` exists if there is no error](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#responseMessage), I still got errors related to trying to use a `nil` result without this check. So I'll keep it for now, and this should probably be looked at later :sweat_smile: ",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T05:36:29Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139247636",
            "id": 2139247636,
            "in_reply_to_id": 2139095025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_glQU",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915710768,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139247636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T05:36:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139247636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2139251370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139251370"
                }
            },
            "author_association": "MEMBER",
            "body": "Autocmd creation now gated behind linked editing enabledness :+1: ",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T05:39:46Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or not state.enabled\n+  then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  if not state.range_index then\n+    state.enabled = false\n+  end\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern\n+end\n+\n+--- Refresh linked editing ranges, only if we have attached clients that support it\n+---@param bufnr (integer) Buffer handle, or 0 for current\n+local function refresh(bufnr)\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = method })\n+\n+  if not next(clients) then\n+    return\n+  end\n+  -- TODO: Merge results from multiple clients\n+  local client = clients[1]\n+  client:request(\n+    method,\n+    vim.lsp.util.make_position_params(win, client.offset_encoding),\n+    on_linked_editing_range,\n+    bufnr\n+  )\n+end\n+\n+api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2139251370",
            "id": 2139251370,
            "in_reply_to_id": 2139097122,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_gmKq",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 96,
            "original_position": 100,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2915715846,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139251370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T05:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2139251370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2140345057"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2140345057"
                }
            },
            "author_association": "MEMBER",
            "body": "(Ok, final upduate: Neovim is working just fine, the LSP allows the response itself to be nil, meaning no ranges exist at the current position)",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-11T14:24:52Z",
            "diff_hunk": "@@ -0,0 +1,177 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---@field word_pattern? string\n+---@field range_index? integer\n+---@type vim.lsp.linked_editing_range.state\n+M.state = {\n+  enabled = false,\n+}\n+\n+local state = M.state\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`\n+--- Stores ranges globally, since they only make sense to track for the current buffer\n+---@param result lsp.LinkedEditingRanges\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+  if\n+    util.buf_versions[bufnr] ~= ctx.version\n+    or not result",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2140345057",
            "id": 2140345057,
            "in_reply_to_id": 2139095025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_kxLh",
            "original_commit_id": "a15e19380aa4d4c17cb461399df96f5889b9f3c7",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2917476667,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2140345057/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-11T14:24:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2140345057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2141432040"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141432040"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "IMO, this can be true. because this implementaion is checking capabilities on-demand in https://github.com/neovim/neovim/pull/34388/files#diff-14652e7f4fb9a2b4871113310a3e66c5ca2bd1646457e590201530d1e790f6b0R150.\r\n",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-12T02:11:55Z",
            "diff_hunk": "@@ -535,6 +535,9 @@ function protocol.make_client_capabilities()\n       colorProvider = {\n         dynamicRegistration = true,\n       },\n+      linkedEditingRange = {\n+        dynamicRegistration = false,",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2141432040",
            "id": 2141432040,
            "line": 551,
            "node_id": "PRRC_kwDOAPphoM5_o6jo",
            "original_commit_id": "8a784874f933da7134816081ec476fd6bf1d70b6",
            "original_line": 551,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 5,
            "pull_request_review_id": 2919204672,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141432040/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T02:11:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141432040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2141456911"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141456911"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is a JavaScript regular expression, so it may be difficult to handle.\r\n\r\nHowever, it seems necessary to have some way to detect keywords.\r\n\r\nFor example, if you change `<div></div>` to `<div class=\"name\"></div>`, it will become `<div class=\"name\"></div >`.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-12T02:16:27Z",
            "diff_hunk": "@@ -0,0 +1,183 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern? string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = { enabled = false }\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  if\n+    not state.enabled\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or util.buf_versions[bufnr] ~= ctx.version\n+  then\n+    return\n+  end\n+\n+  api.nvim_buf_clear_namespace(bufnr, ns, 0, -1)\n+  state.range_index = nil\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2141456911",
            "id": 2141456911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_pAoP",
            "original_commit_id": "8a784874f933da7134816081ec476fd6bf1d70b6",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2919236013,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141456911/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T02:16:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141456911",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2141466502"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141466502"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "As far as I know, the primary use case for linkedEditingRange is currently HTML tags.\r\n\r\nSo a workaround to stop syncing the range when a space is entered might be reasonable.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-12T02:18:08Z",
            "diff_hunk": "@@ -0,0 +1,183 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern? string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = { enabled = false }\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  if\n+    not state.enabled\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or util.buf_versions[bufnr] ~= ctx.version\n+  then\n+    return\n+  end\n+\n+  api.nvim_buf_clear_namespace(bufnr, ns, 0, -1)\n+  state.range_index = nil\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2141466502",
            "id": 2141466502,
            "in_reply_to_id": 2141456911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_pC-G",
            "original_commit_id": "8a784874f933da7134816081ec476fd6bf1d70b6",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2919248056,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141466502/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T02:18:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141466502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2141516695"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141516695"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, good point. The spec says if no word pattern is provided, the client can use its own word pattern, so maybe we can just use our own and put a TODO to support other ones (somehow...)",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-12T02:42:26Z",
            "diff_hunk": "@@ -0,0 +1,183 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern? string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = { enabled = false }\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+local function on_linked_editing_range(err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+  if\n+    not state.enabled\n+    or not api.nvim_buf_is_loaded(bufnr)\n+    or util.buf_versions[bufnr] ~= ctx.version\n+  then\n+    return\n+  end\n+\n+  api.nvim_buf_clear_namespace(bufnr, ns, 0, -1)\n+  state.range_index = nil\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client_id = ctx.client_id\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, ns, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspLinkedEditingRange',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Use the word pattern to determine if range content is valid\n+  state.word_pattern = result.wordPattern",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2141516695",
            "id": 2141516695,
            "in_reply_to_id": 2141456911,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_pPOX",
            "original_commit_id": "8a784874f933da7134816081ec476fd6bf1d70b6",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2919309512,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141516695/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T02:42:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141516695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2142961022"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142961022"
                }
            },
            "author_association": "MEMBER",
            "body": "Would we need some way to detect when the client has unregistered, and disable/clear linked ranges if so? I.e. what happens if we are currently in a linked editing range, but the client unregisters support?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-12T14:42:35Z",
            "diff_hunk": "@@ -535,6 +535,9 @@ function protocol.make_client_capabilities()\n       colorProvider = {\n         dynamicRegistration = true,\n       },\n+      linkedEditingRange = {\n+        dynamicRegistration = false,",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2142961022",
            "id": 2142961022,
            "in_reply_to_id": 2141432040,
            "line": 551,
            "node_id": "PRRC_kwDOAPphoM5_uv1-",
            "original_commit_id": "8a784874f933da7134816081ec476fd6bf1d70b6",
            "original_line": 551,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 5,
            "pull_request_review_id": 2921524414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142961022/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T14:42:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142961022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2143780006"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143780006"
                }
            },
            "author_association": "MEMBER",
            "body": "I would lean towards not announcing dynamic registration support for now, even if it technically would work. As @ribru17 mentioned this might require keeping some extra state which we can add in a follow-up.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-12T22:50:39Z",
            "diff_hunk": "@@ -535,6 +535,9 @@ function protocol.make_client_capabilities()\n       colorProvider = {\n         dynamicRegistration = true,\n       },\n+      linkedEditingRange = {\n+        dynamicRegistration = false,",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2143780006",
            "id": 2143780006,
            "in_reply_to_id": 2141432040,
            "line": 551,
            "node_id": "PRRC_kwDOAPphoM5_x3ym",
            "original_commit_id": "8a784874f933da7134816081ec476fd6bf1d70b6",
            "original_line": 551,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 5,
            "pull_request_review_id": 2922837315,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143780006/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T22:50:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143780006",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2144956201"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144956201"
                }
            },
            "author_association": "MEMBER",
            "body": "seems over-specific. are we certain we need this highlight or can we skip it for now (just use IncSearch)",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T12:07:36Z",
            "diff_hunk": "@@ -222,6 +222,7 @@ static const char *highlight_init_both[] = {\n   \"default link LspReferenceWrite           LspReferenceText\",\n   \"default link LspReferenceTarget          LspReferenceText\",\n   \"default link LspSignatureActiveParameter Visual\",\n+  \"default link LspLinkedEditingRange       IncSearch\",",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2144956201",
            "id": 2144956201,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_2W8p",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 225,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 2924582224,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144956201/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-13T12:07:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144956201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2144962403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144962403"
                }
            },
            "author_association": "MEMBER",
            "body": "Or re-use `LspReferenceTarget`? Seems conceptually similar.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T12:10:32Z",
            "diff_hunk": "@@ -222,6 +222,7 @@ static const char *highlight_init_both[] = {\n   \"default link LspReferenceWrite           LspReferenceText\",\n   \"default link LspReferenceTarget          LspReferenceText\",\n   \"default link LspSignatureActiveParameter Visual\",\n+  \"default link LspLinkedEditingRange       IncSearch\",",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2144962403",
            "id": 2144962403,
            "in_reply_to_id": 2144956201,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_2Ydj",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 225,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/highlight_group.c",
            "position": null,
            "pull_request_review_id": 2924593079,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144962403/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-13T12:10:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144962403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2144963435"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144963435"
                }
            },
            "author_association": "MEMBER",
            "body": "reluctant to introduce a new module for every lsp feature.  (maybe i'm wrong though)\r\n\r\nlsp already has a way to enable capabilities, can we just document how to use it? \r\n\r\n```\r\n  vim.lsp.config('*', {\r\n    capabilities = {\r\n      ...\r\n    },\r\n  })\r\n```\r\n\r\nI see that `setup_autocmds` is called by `enable()`. is this something users want to dynamically toggle ?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T12:11:16Z",
            "diff_hunk": "@@ -2284,6 +2289,17 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges. Ranges are highlighted using\n+    the |hl-LspLinkedEditingRange| group.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2144963435",
            "id": 2144963435,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_2Ytr",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 2297,
            "original_position": 21,
            "original_start_line": 2295,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2924594847,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144963435/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-13T12:14:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144963435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2144966670"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144966670"
                }
            },
            "author_association": "MEMBER",
            "body": "`state` is possibly another case where @ofseed abstraction may be useful",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T12:13:31Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = {\n+  enabled = false,\n+  word_pattern = '^[%w%-_]*$',\n+}\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2144966670",
            "id": 2144966670,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_2ZgO",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": 14,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2924600030,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144966670/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-13T12:13:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144966670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2144969161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144969161"
                }
            },
            "author_association": "MEMBER",
            "body": "Agreed; this seems unlikely to need to be toggled off and on conditionally (unlike, say, inlay hints or inline diagnostics). I may be wrong, though; then I'd appreciate hearing of such a scenario. (Depending on the scenario, there might be better \"opt-in\" or \"opt-out\" approaches than such a global toggle.)\r\n",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T12:15:18Z",
            "diff_hunk": "@@ -2284,6 +2289,17 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges. Ranges are highlighted using\n+    the |hl-LspLinkedEditingRange| group.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2144969161",
            "id": 2144969161,
            "in_reply_to_id": 2144963435,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_2aHJ",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 2297,
            "original_position": 21,
            "original_start_line": 2295,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2924604140,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144969161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-13T12:15:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144969161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2145340659"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2145340659"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think this situation might be different. For `enable` or some user settings, there is no need to use an additional layer of abstraction; simply using `vim.g` or `vim.b` is sufficient. The main focus of the `state` abstraction I am currently working on is to save the intermediate data from LSP calls.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T15:28:25Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = {\n+  enabled = false,\n+  word_pattern = '^[%w%-_]*$',\n+}\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2145340659",
            "id": 2145340659,
            "in_reply_to_id": 2144966670,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_30zz",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": 14,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2925237119,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2145340659/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-13T15:28:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2145340659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2145387890"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2145387890"
                }
            },
            "author_association": "MEMBER",
            "body": "> The main focus of the `state` abstraction I am currently working on is to save the intermediate data from LSP calls.\r\n\r\nOk, that will be a useful note in the PR / commit message (if not already there)!",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-13T15:44:11Z",
            "diff_hunk": "@@ -0,0 +1,191 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---@field enabled boolean Whether linked editing ranges are enabled\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@type vim.lsp.linked_editing_range.state\n+local state = {\n+  enabled = false,\n+  word_pattern = '^[%w%-_]*$',\n+}\n+\n+local augroup = api.nvim_create_augroup('nvim.lsp.linked_editing_range', {})\n+local ns = api.nvim_create_namespace('nvim.lsp.linked_editing_range')\n+\n+--- |lsp-handler| for the method `textDocument/linkedEditingRange`. Stores ranges globally in the\n+--- state variable.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2145387890",
            "id": 2145387890,
            "in_reply_to_id": 2144966670,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_4AVy",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": 14,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2925301108,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2145387890/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-13T15:44:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2145387890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2150292347"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150292347"
                }
            },
            "author_association": "MEMBER",
            "body": "That makes sense. I can revert to how this PR initially if it makes more sense, where autocmds are created unconditionally, and just return immediately if the feature is disabled. And then if I understand correctly the enabled/disabled-ness will come from `vim.lsp.config`?",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-16T15:26:11Z",
            "diff_hunk": "@@ -2284,6 +2289,17 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges. Ranges are highlighted using\n+    the |hl-LspLinkedEditingRange| group.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2150292347",
            "id": 2150292347,
            "in_reply_to_id": 2144963435,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AKtt7",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 2297,
            "original_position": 21,
            "original_start_line": 2295,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2932596394,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150292347/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-16T15:26:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150292347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2150817943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150817943"
                }
            },
            "author_association": "MEMBER",
            "body": "And I'm thinking this would also require another autocmd to run on LspAttach/Detach which marks the module as \"enabled\" depending on if there are currently attached servers which support this capability",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-16T20:28:02Z",
            "diff_hunk": "@@ -2284,6 +2289,17 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges. Ranges are highlighted using\n+    the |hl-LspLinkedEditingRange| group.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2150817943",
            "id": 2150817943,
            "in_reply_to_id": 2144963435,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AMuCX",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 2297,
            "original_position": 21,
            "original_start_line": 2295,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2933418422,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150817943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-16T20:28:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150817943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2155904468"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2155904468"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually, I think this wouldn't be good either because\r\n\r\n1. We would have to source the module eagerly (so that the LspAttach autocmd sets up before any lsps can attach)\r\n2. This would mean that the feature is enabled by default when in buffers with attached clients which support the method\r\n\r\nCorrect me if I am wrong. Also I am not saying this to push for the current approach necessarily, just thinking about some drawbacks of other considerations",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-19T02:13:58Z",
            "diff_hunk": "@@ -2284,6 +2289,17 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges. Ranges are highlighted using\n+    the |hl-LspLinkedEditingRange| group.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2155904468",
            "id": 2155904468,
            "in_reply_to_id": 2144963435,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AgH3U",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 2297,
            "original_position": 21,
            "original_start_line": 2295,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2941284215,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2155904468/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-19T02:13:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2155904468",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2156460771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156460771"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The approach mentioned here (importing and enabling by default, and disabling via `capabilities`) already has precedent — for example, `vim.lsp.semantic_token`:\r\n\r\n[https://github.com/neovim/neovim/blob/8af2aea24f9f33ba2eaa03d548295267bdd02024/runtime/lua/vim/lsp/client.lua#L1078-L1085](https://github.com/neovim/neovim/blob/8af2aea24f9f33ba2eaa03d548295267bdd02024/runtime/lua/vim/lsp/client.lua#L1078-L1085)\r\n\r\n> 1. We would have to source the module eagerly (so that the `LspAttach` autocmd sets up before any LSPs can attach)\r\n\r\nAs you mentioned, the above code is exactly meant to solve this problem.\r\n\r\nSince I'm currently working on the LSP data cache module, I'm considering the advantages of this approach. For me, your second point might not be a drawback but a benefit:\r\n\r\n> 2. This would mean that the feature is enabled by default when in buffers with attached clients which support the method\r\n\r\nI think this is important because we *could* enable the feature once clients that support the method are attached. \r\n\r\nIf a feature is enabled globally, we must ensure that when a client attaches, all necessary data and autocmds are ready, and when all clients detach, the data and autocmds are cleared. The tricky part here is: how can we recreate the data and autocmds after all clients have detached (i.e., after the data and autocmds have been cleared) and then a new client attaches? We at least need an autocmd that isn’t destroyed to re-create, or *avoid destroying any data when a client detaches*. \r\n\r\nI carefully considered this when implementing `vim.lsp._folding_range`, added the following comment for this reason:\r\n\r\n[https://github.com/neovim/neovim/blob/8af2aea24f9f33ba2eaa03d548295267bdd02024/runtime/lua/vim/lsp/\\_folding\\_range.lua#L175-L180](https://github.com/neovim/neovim/blob/8af2aea24f9f33ba2eaa03d548295267bdd02024/runtime/lua/vim/lsp/_folding_range.lua#L175-L180)\r\n\r\nI'm also thinking about the pros and cons of different approaches. This approach (i.e., the one used in `vim.lsp.semantic_token`) may not have significant advantages for this PR, but for other features that require complex data management, it may offer more benefits than drawbacks. So, I'm currently considering converting some existing features to this model for a uniform pattern while implementing a data management module, without breaking the current `enable` logic or changing any defaults.\r\n",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-19T08:34:58Z",
            "diff_hunk": "@@ -2284,6 +2289,17 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+\n+enable({enable})                       *vim.lsp.linked_editing_range.enable()*\n+    Enables or disables linked editing ranges. Ranges are highlighted using\n+    the |hl-LspLinkedEditingRange| group.",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2156460771",
            "id": 2156460771,
            "in_reply_to_id": 2144963435,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AiPrj",
            "original_commit_id": "4ab321d6b3b371a995df0d83bf3b935bd9f7df94",
            "original_line": 2297,
            "original_position": 21,
            "original_start_line": 2295,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2942101256,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156460771/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-19T08:34:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156460771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160262274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262274"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n  vim.lsp.buf_request(bufnr, method, function(client)\r\n    return vim.lsp.util.make_position_params(win, client.offset_encoding)\r\n  end, function(...)\r\n    self:handler(...)\r\n  end)\r\n```",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T08:23:24Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  client_state.range_index = nil\n+end\n+\n+---@package\n+---@param client_state vim.lsp.linked_editing_range.state\n+function LinkedEditor:update_ranges(client_state)\n+  if not client_state.range_index then\n+    return\n+  end\n+\n+  local buf = self.bufnr\n+  local ns = client_state.namespace\n+  local ranges = api.nvim_buf_get_extmarks(buf, ns, 0, -1, { details = true })\n+  if not next(ranges) then\n+    return\n+  end\n+\n+  local r = ranges[client_state.range_index]\n+  local replacement = api.nvim_buf_get_text(buf, r[2], r[3], r[4].end_row, r[4].end_col, {})\n+\n+  if not string.match(table.concat(replacement, '\\n'), client_state.word_pattern) then\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    client_state.range_index = nil\n+    return\n+  end\n+\n+  for i, range in ipairs(ranges) do\n+    if i ~= client_state.range_index then\n+      vim.cmd.undojoin()\n+      api.nvim_buf_set_text(\n+        buf,\n+        range[2],\n+        range[3],\n+        range[4].end_row,\n+        range[4].end_col,\n+        replacement\n+      )\n+    end\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:handler(client_id, err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  if not api.nvim_buf_is_loaded(bufnr) or util.buf_versions[bufnr] ~= ctx.version then\n+    return\n+  end\n+\n+  self:clear_ranges(client_id)\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, client_state.namespace, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspReferenceTarget',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      client_state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Apply the client's own word pattern, if it exists\n+end\n+\n+---@package\n+---@param results table<integer, {err: lsp.ResponseError?, result: lsp.LinkedEditingRanges?}>\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:multi_handler(results, ctx)\n+  for client_id, result in pairs(results) do\n+    self:handler(client_id, result.err, result.result, ctx)\n+  end\n+end\n+\n+---Refresh linked editing ranges\n+---@package\n+function LinkedEditor:refresh()\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local bufnr = self.bufnr\n+\n+  util._cancel_requests({\n+    bufnr = bufnr,\n+    method = method,\n+    type = 'pending',\n+  })\n+  vim.lsp.buf_request_all(bufnr, method, function(client)\n+    return vim.lsp.util.make_position_params(win, client.offset_encoding)\n+  end, function(...)\n+    self:multi_handler(...)\n+  end)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160262274",
            "id": 2160262274,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AwvyC",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 174,
            "original_position": 228,
            "original_start_line": 224,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2948094303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262274/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-22T08:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160262515"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262515"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n```\r\n`multi_handler` is only for `vim.lsp.buf_request_all`, which calls the callback *once* after all requested servers responded; we do not necessarily need it if we could handle requests per client. For similar usage, we could use `vim.lsp.buf_request` instead; then, passing `handler` is sufficient.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T08:24:25Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  client_state.range_index = nil\n+end\n+\n+---@package\n+---@param client_state vim.lsp.linked_editing_range.state\n+function LinkedEditor:update_ranges(client_state)\n+  if not client_state.range_index then\n+    return\n+  end\n+\n+  local buf = self.bufnr\n+  local ns = client_state.namespace\n+  local ranges = api.nvim_buf_get_extmarks(buf, ns, 0, -1, { details = true })\n+  if not next(ranges) then\n+    return\n+  end\n+\n+  local r = ranges[client_state.range_index]\n+  local replacement = api.nvim_buf_get_text(buf, r[2], r[3], r[4].end_row, r[4].end_col, {})\n+\n+  if not string.match(table.concat(replacement, '\\n'), client_state.word_pattern) then\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    client_state.range_index = nil\n+    return\n+  end\n+\n+  for i, range in ipairs(ranges) do\n+    if i ~= client_state.range_index then\n+      vim.cmd.undojoin()\n+      api.nvim_buf_set_text(\n+        buf,\n+        range[2],\n+        range[3],\n+        range[4].end_row,\n+        range[4].end_col,\n+        replacement\n+      )\n+    end\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:handler(client_id, err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  if not api.nvim_buf_is_loaded(bufnr) or util.buf_versions[bufnr] ~= ctx.version then\n+    return\n+  end\n+\n+  self:clear_ranges(client_id)\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, client_state.namespace, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspReferenceTarget',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      client_state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Apply the client's own word pattern, if it exists\n+end\n+\n+---@package\n+---@param results table<integer, {err: lsp.ResponseError?, result: lsp.LinkedEditingRanges?}>\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:multi_handler(results, ctx)\n+  for client_id, result in pairs(results) do\n+    self:handler(client_id, result.err, result.result, ctx)\n+  end\n+end\n+",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160262515",
            "id": 2160262515,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Awv1z",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 211,
            "original_position": 211,
            "original_start_line": 203,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2948094303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262515/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-22T08:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160262950"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262950"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure if this will be our new API convention? It might be better to add an underscore prefix currently.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T08:26:01Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  client_state.range_index = nil\n+end\n+\n+---@package\n+---@param client_state vim.lsp.linked_editing_range.state\n+function LinkedEditor:update_ranges(client_state)\n+  if not client_state.range_index then\n+    return\n+  end\n+\n+  local buf = self.bufnr\n+  local ns = client_state.namespace\n+  local ranges = api.nvim_buf_get_extmarks(buf, ns, 0, -1, { details = true })\n+  if not next(ranges) then\n+    return\n+  end\n+\n+  local r = ranges[client_state.range_index]\n+  local replacement = api.nvim_buf_get_text(buf, r[2], r[3], r[4].end_row, r[4].end_col, {})\n+\n+  if not string.match(table.concat(replacement, '\\n'), client_state.word_pattern) then\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    client_state.range_index = nil\n+    return\n+  end\n+\n+  for i, range in ipairs(ranges) do\n+    if i ~= client_state.range_index then\n+      vim.cmd.undojoin()\n+      api.nvim_buf_set_text(\n+        buf,\n+        range[2],\n+        range[3],\n+        range[4].end_row,\n+        range[4].end_col,\n+        replacement\n+      )\n+    end\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:handler(client_id, err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  if not api.nvim_buf_is_loaded(bufnr) or util.buf_versions[bufnr] ~= ctx.version then\n+    return\n+  end\n+\n+  self:clear_ranges(client_id)\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, client_state.namespace, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspReferenceTarget',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      client_state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Apply the client's own word pattern, if it exists\n+end\n+\n+---@package\n+---@param results table<integer, {err: lsp.ResponseError?, result: lsp.LinkedEditingRanges?}>\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:multi_handler(results, ctx)\n+  for client_id, result in pairs(results) do\n+    self:handler(client_id, result.err, result.result, ctx)\n+  end\n+end\n+\n+---Refresh linked editing ranges\n+---@package\n+function LinkedEditor:refresh()\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local bufnr = self.bufnr\n+\n+  util._cancel_requests({\n+    bufnr = bufnr,\n+    method = method,\n+    type = 'pending',\n+  })\n+  vim.lsp.buf_request_all(bufnr, method, function(client)\n+    return vim.lsp.util.make_position_params(win, client.offset_encoding)\n+  end, function(...)\n+    self:multi_handler(...)\n+  end)\n+end\n+\n+--- Start a linked editing session for the given buffer with the given client. The client must\n+--- already be attached to the buffer.\n+---\n+--- NOTE: This is currently called automatically by |vim.lsp.buf_attach_client()|. To\n+--- opt-out of linked editing ranges with a server that supports it, you can\n+--- delete the `linkedEditingRangeProvider` table from the {server_capabilities} of\n+--- your client in your |LspAttach| callback or your configuration's\n+--- `on_attach` callback:\n+---\n+--- ```lua\n+--- client.server_capabilities.linkedEditingRangeProvider = nil\n+--- ```\n+---\n+---@param bufnr integer\n+---@param client_id integer\n+function M.start(bufnr, client_id)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160262950",
            "id": 2160262950,
            "line": 235,
            "node_id": "PRRC_kwDOAPphoM6Awv8m",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 235,
            "original_position": 246,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": 235,
            "pull_request_review_id": 2948094303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262950/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T08:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160262950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160263572"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160263572"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "For these methods that do not modify `self`(\"pure method\"), we could make them just functions. For instance, passing `bufnr` and `client_state` is sufficient.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T08:28:02Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160263572",
            "id": 2160263572,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AwwGU",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2948094303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160263572/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T08:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160263572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160263620"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160263620"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It might be clearer if there is a standalone method for destroying the object.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T08:28:18Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160263620",
            "id": 2160263620,
            "line": 49,
            "node_id": "PRRC_kwDOAPphoM6AwwHE",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 49,
            "original_position": 91,
            "original_start_line": 88,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": 49,
            "pull_request_review_id": 2948094303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160263620/reactions"
            },
            "side": "RIGHT",
            "start_line": 46,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-22T08:43:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160263620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160360994"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160360994"
                }
            },
            "author_association": "MEMBER",
            "body": "What do you think about just having an explanatory comment here instead? In the semantic tokens module this was a separate function, but imo it made things less clear because it doesn't really make sense to destroy the module without detaching all clients first. This is reflected in the semantic tokens module, which redundantly detaches all clients in the `destroy` method, even though `destroy` is called if and only if every client has detached. Also, this required the logic to be duplicated in that module:\r\n\r\nhttps://github.com/neovim/neovim/blob/cfb4d3d2f2e9f17e2e7c642c82d23b3398c39ef8/runtime/lua/vim/lsp/semantic_tokens.lua#L221\r\n\r\nhttps://github.com/neovim/neovim/blob/cfb4d3d2f2e9f17e2e7c642c82d23b3398c39ef8/runtime/lua/vim/lsp/semantic_tokens.lua#L692",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T14:11:18Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160360994",
            "id": 2160360994,
            "in_reply_to_id": 2160263620,
            "line": 49,
            "node_id": "PRRC_kwDOAPphoM6AxH4i",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 49,
            "original_position": 91,
            "original_start_line": 88,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": 49,
            "pull_request_review_id": 2948205346,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160360994/reactions"
            },
            "side": "RIGHT",
            "start_line": 46,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-22T14:11:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160360994",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160366951"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160366951"
                }
            },
            "author_association": "MEMBER",
            "body": "That is true, and would mean we could do the same change for `:handler()`, `:refresh()`, and `:update_ranges()`. Thus `:attach()` and `:detach()` would be the only member functions. But imo a benefit of the object oriented approach is also that read-only variables are in one place, and it could make things easier to understand. So you can just use a member function instead of passing in data all at once as arguments, which can also become annoying if more arguments are needed in the future. But I do see the benefit of extracting functions, especially small ones like `clear_ranges`. Up to you (or anybody else?) :+1:",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T14:31:58Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160366951",
            "id": 2160366951,
            "in_reply_to_id": 2160263572,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AxJVn",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2948213336,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160366951/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T14:31:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160366951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160410246"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160410246"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "That makes sense. I mentioned this because I’m currently working on extracting a common base class from these modules that need state management, and destroy seems like a good candidate for a method in the parent class. I think we can leave it as is for now and revisit it once the base class is completed.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T17:20:55Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160410246",
            "id": 2160410246,
            "in_reply_to_id": 2160263620,
            "line": 49,
            "node_id": "PRRC_kwDOAPphoM6AxT6G",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 49,
            "original_position": 91,
            "original_start_line": 88,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": 49,
            "pull_request_review_id": 2948255229,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160410246/reactions"
            },
            "side": "RIGHT",
            "start_line": 46,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-22T17:33:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160410246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160412471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160412471"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "It’s not a strong opinion, I think keeping things the way they are now is also fine. It’s difficult to draw a clear line between when to use a function and when to use a method, deliberately avoiding them can sometimes lead to another kind of inconvenience. ",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T17:30:16Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160412471",
            "id": 2160412471,
            "in_reply_to_id": 2160263572,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AxUc3",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2948255229,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160412471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T17:33:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160412471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160447983"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160447983"
                }
            },
            "author_association": "MEMBER",
            "body": "I wouldn't underscore it (unless we don't want to document it). New APIs are subject to breaking changes before being released.",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T19:39:46Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  client_state.range_index = nil\n+end\n+\n+---@package\n+---@param client_state vim.lsp.linked_editing_range.state\n+function LinkedEditor:update_ranges(client_state)\n+  if not client_state.range_index then\n+    return\n+  end\n+\n+  local buf = self.bufnr\n+  local ns = client_state.namespace\n+  local ranges = api.nvim_buf_get_extmarks(buf, ns, 0, -1, { details = true })\n+  if not next(ranges) then\n+    return\n+  end\n+\n+  local r = ranges[client_state.range_index]\n+  local replacement = api.nvim_buf_get_text(buf, r[2], r[3], r[4].end_row, r[4].end_col, {})\n+\n+  if not string.match(table.concat(replacement, '\\n'), client_state.word_pattern) then\n+    api.nvim_buf_clear_namespace(buf, ns, 0, -1)\n+    client_state.range_index = nil\n+    return\n+  end\n+\n+  for i, range in ipairs(ranges) do\n+    if i ~= client_state.range_index then\n+      vim.cmd.undojoin()\n+      api.nvim_buf_set_text(\n+        buf,\n+        range[2],\n+        range[3],\n+        range[4].end_row,\n+        range[4].end_col,\n+        replacement\n+      )\n+    end\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+---@param err lsp.ResponseError?\n+---@param result lsp.LinkedEditingRanges?\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:handler(client_id, err, result, ctx)\n+  if err then\n+    log.error('linkededitingrange', err)\n+    return\n+  end\n+  local bufnr = assert(ctx.bufnr)\n+\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  if not api.nvim_buf_is_loaded(bufnr) or util.buf_versions[bufnr] ~= ctx.version then\n+    return\n+  end\n+\n+  self:clear_ranges(client_id)\n+\n+  if not result then\n+    return\n+  end\n+\n+  local client = assert(vim.lsp.get_client_by_id(client_id))\n+\n+  local lines = api.nvim_buf_get_lines(bufnr, 0, -1, false)\n+  local curpos = api.nvim_win_get_cursor(0)\n+  local cursor_range = { curpos[1] - 1, curpos[2], curpos[1] - 1, curpos[2] }\n+  for i, range in ipairs(result.ranges) do\n+    local start_line = range.start.line\n+    local line = lines and lines[start_line + 1] or ''\n+    range.start.character =\n+      vim.str_byteindex(line, client.offset_encoding, range.start.character, false)\n+    local end_line = range['end'].line\n+    line = lines and lines[end_line + 1] or ''\n+    range['end'].character =\n+      vim.str_byteindex(line, client.offset_encoding, range['end'].character, false)\n+\n+    api.nvim_buf_set_extmark(bufnr, client_state.namespace, start_line, range.start.character, {\n+      end_line = end_line,\n+      end_col = range['end'].character,\n+      hl_group = 'LspReferenceTarget',\n+      right_gravity = false,\n+      end_right_gravity = true,\n+    })\n+\n+    local range_tuple =\n+      { range.start.line, range.start.character, range['end'].line, range['end'].character }\n+    if Range.contains(range_tuple, cursor_range) then\n+      client_state.range_index = i\n+    end\n+  end\n+\n+  -- TODO: Apply the client's own word pattern, if it exists\n+end\n+\n+---@package\n+---@param results table<integer, {err: lsp.ResponseError?, result: lsp.LinkedEditingRanges?}>\n+---@param ctx lsp.HandlerContext\n+function LinkedEditor:multi_handler(results, ctx)\n+  for client_id, result in pairs(results) do\n+    self:handler(client_id, result.err, result.result, ctx)\n+  end\n+end\n+\n+---Refresh linked editing ranges\n+---@package\n+function LinkedEditor:refresh()\n+  local win = api.nvim_get_current_win()\n+  local method = ms.textDocument_linkedEditingRange\n+  local bufnr = self.bufnr\n+\n+  util._cancel_requests({\n+    bufnr = bufnr,\n+    method = method,\n+    type = 'pending',\n+  })\n+  vim.lsp.buf_request_all(bufnr, method, function(client)\n+    return vim.lsp.util.make_position_params(win, client.offset_encoding)\n+  end, function(...)\n+    self:multi_handler(...)\n+  end)\n+end\n+\n+--- Start a linked editing session for the given buffer with the given client. The client must\n+--- already be attached to the buffer.\n+---\n+--- NOTE: This is currently called automatically by |vim.lsp.buf_attach_client()|. To\n+--- opt-out of linked editing ranges with a server that supports it, you can\n+--- delete the `linkedEditingRangeProvider` table from the {server_capabilities} of\n+--- your client in your |LspAttach| callback or your configuration's\n+--- `on_attach` callback:\n+---\n+--- ```lua\n+--- client.server_capabilities.linkedEditingRangeProvider = nil\n+--- ```\n+---\n+---@param bufnr integer\n+---@param client_id integer\n+function M.start(bufnr, client_id)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160447983",
            "id": 2160447983,
            "in_reply_to_id": 2160262950,
            "line": 235,
            "node_id": "PRRC_kwDOAPphoM6AxdHv",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 235,
            "original_position": 246,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": 235,
            "pull_request_review_id": 2948293861,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160447983/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T19:39:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160447983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34388#discussion_r2160452432"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34388"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160452432"
                }
            },
            "author_association": "MEMBER",
            "body": "Personally I don't see a lot of gain in OOPing these modules if we only have a single instance of the class at any point (here there's only a single active linked editor). But that's just my personal opinion and I don't think that we should bikeshed over this and/or make it a blocking thing for this amazing new feature 🚀 ",
            "commit_id": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
            "created_at": "2025-06-22T19:43:49Z",
            "diff_hunk": "@@ -0,0 +1,294 @@\n+local util = require('vim.lsp.util')\n+local log = require('vim.lsp.log')\n+local ms = require('vim.lsp.protocol').Methods\n+local Range = require('vim.treesitter._range')\n+local api = vim.api\n+local M = {}\n+\n+---@class (private) vim.lsp.linked_editing_range.state Global state for linked editing ranges\n+---An optional word pattern (regular expression) that describes valid contents for the given ranges.\n+---@field word_pattern string\n+---@field range_index? integer The index of the range that the cursor is on.\n+---@field namespace integer namespace for range extmarks\n+\n+---@class (private) vim.lsp.linked_editing_range.LinkedEditor\n+---@field active table<integer, vim.lsp.linked_editing_range.LinkedEditor>\n+---@field bufnr integer\n+---@field augroup integer augroup for buffer events\n+---@field client_states table<integer, vim.lsp.linked_editing_range.state>\n+local LinkedEditor = { active = {} }\n+\n+---Construct a new LinkedEditor for the buffer\n+---\n+---@private\n+---@param bufnr integer\n+---@return vim.lsp.linked_editing_range.LinkedEditor\n+function LinkedEditor.new(bufnr)\n+  local self = setmetatable({}, { __index = LinkedEditor })\n+\n+  self.bufnr = bufnr\n+  local augroup =\n+    api.nvim_create_augroup('nvim.lsp.linked_editing_range:' .. bufnr, { clear = true })\n+  self.augroup = augroup\n+  self.client_states = {}\n+\n+  api.nvim_create_autocmd({ 'TextChanged', 'TextChangedI' }, {\n+    buffer = bufnr,\n+    group = augroup,\n+    callback = function()\n+      for _, client_state in pairs(self.client_states) do\n+        self:update_ranges(client_state)\n+      end\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('CursorMoved', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function()\n+      self:refresh()\n+    end,\n+  })\n+  api.nvim_create_autocmd('LspDetach', {\n+    group = augroup,\n+    buffer = bufnr,\n+    callback = function(args)\n+      self:detach(args.data.client_id)\n+    end,\n+  })\n+\n+  LinkedEditor.active[bufnr] = self\n+  return self\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:attach(client_id)\n+  if self.client_states[client_id] then\n+    return\n+  end\n+  self.client_states[client_id] = {\n+    namespace = api.nvim_create_namespace('nvim.lsp.linked_editing_range:' .. client_id),\n+    word_pattern = '^[%w%-_]*$',\n+  }\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:detach(client_id)\n+  local client_state = self.client_states[client_id]\n+  if not client_state then\n+    return\n+  end\n+\n+  --TODO: delete namespace if/when that becomes possible\n+  api.nvim_buf_clear_namespace(self.bufnr, client_state.namespace, 0, -1)\n+  self.client_states[client_id] = nil\n+\n+  if vim.tbl_isempty(self.client_states) then\n+    api.nvim_del_augroup_by_id(self.augroup)\n+    LinkedEditor.active[self.bufnr] = nil\n+  end\n+end\n+\n+---@package\n+---@param client_id integer\n+function LinkedEditor:clear_ranges(client_id)",
            "html_url": "https://github.com/neovim/neovim/pull/34388#discussion_r2160452432",
            "id": 2160452432,
            "in_reply_to_id": 2160263572,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AxeNQ",
            "original_commit_id": "8795ad56ffb31b8f1760a612139ec7cd8338d6c8",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/linked_editing_range.lua",
            "position": null,
            "pull_request_review_id": 2948297168,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160452432/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T19:43:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160452432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "No clue why `cmdline_spec` tests are failing :disappointed: ",
            "created_at": "2025-06-10T20:21:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2960489098",
            "id": 2960489098,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6wdXqK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2960489098/reactions"
            },
            "updated_at": "2025-06-10T20:21:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2960489098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> No clue why `cmdline_spec` tests are failing 😞\r\n\r\nThat's because of the addition of the highlight group. I had to update those tests in https://github.com/neovim/neovim/pull/31959 too. You should just update the tests to use the new value that's shown in the test results.",
            "created_at": "2025-06-10T21:15:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2960600479",
            "id": 2960600479,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6wdy2f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2960600479/reactions"
            },
            "updated_at": "2025-06-10T21:15:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2960600479",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thank you, you're a life saver!",
            "created_at": "2025-06-10T22:04:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2960687091",
            "id": 2960687091,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6weH_z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2960687091/reactions"
            },
            "updated_at": "2025-06-10T22:04:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2960687091",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've migrated to an OOP style approach similar to the one in the semantic tokens handler, let me know what you think (cc @ofseed). I can't figure out how to disable linked editing with `lsp.config` yet; I tried this:\r\n\r\n```lua\r\nvim.lsp.config('*', {\r\n  capabilities = {\r\n    textDocument = {\r\n      linkedEditingRange = false,\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nbut it still seems to perform linked editing...",
            "created_at": "2025-06-22T07:00:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2993984674",
            "id": 2993984674,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6ydJSi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993984674/reactions"
            },
            "updated_at": "2025-06-22T07:00:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993984674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah, that makes sense. This PR at least works the same way as semantic tokens, ie it stops if the server capability is disabled. Is that acceptable for now?",
            "created_at": "2025-06-22T08:50:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2994053887",
            "id": 2994053887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6ydaL_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2994053887/reactions"
            },
            "updated_at": "2025-06-22T08:50:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2994053887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think so, it might be better to create another PR if we want to disable it after disabling client capabilities.",
            "created_at": "2025-06-22T09:11:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2994063515",
            "id": 2994063515,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6ydcib",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2994063515/reactions"
            },
            "updated_at": "2025-06-22T09:11:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2994063515",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok thanks so much ofseed; I have one last cleanup patch to push then I think this will be good",
            "created_at": "2025-06-22T18:31:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/34388#issuecomment-2994365108",
            "id": 2994365108,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
            "node_id": "IC_kwDOAPphoM6yemK0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2994365108/reactions"
            },
            "updated_at": "2025-06-22T18:31:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2994365108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34388/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34388/commits",
    "created_at": "2025-06-09T02:18:22Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34388.diff",
    "draft": false,
    "head": {
        "label": "ribru17:linked_editing",
        "ref": "linked_editing",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ribru17/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ribru17/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ribru17/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ribru17/neovim/branches{/branch}",
            "clone_url": "https://github.com/ribru17/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ribru17/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ribru17/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ribru17/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ribru17/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ribru17/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ribru17/neovim/contributors",
            "created_at": "2023-12-31T05:02:30Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ribru17/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ribru17/neovim/downloads",
            "events_url": "https://api.github.com/repos/ribru17/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ribru17/neovim/forks",
            "full_name": "ribru17/neovim",
            "git_commits_url": "https://api.github.com/repos/ribru17/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ribru17/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ribru17/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ribru17/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ribru17/neovim/hooks",
            "html_url": "https://github.com/ribru17/neovim",
            "id": 737455179,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ribru17/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ribru17/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ribru17/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ribru17/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ribru17/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ribru17/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ribru17/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ribru17/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK_SsSw",
            "notifications_url": "https://api.github.com/repos/ribru17/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ribru17/neovim/pulls{/number}",
            "pushed_at": "2025-06-23T15:09:40Z",
            "releases_url": "https://api.github.com/repos/ribru17/neovim/releases{/id}",
            "size": 322851,
            "ssh_url": "git@github.com:ribru17/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ribru17/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ribru17/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ribru17/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ribru17/neovim/subscription",
            "svn_url": "https://github.com/ribru17/neovim",
            "tags_url": "https://api.github.com/repos/ribru17/neovim/tags",
            "teams_url": "https://api.github.com/repos/ribru17/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ribru17/neovim/git/trees{/sha}",
            "updated_at": "2025-06-23T15:07:09Z",
            "url": "https://api.github.com/repos/ribru17/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34388",
    "id": 2577182085,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34388",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "0ecf86d3f4ffa86c3e91947ec51bd61b11b177ea",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6ZnK2F",
    "number": 34388,
    "patch_url": "https://github.com/neovim/neovim/pull/34388.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34388/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6b1c3b67cf9bb4446af13206e638787f48ddf1e6",
    "title": "feat(lsp): support linked editing ranges",
    "updated_at": "2025-06-23T15:09:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34388",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17",
        "user_view_type": "public"
    }
}