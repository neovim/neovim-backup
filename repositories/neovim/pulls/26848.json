{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26848/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26848/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26848"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26848"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26848/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/4190ea90db2445efc4694ed90ec529f0a6cd952a"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5945,
            "forks_count": 5945,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1874,
            "open_issues_count": 1874,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-03-18T00:13:05Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 313072,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 87314,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-03-18T02:30:01Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 87314,
            "watchers_count": 87314,
            "web_commit_signoff_required": false
        },
        "sha": "a064ed622927b4c5e30165abbe54db841359c71f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "fix(health): vim.system.health stdout/stderr capture, and add tests\r\n\r\nProblem:\r\n- `vim.system.health()` was not capturing stdout and stderr correctly,\r\n  which results in not showing the error/debug messages.\r\n- file download via python (not via curl) has SyntaxError.\r\n- (Note: These are regression bugs made in #22962 while refactoring into lua)\r\n\r\nSolution:\r\n- Refactor using `vim.system()`, and write functional tests.\r\n- Add end-to-end functional tests for the recently refactored provider\r\n  healthcheck implementations. (See #26839)\r\n\r\nOther bugfixes:\r\n- python: Fix a few minor errors on error handling.\r\n- python: Fix a bug on parsing `$PYENV_ROOT`.\r\n\r\nOther accompanied fixes/refactoring:\r\n- Change utility functions introduced in #26839 as private, e.g.:\r\n  `vim.health.system()` -> `vim.health._system()`\r\n  `vim.health.cmd_ok()` -> `vim.health._cmd_ok()`\r\n  `vim.health.provider_disabled()` -> `vim.health._provider_disabled()`\r\n- Remove `stdin` from `vim.health.system()`, as it is not being used.\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439343327"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439343327"
                }
            },
            "author_association": "MEMBER",
            "body": "The reason I didn't use `@private` is because the description made it sound like it's for class members only https://luals.github.io/wiki/annotations/#private. Maybe it's just a bad description though?",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T10:58:11Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439343327",
            "id": 1439343327,
            "line": 299,
            "node_id": "PRRC_kwDOAPphoM5VyqLf",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 299,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": 36,
            "pull_request_review_id": 1800256993,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439343327/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T10:58:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439343327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439344999"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439344999"
                }
            },
            "author_association": "MEMBER",
            "body": "I think mixing the variable name and its typing like this looks bad. I know I wrote this, but let's switch this.\r\n\r\n```suggestion\r\n--- @param args table? Optional arguments:\r\n```",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T11:00:31Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n+--- @private\n --- Run a system command and timeout after 30 seconds.\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n+--- @param cmd string[] Command arguments to execute\n+--- @param args? table Optional arguments:",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439344999",
            "id": 1439344999,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Vyqln",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 321,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": null,
            "pull_request_review_id": 1800259744,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439344999/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T11:00:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439344999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439427622"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439427622"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh wait, is the difference that the `?` in parameter name indicates that it's an optional argument? OK, maybe this makes more sense in that case. Ignore this comment.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T12:58:52Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n+--- @private\n --- Run a system command and timeout after 30 seconds.\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n+--- @param cmd string[] Command arguments to execute\n+--- @param args? table Optional arguments:",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439427622",
            "id": 1439427622,
            "in_reply_to_id": 1439344999,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Vy-wm",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 321,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": null,
            "pull_request_review_id": 1800391527,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439427622/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T12:58:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439427622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439434644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439434644"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, that is it precisely.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T13:08:59Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n+--- @private\n --- Run a system command and timeout after 30 seconds.\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n+--- @param cmd string[] Command arguments to execute\n+--- @param args? table Optional arguments:",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439434644",
            "id": 1439434644,
            "in_reply_to_id": 1439344999,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5VzAeU",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 321,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": null,
            "pull_request_review_id": 1800403243,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439434644/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T13:09:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439434644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439435260"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439435260"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree that [`@private`](https://luals.github.io/wiki/annotations/#private) not a valid LuaCATS annotation. Neither `@package` is (A packaged function cannot be accessed from another file). But such functions can be simply defined as `local`. I think, throughout the neovim codebase, `@private` `@package` are being abused and we were using these annotations to simply marking functions as *not exposed for a public use*. I don't think there is a strict, and valid annotations in LuaCATS for this purpose...",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T13:09:48Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439435260",
            "id": 1439435260,
            "in_reply_to_id": 1439343327,
            "line": 299,
            "node_id": "PRRC_kwDOAPphoM5VzAn8",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 299,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": 36,
            "pull_request_review_id": 1800404359,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439435260/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T13:09:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439435260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439436356"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439436356"
                }
            },
            "author_association": "MEMBER",
            "body": "Eh, I think it should be fine. Let's keep it.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T13:11:17Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439436356",
            "id": 1439436356,
            "in_reply_to_id": 1439343327,
            "line": 299,
            "node_id": "PRRC_kwDOAPphoM5VzA5E",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 299,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": 36,
            "pull_request_review_id": 1800406102,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439436356/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T13:11:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439436356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439438897"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439438897"
                }
            },
            "author_association": "MEMBER",
            "body": "> I think, throughout the neovim codebase, @private @package are being abused and we were using these annotations to simply marking functions as not exposed for a public use.\n\nNot abused. We were using them for both LuaLS and our docgen.\n\nWe use `@package` on class methods which are accessed within the same file. We use `@private` on class methods and module fields, however LuaLS only provides diagnostics for use on class methods.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T13:14:13Z",
            "diff_hunk": "@@ -307,32 +308,37 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439438897",
            "id": 1439438897,
            "in_reply_to_id": 1439343327,
            "line": 299,
            "node_id": "PRRC_kwDOAPphoM5VzBgx",
            "original_commit_id": "32b0e1f6813b8539daeb218b9564a1ebbeb555cd",
            "original_line": 299,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": 36,
            "pull_request_review_id": 1800410000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439438897/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T13:14:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439438897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439932193"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439932193"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we need to wrap pcall around both `vim.system()` and `wait()`. One should run unguarded to minimise ignoring other errors.\n\nWould it also make sense to only use `pcall` when `ignore_error` is true?",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T23:00:26Z",
            "diff_hunk": "@@ -307,72 +295,70 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n---- Run a system command and timeout after 30 seconds.\n+--- @private\n+---\n+--- Run a system command and timeout after {timeout} seconds, and return stdout as string.\n+--- When the command fails (non-zero exit code), throw an error with stdout/stderr output (unless\n+--- ignore_error is set).\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n----                   - stdin (string): Data to write to the job's stdin\n----                   - stderr (boolean): Append stderr to stdout\n----                   - ignore_error (boolean): If true, ignore error output\n----                   - timeout (number): Number of seconds to wait before timing out (default 30)\n-function M.system(cmd, args)\n-  args = args or {}\n-  local stdin = args.stdin or ''\n-  local stderr = vim.F.if_nil(args.stderr, false)\n-  local ignore_error = vim.F.if_nil(args.ignore_error, false)\n-\n-  local shell_error_code = 0\n-  local opts = {\n-    add_stderr_to_output = stderr,\n-    output = '',\n-    stderr = '',\n-    on_stdout = system_handler,\n-    on_stderr = system_handler,\n-    on_exit = function(_, data)\n-      shell_error_code = data\n-    end,\n-  }\n-  local jobid = vim.fn.jobstart(cmd, opts)\n-\n-  if jobid < 1 then\n-    local message =\n-      string.format('Command error (job=%d): %s (in %s)', jobid, shellify(cmd), vim.loop.cwd())\n-    error(message)\n-    return opts.output, 1\n+--- @param cmd string[] Command arguments to execute\n+--- @param opts? table Optional arguments:\n+---               - stderr (boolean): Append stderr to stdout\n+---               - ignore_error (boolean): If true, don't raise but return error as string.\n+---               - timeout (number): Number of seconds to wait before timing out (default 30)\n+--- @return string stdout output, also stderr if { stderr = true }\n+--- @return integer exit code\n+function M.system(cmd, opts)\n+  opts = opts or {}\n+  local stderr = vim.F.if_nil(opts.stderr, false)\n+  local ignore_error = vim.F.if_nil(opts.ignore_error, false)\n+  local timeout = vim.F.if_nil(opts.timeout, 30) * 1000 ---@type integer\n+\n+  local ok, p = pcall(function() -- catch ENOENT errors (command not found)\n+    return vim.system(cmd, { timeout = timeout }):wait()",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439932193",
            "id": 1439932193,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V058h",
            "original_commit_id": "65b71237dab102d4f42ca173aecd0b51fab14c2f",
            "original_line": 324,
            "original_position": 89,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": null,
            "pull_request_review_id": 1801190729,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439932193/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T23:04:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439932193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439936351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439936351"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we actually need this line? From what I can tell it's not used appropriately from any of the callers.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T23:10:28Z",
            "diff_hunk": "@@ -307,72 +295,70 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n---- Run a system command and timeout after 30 seconds.\n+--- @private\n+---\n+--- Run a system command and timeout after {timeout} seconds, and return stdout as string.\n+--- When the command fails (non-zero exit code), throw an error with stdout/stderr output (unless\n+--- ignore_error is set).\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n----                   - stdin (string): Data to write to the job's stdin\n----                   - stderr (boolean): Append stderr to stdout\n----                   - ignore_error (boolean): If true, ignore error output\n----                   - timeout (number): Number of seconds to wait before timing out (default 30)\n-function M.system(cmd, args)\n-  args = args or {}\n-  local stdin = args.stdin or ''\n-  local stderr = vim.F.if_nil(args.stderr, false)\n-  local ignore_error = vim.F.if_nil(args.ignore_error, false)\n-\n-  local shell_error_code = 0\n-  local opts = {\n-    add_stderr_to_output = stderr,\n-    output = '',\n-    stderr = '',\n-    on_stdout = system_handler,\n-    on_stderr = system_handler,\n-    on_exit = function(_, data)\n-      shell_error_code = data\n-    end,\n-  }\n-  local jobid = vim.fn.jobstart(cmd, opts)\n-\n-  if jobid < 1 then\n-    local message =\n-      string.format('Command error (job=%d): %s (in %s)', jobid, shellify(cmd), vim.loop.cwd())\n-    error(message)\n-    return opts.output, 1\n+--- @param cmd string[] Command arguments to execute\n+--- @param opts? table Optional arguments:\n+---               - stderr (boolean): Append stderr to stdout\n+---               - ignore_error (boolean): If true, don't raise but return error as string.\n+---               - timeout (number): Number of seconds to wait before timing out (default 30)\n+--- @return string stdout output, also stderr if { stderr = true }\n+--- @return integer exit code\n+function M.system(cmd, opts)\n+  opts = opts or {}\n+  local stderr = vim.F.if_nil(opts.stderr, false)\n+  local ignore_error = vim.F.if_nil(opts.ignore_error, false)\n+  local timeout = vim.F.if_nil(opts.timeout, 30) * 1000 ---@type integer\n+\n+  local ok, p = pcall(function() -- catch ENOENT errors (command not found)\n+    return vim.system(cmd, { timeout = timeout }):wait()\n+  end)\n+  if not ok then\n+    local err = p --[[ @as string ]]\n+    if ignore_error then\n+      return ('Command error: %s\\n (in %s)\\n'):format(shellify(cmd), vim.loop.cwd()) .. err, 1",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439936351",
            "id": 1439936351,
            "line": 333,
            "node_id": "PRRC_kwDOAPphoM5V069f",
            "original_commit_id": "65b71237dab102d4f42ca173aecd0b51fab14c2f",
            "original_line": 333,
            "original_position": 94,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": 105,
            "pull_request_review_id": 1801196597,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439936351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T23:10:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439936351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1439937536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439937536"
                }
            },
            "author_association": "MEMBER",
            "body": "For now it's not used, but it would be a more consistent behavior to not throw when `ignore_error = true`.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-02T23:13:29Z",
            "diff_hunk": "@@ -307,72 +295,70 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n---- Run a system command and timeout after 30 seconds.\n+--- @private\n+---\n+--- Run a system command and timeout after {timeout} seconds, and return stdout as string.\n+--- When the command fails (non-zero exit code), throw an error with stdout/stderr output (unless\n+--- ignore_error is set).\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n----                   - stdin (string): Data to write to the job's stdin\n----                   - stderr (boolean): Append stderr to stdout\n----                   - ignore_error (boolean): If true, ignore error output\n----                   - timeout (number): Number of seconds to wait before timing out (default 30)\n-function M.system(cmd, args)\n-  args = args or {}\n-  local stdin = args.stdin or ''\n-  local stderr = vim.F.if_nil(args.stderr, false)\n-  local ignore_error = vim.F.if_nil(args.ignore_error, false)\n-\n-  local shell_error_code = 0\n-  local opts = {\n-    add_stderr_to_output = stderr,\n-    output = '',\n-    stderr = '',\n-    on_stdout = system_handler,\n-    on_stderr = system_handler,\n-    on_exit = function(_, data)\n-      shell_error_code = data\n-    end,\n-  }\n-  local jobid = vim.fn.jobstart(cmd, opts)\n-\n-  if jobid < 1 then\n-    local message =\n-      string.format('Command error (job=%d): %s (in %s)', jobid, shellify(cmd), vim.loop.cwd())\n-    error(message)\n-    return opts.output, 1\n+--- @param cmd string[] Command arguments to execute\n+--- @param opts? table Optional arguments:\n+---               - stderr (boolean): Append stderr to stdout\n+---               - ignore_error (boolean): If true, don't raise but return error as string.\n+---               - timeout (number): Number of seconds to wait before timing out (default 30)\n+--- @return string stdout output, also stderr if { stderr = true }\n+--- @return integer exit code\n+function M.system(cmd, opts)\n+  opts = opts or {}\n+  local stderr = vim.F.if_nil(opts.stderr, false)\n+  local ignore_error = vim.F.if_nil(opts.ignore_error, false)\n+  local timeout = vim.F.if_nil(opts.timeout, 30) * 1000 ---@type integer\n+\n+  local ok, p = pcall(function() -- catch ENOENT errors (command not found)\n+    return vim.system(cmd, { timeout = timeout }):wait()\n+  end)\n+  if not ok then\n+    local err = p --[[ @as string ]]\n+    if ignore_error then\n+      return ('Command error: %s\\n (in %s)\\n'):format(shellify(cmd), vim.loop.cwd()) .. err, 1",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1439937536",
            "id": 1439937536,
            "in_reply_to_id": 1439936351,
            "line": 333,
            "node_id": "PRRC_kwDOAPphoM5V07QA",
            "original_commit_id": "65b71237dab102d4f42ca173aecd0b51fab14c2f",
            "original_line": 333,
            "original_position": 94,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": 105,
            "pull_request_review_id": 1801198211,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439937536/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-02T23:13:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1439937536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1440013657"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440013657"
                }
            },
            "author_association": "MEMBER",
            "body": "Great point, fixed as per your suggestion.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-03T02:30:13Z",
            "diff_hunk": "@@ -307,72 +295,70 @@ local function shellify(cmd)\n   return table.concat(escaped, ' ')\n end\n \n+--- @private\n function M.cmd_ok(cmd)\n   local out = vim.fn.system(cmd)\n   return vim.v.shell_error == 0, out\n end\n \n---- Run a system command and timeout after 30 seconds.\n+--- @private\n+---\n+--- Run a system command and timeout after {timeout} seconds, and return stdout as string.\n+--- When the command fails (non-zero exit code), throw an error with stdout/stderr output (unless\n+--- ignore_error is set).\n ---\n---- @param cmd table List of command arguments to execute\n---- @param args ?table Optional arguments:\n----                   - stdin (string): Data to write to the job's stdin\n----                   - stderr (boolean): Append stderr to stdout\n----                   - ignore_error (boolean): If true, ignore error output\n----                   - timeout (number): Number of seconds to wait before timing out (default 30)\n-function M.system(cmd, args)\n-  args = args or {}\n-  local stdin = args.stdin or ''\n-  local stderr = vim.F.if_nil(args.stderr, false)\n-  local ignore_error = vim.F.if_nil(args.ignore_error, false)\n-\n-  local shell_error_code = 0\n-  local opts = {\n-    add_stderr_to_output = stderr,\n-    output = '',\n-    stderr = '',\n-    on_stdout = system_handler,\n-    on_stderr = system_handler,\n-    on_exit = function(_, data)\n-      shell_error_code = data\n-    end,\n-  }\n-  local jobid = vim.fn.jobstart(cmd, opts)\n-\n-  if jobid < 1 then\n-    local message =\n-      string.format('Command error (job=%d): %s (in %s)', jobid, shellify(cmd), vim.loop.cwd())\n-    error(message)\n-    return opts.output, 1\n+--- @param cmd string[] Command arguments to execute\n+--- @param opts? table Optional arguments:\n+---               - stderr (boolean): Append stderr to stdout\n+---               - ignore_error (boolean): If true, don't raise but return error as string.\n+---               - timeout (number): Number of seconds to wait before timing out (default 30)\n+--- @return string stdout output, also stderr if { stderr = true }\n+--- @return integer exit code\n+function M.system(cmd, opts)\n+  opts = opts or {}\n+  local stderr = vim.F.if_nil(opts.stderr, false)\n+  local ignore_error = vim.F.if_nil(opts.ignore_error, false)\n+  local timeout = vim.F.if_nil(opts.timeout, 30) * 1000 ---@type integer\n+\n+  local ok, p = pcall(function() -- catch ENOENT errors (command not found)\n+    return vim.system(cmd, { timeout = timeout }):wait()",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1440013657",
            "id": 1440013657,
            "in_reply_to_id": 1439932193,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5V1N1Z",
            "original_commit_id": "65b71237dab102d4f42ca173aecd0b51fab14c2f",
            "original_line": 324,
            "original_position": 89,
            "original_start_line": null,
            "path": "runtime/lua/vim/health.lua",
            "position": null,
            "pull_request_review_id": 1801296854,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440013657/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-03T02:30:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1440013657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1441648801"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441648801"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we use `vim.system()` here directly? We don't need to ignore ENOENT error, so the only errors will be communicated via the exit code.",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-04T11:41:25Z",
            "diff_hunk": "@@ -69,32 +69,40 @@ local function check_bin(bin)\n end\n \n -- Fetch the contents of a URL.\n+---@return string error message. If success, returns an empty string (\"\").\n local function download(url)\n   local has_curl = executable('curl')\n-  if has_curl and vim.fn.system({ 'curl', '-V' }):find('Protocols:.*https') then\n-    local out, rc = health.system({ 'curl', '-sL', url }, { stderr = true, ignore_error = true })\n+  if\n+    has_curl\n+    and health._system({ 'curl', '-V' }, { ignore_error = true }):find('Protocols:.*https')",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1441648801",
            "id": 1441648801,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM5V7dCh",
            "original_commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "original_line": 77,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/provider/python/health.lua",
            "position": 37,
            "pull_request_review_id": 1803995451,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441648801/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-04T11:43:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441648801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1441649074"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441649074"
                }
            },
            "author_association": "MEMBER",
            "body": "and here",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-04T11:41:45Z",
            "diff_hunk": "@@ -69,32 +69,40 @@ local function check_bin(bin)\n end\n \n -- Fetch the contents of a URL.\n+---@return string error message. If success, returns an empty string (\"\").\n local function download(url)\n   local has_curl = executable('curl')\n-  if has_curl and vim.fn.system({ 'curl', '-V' }):find('Protocols:.*https') then\n-    local out, rc = health.system({ 'curl', '-sL', url }, { stderr = true, ignore_error = true })\n+  if\n+    has_curl\n+    and health._system({ 'curl', '-V' }, { ignore_error = true }):find('Protocols:.*https')\n+  then\n+    local out, rc = health._system({ 'curl', '-sL', url }, { stderr = true, ignore_error = true })",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1441649074",
            "id": 1441649074,
            "line": 79,
            "node_id": "PRRC_kwDOAPphoM5V7dGy",
            "original_commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "original_line": 79,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/lua/provider/python/health.lua",
            "position": 39,
            "pull_request_review_id": 1803995451,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441649074/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-04T11:43:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441649074",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26848#discussion_r1441649314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26848"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441649314"
                }
            },
            "author_association": "MEMBER",
            "body": "and even here",
            "commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "created_at": "2024-01-04T11:42:02Z",
            "diff_hunk": "@@ -69,32 +69,40 @@ local function check_bin(bin)\n end\n \n -- Fetch the contents of a URL.\n+---@return string error message. If success, returns an empty string (\"\").\n local function download(url)\n   local has_curl = executable('curl')\n-  if has_curl and vim.fn.system({ 'curl', '-V' }):find('Protocols:.*https') then\n-    local out, rc = health.system({ 'curl', '-sL', url }, { stderr = true, ignore_error = true })\n+  if\n+    has_curl\n+    and health._system({ 'curl', '-V' }, { ignore_error = true }):find('Protocols:.*https')\n+  then\n+    local out, rc = health._system({ 'curl', '-sL', url }, { stderr = true, ignore_error = true })\n     if rc ~= 0 then\n       return 'curl error with ' .. url .. ': ' .. rc\n     else\n       return out\n     end\n   elseif executable('python') then\n-    local script = \"try:\\n\\\n-          from urllib.request import urlopen\\n\\\n-          except ImportError:\\n\\\n-          from urllib2 import urlopen\\n\\\n-          response = urlopen('\" .. url .. \"')\\n\\\n-          print(response.read().decode('utf8'))\\n\"\n-    local out, rc = health.system({ 'python', '-c', script })\n-    if out == '' and rc ~= 0 then\n+    local script = ([[if True:\n+    try:\n+      from urllib.request import urlopen\n+    except ImportError:\n+      from urllib2 import urlopen\n+    response = urlopen('%s')\n+    print(response.read().decode('utf8'))\n+    ]]):format(url)\n+    local out, rc = health._system(\n+      { 'python', '-c', script },\n+      { stderr = true, ignore_error = true }\n+    )",
            "html_url": "https://github.com/neovim/neovim/pull/26848#discussion_r1441649314",
            "id": 1441649314,
            "line": 97,
            "node_id": "PRRC_kwDOAPphoM5V7dKi",
            "original_commit_id": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
            "original_line": 97,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/lua/provider/python/health.lua",
            "position": 65,
            "pull_request_review_id": 1803995451,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441649314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-04T11:43:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1441649314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Is there a reason why this can't use `vim.system` internally?",
            "created_at": "2024-01-02T10:01:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/26848#issuecomment-1873819176",
            "id": 1873819176,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26848",
            "node_id": "IC_kwDOAPphoM5vsDYo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873819176/reactions"
            },
            "updated_at": "2024-01-02T10:01:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873819176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is there a reason why this can't use vim.system internally?\r\n\r\nI don't see any reason for that, and actually we *should* rewrite using `vim.system()`. All the provider checkhealth implementations would need to be refactored (again) to use the new `vim.system` instead of `vim.fn.jobstart`. In #22962 code were simply transpiled from vimscript to lua, apparently...\r\n\r\n",
            "created_at": "2024-01-02T13:05:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/26848#issuecomment-1874002402",
            "id": 1874002402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26848",
            "node_id": "IC_kwDOAPphoM5vswHi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874002402/reactions"
            },
            "updated_at": "2024-01-02T13:05:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874002402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Actually `vim.system()` is much, much simpler and eaiser to use on the client side, so the migration can be a very mechanical and straightforward work. I think it'd better to this refactoring again together at this time, so `vim.health.system` can be removed. I will update this PR to do so.",
            "created_at": "2024-01-02T13:22:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/26848#issuecomment-1874020610",
            "id": 1874020610,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26848",
            "node_id": "IC_kwDOAPphoM5vs0kC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874020610/reactions"
            },
            "updated_at": "2024-01-02T13:45:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874020610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Fixed using `vim.system()`. I kept `vim.health.system()` rather than removing it completely because (1) it's still a convenient wrapper that directly gives stdout as string; (2) I didn't want to repeat `timeout`, i.e., `vim.system():wait(30 * 1000)`; (3) need to protect call when ENOENT so that it does not throw.\r\n\r\nAdditional fix since last review:\r\n\r\n- ~~python: Fix a few minor errors on error handling.~~ -> #26954 \r\n- ~~python: Fix a bug on parsing `$PYENV_ROOT`~~. -> #26953 \r\n- Remove `stdin` from `vim.health.system()`, as it is not being used.\r\n",
            "created_at": "2024-01-02T16:03:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/26848#issuecomment-1874217367",
            "id": 1874217367,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26848",
            "node_id": "IC_kwDOAPphoM5vtkmX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874217367/reactions"
            },
            "updated_at": "2024-01-09T23:01:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874217367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Mark `vim.health.system()` as well as other utility functions ... as private\r\n\r\nIf it's not too much trouble, would also be preferable to prefix them with underscore.",
            "created_at": "2024-01-02T22:48:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/26848#issuecomment-1874656582",
            "id": 1874656582,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26848",
            "node_id": "IC_kwDOAPphoM5vvP1G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874656582/reactions"
            },
            "updated_at": "2024-01-02T22:48:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1874656582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26848/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26848/commits",
    "created_at": "2024-01-02T06:18:28Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26848.diff",
    "draft": true,
    "head": {
        "label": "wookayin:fix-provider-tests",
        "ref": "fix-provider-tests",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/wookayin/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/wookayin/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/wookayin/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/wookayin/neovim/branches{/branch}",
            "clone_url": "https://github.com/wookayin/neovim.git",
            "collaborators_url": "https://api.github.com/repos/wookayin/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/wookayin/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/wookayin/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/wookayin/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/wookayin/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/wookayin/neovim/contributors",
            "created_at": "2022-10-30T19:40:29Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/wookayin/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/wookayin/neovim/downloads",
            "events_url": "https://api.github.com/repos/wookayin/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/wookayin/neovim/forks",
            "full_name": "wookayin/neovim",
            "git_commits_url": "https://api.github.com/repos/wookayin/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/wookayin/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/wookayin/neovim/git/tags{/sha}",
            "git_url": "git://github.com/wookayin/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/wookayin/neovim/hooks",
            "html_url": "https://github.com/wookayin/neovim",
            "id": 559659867,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/wookayin/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/wookayin/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/wookayin/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/wookayin/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/wookayin/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/wookayin/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/wookayin/neovim/merges",
            "milestones_url": "https://api.github.com/repos/wookayin/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOIVu7Ww",
            "notifications_url": "https://api.github.com/repos/wookayin/neovim/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/wookayin/neovim/pulls{/number}",
            "pushed_at": "2024-12-03T05:29:29Z",
            "releases_url": "https://api.github.com/repos/wookayin/neovim/releases{/id}",
            "size": 267022,
            "ssh_url": "git@github.com:wookayin/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/wookayin/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/wookayin/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/wookayin/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/wookayin/neovim/subscription",
            "svn_url": "https://github.com/wookayin/neovim",
            "tags_url": "https://api.github.com/repos/wookayin/neovim/tags",
            "teams_url": "https://api.github.com/repos/wookayin/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/wookayin/neovim/git/trees{/sha}",
            "updated_at": "2024-05-23T03:26:44Z",
            "url": "https://api.github.com/repos/wookayin/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4190ea90db2445efc4694ed90ec529f0a6cd952a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
            "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
            "followers_url": "https://api.github.com/users/wookayin/followers",
            "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
            "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/wookayin",
            "id": 1009873,
            "login": "wookayin",
            "node_id": "MDQ6VXNlcjEwMDk4NzM=",
            "organizations_url": "https://api.github.com/users/wookayin/orgs",
            "received_events_url": "https://api.github.com/users/wookayin/received_events",
            "repos_url": "https://api.github.com/users/wookayin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/wookayin",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26848",
    "id": 1661446670,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26848",
    "labels": [],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 1,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 66,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-03-17T12:23:57Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "PR_kwDOAPphoM5jB6oO",
    "number": 26848,
    "patch_url": "https://github.com/neovim/neovim/pull/26848.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26848/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/4190ea90db2445efc4694ed90ec529f0a6cd952a",
    "title": "fix(health): vim.health.system stdout/stderr capture, and add tests",
    "updated_at": "2025-03-14T12:13:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26848",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
        "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
        "followers_url": "https://api.github.com/users/wookayin/followers",
        "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
        "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wookayin",
        "id": 1009873,
        "login": "wookayin",
        "node_id": "MDQ6VXNlcjEwMDk4NzM=",
        "organizations_url": "https://api.github.com/users/wookayin/orgs",
        "received_events_url": "https://api.github.com/users/wookayin/received_events",
        "repos_url": "https://api.github.com/users/wookayin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wookayin",
        "user_view_type": "public"
    }
}