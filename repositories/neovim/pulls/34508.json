{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34508/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34508/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34508"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34508"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34508/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/46d3ff1a1a1a48f9163857e892a742c44f50ef21"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6140,
            "forks_count": 6140,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1958,
            "open_issues_count": 1958,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-23T23:51:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 329345,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90542,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-24T01:55:09Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90542,
            "watchers_count": 90542,
            "web_commit_signoff_required": false
        },
        "sha": "cfb4d3d2f2e9f17e2e7c642c82d23b3398c39ef8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n\r\nAdding support for [annotated text edits](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textEdit), which allow for user confirmation before applying the change and showing a description of the changes in a workspace edit.",
    "closed_at": "2025-06-23T13:30:50Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148829177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148829177"
                }
            },
            "author_association": "MEMBER",
            "body": "Open to displaying this message differently.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:16:44Z",
            "diff_hunk": "@@ -396,6 +400,54 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- Apply text edits.\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for id: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        vim.ui.select(\n+          { 'Yes', 'No' },\n+          { prompt = string.format('Apply \"%s\"? ', annotation.label) },\n+          function(input)\n+            if input == 'Yes' then\n+              change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+              apply_text_edit(text_edit)\n+            end\n+          end\n+        )\n+      else\n+        change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+        apply_text_edit(text_edit)\n+      end\n+    else\n+      apply_text_edit(text_edit)\n+    end\n+  end\n+\n+  if change_annotations ~= nil and next(change_count) then",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148829177",
            "id": 2148829177,
            "line": 451,
            "node_id": "PRRC_kwDOAPphoM6AFIf5",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 451,
            "original_position": 89,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 236,
            "pull_request_review_id": 2930337394,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148829177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:16:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148829177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148829386"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148829386"
                }
            },
            "author_association": "MEMBER",
            "body": "Because the workspace edit \"owns\" the `ID -> metadata` info of its annotated text edits, I had to modify both `apply_text_edits` and `apply_text_document_edit`.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:17:47Z",
            "diff_hunk": "@@ -650,7 +708,7 @@ function M.apply_workspace_edit(workspace_edit, position_encoding)\n \n   for uri, changes in pairs(all_changes) do\n     local bufnr = vim.uri_to_bufnr(uri)\n-    M.apply_text_edits(changes, bufnr, position_encoding)\n+    M.apply_text_edits(changes, bufnr, position_encoding, workspace_edit.changeAnnotations)",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148829386",
            "id": 2148829386,
            "line": 722,
            "node_id": "PRRC_kwDOAPphoM6AFIjK",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 722,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 287,
            "pull_request_review_id": 2930337734,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148829386/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:17:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148829386",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148830080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148830080"
                }
            },
            "author_association": "MEMBER",
            "body": "Also note that this is the only place (according to the spec) where the edits might have annotations. Other places where we call `apply_text_edits` (like when handling formatting requests) won't have text edits with annotations.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:20:42Z",
            "diff_hunk": "@@ -650,7 +708,7 @@ function M.apply_workspace_edit(workspace_edit, position_encoding)\n \n   for uri, changes in pairs(all_changes) do\n     local bufnr = vim.uri_to_bufnr(uri)\n-    M.apply_text_edits(changes, bufnr, position_encoding)\n+    M.apply_text_edits(changes, bufnr, position_encoding, workspace_edit.changeAnnotations)",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148830080",
            "id": 2148830080,
            "in_reply_to_id": 2148829386,
            "line": 722,
            "node_id": "PRRC_kwDOAPphoM6AFIuA",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 722,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 287,
            "pull_request_review_id": 2930338348,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148830080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:20:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148830080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148831961"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148831961"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n  --- @alias vim.lsp.TextEdit lsp.TextEdit|lsp.AnnotatedTextEdit|{_index: integer}\n```\n",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:28:31Z",
            "diff_hunk": "@@ -323,11 +325,12 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  --- @cast text_edits  (lsp.TextEdit|{_index: integer})[]\n+  --- @alias TextEdit lsp.TextEdit|lsp.AnnotatedTextEdit|{_index: integer}",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148831961",
            "id": 2148831961,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AFJLZ",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 328,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2930340009,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148831961/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:28:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148831961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148832025"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832025"
                }
            },
            "author_association": "MEMBER",
            "body": "Does this mean we can also mark `honorsChangeAnnotations` as true for rename/code action capabilities?",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:28:53Z",
            "diff_hunk": "@@ -558,6 +558,7 @@ function protocol.make_client_capabilities()\n       workspaceEdit = {\n         resourceOperations = { 'rename', 'create', 'delete' },\n         normalizesLineEndings = true,\n+        changeAnnotationSupport = { groupsOnLabel = true },",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148832025",
            "id": 2148832025,
            "line": 567,
            "node_id": "PRRC_kwDOAPphoM6AFJMZ",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 567,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 20,
            "pull_request_review_id": 2930340090,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832025/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148832283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832283"
                }
            },
            "author_association": "MEMBER",
            "body": "I didn't alias this one because I meant it to be \"local\" to the function but idk if LuaLS is smart enough to scope it like that.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:30:36Z",
            "diff_hunk": "@@ -323,11 +325,12 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  --- @cast text_edits  (lsp.TextEdit|{_index: integer})[]\n+  --- @alias TextEdit lsp.TextEdit|lsp.AnnotatedTextEdit|{_index: integer}",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148832283",
            "id": 2148832283,
            "in_reply_to_id": 2148831961,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AFJQb",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 328,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2930340401,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:30:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148832428"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832428"
                }
            },
            "author_association": "MEMBER",
            "body": "ahhh I knew I was forgetting something. I think we can!",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:31:07Z",
            "diff_hunk": "@@ -558,6 +558,7 @@ function protocol.make_client_capabilities()\n       workspaceEdit = {\n         resourceOperations = { 'rename', 'create', 'delete' },\n         normalizesLineEndings = true,\n+        changeAnnotationSupport = { groupsOnLabel = true },",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148832428",
            "id": 2148832428,
            "in_reply_to_id": 2148832025,
            "line": 567,
            "node_id": "PRRC_kwDOAPphoM6AFJSs",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 567,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 20,
            "pull_request_review_id": 2930340510,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832428/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:31:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148832428",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148833433"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148833433"
                }
            },
            "author_association": "MEMBER",
            "body": "I'll just remove the alias for now. No need to have an extra type for this.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:35:57Z",
            "diff_hunk": "@@ -323,11 +325,12 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  --- @cast text_edits  (lsp.TextEdit|{_index: integer})[]\n+  --- @alias TextEdit lsp.TextEdit|lsp.AnnotatedTextEdit|{_index: integer}",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148833433",
            "id": 2148833433,
            "in_reply_to_id": 2148831961,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AFJiZ",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 328,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2930341536,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148833433/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:35:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148833433",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148834455"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148834455"
                }
            },
            "author_association": "MEMBER",
            "body": "Kind of weird that there are separate capabilities for those since they should be implied by the workspace capability, but LSP is weird sometimes.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T21:40:17Z",
            "diff_hunk": "@@ -558,6 +558,7 @@ function protocol.make_client_capabilities()\n       workspaceEdit = {\n         resourceOperations = { 'rename', 'create', 'delete' },\n         normalizesLineEndings = true,\n+        changeAnnotationSupport = { groupsOnLabel = true },",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148834455",
            "id": 2148834455,
            "in_reply_to_id": 2148832025,
            "line": 567,
            "node_id": "PRRC_kwDOAPphoM6AFJyX",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 567,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 20,
            "pull_request_review_id": 2930342502,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148834455/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T21:40:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148834455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148845037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148845037"
                }
            },
            "author_association": "MEMBER",
            "body": "We can indeed support these for rename and code actions since they call `apply_workspace_edit`, which is the code modified in this PR :)",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T22:31:27Z",
            "diff_hunk": "@@ -558,6 +558,7 @@ function protocol.make_client_capabilities()\n       workspaceEdit = {\n         resourceOperations = { 'rename', 'create', 'delete' },\n         normalizesLineEndings = true,\n+        changeAnnotationSupport = { groupsOnLabel = true },",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148845037",
            "id": 2148845037,
            "in_reply_to_id": 2148832025,
            "line": 567,
            "node_id": "PRRC_kwDOAPphoM6AFMXt",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 567,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": 20,
            "pull_request_review_id": 2930352797,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148845037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T22:31:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148845037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148849089"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148849089"
                }
            },
            "author_association": "MEMBER",
            "body": "It isn't smart enough, all types go into a single global namespace.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T22:53:07Z",
            "diff_hunk": "@@ -323,11 +325,12 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  --- @cast text_edits  (lsp.TextEdit|{_index: integer})[]\n+  --- @alias TextEdit lsp.TextEdit|lsp.AnnotatedTextEdit|{_index: integer}",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148849089",
            "id": 2148849089,
            "in_reply_to_id": 2148831961,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AFNXB",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 328,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2930357770,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148849089/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T22:53:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148849089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2148855097"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148855097"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah I remember you telling me that before. Tragic.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-15T23:16:36Z",
            "diff_hunk": "@@ -323,11 +325,12 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  --- @cast text_edits  (lsp.TextEdit|{_index: integer})[]\n+  --- @alias TextEdit lsp.TextEdit|lsp.AnnotatedTextEdit|{_index: integer}",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2148855097",
            "id": 2148855097,
            "in_reply_to_id": 2148831961,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AFO05",
            "original_commit_id": "561f80d12d995ccf99644fd61d6176589d052378",
            "original_line": 328,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2930366825,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148855097/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T23:16:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148855097",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2150799276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150799276"
                }
            },
            "author_association": "MEMBER",
            "body": "How does this behave if the `vim.ui.select` implementation is non-blocking and the text-edits loop continues?\r\nDoes it result in multiple popups and is that safe - in that one could apply them out of order?",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-16T20:18:04Z",
            "diff_hunk": "@@ -396,6 +399,54 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- Apply text edits.\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for id: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        vim.ui.select(\n+          { 'Yes', 'No' },\n+          { prompt = string.format('Apply \"%s\"? ', annotation.label) },\n+          function(input)\n+            if input == 'Yes' then\n+              change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+              apply_text_edit(text_edit)\n+            end\n+          end\n+        )",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2150799276",
            "id": 2150799276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AMpes",
            "original_commit_id": "3d3744003ef3a68529d64023e29045750d5aab11",
            "original_line": 429,
            "original_position": 78,
            "original_start_line": 419,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2933392419,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150799276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-16T20:18:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150799276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2151112313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2151112313"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm great point. The spec says that resource operations should be applied in the order in which they're provided, so if one of them requires confirmation and isn't applied we'll probably want to dismiss the remaining edits too.\r\n\r\nPerhaps we should \"batch\" the confirmations into a single call to `vim.ui.select` with options for \"Applying all\" or \"Dismiss\", and then applying all the edits at once based on that. WDYT?",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-17T00:40:17Z",
            "diff_hunk": "@@ -396,6 +399,54 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- Apply text edits.\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for id: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        vim.ui.select(\n+          { 'Yes', 'No' },\n+          { prompt = string.format('Apply \"%s\"? ', annotation.label) },\n+          function(input)\n+            if input == 'Yes' then\n+              change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+              apply_text_edit(text_edit)\n+            end\n+          end\n+        )",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2151112313",
            "id": 2151112313,
            "in_reply_to_id": 2150799276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AN155",
            "original_commit_id": "3d3744003ef3a68529d64023e29045750d5aab11",
            "original_line": 429,
            "original_position": 78,
            "original_start_line": 419,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2933839889,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2151112313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-17T00:40:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2151112313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2152912115"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2152912115"
                }
            },
            "author_association": "MEMBER",
            "body": "> Perhaps we should \"batch\" the confirmations into a single call to vim.ui.select with options for \"Applying all\" or \"Dismiss\", and then applying all the edits at once based on that. WDYT?\r\n\r\nSounds good to me",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-17T18:29:17Z",
            "diff_hunk": "@@ -396,6 +399,54 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- Apply text edits.\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for id: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        vim.ui.select(\n+          { 'Yes', 'No' },\n+          { prompt = string.format('Apply \"%s\"? ', annotation.label) },\n+          function(input)\n+            if input == 'Yes' then\n+              change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+              apply_text_edit(text_edit)\n+            end\n+          end\n+        )",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2152912115",
            "id": 2152912115,
            "in_reply_to_id": 2150799276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AUtTz",
            "original_commit_id": "3d3744003ef3a68529d64023e29045750d5aab11",
            "original_line": 429,
            "original_position": 78,
            "original_start_line": 419,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2936682257,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2152912115/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-17T18:29:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2152912115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2157627070"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2157627070"
                }
            },
            "author_association": "MEMBER",
            "body": "Done :)",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-19T20:31:32Z",
            "diff_hunk": "@@ -396,6 +399,54 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- Apply text edits.\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for id: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        vim.ui.select(\n+          { 'Yes', 'No' },\n+          { prompt = string.format('Apply \"%s\"? ', annotation.label) },\n+          function(input)\n+            if input == 'Yes' then\n+              change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+              apply_text_edit(text_edit)\n+            end\n+          end\n+        )",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2157627070",
            "id": 2157627070,
            "in_reply_to_id": 2150799276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Amsa-",
            "original_commit_id": "3d3744003ef3a68529d64023e29045750d5aab11",
            "original_line": 429,
            "original_position": 78,
            "original_start_line": 419,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2943979949,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2157627070/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-19T20:31:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2157627070",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2160232919"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160232919"
                }
            },
            "author_association": "MEMBER",
            "body": "It looks like this message is sent even if change annotations are denied aka not applied",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-22T06:08:19Z",
            "diff_hunk": "@@ -347,53 +349,109 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  -- Apply text edits.\n   local has_eol_text_edit = false\n-  for _, text_edit in ipairs(text_edits) do\n-    -- Normalize line ending\n-    text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n-\n-    -- Convert from LSP style ranges to Neovim style ranges.\n-    local start_row = text_edit.range.start.line\n-    local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n-    local end_row = text_edit.range['end'].line\n-    local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n-    local text = vim.split(text_edit.newText, '\\n', { plain = true })\n-\n-    local max = api.nvim_buf_line_count(bufnr)\n-    -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n-    -- of the buffer.\n-    if max <= start_row then\n-      api.nvim_buf_set_lines(bufnr, max, max, false, text)\n-    else\n-      local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n-      -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n-      -- accept it so we should fix it here.\n-      if max <= end_row then\n-        end_row = max - 1\n-        end_col = last_line_len\n-        has_eol_text_edit = true\n+\n+  local function apply_text_edits()\n+    for _, text_edit in ipairs(text_edits) do\n+      -- Normalize line ending\n+      text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n+\n+      -- Convert from LSP style ranges to Neovim style ranges.\n+      local start_row = text_edit.range.start.line\n+      local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n+      local end_row = text_edit.range['end'].line\n+      local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n+      local text = vim.split(text_edit.newText, '\\n', { plain = true })\n+\n+      local max = api.nvim_buf_line_count(bufnr)\n+      -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n+      -- of the buffer.\n+      if max <= start_row then\n+        api.nvim_buf_set_lines(bufnr, max, max, false, text)\n       else\n-        -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n-        -- replacement text ends with a newline We can likely assume that the replacement is assumed\n-        -- to be meant to replace the newline with another newline and we need to make sure this\n-        -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n-        -- in the file some servers (clangd on windows) will include that character in the line\n-        -- while nvim_buf_set_text doesn't count it as part of the line.\n-        if\n-          end_col >= last_line_len\n-          and text_edit.range['end'].character > end_col\n-          and #text_edit.newText > 0\n-          and string.sub(text_edit.newText, -1) == '\\n'\n-        then\n-          table.remove(text, #text)\n+        local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n+        -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n+        -- accept it so we should fix it here.\n+        if max <= end_row then\n+          end_row = max - 1\n+          end_col = last_line_len\n+          has_eol_text_edit = true\n+        else\n+          -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n+          -- replacement text ends with a newline We can likely assume that the replacement is assumed\n+          -- to be meant to replace the newline with another newline and we need to make sure this\n+          -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n+          -- in the file some servers (clangd on windows) will include that character in the line\n+          -- while nvim_buf_set_text doesn't count it as part of the line.\n+          if\n+            end_col >= last_line_len\n+            and text_edit.range['end'].character > end_col\n+            and #text_edit.newText > 0\n+            and string.sub(text_edit.newText, -1) == '\\n'\n+          then\n+            table.remove(text, #text)\n+          end\n         end\n+        -- Make sure we don't go out of bounds for end_col\n+        end_col = math.min(last_line_len, end_col)\n+\n+        api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+      end\n+    end\n+  end\n+\n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- If there are any annotated text edits, we need to confirm them before applying the edits.\n+  local confirmations = {} ---@type table<string, integer>\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for ID: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        confirmations[annotation.label] = (confirmations[annotation.label] or 0) + 1\n+      end\n+\n+      change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+    end\n+  end\n+\n+  if next(confirmations) then\n+    local message = { 'Apply all changes?' }\n+    for label, count in pairs(confirmations) do\n+      message[#message + 1] = label .. (count > 1 and string.format(' (%d)', count) or '')\n+    end\n+\n+    vim.ui.select({ 'Yes', 'No' }, { prompt = table.concat(message, '\\n') }, function(input)\n+      if input == 'Yes' then\n+        -- Proceed with applying text edits.\n+        apply_text_edits()\n       end\n-      -- Make sure we don't go out of bounds for end_col\n-      end_col = math.min(last_line_len, end_col)\n+    end)\n+  else\n+    -- No confirmations needed, apply text edits directly.\n+    apply_text_edits()\n+  end\n \n-      api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+  if change_annotations ~= nil and next(change_count) then\n+    local change_message = { 'Applied changes:' }",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2160232919",
            "id": 2160232919,
            "line": 452,
            "node_id": "PRRC_kwDOAPphoM6AwonX",
            "original_commit_id": "0836cb8a8a6e453b1ac873a7ae4ab83aca580282",
            "original_line": 452,
            "original_position": 174,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 237,
            "pull_request_review_id": 2948067974,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160232919/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T06:20:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160232919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2160234678"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160234678"
                }
            },
            "author_association": "MEMBER",
            "body": "Is it possible to also include the description when asking to apply changes?",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-22T06:19:30Z",
            "diff_hunk": "@@ -347,53 +349,109 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  -- Apply text edits.\n   local has_eol_text_edit = false\n-  for _, text_edit in ipairs(text_edits) do\n-    -- Normalize line ending\n-    text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n-\n-    -- Convert from LSP style ranges to Neovim style ranges.\n-    local start_row = text_edit.range.start.line\n-    local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n-    local end_row = text_edit.range['end'].line\n-    local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n-    local text = vim.split(text_edit.newText, '\\n', { plain = true })\n-\n-    local max = api.nvim_buf_line_count(bufnr)\n-    -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n-    -- of the buffer.\n-    if max <= start_row then\n-      api.nvim_buf_set_lines(bufnr, max, max, false, text)\n-    else\n-      local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n-      -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n-      -- accept it so we should fix it here.\n-      if max <= end_row then\n-        end_row = max - 1\n-        end_col = last_line_len\n-        has_eol_text_edit = true\n+\n+  local function apply_text_edits()\n+    for _, text_edit in ipairs(text_edits) do\n+      -- Normalize line ending\n+      text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n+\n+      -- Convert from LSP style ranges to Neovim style ranges.\n+      local start_row = text_edit.range.start.line\n+      local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n+      local end_row = text_edit.range['end'].line\n+      local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n+      local text = vim.split(text_edit.newText, '\\n', { plain = true })\n+\n+      local max = api.nvim_buf_line_count(bufnr)\n+      -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n+      -- of the buffer.\n+      if max <= start_row then\n+        api.nvim_buf_set_lines(bufnr, max, max, false, text)\n       else\n-        -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n-        -- replacement text ends with a newline We can likely assume that the replacement is assumed\n-        -- to be meant to replace the newline with another newline and we need to make sure this\n-        -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n-        -- in the file some servers (clangd on windows) will include that character in the line\n-        -- while nvim_buf_set_text doesn't count it as part of the line.\n-        if\n-          end_col >= last_line_len\n-          and text_edit.range['end'].character > end_col\n-          and #text_edit.newText > 0\n-          and string.sub(text_edit.newText, -1) == '\\n'\n-        then\n-          table.remove(text, #text)\n+        local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n+        -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n+        -- accept it so we should fix it here.\n+        if max <= end_row then\n+          end_row = max - 1\n+          end_col = last_line_len\n+          has_eol_text_edit = true\n+        else\n+          -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n+          -- replacement text ends with a newline We can likely assume that the replacement is assumed\n+          -- to be meant to replace the newline with another newline and we need to make sure this\n+          -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n+          -- in the file some servers (clangd on windows) will include that character in the line\n+          -- while nvim_buf_set_text doesn't count it as part of the line.\n+          if\n+            end_col >= last_line_len\n+            and text_edit.range['end'].character > end_col\n+            and #text_edit.newText > 0\n+            and string.sub(text_edit.newText, -1) == '\\n'\n+          then\n+            table.remove(text, #text)\n+          end\n         end\n+        -- Make sure we don't go out of bounds for end_col\n+        end_col = math.min(last_line_len, end_col)\n+\n+        api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+      end\n+    end\n+  end\n+\n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- If there are any annotated text edits, we need to confirm them before applying the edits.\n+  local confirmations = {} ---@type table<string, integer>\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for ID: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        confirmations[annotation.label] = (confirmations[annotation.label] or 0) + 1\n+      end\n+\n+      change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+    end\n+  end\n+\n+  if next(confirmations) then\n+    local message = { 'Apply all changes?' }\n+    for label, count in pairs(confirmations) do\n+      message[#message + 1] = label .. (count > 1 and string.format(' (%d)', count) or '')\n+    end\n+\n+    vim.ui.select({ 'Yes', 'No' }, { prompt = table.concat(message, '\\n') }, function(input)\n+      if input == 'Yes' then\n+        -- Proceed with applying text edits.\n+        apply_text_edits()\n       end\n-      -- Make sure we don't go out of bounds for end_col\n-      end_col = math.min(last_line_len, end_col)\n+    end)\n+  else\n+    -- No confirmations needed, apply text edits directly.\n+    apply_text_edits()\n+  end\n \n-      api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+  if change_annotations ~= nil and next(change_count) then\n+    local change_message = { 'Applied changes:' }\n+    for id, count in pairs(change_count) do\n+      local annotation = change_annotations[id]\n+      change_message[#change_message + 1] = annotation.label\n+        .. (annotation.description and (': ' .. annotation.description) or '')",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2160234678",
            "id": 2160234678,
            "line": 456,
            "node_id": "PRRC_kwDOAPphoM6AwpC2",
            "original_commit_id": "0836cb8a8a6e453b1ac873a7ae4ab83aca580282",
            "original_line": 456,
            "original_position": 178,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 241,
            "pull_request_review_id": 2948067974,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160234678/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T06:20:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160234678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2160423733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160423733"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd say that `vim.ui.select()` is probably not the best approach to use here. It is more intended for selecting from a list of items and not quite for showing message to receive a confirm/deny. There is `vim.fn.confirm()` just for that with a bit more design towards \"confirm\" use case (like allowing to press `y` for `Yes` and `n` for `No`).\r\n\r\nOne big downside of `vim.ui.select()` (and all of its popular implementations via floating windows) is that it is not really designed to show multiline `prompt`, which I'd guess is very common in this use case. The default implementation handles that mostly by coincidence (as it uses `vim.fn.inputlist()` which shows message in command line), but so does `vim.fn.confirm`.\r\n\r\nThe difference of `vim.fn.confirm()` and `vim.ui.select()` is that the first is blocking by design. But I'd guess it is even more appropriate here. Besides, the default `vim.ui.select()` is also blocking.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-22T18:22:57Z",
            "diff_hunk": "@@ -347,53 +349,109 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  -- Apply text edits.\n   local has_eol_text_edit = false\n-  for _, text_edit in ipairs(text_edits) do\n-    -- Normalize line ending\n-    text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n-\n-    -- Convert from LSP style ranges to Neovim style ranges.\n-    local start_row = text_edit.range.start.line\n-    local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n-    local end_row = text_edit.range['end'].line\n-    local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n-    local text = vim.split(text_edit.newText, '\\n', { plain = true })\n-\n-    local max = api.nvim_buf_line_count(bufnr)\n-    -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n-    -- of the buffer.\n-    if max <= start_row then\n-      api.nvim_buf_set_lines(bufnr, max, max, false, text)\n-    else\n-      local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n-      -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n-      -- accept it so we should fix it here.\n-      if max <= end_row then\n-        end_row = max - 1\n-        end_col = last_line_len\n-        has_eol_text_edit = true\n+\n+  local function apply_text_edits()\n+    for _, text_edit in ipairs(text_edits) do\n+      -- Normalize line ending\n+      text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n+\n+      -- Convert from LSP style ranges to Neovim style ranges.\n+      local start_row = text_edit.range.start.line\n+      local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n+      local end_row = text_edit.range['end'].line\n+      local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n+      local text = vim.split(text_edit.newText, '\\n', { plain = true })\n+\n+      local max = api.nvim_buf_line_count(bufnr)\n+      -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n+      -- of the buffer.\n+      if max <= start_row then\n+        api.nvim_buf_set_lines(bufnr, max, max, false, text)\n       else\n-        -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n-        -- replacement text ends with a newline We can likely assume that the replacement is assumed\n-        -- to be meant to replace the newline with another newline and we need to make sure this\n-        -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n-        -- in the file some servers (clangd on windows) will include that character in the line\n-        -- while nvim_buf_set_text doesn't count it as part of the line.\n-        if\n-          end_col >= last_line_len\n-          and text_edit.range['end'].character > end_col\n-          and #text_edit.newText > 0\n-          and string.sub(text_edit.newText, -1) == '\\n'\n-        then\n-          table.remove(text, #text)\n+        local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n+        -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n+        -- accept it so we should fix it here.\n+        if max <= end_row then\n+          end_row = max - 1\n+          end_col = last_line_len\n+          has_eol_text_edit = true\n+        else\n+          -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n+          -- replacement text ends with a newline We can likely assume that the replacement is assumed\n+          -- to be meant to replace the newline with another newline and we need to make sure this\n+          -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n+          -- in the file some servers (clangd on windows) will include that character in the line\n+          -- while nvim_buf_set_text doesn't count it as part of the line.\n+          if\n+            end_col >= last_line_len\n+            and text_edit.range['end'].character > end_col\n+            and #text_edit.newText > 0\n+            and string.sub(text_edit.newText, -1) == '\\n'\n+          then\n+            table.remove(text, #text)\n+          end\n         end\n+        -- Make sure we don't go out of bounds for end_col\n+        end_col = math.min(last_line_len, end_col)\n+\n+        api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+      end\n+    end\n+  end\n+\n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- If there are any annotated text edits, we need to confirm them before applying the edits.\n+  local confirmations = {} ---@type table<string, integer>\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for ID: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        confirmations[annotation.label] = (confirmations[annotation.label] or 0) + 1\n+      end\n+\n+      change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+    end\n+  end\n+\n+  if next(confirmations) then\n+    local message = { 'Apply all changes?' }\n+    for label, count in pairs(confirmations) do\n+      message[#message + 1] = label .. (count > 1 and string.format(' (%d)', count) or '')\n+    end\n+\n+    vim.ui.select({ 'Yes', 'No' }, { prompt = table.concat(message, '\\n') }, function(input)",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2160423733",
            "id": 2160423733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AxXM1",
            "original_commit_id": "0836cb8a8a6e453b1ac873a7ae4ab83aca580282",
            "original_line": 435,
            "original_position": 159,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2948268529,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160423733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T18:22:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160423733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2160480910"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160480910"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.fn.confirm` does feel like it fits better here given how this is a Yes/No question and blocking for the response is actually desired here. I'll change it.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-22T20:33:42Z",
            "diff_hunk": "@@ -347,53 +349,109 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  -- Apply text edits.\n   local has_eol_text_edit = false\n-  for _, text_edit in ipairs(text_edits) do\n-    -- Normalize line ending\n-    text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n-\n-    -- Convert from LSP style ranges to Neovim style ranges.\n-    local start_row = text_edit.range.start.line\n-    local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n-    local end_row = text_edit.range['end'].line\n-    local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n-    local text = vim.split(text_edit.newText, '\\n', { plain = true })\n-\n-    local max = api.nvim_buf_line_count(bufnr)\n-    -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n-    -- of the buffer.\n-    if max <= start_row then\n-      api.nvim_buf_set_lines(bufnr, max, max, false, text)\n-    else\n-      local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n-      -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n-      -- accept it so we should fix it here.\n-      if max <= end_row then\n-        end_row = max - 1\n-        end_col = last_line_len\n-        has_eol_text_edit = true\n+\n+  local function apply_text_edits()\n+    for _, text_edit in ipairs(text_edits) do\n+      -- Normalize line ending\n+      text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n+\n+      -- Convert from LSP style ranges to Neovim style ranges.\n+      local start_row = text_edit.range.start.line\n+      local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n+      local end_row = text_edit.range['end'].line\n+      local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n+      local text = vim.split(text_edit.newText, '\\n', { plain = true })\n+\n+      local max = api.nvim_buf_line_count(bufnr)\n+      -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n+      -- of the buffer.\n+      if max <= start_row then\n+        api.nvim_buf_set_lines(bufnr, max, max, false, text)\n       else\n-        -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n-        -- replacement text ends with a newline We can likely assume that the replacement is assumed\n-        -- to be meant to replace the newline with another newline and we need to make sure this\n-        -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n-        -- in the file some servers (clangd on windows) will include that character in the line\n-        -- while nvim_buf_set_text doesn't count it as part of the line.\n-        if\n-          end_col >= last_line_len\n-          and text_edit.range['end'].character > end_col\n-          and #text_edit.newText > 0\n-          and string.sub(text_edit.newText, -1) == '\\n'\n-        then\n-          table.remove(text, #text)\n+        local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n+        -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n+        -- accept it so we should fix it here.\n+        if max <= end_row then\n+          end_row = max - 1\n+          end_col = last_line_len\n+          has_eol_text_edit = true\n+        else\n+          -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n+          -- replacement text ends with a newline We can likely assume that the replacement is assumed\n+          -- to be meant to replace the newline with another newline and we need to make sure this\n+          -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n+          -- in the file some servers (clangd on windows) will include that character in the line\n+          -- while nvim_buf_set_text doesn't count it as part of the line.\n+          if\n+            end_col >= last_line_len\n+            and text_edit.range['end'].character > end_col\n+            and #text_edit.newText > 0\n+            and string.sub(text_edit.newText, -1) == '\\n'\n+          then\n+            table.remove(text, #text)\n+          end\n         end\n+        -- Make sure we don't go out of bounds for end_col\n+        end_col = math.min(last_line_len, end_col)\n+\n+        api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+      end\n+    end\n+  end\n+\n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- If there are any annotated text edits, we need to confirm them before applying the edits.\n+  local confirmations = {} ---@type table<string, integer>\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for ID: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        confirmations[annotation.label] = (confirmations[annotation.label] or 0) + 1\n+      end\n+\n+      change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+    end\n+  end\n+\n+  if next(confirmations) then\n+    local message = { 'Apply all changes?' }\n+    for label, count in pairs(confirmations) do\n+      message[#message + 1] = label .. (count > 1 and string.format(' (%d)', count) or '')\n+    end\n+\n+    vim.ui.select({ 'Yes', 'No' }, { prompt = table.concat(message, '\\n') }, function(input)",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2160480910",
            "id": 2160480910,
            "in_reply_to_id": 2160423733,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AxlKO",
            "original_commit_id": "0836cb8a8a6e453b1ac873a7ae4ab83aca580282",
            "original_line": 435,
            "original_position": 159,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2948328188,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160480910/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T20:33:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160480910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34508#discussion_r2160484716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34508"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160484716"
                }
            },
            "author_association": "MEMBER",
            "body": "Ahh good point.",
            "commit_id": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
            "created_at": "2025-06-22T20:43:50Z",
            "diff_hunk": "@@ -347,53 +349,109 @@ function M.apply_text_edits(text_edits, bufnr, position_encoding)\n     end\n   end\n \n-  -- Apply text edits.\n   local has_eol_text_edit = false\n-  for _, text_edit in ipairs(text_edits) do\n-    -- Normalize line ending\n-    text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n-\n-    -- Convert from LSP style ranges to Neovim style ranges.\n-    local start_row = text_edit.range.start.line\n-    local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n-    local end_row = text_edit.range['end'].line\n-    local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n-    local text = vim.split(text_edit.newText, '\\n', { plain = true })\n-\n-    local max = api.nvim_buf_line_count(bufnr)\n-    -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n-    -- of the buffer.\n-    if max <= start_row then\n-      api.nvim_buf_set_lines(bufnr, max, max, false, text)\n-    else\n-      local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n-      -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n-      -- accept it so we should fix it here.\n-      if max <= end_row then\n-        end_row = max - 1\n-        end_col = last_line_len\n-        has_eol_text_edit = true\n+\n+  local function apply_text_edits()\n+    for _, text_edit in ipairs(text_edits) do\n+      -- Normalize line ending\n+      text_edit.newText, _ = string.gsub(text_edit.newText, '\\r\\n?', '\\n')\n+\n+      -- Convert from LSP style ranges to Neovim style ranges.\n+      local start_row = text_edit.range.start.line\n+      local start_col = get_line_byte_from_position(bufnr, text_edit.range.start, position_encoding)\n+      local end_row = text_edit.range['end'].line\n+      local end_col = get_line_byte_from_position(bufnr, text_edit.range['end'], position_encoding)\n+      local text = vim.split(text_edit.newText, '\\n', { plain = true })\n+\n+      local max = api.nvim_buf_line_count(bufnr)\n+      -- If the whole edit is after the lines in the buffer we can simply add the new text to the end\n+      -- of the buffer.\n+      if max <= start_row then\n+        api.nvim_buf_set_lines(bufnr, max, max, false, text)\n       else\n-        -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n-        -- replacement text ends with a newline We can likely assume that the replacement is assumed\n-        -- to be meant to replace the newline with another newline and we need to make sure this\n-        -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n-        -- in the file some servers (clangd on windows) will include that character in the line\n-        -- while nvim_buf_set_text doesn't count it as part of the line.\n-        if\n-          end_col >= last_line_len\n-          and text_edit.range['end'].character > end_col\n-          and #text_edit.newText > 0\n-          and string.sub(text_edit.newText, -1) == '\\n'\n-        then\n-          table.remove(text, #text)\n+        local last_line_len = #(get_line(bufnr, math.min(end_row, max - 1)) or '')\n+        -- Some LSP servers may return +1 range of the buffer content but nvim_buf_set_text can't\n+        -- accept it so we should fix it here.\n+        if max <= end_row then\n+          end_row = max - 1\n+          end_col = last_line_len\n+          has_eol_text_edit = true\n+        else\n+          -- If the replacement is over the end of a line (i.e. end_col is equal to the line length and the\n+          -- replacement text ends with a newline We can likely assume that the replacement is assumed\n+          -- to be meant to replace the newline with another newline and we need to make sure this\n+          -- doesn't add an extra empty line. E.g. when the last line to be replaced contains a '\\r'\n+          -- in the file some servers (clangd on windows) will include that character in the line\n+          -- while nvim_buf_set_text doesn't count it as part of the line.\n+          if\n+            end_col >= last_line_len\n+            and text_edit.range['end'].character > end_col\n+            and #text_edit.newText > 0\n+            and string.sub(text_edit.newText, -1) == '\\n'\n+          then\n+            table.remove(text, #text)\n+          end\n         end\n+        -- Make sure we don't go out of bounds for end_col\n+        end_col = math.min(last_line_len, end_col)\n+\n+        api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+      end\n+    end\n+  end\n+\n+  --- Track how many times each change annotation is applied to build up the final description.\n+  ---@type table<string, integer>\n+  local change_count = {}\n+\n+  -- If there are any annotated text edits, we need to confirm them before applying the edits.\n+  local confirmations = {} ---@type table<string, integer>\n+  for _, text_edit in ipairs(text_edits) do\n+    if text_edit.annotationId then\n+      assert(\n+        change_annotations ~= nil,\n+        'change_annotations must be provided for annotated text edits'\n+      )\n+\n+      local annotation = assert(\n+        change_annotations[text_edit.annotationId],\n+        string.format('No change annotation found for ID: %s', text_edit.annotationId)\n+      )\n+\n+      if annotation.needsConfirmation then\n+        confirmations[annotation.label] = (confirmations[annotation.label] or 0) + 1\n+      end\n+\n+      change_count[text_edit.annotationId] = (change_count[text_edit.annotationId] or 0) + 1\n+    end\n+  end\n+\n+  if next(confirmations) then\n+    local message = { 'Apply all changes?' }\n+    for label, count in pairs(confirmations) do\n+      message[#message + 1] = label .. (count > 1 and string.format(' (%d)', count) or '')\n+    end\n+\n+    vim.ui.select({ 'Yes', 'No' }, { prompt = table.concat(message, '\\n') }, function(input)\n+      if input == 'Yes' then\n+        -- Proceed with applying text edits.\n+        apply_text_edits()\n       end\n-      -- Make sure we don't go out of bounds for end_col\n-      end_col = math.min(last_line_len, end_col)\n+    end)\n+  else\n+    -- No confirmations needed, apply text edits directly.\n+    apply_text_edits()\n+  end\n \n-      api.nvim_buf_set_text(bufnr, start_row, start_col, end_row, end_col, text)\n+  if change_annotations ~= nil and next(change_count) then\n+    local change_message = { 'Applied changes:' }",
            "html_url": "https://github.com/neovim/neovim/pull/34508#discussion_r2160484716",
            "id": 2160484716,
            "in_reply_to_id": 2160232919,
            "line": 452,
            "node_id": "PRRC_kwDOAPphoM6AxmFs",
            "original_commit_id": "0836cb8a8a6e453b1ac873a7ae4ab83aca580282",
            "original_line": 452,
            "original_position": 174,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": 237,
            "pull_request_review_id": 2948332012,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160484716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-22T20:43:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2160484716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> Didn't look closely but the shape lgtm.\r\n> \r\n> Also the discussion reminded me of #34612\r\n\r\nNice, I can look into that later ;)",
            "created_at": "2025-06-23T13:30:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/34508#issuecomment-2996514864",
            "id": 2996514864,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34508",
            "node_id": "IC_kwDOAPphoM6ymzAw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996514864/reactions"
            },
            "updated_at": "2025-06-23T13:30:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996514864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34508/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34508/commits",
    "created_at": "2025-06-15T01:59:32Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34508.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:change-annotations",
        "ref": "change-annotations",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2025-06-24T00:45:26Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 319782,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 4,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2025-06-14T01:31:03Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 4,
            "watchers_count": 4,
            "web_commit_signoff_required": false
        },
        "sha": "46d3ff1a1a1a48f9163857e892a742c44f50ef21",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34508",
    "id": 2593164619,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34508",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "835f11595fb057197fc867a137f0d5bb56e9dfcd",
    "merged_at": "2025-06-23T13:30:50Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6akI1L",
    "number": 34508,
    "patch_url": "https://github.com/neovim/neovim/pull/34508.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34508/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/46d3ff1a1a1a48f9163857e892a742c44f50ef21",
    "title": "feat(lsp): support annotated text edits",
    "updated_at": "2025-06-23T13:30:55Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34508",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs",
        "user_view_type": "public"
    }
}