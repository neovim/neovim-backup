{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31112/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31112/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31112"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31112"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31112/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6257270040bc5c61a489f7fb9d4102223c36cf89"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5827,
            "forks_count": 5827,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1855,
            "open_issues_count": 1855,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-01-27T22:25:06Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 305512,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85659,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-01-28T01:41:42Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85659,
            "watchers_count": 85659,
            "web_commit_signoff_required": false
        },
        "sha": "487c48ec8689b865bad04fdb87b61f5ada25da97",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem: Currently, we use `switch_option_context` to temporarily switch the current option context before setting an option for a different buffer / window. This is not ideal because we already support getting and setting option values for non-current contexts in the underlying implementation.\r\n\r\nSolution: Set option value for non-current context by passing the context directly to the lower level functions. Also introduce a new `OptCtx` struct to store option context information, this will scale much better if we add more option scopes and other context information in the future.",
    "closed_at": "2025-01-08T17:56:21Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31112#discussion_r1855155428"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1855155428"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Context that an option is being set for.\r\n```",
            "commit_id": "6257270040bc5c61a489f7fb9d4102223c36cf89",
            "created_at": "2024-11-23T09:08:43Z",
            "diff_hunk": "@@ -81,6 +81,12 @@ typedef struct {\n   OptValData data;\n } OptVal;\n \n+// Context that an option is being set for.",
            "html_url": "https://github.com/neovim/neovim/pull/31112#discussion_r1855155428",
            "id": 1855155428,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uk2zk",
            "original_commit_id": "462ce412d2945fa1ffcc01db17b638973d3d9e65",
            "original_line": 84,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/option_defs.h",
            "position": null,
            "pull_request_review_id": 2456374490,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1855155428/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-23T09:09:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1855155428",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31112#discussion_r1871317573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871317573"
                }
            },
            "author_association": "MEMBER",
            "body": "unlikely to have some other `option_ctx_from` variant?\r\n```suggestion\r\nOptCtx option_ctx_from(OptScope scope, void *from)\r\n```",
            "commit_id": "6257270040bc5c61a489f7fb9d4102223c36cf89",
            "created_at": "2024-12-05T12:44:20Z",
            "diff_hunk": "@@ -4572,299 +4447,330 @@ void *get_varp_from(vimoption_T *p, buf_T *buf, win_T *win)\n   switch (opt_idx) {\n   // global option with local value: use local value if it's been set\n   case kOptEqualprg:\n-    return *buf->b_p_ep != NUL ? &buf->b_p_ep : p->var;\n+    return *ctx.buf->b_p_ep != NUL ? &ctx.buf->b_p_ep : p->var;\n   case kOptKeywordprg:\n-    return *buf->b_p_kp != NUL ? &buf->b_p_kp : p->var;\n+    return *ctx.buf->b_p_kp != NUL ? &ctx.buf->b_p_kp : p->var;\n   case kOptPath:\n-    return *buf->b_p_path != NUL ? &(buf->b_p_path) : p->var;\n+    return *ctx.buf->b_p_path != NUL ? &(ctx.buf->b_p_path) : p->var;\n   case kOptAutoread:\n-    return buf->b_p_ar >= 0 ? &(buf->b_p_ar) : p->var;\n+    return ctx.buf->b_p_ar >= 0 ? &(ctx.buf->b_p_ar) : p->var;\n   case kOptTags:\n-    return *buf->b_p_tags != NUL ? &(buf->b_p_tags) : p->var;\n+    return *ctx.buf->b_p_tags != NUL ? &(ctx.buf->b_p_tags) : p->var;\n   case kOptTagcase:\n-    return *buf->b_p_tc != NUL ? &(buf->b_p_tc) : p->var;\n+    return *ctx.buf->b_p_tc != NUL ? &(ctx.buf->b_p_tc) : p->var;\n   case kOptSidescrolloff:\n-    return win->w_p_siso >= 0 ? &(win->w_p_siso) : p->var;\n+    return ctx.win->w_p_siso >= 0 ? &(ctx.win->w_p_siso) : p->var;\n   case kOptScrolloff:\n-    return win->w_p_so >= 0 ? &(win->w_p_so) : p->var;\n+    return ctx.win->w_p_so >= 0 ? &(ctx.win->w_p_so) : p->var;\n   case kOptBackupcopy:\n-    return *buf->b_p_bkc != NUL ? &(buf->b_p_bkc) : p->var;\n+    return *ctx.buf->b_p_bkc != NUL ? &(ctx.buf->b_p_bkc) : p->var;\n   case kOptDefine:\n-    return *buf->b_p_def != NUL ? &(buf->b_p_def) : p->var;\n+    return *ctx.buf->b_p_def != NUL ? &(ctx.buf->b_p_def) : p->var;\n   case kOptInclude:\n-    return *buf->b_p_inc != NUL ? &(buf->b_p_inc) : p->var;\n+    return *ctx.buf->b_p_inc != NUL ? &(ctx.buf->b_p_inc) : p->var;\n   case kOptCompleteopt:\n-    return *buf->b_p_cot != NUL ? &(buf->b_p_cot) : p->var;\n+    return *ctx.buf->b_p_cot != NUL ? &(ctx.buf->b_p_cot) : p->var;\n   case kOptDictionary:\n-    return *buf->b_p_dict != NUL ? &(buf->b_p_dict) : p->var;\n+    return *ctx.buf->b_p_dict != NUL ? &(ctx.buf->b_p_dict) : p->var;\n   case kOptThesaurus:\n-    return *buf->b_p_tsr != NUL ? &(buf->b_p_tsr) : p->var;\n+    return *ctx.buf->b_p_tsr != NUL ? &(ctx.buf->b_p_tsr) : p->var;\n   case kOptThesaurusfunc:\n-    return *buf->b_p_tsrfu != NUL ? &(buf->b_p_tsrfu) : p->var;\n+    return *ctx.buf->b_p_tsrfu != NUL ? &(ctx.buf->b_p_tsrfu) : p->var;\n   case kOptFormatprg:\n-    return *buf->b_p_fp != NUL ? &(buf->b_p_fp) : p->var;\n+    return *ctx.buf->b_p_fp != NUL ? &(ctx.buf->b_p_fp) : p->var;\n   case kOptFindfunc:\n-    return *buf->b_p_ffu != NUL ? &(buf->b_p_ffu) : p->var;\n+    return *ctx.buf->b_p_ffu != NUL ? &(ctx.buf->b_p_ffu) : p->var;\n   case kOptErrorformat:\n-    return *buf->b_p_efm != NUL ? &(buf->b_p_efm) : p->var;\n+    return *ctx.buf->b_p_efm != NUL ? &(ctx.buf->b_p_efm) : p->var;\n   case kOptGrepprg:\n-    return *buf->b_p_gp != NUL ? &(buf->b_p_gp) : p->var;\n+    return *ctx.buf->b_p_gp != NUL ? &(ctx.buf->b_p_gp) : p->var;\n   case kOptMakeprg:\n-    return *buf->b_p_mp != NUL ? &(buf->b_p_mp) : p->var;\n+    return *ctx.buf->b_p_mp != NUL ? &(ctx.buf->b_p_mp) : p->var;\n   case kOptShowbreak:\n-    return *win->w_p_sbr != NUL ? &(win->w_p_sbr) : p->var;\n+    return *ctx.win->w_p_sbr != NUL ? &(ctx.win->w_p_sbr) : p->var;\n   case kOptStatusline:\n-    return *win->w_p_stl != NUL ? &(win->w_p_stl) : p->var;\n+    return *ctx.win->w_p_stl != NUL ? &(ctx.win->w_p_stl) : p->var;\n   case kOptWinbar:\n-    return *win->w_p_wbr != NUL ? &(win->w_p_wbr) : p->var;\n+    return *ctx.win->w_p_wbr != NUL ? &(ctx.win->w_p_wbr) : p->var;\n   case kOptUndolevels:\n-    return buf->b_p_ul != NO_LOCAL_UNDOLEVEL ? &(buf->b_p_ul) : p->var;\n+    return ctx.buf->b_p_ul != NO_LOCAL_UNDOLEVEL ? &(ctx.buf->b_p_ul) : p->var;\n   case kOptLispwords:\n-    return *buf->b_p_lw != NUL ? &(buf->b_p_lw) : p->var;\n+    return *ctx.buf->b_p_lw != NUL ? &(ctx.buf->b_p_lw) : p->var;\n   case kOptMakeencoding:\n-    return *buf->b_p_menc != NUL ? &(buf->b_p_menc) : p->var;\n+    return *ctx.buf->b_p_menc != NUL ? &(ctx.buf->b_p_menc) : p->var;\n   case kOptFillchars:\n-    return *win->w_p_fcs != NUL ? &(win->w_p_fcs) : p->var;\n+    return *ctx.win->w_p_fcs != NUL ? &(ctx.win->w_p_fcs) : p->var;\n   case kOptListchars:\n-    return *win->w_p_lcs != NUL ? &(win->w_p_lcs) : p->var;\n+    return *ctx.win->w_p_lcs != NUL ? &(ctx.win->w_p_lcs) : p->var;\n   case kOptVirtualedit:\n-    return *win->w_p_ve != NUL ? &win->w_p_ve : p->var;\n+    return *ctx.win->w_p_ve != NUL ? &ctx.win->w_p_ve : p->var;\n \n   case kOptArabic:\n-    return &(win->w_p_arab);\n+    return &(ctx.win->w_p_arab);\n   case kOptList:\n-    return &(win->w_p_list);\n+    return &(ctx.win->w_p_list);\n   case kOptSpell:\n-    return &(win->w_p_spell);\n+    return &(ctx.win->w_p_spell);\n   case kOptCursorcolumn:\n-    return &(win->w_p_cuc);\n+    return &(ctx.win->w_p_cuc);\n   case kOptCursorline:\n-    return &(win->w_p_cul);\n+    return &(ctx.win->w_p_cul);\n   case kOptCursorlineopt:\n-    return &(win->w_p_culopt);\n+    return &(ctx.win->w_p_culopt);\n   case kOptColorcolumn:\n-    return &(win->w_p_cc);\n+    return &(ctx.win->w_p_cc);\n   case kOptDiff:\n-    return &(win->w_p_diff);\n+    return &(ctx.win->w_p_diff);\n   case kOptFoldcolumn:\n-    return &(win->w_p_fdc);\n+    return &(ctx.win->w_p_fdc);\n   case kOptFoldenable:\n-    return &(win->w_p_fen);\n+    return &(ctx.win->w_p_fen);\n   case kOptFoldignore:\n-    return &(win->w_p_fdi);\n+    return &(ctx.win->w_p_fdi);\n   case kOptFoldlevel:\n-    return &(win->w_p_fdl);\n+    return &(ctx.win->w_p_fdl);\n   case kOptFoldmethod:\n-    return &(win->w_p_fdm);\n+    return &(ctx.win->w_p_fdm);\n   case kOptFoldminlines:\n-    return &(win->w_p_fml);\n+    return &(ctx.win->w_p_fml);\n   case kOptFoldnestmax:\n-    return &(win->w_p_fdn);\n+    return &(ctx.win->w_p_fdn);\n   case kOptFoldexpr:\n-    return &(win->w_p_fde);\n+    return &(ctx.win->w_p_fde);\n   case kOptFoldtext:\n-    return &(win->w_p_fdt);\n+    return &(ctx.win->w_p_fdt);\n   case kOptFoldmarker:\n-    return &(win->w_p_fmr);\n+    return &(ctx.win->w_p_fmr);\n   case kOptNumber:\n-    return &(win->w_p_nu);\n+    return &(ctx.win->w_p_nu);\n   case kOptRelativenumber:\n-    return &(win->w_p_rnu);\n+    return &(ctx.win->w_p_rnu);\n   case kOptNumberwidth:\n-    return &(win->w_p_nuw);\n+    return &(ctx.win->w_p_nuw);\n   case kOptWinfixbuf:\n-    return &(win->w_p_wfb);\n+    return &(ctx.win->w_p_wfb);\n   case kOptWinfixheight:\n-    return &(win->w_p_wfh);\n+    return &(ctx.win->w_p_wfh);\n   case kOptWinfixwidth:\n-    return &(win->w_p_wfw);\n+    return &(ctx.win->w_p_wfw);\n   case kOptPreviewwindow:\n-    return &(win->w_p_pvw);\n+    return &(ctx.win->w_p_pvw);\n   case kOptRightleft:\n-    return &(win->w_p_rl);\n+    return &(ctx.win->w_p_rl);\n   case kOptRightleftcmd:\n-    return &(win->w_p_rlc);\n+    return &(ctx.win->w_p_rlc);\n   case kOptScroll:\n-    return &(win->w_p_scr);\n+    return &(ctx.win->w_p_scr);\n   case kOptSmoothscroll:\n-    return &(win->w_p_sms);\n+    return &(ctx.win->w_p_sms);\n   case kOptWrap:\n-    return &(win->w_p_wrap);\n+    return &(ctx.win->w_p_wrap);\n   case kOptLinebreak:\n-    return &(win->w_p_lbr);\n+    return &(ctx.win->w_p_lbr);\n   case kOptBreakindent:\n-    return &(win->w_p_bri);\n+    return &(ctx.win->w_p_bri);\n   case kOptBreakindentopt:\n-    return &(win->w_p_briopt);\n+    return &(ctx.win->w_p_briopt);\n   case kOptScrollbind:\n-    return &(win->w_p_scb);\n+    return &(ctx.win->w_p_scb);\n   case kOptCursorbind:\n-    return &(win->w_p_crb);\n+    return &(ctx.win->w_p_crb);\n   case kOptConcealcursor:\n-    return &(win->w_p_cocu);\n+    return &(ctx.win->w_p_cocu);\n   case kOptConceallevel:\n-    return &(win->w_p_cole);\n+    return &(ctx.win->w_p_cole);\n \n   case kOptAutoindent:\n-    return &(buf->b_p_ai);\n+    return &(ctx.buf->b_p_ai);\n   case kOptBinary:\n-    return &(buf->b_p_bin);\n+    return &(ctx.buf->b_p_bin);\n   case kOptBomb:\n-    return &(buf->b_p_bomb);\n+    return &(ctx.buf->b_p_bomb);\n   case kOptBufhidden:\n-    return &(buf->b_p_bh);\n+    return &(ctx.buf->b_p_bh);\n   case kOptBuftype:\n-    return &(buf->b_p_bt);\n+    return &(ctx.buf->b_p_bt);\n   case kOptBuflisted:\n-    return &(buf->b_p_bl);\n+    return &(ctx.buf->b_p_bl);\n   case kOptChannel:\n-    return &(buf->b_p_channel);\n+    return &(ctx.buf->b_p_channel);\n   case kOptCopyindent:\n-    return &(buf->b_p_ci);\n+    return &(ctx.buf->b_p_ci);\n   case kOptCindent:\n-    return &(buf->b_p_cin);\n+    return &(ctx.buf->b_p_cin);\n   case kOptCinkeys:\n-    return &(buf->b_p_cink);\n+    return &(ctx.buf->b_p_cink);\n   case kOptCinoptions:\n-    return &(buf->b_p_cino);\n+    return &(ctx.buf->b_p_cino);\n   case kOptCinscopedecls:\n-    return &(buf->b_p_cinsd);\n+    return &(ctx.buf->b_p_cinsd);\n   case kOptCinwords:\n-    return &(buf->b_p_cinw);\n+    return &(ctx.buf->b_p_cinw);\n   case kOptComments:\n-    return &(buf->b_p_com);\n+    return &(ctx.buf->b_p_com);\n   case kOptCommentstring:\n-    return &(buf->b_p_cms);\n+    return &(ctx.buf->b_p_cms);\n   case kOptComplete:\n-    return &(buf->b_p_cpt);\n+    return &(ctx.buf->b_p_cpt);\n #ifdef BACKSLASH_IN_FILENAME\n   case kOptCompleteslash:\n-    return &(buf->b_p_csl);\n+    return &(ctx.buf->b_p_csl);\n #endif\n   case kOptCompletefunc:\n-    return &(buf->b_p_cfu);\n+    return &(ctx.buf->b_p_cfu);\n   case kOptOmnifunc:\n-    return &(buf->b_p_ofu);\n+    return &(ctx.buf->b_p_ofu);\n   case kOptEndoffile:\n-    return &(buf->b_p_eof);\n+    return &(ctx.buf->b_p_eof);\n   case kOptEndofline:\n-    return &(buf->b_p_eol);\n+    return &(ctx.buf->b_p_eol);\n   case kOptFixendofline:\n-    return &(buf->b_p_fixeol);\n+    return &(ctx.buf->b_p_fixeol);\n   case kOptExpandtab:\n-    return &(buf->b_p_et);\n+    return &(ctx.buf->b_p_et);\n   case kOptFileencoding:\n-    return &(buf->b_p_fenc);\n+    return &(ctx.buf->b_p_fenc);\n   case kOptFileformat:\n-    return &(buf->b_p_ff);\n+    return &(ctx.buf->b_p_ff);\n   case kOptFiletype:\n-    return &(buf->b_p_ft);\n+    return &(ctx.buf->b_p_ft);\n   case kOptFormatoptions:\n-    return &(buf->b_p_fo);\n+    return &(ctx.buf->b_p_fo);\n   case kOptFormatlistpat:\n-    return &(buf->b_p_flp);\n+    return &(ctx.buf->b_p_flp);\n   case kOptIminsert:\n-    return &(buf->b_p_iminsert);\n+    return &(ctx.buf->b_p_iminsert);\n   case kOptImsearch:\n-    return &(buf->b_p_imsearch);\n+    return &(ctx.buf->b_p_imsearch);\n   case kOptInfercase:\n-    return &(buf->b_p_inf);\n+    return &(ctx.buf->b_p_inf);\n   case kOptIskeyword:\n-    return &(buf->b_p_isk);\n+    return &(ctx.buf->b_p_isk);\n   case kOptIncludeexpr:\n-    return &(buf->b_p_inex);\n+    return &(ctx.buf->b_p_inex);\n   case kOptIndentexpr:\n-    return &(buf->b_p_inde);\n+    return &(ctx.buf->b_p_inde);\n   case kOptIndentkeys:\n-    return &(buf->b_p_indk);\n+    return &(ctx.buf->b_p_indk);\n   case kOptFormatexpr:\n-    return &(buf->b_p_fex);\n+    return &(ctx.buf->b_p_fex);\n   case kOptLisp:\n-    return &(buf->b_p_lisp);\n+    return &(ctx.buf->b_p_lisp);\n   case kOptLispoptions:\n-    return &(buf->b_p_lop);\n+    return &(ctx.buf->b_p_lop);\n   case kOptModeline:\n-    return &(buf->b_p_ml);\n+    return &(ctx.buf->b_p_ml);\n   case kOptMatchpairs:\n-    return &(buf->b_p_mps);\n+    return &(ctx.buf->b_p_mps);\n   case kOptModifiable:\n-    return &(buf->b_p_ma);\n+    return &(ctx.buf->b_p_ma);\n   case kOptModified:\n-    return &(buf->b_changed);\n+    return &(ctx.buf->b_changed);\n   case kOptNrformats:\n-    return &(buf->b_p_nf);\n+    return &(ctx.buf->b_p_nf);\n   case kOptPreserveindent:\n-    return &(buf->b_p_pi);\n+    return &(ctx.buf->b_p_pi);\n   case kOptQuoteescape:\n-    return &(buf->b_p_qe);\n+    return &(ctx.buf->b_p_qe);\n   case kOptReadonly:\n-    return &(buf->b_p_ro);\n+    return &(ctx.buf->b_p_ro);\n   case kOptScrollback:\n-    return &(buf->b_p_scbk);\n+    return &(ctx.buf->b_p_scbk);\n   case kOptSmartindent:\n-    return &(buf->b_p_si);\n+    return &(ctx.buf->b_p_si);\n   case kOptSofttabstop:\n-    return &(buf->b_p_sts);\n+    return &(ctx.buf->b_p_sts);\n   case kOptSuffixesadd:\n-    return &(buf->b_p_sua);\n+    return &(ctx.buf->b_p_sua);\n   case kOptSwapfile:\n-    return &(buf->b_p_swf);\n+    return &(ctx.buf->b_p_swf);\n   case kOptSynmaxcol:\n-    return &(buf->b_p_smc);\n+    return &(ctx.buf->b_p_smc);\n   case kOptSyntax:\n-    return &(buf->b_p_syn);\n+    return &(ctx.buf->b_p_syn);\n   case kOptSpellcapcheck:\n-    return &(win->w_s->b_p_spc);\n+    return &(ctx.win->w_s->b_p_spc);\n   case kOptSpellfile:\n-    return &(win->w_s->b_p_spf);\n+    return &(ctx.win->w_s->b_p_spf);\n   case kOptSpelllang:\n-    return &(win->w_s->b_p_spl);\n+    return &(ctx.win->w_s->b_p_spl);\n   case kOptSpelloptions:\n-    return &(win->w_s->b_p_spo);\n+    return &(ctx.win->w_s->b_p_spo);\n   case kOptShiftwidth:\n-    return &(buf->b_p_sw);\n+    return &(ctx.buf->b_p_sw);\n   case kOptTagfunc:\n-    return &(buf->b_p_tfu);\n+    return &(ctx.buf->b_p_tfu);\n   case kOptTabstop:\n-    return &(buf->b_p_ts);\n+    return &(ctx.buf->b_p_ts);\n   case kOptTextwidth:\n-    return &(buf->b_p_tw);\n+    return &(ctx.buf->b_p_tw);\n   case kOptUndofile:\n-    return &(buf->b_p_udf);\n+    return &(ctx.buf->b_p_udf);\n   case kOptWrapmargin:\n-    return &(buf->b_p_wm);\n+    return &(ctx.buf->b_p_wm);\n   case kOptVarsofttabstop:\n-    return &(buf->b_p_vsts);\n+    return &(ctx.buf->b_p_vsts);\n   case kOptVartabstop:\n-    return &(buf->b_p_vts);\n+    return &(ctx.buf->b_p_vts);\n   case kOptKeymap:\n-    return &(buf->b_p_keymap);\n+    return &(ctx.buf->b_p_keymap);\n   case kOptSigncolumn:\n-    return &(win->w_p_scl);\n+    return &(ctx.win->w_p_scl);\n   case kOptWinhighlight:\n-    return &(win->w_p_winhl);\n+    return &(ctx.win->w_p_winhl);\n   case kOptWinblend:\n-    return &(win->w_p_winbl);\n+    return &(ctx.win->w_p_winbl);\n   case kOptStatuscolumn:\n-    return &(win->w_p_stc);\n+    return &(ctx.win->w_p_stc);\n   default:\n     iemsg(_(\"E356: get_varp ERROR\"));\n   }\n   // always return a valid pointer to avoid a crash!\n-  return &(buf->b_p_wm);\n+  return &(ctx.buf->b_p_wm);\n }\n \n-/// Get option index from option pointer\n-static inline OptIndex get_opt_idx(vimoption_T *opt)\n-  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE\n+/// Get the current context for options.\n+OptCtx option_get_cur_ctx(void)\n {\n-  return (OptIndex)(opt - options);\n+  return (OptCtx){ .buf = curbuf, .win = curwin };\n+}\n+\n+/// Get the context for options from a scope and pointer to target.\n+///\n+/// @param  scope      Option scope. See OptScope in option.h.\n+/// @param  from       Pointer to target buffer/window/etc.\n+OptCtx option_ctx_from_scope(OptScope scope, void *from)",
            "html_url": "https://github.com/neovim/neovim/pull/31112#discussion_r1871317573",
            "id": 1871317573,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vigpF",
            "original_commit_id": "44b046204c63fad6874bf67af271e22d27ce1166",
            "original_line": 4742,
            "original_position": 1305,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 2481586948,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871317573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:44:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871317573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31112#discussion_r1871319886"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871319886"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nOptCtx option_ctx(void)\r\n```",
            "commit_id": "6257270040bc5c61a489f7fb9d4102223c36cf89",
            "created_at": "2024-12-05T12:45:21Z",
            "diff_hunk": "@@ -4572,299 +4447,330 @@ void *get_varp_from(vimoption_T *p, buf_T *buf, win_T *win)\n   switch (opt_idx) {\n   // global option with local value: use local value if it's been set\n   case kOptEqualprg:\n-    return *buf->b_p_ep != NUL ? &buf->b_p_ep : p->var;\n+    return *ctx.buf->b_p_ep != NUL ? &ctx.buf->b_p_ep : p->var;\n   case kOptKeywordprg:\n-    return *buf->b_p_kp != NUL ? &buf->b_p_kp : p->var;\n+    return *ctx.buf->b_p_kp != NUL ? &ctx.buf->b_p_kp : p->var;\n   case kOptPath:\n-    return *buf->b_p_path != NUL ? &(buf->b_p_path) : p->var;\n+    return *ctx.buf->b_p_path != NUL ? &(ctx.buf->b_p_path) : p->var;\n   case kOptAutoread:\n-    return buf->b_p_ar >= 0 ? &(buf->b_p_ar) : p->var;\n+    return ctx.buf->b_p_ar >= 0 ? &(ctx.buf->b_p_ar) : p->var;\n   case kOptTags:\n-    return *buf->b_p_tags != NUL ? &(buf->b_p_tags) : p->var;\n+    return *ctx.buf->b_p_tags != NUL ? &(ctx.buf->b_p_tags) : p->var;\n   case kOptTagcase:\n-    return *buf->b_p_tc != NUL ? &(buf->b_p_tc) : p->var;\n+    return *ctx.buf->b_p_tc != NUL ? &(ctx.buf->b_p_tc) : p->var;\n   case kOptSidescrolloff:\n-    return win->w_p_siso >= 0 ? &(win->w_p_siso) : p->var;\n+    return ctx.win->w_p_siso >= 0 ? &(ctx.win->w_p_siso) : p->var;\n   case kOptScrolloff:\n-    return win->w_p_so >= 0 ? &(win->w_p_so) : p->var;\n+    return ctx.win->w_p_so >= 0 ? &(ctx.win->w_p_so) : p->var;\n   case kOptBackupcopy:\n-    return *buf->b_p_bkc != NUL ? &(buf->b_p_bkc) : p->var;\n+    return *ctx.buf->b_p_bkc != NUL ? &(ctx.buf->b_p_bkc) : p->var;\n   case kOptDefine:\n-    return *buf->b_p_def != NUL ? &(buf->b_p_def) : p->var;\n+    return *ctx.buf->b_p_def != NUL ? &(ctx.buf->b_p_def) : p->var;\n   case kOptInclude:\n-    return *buf->b_p_inc != NUL ? &(buf->b_p_inc) : p->var;\n+    return *ctx.buf->b_p_inc != NUL ? &(ctx.buf->b_p_inc) : p->var;\n   case kOptCompleteopt:\n-    return *buf->b_p_cot != NUL ? &(buf->b_p_cot) : p->var;\n+    return *ctx.buf->b_p_cot != NUL ? &(ctx.buf->b_p_cot) : p->var;\n   case kOptDictionary:\n-    return *buf->b_p_dict != NUL ? &(buf->b_p_dict) : p->var;\n+    return *ctx.buf->b_p_dict != NUL ? &(ctx.buf->b_p_dict) : p->var;\n   case kOptThesaurus:\n-    return *buf->b_p_tsr != NUL ? &(buf->b_p_tsr) : p->var;\n+    return *ctx.buf->b_p_tsr != NUL ? &(ctx.buf->b_p_tsr) : p->var;\n   case kOptThesaurusfunc:\n-    return *buf->b_p_tsrfu != NUL ? &(buf->b_p_tsrfu) : p->var;\n+    return *ctx.buf->b_p_tsrfu != NUL ? &(ctx.buf->b_p_tsrfu) : p->var;\n   case kOptFormatprg:\n-    return *buf->b_p_fp != NUL ? &(buf->b_p_fp) : p->var;\n+    return *ctx.buf->b_p_fp != NUL ? &(ctx.buf->b_p_fp) : p->var;\n   case kOptFindfunc:\n-    return *buf->b_p_ffu != NUL ? &(buf->b_p_ffu) : p->var;\n+    return *ctx.buf->b_p_ffu != NUL ? &(ctx.buf->b_p_ffu) : p->var;\n   case kOptErrorformat:\n-    return *buf->b_p_efm != NUL ? &(buf->b_p_efm) : p->var;\n+    return *ctx.buf->b_p_efm != NUL ? &(ctx.buf->b_p_efm) : p->var;\n   case kOptGrepprg:\n-    return *buf->b_p_gp != NUL ? &(buf->b_p_gp) : p->var;\n+    return *ctx.buf->b_p_gp != NUL ? &(ctx.buf->b_p_gp) : p->var;\n   case kOptMakeprg:\n-    return *buf->b_p_mp != NUL ? &(buf->b_p_mp) : p->var;\n+    return *ctx.buf->b_p_mp != NUL ? &(ctx.buf->b_p_mp) : p->var;\n   case kOptShowbreak:\n-    return *win->w_p_sbr != NUL ? &(win->w_p_sbr) : p->var;\n+    return *ctx.win->w_p_sbr != NUL ? &(ctx.win->w_p_sbr) : p->var;\n   case kOptStatusline:\n-    return *win->w_p_stl != NUL ? &(win->w_p_stl) : p->var;\n+    return *ctx.win->w_p_stl != NUL ? &(ctx.win->w_p_stl) : p->var;\n   case kOptWinbar:\n-    return *win->w_p_wbr != NUL ? &(win->w_p_wbr) : p->var;\n+    return *ctx.win->w_p_wbr != NUL ? &(ctx.win->w_p_wbr) : p->var;\n   case kOptUndolevels:\n-    return buf->b_p_ul != NO_LOCAL_UNDOLEVEL ? &(buf->b_p_ul) : p->var;\n+    return ctx.buf->b_p_ul != NO_LOCAL_UNDOLEVEL ? &(ctx.buf->b_p_ul) : p->var;\n   case kOptLispwords:\n-    return *buf->b_p_lw != NUL ? &(buf->b_p_lw) : p->var;\n+    return *ctx.buf->b_p_lw != NUL ? &(ctx.buf->b_p_lw) : p->var;\n   case kOptMakeencoding:\n-    return *buf->b_p_menc != NUL ? &(buf->b_p_menc) : p->var;\n+    return *ctx.buf->b_p_menc != NUL ? &(ctx.buf->b_p_menc) : p->var;\n   case kOptFillchars:\n-    return *win->w_p_fcs != NUL ? &(win->w_p_fcs) : p->var;\n+    return *ctx.win->w_p_fcs != NUL ? &(ctx.win->w_p_fcs) : p->var;\n   case kOptListchars:\n-    return *win->w_p_lcs != NUL ? &(win->w_p_lcs) : p->var;\n+    return *ctx.win->w_p_lcs != NUL ? &(ctx.win->w_p_lcs) : p->var;\n   case kOptVirtualedit:\n-    return *win->w_p_ve != NUL ? &win->w_p_ve : p->var;\n+    return *ctx.win->w_p_ve != NUL ? &ctx.win->w_p_ve : p->var;\n \n   case kOptArabic:\n-    return &(win->w_p_arab);\n+    return &(ctx.win->w_p_arab);\n   case kOptList:\n-    return &(win->w_p_list);\n+    return &(ctx.win->w_p_list);\n   case kOptSpell:\n-    return &(win->w_p_spell);\n+    return &(ctx.win->w_p_spell);\n   case kOptCursorcolumn:\n-    return &(win->w_p_cuc);\n+    return &(ctx.win->w_p_cuc);\n   case kOptCursorline:\n-    return &(win->w_p_cul);\n+    return &(ctx.win->w_p_cul);\n   case kOptCursorlineopt:\n-    return &(win->w_p_culopt);\n+    return &(ctx.win->w_p_culopt);\n   case kOptColorcolumn:\n-    return &(win->w_p_cc);\n+    return &(ctx.win->w_p_cc);\n   case kOptDiff:\n-    return &(win->w_p_diff);\n+    return &(ctx.win->w_p_diff);\n   case kOptFoldcolumn:\n-    return &(win->w_p_fdc);\n+    return &(ctx.win->w_p_fdc);\n   case kOptFoldenable:\n-    return &(win->w_p_fen);\n+    return &(ctx.win->w_p_fen);\n   case kOptFoldignore:\n-    return &(win->w_p_fdi);\n+    return &(ctx.win->w_p_fdi);\n   case kOptFoldlevel:\n-    return &(win->w_p_fdl);\n+    return &(ctx.win->w_p_fdl);\n   case kOptFoldmethod:\n-    return &(win->w_p_fdm);\n+    return &(ctx.win->w_p_fdm);\n   case kOptFoldminlines:\n-    return &(win->w_p_fml);\n+    return &(ctx.win->w_p_fml);\n   case kOptFoldnestmax:\n-    return &(win->w_p_fdn);\n+    return &(ctx.win->w_p_fdn);\n   case kOptFoldexpr:\n-    return &(win->w_p_fde);\n+    return &(ctx.win->w_p_fde);\n   case kOptFoldtext:\n-    return &(win->w_p_fdt);\n+    return &(ctx.win->w_p_fdt);\n   case kOptFoldmarker:\n-    return &(win->w_p_fmr);\n+    return &(ctx.win->w_p_fmr);\n   case kOptNumber:\n-    return &(win->w_p_nu);\n+    return &(ctx.win->w_p_nu);\n   case kOptRelativenumber:\n-    return &(win->w_p_rnu);\n+    return &(ctx.win->w_p_rnu);\n   case kOptNumberwidth:\n-    return &(win->w_p_nuw);\n+    return &(ctx.win->w_p_nuw);\n   case kOptWinfixbuf:\n-    return &(win->w_p_wfb);\n+    return &(ctx.win->w_p_wfb);\n   case kOptWinfixheight:\n-    return &(win->w_p_wfh);\n+    return &(ctx.win->w_p_wfh);\n   case kOptWinfixwidth:\n-    return &(win->w_p_wfw);\n+    return &(ctx.win->w_p_wfw);\n   case kOptPreviewwindow:\n-    return &(win->w_p_pvw);\n+    return &(ctx.win->w_p_pvw);\n   case kOptRightleft:\n-    return &(win->w_p_rl);\n+    return &(ctx.win->w_p_rl);\n   case kOptRightleftcmd:\n-    return &(win->w_p_rlc);\n+    return &(ctx.win->w_p_rlc);\n   case kOptScroll:\n-    return &(win->w_p_scr);\n+    return &(ctx.win->w_p_scr);\n   case kOptSmoothscroll:\n-    return &(win->w_p_sms);\n+    return &(ctx.win->w_p_sms);\n   case kOptWrap:\n-    return &(win->w_p_wrap);\n+    return &(ctx.win->w_p_wrap);\n   case kOptLinebreak:\n-    return &(win->w_p_lbr);\n+    return &(ctx.win->w_p_lbr);\n   case kOptBreakindent:\n-    return &(win->w_p_bri);\n+    return &(ctx.win->w_p_bri);\n   case kOptBreakindentopt:\n-    return &(win->w_p_briopt);\n+    return &(ctx.win->w_p_briopt);\n   case kOptScrollbind:\n-    return &(win->w_p_scb);\n+    return &(ctx.win->w_p_scb);\n   case kOptCursorbind:\n-    return &(win->w_p_crb);\n+    return &(ctx.win->w_p_crb);\n   case kOptConcealcursor:\n-    return &(win->w_p_cocu);\n+    return &(ctx.win->w_p_cocu);\n   case kOptConceallevel:\n-    return &(win->w_p_cole);\n+    return &(ctx.win->w_p_cole);\n \n   case kOptAutoindent:\n-    return &(buf->b_p_ai);\n+    return &(ctx.buf->b_p_ai);\n   case kOptBinary:\n-    return &(buf->b_p_bin);\n+    return &(ctx.buf->b_p_bin);\n   case kOptBomb:\n-    return &(buf->b_p_bomb);\n+    return &(ctx.buf->b_p_bomb);\n   case kOptBufhidden:\n-    return &(buf->b_p_bh);\n+    return &(ctx.buf->b_p_bh);\n   case kOptBuftype:\n-    return &(buf->b_p_bt);\n+    return &(ctx.buf->b_p_bt);\n   case kOptBuflisted:\n-    return &(buf->b_p_bl);\n+    return &(ctx.buf->b_p_bl);\n   case kOptChannel:\n-    return &(buf->b_p_channel);\n+    return &(ctx.buf->b_p_channel);\n   case kOptCopyindent:\n-    return &(buf->b_p_ci);\n+    return &(ctx.buf->b_p_ci);\n   case kOptCindent:\n-    return &(buf->b_p_cin);\n+    return &(ctx.buf->b_p_cin);\n   case kOptCinkeys:\n-    return &(buf->b_p_cink);\n+    return &(ctx.buf->b_p_cink);\n   case kOptCinoptions:\n-    return &(buf->b_p_cino);\n+    return &(ctx.buf->b_p_cino);\n   case kOptCinscopedecls:\n-    return &(buf->b_p_cinsd);\n+    return &(ctx.buf->b_p_cinsd);\n   case kOptCinwords:\n-    return &(buf->b_p_cinw);\n+    return &(ctx.buf->b_p_cinw);\n   case kOptComments:\n-    return &(buf->b_p_com);\n+    return &(ctx.buf->b_p_com);\n   case kOptCommentstring:\n-    return &(buf->b_p_cms);\n+    return &(ctx.buf->b_p_cms);\n   case kOptComplete:\n-    return &(buf->b_p_cpt);\n+    return &(ctx.buf->b_p_cpt);\n #ifdef BACKSLASH_IN_FILENAME\n   case kOptCompleteslash:\n-    return &(buf->b_p_csl);\n+    return &(ctx.buf->b_p_csl);\n #endif\n   case kOptCompletefunc:\n-    return &(buf->b_p_cfu);\n+    return &(ctx.buf->b_p_cfu);\n   case kOptOmnifunc:\n-    return &(buf->b_p_ofu);\n+    return &(ctx.buf->b_p_ofu);\n   case kOptEndoffile:\n-    return &(buf->b_p_eof);\n+    return &(ctx.buf->b_p_eof);\n   case kOptEndofline:\n-    return &(buf->b_p_eol);\n+    return &(ctx.buf->b_p_eol);\n   case kOptFixendofline:\n-    return &(buf->b_p_fixeol);\n+    return &(ctx.buf->b_p_fixeol);\n   case kOptExpandtab:\n-    return &(buf->b_p_et);\n+    return &(ctx.buf->b_p_et);\n   case kOptFileencoding:\n-    return &(buf->b_p_fenc);\n+    return &(ctx.buf->b_p_fenc);\n   case kOptFileformat:\n-    return &(buf->b_p_ff);\n+    return &(ctx.buf->b_p_ff);\n   case kOptFiletype:\n-    return &(buf->b_p_ft);\n+    return &(ctx.buf->b_p_ft);\n   case kOptFormatoptions:\n-    return &(buf->b_p_fo);\n+    return &(ctx.buf->b_p_fo);\n   case kOptFormatlistpat:\n-    return &(buf->b_p_flp);\n+    return &(ctx.buf->b_p_flp);\n   case kOptIminsert:\n-    return &(buf->b_p_iminsert);\n+    return &(ctx.buf->b_p_iminsert);\n   case kOptImsearch:\n-    return &(buf->b_p_imsearch);\n+    return &(ctx.buf->b_p_imsearch);\n   case kOptInfercase:\n-    return &(buf->b_p_inf);\n+    return &(ctx.buf->b_p_inf);\n   case kOptIskeyword:\n-    return &(buf->b_p_isk);\n+    return &(ctx.buf->b_p_isk);\n   case kOptIncludeexpr:\n-    return &(buf->b_p_inex);\n+    return &(ctx.buf->b_p_inex);\n   case kOptIndentexpr:\n-    return &(buf->b_p_inde);\n+    return &(ctx.buf->b_p_inde);\n   case kOptIndentkeys:\n-    return &(buf->b_p_indk);\n+    return &(ctx.buf->b_p_indk);\n   case kOptFormatexpr:\n-    return &(buf->b_p_fex);\n+    return &(ctx.buf->b_p_fex);\n   case kOptLisp:\n-    return &(buf->b_p_lisp);\n+    return &(ctx.buf->b_p_lisp);\n   case kOptLispoptions:\n-    return &(buf->b_p_lop);\n+    return &(ctx.buf->b_p_lop);\n   case kOptModeline:\n-    return &(buf->b_p_ml);\n+    return &(ctx.buf->b_p_ml);\n   case kOptMatchpairs:\n-    return &(buf->b_p_mps);\n+    return &(ctx.buf->b_p_mps);\n   case kOptModifiable:\n-    return &(buf->b_p_ma);\n+    return &(ctx.buf->b_p_ma);\n   case kOptModified:\n-    return &(buf->b_changed);\n+    return &(ctx.buf->b_changed);\n   case kOptNrformats:\n-    return &(buf->b_p_nf);\n+    return &(ctx.buf->b_p_nf);\n   case kOptPreserveindent:\n-    return &(buf->b_p_pi);\n+    return &(ctx.buf->b_p_pi);\n   case kOptQuoteescape:\n-    return &(buf->b_p_qe);\n+    return &(ctx.buf->b_p_qe);\n   case kOptReadonly:\n-    return &(buf->b_p_ro);\n+    return &(ctx.buf->b_p_ro);\n   case kOptScrollback:\n-    return &(buf->b_p_scbk);\n+    return &(ctx.buf->b_p_scbk);\n   case kOptSmartindent:\n-    return &(buf->b_p_si);\n+    return &(ctx.buf->b_p_si);\n   case kOptSofttabstop:\n-    return &(buf->b_p_sts);\n+    return &(ctx.buf->b_p_sts);\n   case kOptSuffixesadd:\n-    return &(buf->b_p_sua);\n+    return &(ctx.buf->b_p_sua);\n   case kOptSwapfile:\n-    return &(buf->b_p_swf);\n+    return &(ctx.buf->b_p_swf);\n   case kOptSynmaxcol:\n-    return &(buf->b_p_smc);\n+    return &(ctx.buf->b_p_smc);\n   case kOptSyntax:\n-    return &(buf->b_p_syn);\n+    return &(ctx.buf->b_p_syn);\n   case kOptSpellcapcheck:\n-    return &(win->w_s->b_p_spc);\n+    return &(ctx.win->w_s->b_p_spc);\n   case kOptSpellfile:\n-    return &(win->w_s->b_p_spf);\n+    return &(ctx.win->w_s->b_p_spf);\n   case kOptSpelllang:\n-    return &(win->w_s->b_p_spl);\n+    return &(ctx.win->w_s->b_p_spl);\n   case kOptSpelloptions:\n-    return &(win->w_s->b_p_spo);\n+    return &(ctx.win->w_s->b_p_spo);\n   case kOptShiftwidth:\n-    return &(buf->b_p_sw);\n+    return &(ctx.buf->b_p_sw);\n   case kOptTagfunc:\n-    return &(buf->b_p_tfu);\n+    return &(ctx.buf->b_p_tfu);\n   case kOptTabstop:\n-    return &(buf->b_p_ts);\n+    return &(ctx.buf->b_p_ts);\n   case kOptTextwidth:\n-    return &(buf->b_p_tw);\n+    return &(ctx.buf->b_p_tw);\n   case kOptUndofile:\n-    return &(buf->b_p_udf);\n+    return &(ctx.buf->b_p_udf);\n   case kOptWrapmargin:\n-    return &(buf->b_p_wm);\n+    return &(ctx.buf->b_p_wm);\n   case kOptVarsofttabstop:\n-    return &(buf->b_p_vsts);\n+    return &(ctx.buf->b_p_vsts);\n   case kOptVartabstop:\n-    return &(buf->b_p_vts);\n+    return &(ctx.buf->b_p_vts);\n   case kOptKeymap:\n-    return &(buf->b_p_keymap);\n+    return &(ctx.buf->b_p_keymap);\n   case kOptSigncolumn:\n-    return &(win->w_p_scl);\n+    return &(ctx.win->w_p_scl);\n   case kOptWinhighlight:\n-    return &(win->w_p_winhl);\n+    return &(ctx.win->w_p_winhl);\n   case kOptWinblend:\n-    return &(win->w_p_winbl);\n+    return &(ctx.win->w_p_winbl);\n   case kOptStatuscolumn:\n-    return &(win->w_p_stc);\n+    return &(ctx.win->w_p_stc);\n   default:\n     iemsg(_(\"E356: get_varp ERROR\"));\n   }\n   // always return a valid pointer to avoid a crash!\n-  return &(buf->b_p_wm);\n+  return &(ctx.buf->b_p_wm);\n }\n \n-/// Get option index from option pointer\n-static inline OptIndex get_opt_idx(vimoption_T *opt)\n-  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE\n+/// Get the current context for options.\n+OptCtx option_get_cur_ctx(void)",
            "html_url": "https://github.com/neovim/neovim/pull/31112#discussion_r1871319886",
            "id": 1871319886,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vihNO",
            "original_commit_id": "44b046204c63fad6874bf67af271e22d27ce1166",
            "original_line": 4733,
            "original_position": 1295,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 2481590792,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871319886/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-05T12:45:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871319886",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31112#discussion_r1871326349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871326349"
                }
            },
            "author_association": "MEMBER",
            "body": "is this a behavior change (or strengthening) and if so is there a way to cover it with a test?",
            "commit_id": "6257270040bc5c61a489f7fb9d4102223c36cf89",
            "created_at": "2024-12-05T12:47:11Z",
            "diff_hunk": "@@ -1874,14 +1875,18 @@ static void apply_optionset_autocmd(OptIndex opt_idx, int opt_flags, OptVal oldv\n     set_vim_var_string(VV_OPTION_COMMAND, \"modeline\", -1);\n     set_vim_var_tv(VV_OPTION_OLDLOCAL, &oldval_tv);\n   }\n-  apply_autocmds(EVENT_OPTIONSET, options[opt_idx].fullname, NULL, false, NULL);\n+\n+  WITH_AUCMD_CONTEXT(ctx.buf, {\n+    apply_autocmds(EVENT_OPTIONSET, options[opt_idx].fullname, NULL, false, NULL);\n+  });",
            "html_url": "https://github.com/neovim/neovim/pull/31112#discussion_r1871326349",
            "id": 1871326349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5viiyN",
            "original_commit_id": "44b046204c63fad6874bf67af271e22d27ce1166",
            "original_line": 1883,
            "original_position": 27,
            "original_start_line": 1879,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 2481600034,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871326349/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-05T12:51:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871326349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31112#discussion_r1871330909"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871330909"
                }
            },
            "author_association": "MEMBER",
            "body": "this is probably generalizable / applicable to all kinds of stuff, not only options. similar to `vim._with`. see also `context.c`\r\n\r\nI guess it's fine for now though.",
            "commit_id": "6257270040bc5c61a489f7fb9d4102223c36cf89",
            "created_at": "2024-12-05T12:49:24Z",
            "diff_hunk": "@@ -81,6 +81,12 @@ typedef struct {\n   OptValData data;\n } OptVal;\n \n+/// Context that an option is being set for.\n+typedef struct {\n+  win_T *win;\n+  buf_T *buf;\n+} OptCtx;",
            "html_url": "https://github.com/neovim/neovim/pull/31112#discussion_r1871330909",
            "id": 1871330909,
            "line": 88,
            "node_id": "PRRC_kwDOAPphoM5vij5d",
            "original_commit_id": "44b046204c63fad6874bf67af271e22d27ce1166",
            "original_line": 88,
            "original_position": 8,
            "original_start_line": 84,
            "path": "src/nvim/option_defs.h",
            "position": 8,
            "pull_request_review_id": 2481606465,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871330909/reactions"
            },
            "side": "RIGHT",
            "start_line": 84,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-05T12:49:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1871330909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31112#discussion_r1873891365"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31112"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873891365"
                }
            },
            "author_association": "MEMBER",
            "body": "It's not really a behavior change. Previously this context change happened throughout the entirety of `set_option`, now the context change has been narrowed down to the specific parts that need it.\r\n\r\nCan't really think of a way to test it since it doesn't really change anything.",
            "commit_id": "6257270040bc5c61a489f7fb9d4102223c36cf89",
            "created_at": "2024-12-06T19:40:07Z",
            "diff_hunk": "@@ -1874,14 +1875,18 @@ static void apply_optionset_autocmd(OptIndex opt_idx, int opt_flags, OptVal oldv\n     set_vim_var_string(VV_OPTION_COMMAND, \"modeline\", -1);\n     set_vim_var_tv(VV_OPTION_OLDLOCAL, &oldval_tv);\n   }\n-  apply_autocmds(EVENT_OPTIONSET, options[opt_idx].fullname, NULL, false, NULL);\n+\n+  WITH_AUCMD_CONTEXT(ctx.buf, {\n+    apply_autocmds(EVENT_OPTIONSET, options[opt_idx].fullname, NULL, false, NULL);\n+  });",
            "html_url": "https://github.com/neovim/neovim/pull/31112#discussion_r1873891365",
            "id": 1873891365,
            "in_reply_to_id": 1871326349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5vsVAl",
            "original_commit_id": "44b046204c63fad6874bf67af271e22d27ce1166",
            "original_line": 1883,
            "original_position": 27,
            "original_start_line": 1879,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 2485719032,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873891365/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-12-06T19:40:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1873891365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Won't this break `OptionSet` autocommands?",
            "created_at": "2024-11-08T06:16:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2463866868",
            "id": 2463866868,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6S25_0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2463866868/reactions"
            },
            "updated_at": "2024-11-08T06:16:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2463866868",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Won't this break `OptionSet` autocommands?\r\n\r\nI did not think about that... I wonder if there is any way we could avoid that? Maybe by putting additional data on the autocmd?",
            "created_at": "2024-11-08T06:29:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2463880171",
            "id": 2463880171,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6S29Pr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2463880171/reactions"
            },
            "updated_at": "2024-11-08T06:29:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2463880171",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There may be problems with ftplugins as well",
            "created_at": "2024-11-08T09:47:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2464262286",
            "id": 2464262286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6S4aiO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2464262286/reactions"
            },
            "updated_at": "2024-11-08T09:47:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2464262286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 would you happen to have any advice regarding this?",
            "created_at": "2024-11-08T14:18:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2464880499",
            "id": 2464880499,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6S6xdz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2464880499/reactions"
            },
            "updated_at": "2024-11-08T14:18:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2464880499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Won't this break `OptionSet` autocommands?\r\n\r\nIs this still the case now that `ctx.buf` is passed as buffer to `apply_autocmds`?",
            "created_at": "2024-11-21T18:12:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2491941579",
            "id": 2491941579,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6UiALL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2491941579/reactions"
            },
            "updated_at": "2024-11-21T18:12:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2491941579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Of course it still is. Checking for `.buf` (and possible calling `nvim_buf_call`) will make an autocommand much more verbose (especially if it was a one line Vimscript autocommand).",
            "created_at": "2024-11-21T23:04:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2492533237",
            "id": 2492533237,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6UkQn1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2492533237/reactions"
            },
            "updated_at": "2024-11-21T23:04:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2492533237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Won't this break `OptionSet` autocommands?\n> \n> Is this still the case now that `ctx.buf` is passed as buffer to `apply_autocmds`?\n\nCurbuf needs to be set otherwise it is a breaking change.",
            "created_at": "2024-11-22T08:33:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2493174228",
            "id": 2493174228,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6UmtHU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2493174228/reactions"
            },
            "updated_at": "2024-11-22T08:33:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2493174228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > > Won't this break `OptionSet` autocommands?\r\n> > \r\n> > \r\n> > Is this still the case now that `ctx.buf` is passed as buffer to `apply_autocmds`?\r\n> \r\n> Curbuf needs to be set otherwise it is a breaking change.\r\n\r\nThat is now done (using `aucmd_prepbuf`)",
            "created_at": "2024-11-22T08:50:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2493217310",
            "id": 2493217310,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6Um3oe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2493217310/reactions"
            },
            "updated_at": "2024-11-22T08:50:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2493217310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> this will scale much better if we add more option scopes and other context information in the future.\r\n\r\nWhy? I can't understand how this can happen.",
            "created_at": "2024-11-23T09:12:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2495411017",
            "id": 2495411017,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6UvPNJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2495411017/reactions"
            },
            "updated_at": "2024-11-23T09:13:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2495411017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > this will scale much better if we add more option scopes and other context information in the future.\r\n> \r\n> Why? I can't understand how this can happen.\r\n\r\nAs per the proposal in #29314, a tab scope may be added in the future, it's better to pass a single struct over 3 function parameters. This is even more so the case if we ever need to add more scopes.",
            "created_at": "2024-11-23T13:45:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2495484897",
            "id": 2495484897,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6UvhPh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2495484897/reactions"
            },
            "updated_at": "2024-11-23T13:48:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2495484897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "~~Just noticed that this does not handle TTY options, marking as draft until that's resolved~~\r\n\r\nSeems like this regression already existed since before.",
            "created_at": "2024-11-25T11:06:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2497701133",
            "id": 2497701133,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6U3-UN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2497701133/reactions"
            },
            "updated_at": "2024-11-25T13:56:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2497701133",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Been trying to make an `aucmd_prepbuf_win` function that also takes a window parameter, some tests are failing, so working on debugging that rn",
            "created_at": "2024-12-06T20:15:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2524080768",
            "id": 2524080768,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6WcmqA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2524080768/reactions"
            },
            "updated_at": "2024-12-06T20:15:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2524080768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is this waiting for something? Did anyone have objections?",
            "created_at": "2025-01-05T14:33:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2571646976",
            "id": 2571646976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6ZSDgA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571646976/reactions"
            },
            "updated_at": "2025-01-05T14:33:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571646976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Trying to daily drive this PR, and seems like some peculiar and hard-to-reproduce bugs are popping up when I'm using plugins. Wonder if we should revert it.",
            "created_at": "2025-01-08T18:38:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2578364753",
            "id": 2578364753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6ZrrlR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 3,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2578364753/reactions"
            },
            "updated_at": "2025-01-08T18:38:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2578364753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This PR seems to also cause `Test_vimgrep()` to produce several different failures frequently on Windows:\r\n```\r\nFound errors in Test_vimgrep_autocmd():\r\ncommand line..script D:/a/neovim/neovim/test/old/testdir/runtest.vim[581]..function RunTheTest[55]..Test_vimgrep_autocmd line 22: command did not fail: vimgrep stars Xtest*.txt\r\n```\r\n```\r\nFound errors in Test_vimgrep():\r\ncommand line..script D:/a/neovim/neovim/test/old/testdir/runtest.vim[581]..function RunTheTest[55]..Test_vimgrep[1]..XvimgrepTests line 61: Expected 1 but got 2\r\ncommand line..script D:/a/neovim/neovim/test/old/testdir/runtest.vim[581]..function RunTheTest[55]..Test_vimgrep[2]..XvimgrepTests line 61: Expected 1 but got 3\r\n```\r\nWith this PR: https://github.com/zeertzjq/neovim/actions/runs/12683272344\r\nWithout this PR: https://github.com/zeertzjq/neovim/actions/runs/12683334094",
            "created_at": "2025-01-09T04:28:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/31112#issuecomment-2579157904",
            "id": 2579157904,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
            "node_id": "IC_kwDOAPphoM6ZutOQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2579157904/reactions"
            },
            "updated_at": "2025-01-09T04:28:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2579157904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31112/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31112/commits",
    "created_at": "2024-11-08T06:04:27Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31112.diff",
    "draft": false,
    "head": {
        "label": "famiu:refactor/options/set_option_for",
        "ref": "refactor/options/set_option_for",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2025-01-23T10:29:04Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 299010,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2025-01-23T06:51:23Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "6257270040bc5c61a489f7fb9d4102223c36cf89",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31112",
    "id": 2168845373,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31112",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "configuration, settings",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "c4b658fed8d96a4c4098ce59b01b228ef0bda62e",
    "merged_at": "2025-01-08T17:56:21Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6BRfQ9",
    "number": 31112,
    "patch_url": "https://github.com/neovim/neovim/pull/31112.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31112/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6257270040bc5c61a489f7fb9d4102223c36cf89",
    "title": "refactor(options): set option value for non-current context directly",
    "updated_at": "2025-01-23T10:17:07Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31112",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu",
        "user_view_type": "public"
    }
}