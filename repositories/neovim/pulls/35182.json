{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35182/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35182/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35182"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35182"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35182/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35182"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ef007dc120000c3be0c7407753f991754f051659"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6249,
            "forks_count": 6249,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1985,
            "open_issues_count": 1985,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-11T22:39:04Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 336901,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91885,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-12T02:40:46Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91885,
            "watchers_count": 91885,
            "web_commit_signoff_required": false
        },
        "sha": "0fa81578af7c5af5f43a3d91845ce0225438796e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Working toward https://github.com/neovim/neovim/issues/33214 and https://github.com/neovim/neovim/issues/32949\r\n\r\n### Key points\r\nFor now this is adding following things.\r\n- Auto project root detection (based on lsp+patterns) upon buffer change and setting current-directory accordingly (optional: autochdir).\r\n- Manage project-specific data directories\r\n  - `vim.project.get_data_dir(buf, 'data'|'config')` : returns path for $root/.nvim/data|config and creates the dir if necesary\r\n- Project history (keeps track of recently used projects) ?\r\n  - `vim.project.get_recent()`\r\n- Project context\r\n  - Provides a json kvstore for storing and retriving project specific data\r\n    - the data is stored in `$project_root/.nvim/data/project-kvstore.json`\r\n    - `vim.project.ctx.get_context(key)`\r\n    - `vim.project.ctx.set_context(key, val)`\r\n    - `vim.project.ctx.del_context(key)`\r\n  - List of files in project `vim.project.ctx.get_project_files()`  (wip).  Should we upstream `plenary.scandir` as `vim.fs.scandir`?\r\n  - List of symbols is a file (planned). I'm trying to see how to get them from lsp/treesitter and how reliable are they going to be\r\n\r\n### Test code\r\n```lua\r\nif vim.project then\r\n  vim.project.enable({autochdir = true})\r\nend\r\n```\r\n\r\nStill considering how much of it should go in the core. This is very much early stage, opening pr for opinions. ",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35182#discussion_r2256827238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35182"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2256827238"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is something like this needed, opposed to deferring to something like `git ls-files` ?",
            "commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "created_at": "2025-08-06T11:15:33Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+local M = {}\n+\n+--- Returns the project context file path\n+--- The context file is stored in the project's `.nvim/data/project-kvstore.json` file.\n+local function get_context_file()\n+  return vim.fs.joinpath(vim.project.get_data_dir(0, 'data'), 'project-kvstore.json')\n+end\n+\n+--- Writes the context data to the project context file in json format\n+local function write_context_file(data)\n+  vim.validate('data', data, 'table')\n+  local context_file = get_context_file()\n+  local file = vim.uv.fs_open(context_file, 'w', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for writing', vim.log.levels.ERROR)\n+    return nil\n+  end\n+  vim.uv.fs_write(file, vim.json.encode(data))\n+  vim.uv.fs_close(file)\n+end\n+\n+--- Gets the project context data from the project context file\n+--- If the file does not exist or is empty, it returns an empty table.\n+--- If a key is provided, it returns the value for that key, or nil if the key does not exist.\n+--- If no key is provided, it returns the entire context data as a table.\n+--- @param key string|nil The key to retrieve from the context data. If nil, returns the entire context data.\n+--- @return table|nil The context data as a table, or nil if the key does not exist.\n+function M.get_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_file = get_context_file()\n+  if not vim.uv.fs_stat(context_file) then\n+    return key == nil and {} or nil\n+  end\n+\n+  local file = vim.uv.fs_open(context_file, 'r', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for reading', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  local data = vim.uv.fs_read(file, vim.uv.fs_fstat(file).size)\n+  vim.uv.fs_close(file)\n+  if not data or data == '' then\n+    vim.notify('Failed to read from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+  local ok, context_data = pcall(vim.json.decode, data)\n+  if not ok then\n+    vim.notify('Failed to decode json from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  if key then\n+    return context_data[key]\n+  end\n+  return context_data\n+end\n+\n+--- Sets the project context data for a given key or the entire context data.\n+--- If the key is provided, it updates the value for that key.\n+--- If the key is nil, it replaces the entire context data with the provided value.\n+--- @param key string|nil The key to set in the context data. If nil, it sets the entire context data.\n+--- @param value any The value to set for the key.\n+--- @return table The updated context data as a table.\n+function M.set_context(key, value)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+  local context_data = M.get_context()\n+  if key then\n+    context_data[key] = value\n+  else\n+    context_data = value\n+  end\n+\n+  write_context_file(context_data)\n+  return context_data\n+end\n+\n+--- Deletes a key from the project context data or clears the entire context data if no key is provided.\n+--- @param key string|nil The key to delete from the context data. If nil, it clears the entire context data.\n+--- @return nil\n+function M.del_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_data = M.get_context()\n+  if key then\n+    if context_data and context_data[key] then\n+      context_data[key] = nil\n+    end\n+  else\n+    context_data = {}\n+  end\n+\n+  write_context_file(context_data)\n+end\n+\n+--- Checks if a file or directory is excluded based on the provided exclude patterns.\n+local function is_excluded(exclude_patterns, path)\n+  --- TODO: implement file/folder exclusion\n+  return false\n+end\n+\n+--- Traverses the directory recursively and collects files and directories based on the provided options.\n+--- @param opts table Options for traversal\n+--- @param dir string The directory to start traversing from\n+--- @param depth number The current depth in the directory tree\n+--- @param files table The table to collect files and directories\n+--- @return table A table containing the collected files and directories\n+local function traverse_directory(opts, dir, depth, files)\n+  -- TODO: upstream directory traversal from planery.scandir to core as part of vim.fs ?\n+  if not files then\n+    files = {}\n+  end\n+  if depth > opts.max_depth then\n+    return {}\n+  end\n+  local fd = vim.uv.fs_scandir(dir)\n+  if fd then\n+    local name, typ = vim.uv.fs_scandir_next(fd)\n+    while name do\n+      local path = vim.fs.joinpath(dir, name)\n+      if not is_excluded(opts.exclude, path) then\n+        if typ == 'file' and vim.tbl_contains(opts.include, 'files') then\n+          table.insert(files, path)\n+        elseif typ == 'directory' then\n+          if vim.tbl_contains(opts.include, 'dirs') then\n+            table.insert(files, path)\n+          end\n+          traverse_directory(opts, path, depth + 1, files)\n+        end\n+      end\n+      name, typ = vim.uv.fs_scandir_next(fd)\n+    end\n+  end\n+  return files\n+end\n+\n+--- Get list of files and directories in the project root\n+--- @param opts table|nil Optional configuration table to override default settings\n+---   @field root string The project root directory\n+---   @field include table A list of types to include in the result, e.g., {'files', 'dirs'}\n+---   @field exclude table A list of patterns to exclude from the result, e.g., {'.git', '.hg', '.svn', '.cache', 'node_modules', 'build'}\n+---   @field max_depth number The maximum depth to traverse the directory tree (default: 5)\n+---   @field follow_links boolean Whether to follow symbolic links (default: false)\n+---   @field follow_gitignore boolean Whether to respect the `.gitignore` file (default: true)\n+--- @return table A table containing the list of files and directories in the project root\n+function M.get_project_files(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/35182#discussion_r2256827238",
            "id": 2256827238,
            "line": 153,
            "node_id": "PRRC_kwDOAPphoM6GhHNm",
            "original_commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/project/_context.lua",
            "position": 153,
            "pull_request_review_id": 3092061167,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35182",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2256827238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-06T11:15:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2256827238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35182#discussion_r2256827631"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35182"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2256827631"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't this `vim.fs.dir?`",
            "commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "created_at": "2025-08-06T11:15:45Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+local M = {}\n+\n+--- Returns the project context file path\n+--- The context file is stored in the project's `.nvim/data/project-kvstore.json` file.\n+local function get_context_file()\n+  return vim.fs.joinpath(vim.project.get_data_dir(0, 'data'), 'project-kvstore.json')\n+end\n+\n+--- Writes the context data to the project context file in json format\n+local function write_context_file(data)\n+  vim.validate('data', data, 'table')\n+  local context_file = get_context_file()\n+  local file = vim.uv.fs_open(context_file, 'w', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for writing', vim.log.levels.ERROR)\n+    return nil\n+  end\n+  vim.uv.fs_write(file, vim.json.encode(data))\n+  vim.uv.fs_close(file)\n+end\n+\n+--- Gets the project context data from the project context file\n+--- If the file does not exist or is empty, it returns an empty table.\n+--- If a key is provided, it returns the value for that key, or nil if the key does not exist.\n+--- If no key is provided, it returns the entire context data as a table.\n+--- @param key string|nil The key to retrieve from the context data. If nil, returns the entire context data.\n+--- @return table|nil The context data as a table, or nil if the key does not exist.\n+function M.get_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_file = get_context_file()\n+  if not vim.uv.fs_stat(context_file) then\n+    return key == nil and {} or nil\n+  end\n+\n+  local file = vim.uv.fs_open(context_file, 'r', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for reading', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  local data = vim.uv.fs_read(file, vim.uv.fs_fstat(file).size)\n+  vim.uv.fs_close(file)\n+  if not data or data == '' then\n+    vim.notify('Failed to read from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+  local ok, context_data = pcall(vim.json.decode, data)\n+  if not ok then\n+    vim.notify('Failed to decode json from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  if key then\n+    return context_data[key]\n+  end\n+  return context_data\n+end\n+\n+--- Sets the project context data for a given key or the entire context data.\n+--- If the key is provided, it updates the value for that key.\n+--- If the key is nil, it replaces the entire context data with the provided value.\n+--- @param key string|nil The key to set in the context data. If nil, it sets the entire context data.\n+--- @param value any The value to set for the key.\n+--- @return table The updated context data as a table.\n+function M.set_context(key, value)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+  local context_data = M.get_context()\n+  if key then\n+    context_data[key] = value\n+  else\n+    context_data = value\n+  end\n+\n+  write_context_file(context_data)\n+  return context_data\n+end\n+\n+--- Deletes a key from the project context data or clears the entire context data if no key is provided.\n+--- @param key string|nil The key to delete from the context data. If nil, it clears the entire context data.\n+--- @return nil\n+function M.del_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_data = M.get_context()\n+  if key then\n+    if context_data and context_data[key] then\n+      context_data[key] = nil\n+    end\n+  else\n+    context_data = {}\n+  end\n+\n+  write_context_file(context_data)\n+end\n+\n+--- Checks if a file or directory is excluded based on the provided exclude patterns.\n+local function is_excluded(exclude_patterns, path)\n+  --- TODO: implement file/folder exclusion\n+  return false\n+end\n+\n+--- Traverses the directory recursively and collects files and directories based on the provided options.\n+--- @param opts table Options for traversal\n+--- @param dir string The directory to start traversing from\n+--- @param depth number The current depth in the directory tree\n+--- @param files table The table to collect files and directories\n+--- @return table A table containing the collected files and directories\n+local function traverse_directory(opts, dir, depth, files)\n+  -- TODO: upstream directory traversal from planery.scandir to core as part of vim.fs ?",
            "html_url": "https://github.com/neovim/neovim/pull/35182#discussion_r2256827631",
            "id": 2256827631,
            "line": 116,
            "node_id": "PRRC_kwDOAPphoM6GhHTv",
            "original_commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "original_line": 116,
            "original_position": 116,
            "original_start_line": 115,
            "path": "runtime/lua/vim/project/_context.lua",
            "position": 116,
            "pull_request_review_id": 3092061167,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35182",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2256827631/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-06T11:15:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2256827631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35182#discussion_r2257291359"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35182"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257291359"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "We don't necessarily think the project is a git repo, right? If we thought git is project, then we wouldn't really need project root pattern stuff either. git folder will always be the root.",
            "commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "created_at": "2025-08-06T14:02:41Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+local M = {}\n+\n+--- Returns the project context file path\n+--- The context file is stored in the project's `.nvim/data/project-kvstore.json` file.\n+local function get_context_file()\n+  return vim.fs.joinpath(vim.project.get_data_dir(0, 'data'), 'project-kvstore.json')\n+end\n+\n+--- Writes the context data to the project context file in json format\n+local function write_context_file(data)\n+  vim.validate('data', data, 'table')\n+  local context_file = get_context_file()\n+  local file = vim.uv.fs_open(context_file, 'w', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for writing', vim.log.levels.ERROR)\n+    return nil\n+  end\n+  vim.uv.fs_write(file, vim.json.encode(data))\n+  vim.uv.fs_close(file)\n+end\n+\n+--- Gets the project context data from the project context file\n+--- If the file does not exist or is empty, it returns an empty table.\n+--- If a key is provided, it returns the value for that key, or nil if the key does not exist.\n+--- If no key is provided, it returns the entire context data as a table.\n+--- @param key string|nil The key to retrieve from the context data. If nil, returns the entire context data.\n+--- @return table|nil The context data as a table, or nil if the key does not exist.\n+function M.get_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_file = get_context_file()\n+  if not vim.uv.fs_stat(context_file) then\n+    return key == nil and {} or nil\n+  end\n+\n+  local file = vim.uv.fs_open(context_file, 'r', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for reading', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  local data = vim.uv.fs_read(file, vim.uv.fs_fstat(file).size)\n+  vim.uv.fs_close(file)\n+  if not data or data == '' then\n+    vim.notify('Failed to read from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+  local ok, context_data = pcall(vim.json.decode, data)\n+  if not ok then\n+    vim.notify('Failed to decode json from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  if key then\n+    return context_data[key]\n+  end\n+  return context_data\n+end\n+\n+--- Sets the project context data for a given key or the entire context data.\n+--- If the key is provided, it updates the value for that key.\n+--- If the key is nil, it replaces the entire context data with the provided value.\n+--- @param key string|nil The key to set in the context data. If nil, it sets the entire context data.\n+--- @param value any The value to set for the key.\n+--- @return table The updated context data as a table.\n+function M.set_context(key, value)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+  local context_data = M.get_context()\n+  if key then\n+    context_data[key] = value\n+  else\n+    context_data = value\n+  end\n+\n+  write_context_file(context_data)\n+  return context_data\n+end\n+\n+--- Deletes a key from the project context data or clears the entire context data if no key is provided.\n+--- @param key string|nil The key to delete from the context data. If nil, it clears the entire context data.\n+--- @return nil\n+function M.del_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_data = M.get_context()\n+  if key then\n+    if context_data and context_data[key] then\n+      context_data[key] = nil\n+    end\n+  else\n+    context_data = {}\n+  end\n+\n+  write_context_file(context_data)\n+end\n+\n+--- Checks if a file or directory is excluded based on the provided exclude patterns.\n+local function is_excluded(exclude_patterns, path)\n+  --- TODO: implement file/folder exclusion\n+  return false\n+end\n+\n+--- Traverses the directory recursively and collects files and directories based on the provided options.\n+--- @param opts table Options for traversal\n+--- @param dir string The directory to start traversing from\n+--- @param depth number The current depth in the directory tree\n+--- @param files table The table to collect files and directories\n+--- @return table A table containing the collected files and directories\n+local function traverse_directory(opts, dir, depth, files)\n+  -- TODO: upstream directory traversal from planery.scandir to core as part of vim.fs ?\n+  if not files then\n+    files = {}\n+  end\n+  if depth > opts.max_depth then\n+    return {}\n+  end\n+  local fd = vim.uv.fs_scandir(dir)\n+  if fd then\n+    local name, typ = vim.uv.fs_scandir_next(fd)\n+    while name do\n+      local path = vim.fs.joinpath(dir, name)\n+      if not is_excluded(opts.exclude, path) then\n+        if typ == 'file' and vim.tbl_contains(opts.include, 'files') then\n+          table.insert(files, path)\n+        elseif typ == 'directory' then\n+          if vim.tbl_contains(opts.include, 'dirs') then\n+            table.insert(files, path)\n+          end\n+          traverse_directory(opts, path, depth + 1, files)\n+        end\n+      end\n+      name, typ = vim.uv.fs_scandir_next(fd)\n+    end\n+  end\n+  return files\n+end\n+\n+--- Get list of files and directories in the project root\n+--- @param opts table|nil Optional configuration table to override default settings\n+---   @field root string The project root directory\n+---   @field include table A list of types to include in the result, e.g., {'files', 'dirs'}\n+---   @field exclude table A list of patterns to exclude from the result, e.g., {'.git', '.hg', '.svn', '.cache', 'node_modules', 'build'}\n+---   @field max_depth number The maximum depth to traverse the directory tree (default: 5)\n+---   @field follow_links boolean Whether to follow symbolic links (default: false)\n+---   @field follow_gitignore boolean Whether to respect the `.gitignore` file (default: true)\n+--- @return table A table containing the list of files and directories in the project root\n+function M.get_project_files(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/35182#discussion_r2257291359",
            "id": 2257291359,
            "in_reply_to_id": 2256827238,
            "line": 153,
            "node_id": "PRRC_kwDOAPphoM6Gi4hf",
            "original_commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/project/_context.lua",
            "position": 153,
            "pull_request_review_id": 3092774219,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35182",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257291359/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-06T14:02:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257291359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35182#discussion_r2257297734"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35182"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257297734"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yeah. `vim.fs.dir` is appropriate. I didn't think it does what it does. I'll use `fs.dir`",
            "commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "created_at": "2025-08-06T14:04:46Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+local M = {}\n+\n+--- Returns the project context file path\n+--- The context file is stored in the project's `.nvim/data/project-kvstore.json` file.\n+local function get_context_file()\n+  return vim.fs.joinpath(vim.project.get_data_dir(0, 'data'), 'project-kvstore.json')\n+end\n+\n+--- Writes the context data to the project context file in json format\n+local function write_context_file(data)\n+  vim.validate('data', data, 'table')\n+  local context_file = get_context_file()\n+  local file = vim.uv.fs_open(context_file, 'w', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for writing', vim.log.levels.ERROR)\n+    return nil\n+  end\n+  vim.uv.fs_write(file, vim.json.encode(data))\n+  vim.uv.fs_close(file)\n+end\n+\n+--- Gets the project context data from the project context file\n+--- If the file does not exist or is empty, it returns an empty table.\n+--- If a key is provided, it returns the value for that key, or nil if the key does not exist.\n+--- If no key is provided, it returns the entire context data as a table.\n+--- @param key string|nil The key to retrieve from the context data. If nil, returns the entire context data.\n+--- @return table|nil The context data as a table, or nil if the key does not exist.\n+function M.get_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_file = get_context_file()\n+  if not vim.uv.fs_stat(context_file) then\n+    return key == nil and {} or nil\n+  end\n+\n+  local file = vim.uv.fs_open(context_file, 'r', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for reading', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  local data = vim.uv.fs_read(file, vim.uv.fs_fstat(file).size)\n+  vim.uv.fs_close(file)\n+  if not data or data == '' then\n+    vim.notify('Failed to read from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+  local ok, context_data = pcall(vim.json.decode, data)\n+  if not ok then\n+    vim.notify('Failed to decode json from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  if key then\n+    return context_data[key]\n+  end\n+  return context_data\n+end\n+\n+--- Sets the project context data for a given key or the entire context data.\n+--- If the key is provided, it updates the value for that key.\n+--- If the key is nil, it replaces the entire context data with the provided value.\n+--- @param key string|nil The key to set in the context data. If nil, it sets the entire context data.\n+--- @param value any The value to set for the key.\n+--- @return table The updated context data as a table.\n+function M.set_context(key, value)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+  local context_data = M.get_context()\n+  if key then\n+    context_data[key] = value\n+  else\n+    context_data = value\n+  end\n+\n+  write_context_file(context_data)\n+  return context_data\n+end\n+\n+--- Deletes a key from the project context data or clears the entire context data if no key is provided.\n+--- @param key string|nil The key to delete from the context data. If nil, it clears the entire context data.\n+--- @return nil\n+function M.del_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_data = M.get_context()\n+  if key then\n+    if context_data and context_data[key] then\n+      context_data[key] = nil\n+    end\n+  else\n+    context_data = {}\n+  end\n+\n+  write_context_file(context_data)\n+end\n+\n+--- Checks if a file or directory is excluded based on the provided exclude patterns.\n+local function is_excluded(exclude_patterns, path)\n+  --- TODO: implement file/folder exclusion\n+  return false\n+end\n+\n+--- Traverses the directory recursively and collects files and directories based on the provided options.\n+--- @param opts table Options for traversal\n+--- @param dir string The directory to start traversing from\n+--- @param depth number The current depth in the directory tree\n+--- @param files table The table to collect files and directories\n+--- @return table A table containing the collected files and directories\n+local function traverse_directory(opts, dir, depth, files)\n+  -- TODO: upstream directory traversal from planery.scandir to core as part of vim.fs ?",
            "html_url": "https://github.com/neovim/neovim/pull/35182#discussion_r2257297734",
            "id": 2257297734,
            "in_reply_to_id": 2256827631,
            "line": 116,
            "node_id": "PRRC_kwDOAPphoM6Gi6FG",
            "original_commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "original_line": 116,
            "original_position": 116,
            "original_start_line": 115,
            "path": "runtime/lua/vim/project/_context.lua",
            "position": 116,
            "pull_request_review_id": 3092784270,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35182",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257297734/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-06T14:04:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257297734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35182#discussion_r2257624624"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35182"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257624624"
                }
            },
            "author_association": "MEMBER",
            "body": "Fair point. Still not sure if this warrants a separate method given that `vim.fs.dir` already exists and can easily be composed with a root/buffer-dir property/option/function, once that exists.\r\n\r\nIf it is about the gitignore filtering, I guess we could expose some kind of predicate function, so one can easily filter the iterator returned by `fs.dir`. Would be more flexible as it could be used in other contexts too.\r\n\r\nE.g.:\r\n\r\n```lua\r\nvim.iter(vim.fs.dir(vim.bo.root):filter(vim.?.in_gitignore) `\r\n```\r\n\r\n(But not sure how many projects have a .gitignore without also using git, `git ls-files` does take a path option after all if the root is for some reason in a subdir)",
            "commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "created_at": "2025-08-06T15:53:55Z",
            "diff_hunk": "@@ -0,0 +1,195 @@\n+local M = {}\n+\n+--- Returns the project context file path\n+--- The context file is stored in the project's `.nvim/data/project-kvstore.json` file.\n+local function get_context_file()\n+  return vim.fs.joinpath(vim.project.get_data_dir(0, 'data'), 'project-kvstore.json')\n+end\n+\n+--- Writes the context data to the project context file in json format\n+local function write_context_file(data)\n+  vim.validate('data', data, 'table')\n+  local context_file = get_context_file()\n+  local file = vim.uv.fs_open(context_file, 'w', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for writing', vim.log.levels.ERROR)\n+    return nil\n+  end\n+  vim.uv.fs_write(file, vim.json.encode(data))\n+  vim.uv.fs_close(file)\n+end\n+\n+--- Gets the project context data from the project context file\n+--- If the file does not exist or is empty, it returns an empty table.\n+--- If a key is provided, it returns the value for that key, or nil if the key does not exist.\n+--- If no key is provided, it returns the entire context data as a table.\n+--- @param key string|nil The key to retrieve from the context data. If nil, returns the entire context data.\n+--- @return table|nil The context data as a table, or nil if the key does not exist.\n+function M.get_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_file = get_context_file()\n+  if not vim.uv.fs_stat(context_file) then\n+    return key == nil and {} or nil\n+  end\n+\n+  local file = vim.uv.fs_open(context_file, 'r', 384) -- 384 is 0600 in octal\n+  if not file then\n+    vim.notify('Failed to open project context file for reading', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  local data = vim.uv.fs_read(file, vim.uv.fs_fstat(file).size)\n+  vim.uv.fs_close(file)\n+  if not data or data == '' then\n+    vim.notify('Failed to read from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+  local ok, context_data = pcall(vim.json.decode, data)\n+  if not ok then\n+    vim.notify('Failed to decode json from project context file', vim.log.levels.ERROR)\n+    return key == nil and {} or nil\n+  end\n+\n+  if key then\n+    return context_data[key]\n+  end\n+  return context_data\n+end\n+\n+--- Sets the project context data for a given key or the entire context data.\n+--- If the key is provided, it updates the value for that key.\n+--- If the key is nil, it replaces the entire context data with the provided value.\n+--- @param key string|nil The key to set in the context data. If nil, it sets the entire context data.\n+--- @param value any The value to set for the key.\n+--- @return table The updated context data as a table.\n+function M.set_context(key, value)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+  local context_data = M.get_context()\n+  if key then\n+    context_data[key] = value\n+  else\n+    context_data = value\n+  end\n+\n+  write_context_file(context_data)\n+  return context_data\n+end\n+\n+--- Deletes a key from the project context data or clears the entire context data if no key is provided.\n+--- @param key string|nil The key to delete from the context data. If nil, it clears the entire context data.\n+--- @return nil\n+function M.del_context(key)\n+  vim.validate('key', key, function(v)\n+    return v == nil or (type(v) == 'string' and v ~= '')\n+  end)\n+\n+  local context_data = M.get_context()\n+  if key then\n+    if context_data and context_data[key] then\n+      context_data[key] = nil\n+    end\n+  else\n+    context_data = {}\n+  end\n+\n+  write_context_file(context_data)\n+end\n+\n+--- Checks if a file or directory is excluded based on the provided exclude patterns.\n+local function is_excluded(exclude_patterns, path)\n+  --- TODO: implement file/folder exclusion\n+  return false\n+end\n+\n+--- Traverses the directory recursively and collects files and directories based on the provided options.\n+--- @param opts table Options for traversal\n+--- @param dir string The directory to start traversing from\n+--- @param depth number The current depth in the directory tree\n+--- @param files table The table to collect files and directories\n+--- @return table A table containing the collected files and directories\n+local function traverse_directory(opts, dir, depth, files)\n+  -- TODO: upstream directory traversal from planery.scandir to core as part of vim.fs ?\n+  if not files then\n+    files = {}\n+  end\n+  if depth > opts.max_depth then\n+    return {}\n+  end\n+  local fd = vim.uv.fs_scandir(dir)\n+  if fd then\n+    local name, typ = vim.uv.fs_scandir_next(fd)\n+    while name do\n+      local path = vim.fs.joinpath(dir, name)\n+      if not is_excluded(opts.exclude, path) then\n+        if typ == 'file' and vim.tbl_contains(opts.include, 'files') then\n+          table.insert(files, path)\n+        elseif typ == 'directory' then\n+          if vim.tbl_contains(opts.include, 'dirs') then\n+            table.insert(files, path)\n+          end\n+          traverse_directory(opts, path, depth + 1, files)\n+        end\n+      end\n+      name, typ = vim.uv.fs_scandir_next(fd)\n+    end\n+  end\n+  return files\n+end\n+\n+--- Get list of files and directories in the project root\n+--- @param opts table|nil Optional configuration table to override default settings\n+---   @field root string The project root directory\n+---   @field include table A list of types to include in the result, e.g., {'files', 'dirs'}\n+---   @field exclude table A list of patterns to exclude from the result, e.g., {'.git', '.hg', '.svn', '.cache', 'node_modules', 'build'}\n+---   @field max_depth number The maximum depth to traverse the directory tree (default: 5)\n+---   @field follow_links boolean Whether to follow symbolic links (default: false)\n+---   @field follow_gitignore boolean Whether to respect the `.gitignore` file (default: true)\n+--- @return table A table containing the list of files and directories in the project root\n+function M.get_project_files(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/35182#discussion_r2257624624",
            "id": 2257624624,
            "in_reply_to_id": 2256827238,
            "line": 153,
            "node_id": "PRRC_kwDOAPphoM6GkJ4w",
            "original_commit_id": "ef007dc120000c3be0c7407753f991754f051659",
            "original_line": 153,
            "original_position": 153,
            "original_start_line": null,
            "path": "runtime/lua/vim/project/_context.lua",
            "position": 153,
            "pull_request_review_id": 3093285811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35182",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257624624/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-06T15:53:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2257624624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "ping @justinmk ",
            "created_at": "2025-08-06T07:22:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/35182#issuecomment-3157714490",
            "id": 3157714490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35182",
            "node_id": "IC_kwDOAPphoM68NuY6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3157714490/reactions"
            },
            "updated_at": "2025-08-06T07:22:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3157714490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Did you also see https://github.com/neovim/neovim/issues/34622 ?\r\n\r\nI thought first step would be to introduce a mechanism to configure root markers, not to immediately include a subset of markers (that also appears to diverge from what lspconfig is currently doing)\r\n\r\nRegarding the kv stuff: https://github.com/neovim/neovim/issues/33214#issuecomment-3159688873\r\n\r\n",
            "created_at": "2025-08-06T11:06:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/35182#issuecomment-3159692625",
            "id": 3159692625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35182",
            "node_id": "IC_kwDOAPphoM68VRVR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3159692625/reactions"
            },
            "updated_at": "2025-08-06T11:06:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3159692625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Did you also see https://github.com/neovim/neovim/issues/34622 ?\r\n\r\nNope seeing it the first time.\r\n\r\nBut making project-root a more general concept is a good idea. If we are adding a general project concept, we can track it here. I did add a buffer-variable for project-root. We can turn it into an option. Same goes for filetype root-markers.\r\n\r\n> I thought first step would be to introduce a mechanism to configure root markers, not to immediately include a subset of markers (that also appears to diverge from what lspconfig is currently doing)\r\n\r\nConsider the implementation here POC to prompt discussion. Feel free to critic it so we can figure out a concrete scafold of what we need.\r\n\r\nI think having a project concept is useful. It also comes up again and again on various things. I already had auto setting current-directory type stuff from [project.nvim](https://github.com/ahmedkhalf/project.nvim) it kind of feels must have to me :] ",
            "created_at": "2025-08-06T14:00:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/35182#issuecomment-3160303814",
            "id": 3160303814,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35182",
            "node_id": "IC_kwDOAPphoM68XmjG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3160303814/reactions"
            },
            "updated_at": "2025-08-06T14:00:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3160303814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`vim.project` isn't the right direction. Rather, we want to\r\n\r\n- continue to mature 'exrc'\r\n- some other light touches like discussed in #33214\r\n- https://github.com/neovim/neovim/issues/34622\r\n",
            "created_at": "2025-08-07T03:34:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/35182#issuecomment-3162310681",
            "id": 3162310681,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35182",
            "node_id": "IC_kwDOAPphoM68fQgZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3162310681/reactions"
            },
            "updated_at": "2025-08-07T03:35:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3162310681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35182/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35182/commits",
    "created_at": "2025-08-06T07:20:03Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35182.diff",
    "draft": true,
    "head": {
        "label": "shadmansaleh:feat/project_context",
        "ref": "feat/project_context",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/shadmansaleh/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/shadmansaleh/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/shadmansaleh/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/shadmansaleh/neovim/branches{/branch}",
            "clone_url": "https://github.com/shadmansaleh/neovim.git",
            "collaborators_url": "https://api.github.com/repos/shadmansaleh/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/shadmansaleh/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/shadmansaleh/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/shadmansaleh/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/shadmansaleh/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/shadmansaleh/neovim/contributors",
            "created_at": "2021-03-16T15:07:33Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/shadmansaleh/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/shadmansaleh/neovim/downloads",
            "events_url": "https://api.github.com/repos/shadmansaleh/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/shadmansaleh/neovim/forks",
            "full_name": "shadmansaleh/neovim",
            "git_commits_url": "https://api.github.com/repos/shadmansaleh/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/shadmansaleh/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/shadmansaleh/neovim/git/tags{/sha}",
            "git_url": "git://github.com/shadmansaleh/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/shadmansaleh/neovim/hooks",
            "html_url": "https://github.com/shadmansaleh/neovim",
            "id": 348391941,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/shadmansaleh/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/shadmansaleh/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/shadmansaleh/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/shadmansaleh/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/shadmansaleh/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/shadmansaleh/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/shadmansaleh/neovim/merges",
            "milestones_url": "https://api.github.com/repos/shadmansaleh/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgzOTE5NDE=",
            "notifications_url": "https://api.github.com/repos/shadmansaleh/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/shadmansaleh/neovim/pulls{/number}",
            "pushed_at": "2025-08-11T05:38:20Z",
            "releases_url": "https://api.github.com/repos/shadmansaleh/neovim/releases{/id}",
            "size": 327750,
            "ssh_url": "git@github.com:shadmansaleh/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/shadmansaleh/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/shadmansaleh/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/shadmansaleh/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/shadmansaleh/neovim/subscription",
            "svn_url": "https://github.com/shadmansaleh/neovim",
            "tags_url": "https://api.github.com/repos/shadmansaleh/neovim/tags",
            "teams_url": "https://api.github.com/repos/shadmansaleh/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/shadmansaleh/neovim/git/trees{/sha}",
            "updated_at": "2025-08-07T07:39:49Z",
            "url": "https://api.github.com/repos/shadmansaleh/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ef007dc120000c3be0c7407753f991754f051659",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
            "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
            "followers_url": "https://api.github.com/users/shadmansaleh/followers",
            "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
            "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/shadmansaleh",
            "id": 13149513,
            "login": "shadmansaleh",
            "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
            "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
            "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
            "repos_url": "https://api.github.com/users/shadmansaleh/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/shadmansaleh",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35182",
    "id": 2723313734,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35182",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "31911c5d41dc1938127dbff25bcf5fd075ef9e41",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6iUnhG",
    "number": 35182,
    "patch_url": "https://github.com/neovim/neovim/pull/35182.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35182/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ef007dc120000c3be0c7407753f991754f051659",
    "title": "feat(lua): add vim.project for project specific context management",
    "updated_at": "2025-08-07T03:35:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35182",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
        "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
        "followers_url": "https://api.github.com/users/shadmansaleh/followers",
        "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
        "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/shadmansaleh",
        "id": 13149513,
        "login": "shadmansaleh",
        "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
        "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
        "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
        "repos_url": "https://api.github.com/users/shadmansaleh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/shadmansaleh",
        "user_view_type": "public"
    }
}