{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33617/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33617/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33617"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33617"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33617/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8f911b53509febb047f3c6e6b1295ff736ff7d90"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6050,
            "forks_count": 6050,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1919,
            "open_issues_count": 1919,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-04-29T02:05:46Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 319440,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89035,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-04-29T02:12:25Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89035,
            "watchers_count": 89035,
            "web_commit_signoff_required": false
        },
        "sha": "c489b5a3e3e72abda731dd3768cf1d8b98f7264e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Per @justinmk's advice\r\n[here](https://github.com/neovim/neovim/discussions/33587#discussioncomment-12925887), I've made it so `vim.secure.read()` returns `true` if you give it a directory.\r\n\r\nWhile implementing this, I found a couple of other bugs:\r\n\r\n- If `f:read('*a')` returns `nil`, we treat that as a successful read of the file, and hash it. `f:read` returns `nil` for directories, but it's also documented as returning `nil` \"if it cannot read data with the specified format\". I reworked the implementation so we explicitly treat directories differently. Rather than hashing `nil` to put in the trust database, we now put \"directory\" in there explicitly*.\r\n- `vim.secure.trust` (used by `:trust`) didn't actually work for directories, as it would blindly read the contents of a netrw buffer and hash it. Now it uses the same codepath as `vim.secure.read`, and as a result, works correctly for directories.\r\n\r\n*I can revert this change if we don't like it. I just thought it's weird to be hashing `nil` as if that has any relationship to the directory itself.\r\n\r\n<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2060250735"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060250735"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- If {path} is a directory: return true if the directory is trusted (non-recursive), prompting the user as\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-25T13:31:02Z",
            "diff_hunk": "@@ -37,17 +81,22 @@ local function write_trust(trust)\n   f:close()\n end\n \n---- Attempt to read the file at {path} prompting the user if the file should be\n---- trusted. The user's choice is persisted in a trust database at\n+--- If {path} is a file: attempt to read the file, prompting the user if the file should be\n+--- trusted.\n+---\n+--- If {path} is a directory: return true if the directory is trusted, prompting the user as",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2060250735",
            "id": 2060250735,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zO5v",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 87,
            "original_position": 60,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2794140923,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060250735/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:31:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060250735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2060255476"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060255476"
                }
            },
            "author_association": "MEMBER",
            "body": "Seems reasonable because it's non-recursive. We could maybe key it by \"modified\" date and/or permissions, idk. Not a blocker.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-25T13:33:39Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2060255476",
            "id": 2060255476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56zQD0",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2794149870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060255476/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T13:33:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060255476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2061208218"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2061208218"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "On my ext4 linux filesystem, my directory's modified date change when their contents change:\r\n\r\n```console\r\n./ $ stat . | grep Modify\r\nModify: 2025-04-26 00:23:46.891612498 -0700\r\n\r\n./ $ touch foo\r\n\r\n./ $ stat . | grep Modify\r\nModify: 2025-04-26 00:23:54.729700755 -0700\r\n```\r\n\r\nI actually do not want that behavior here: my use case is a user doing development in a project directory, which is naturally going to involve lots of changes to the contents of that directory. I don't want the user getting re-prompted every single time they edit a file to see if they're willing to auto-format the file!\r\n\r\nI think you're right that there probably are use cases where users of this api would care more about the contents (recursively) of the directory. IMO, we need a richer API to support both use cases: \"i trust this thing, even if it changes\" vs \"i trust this thing, and if it changes i want to be prompted to trust it again\".\r\n\r\nI realize that in this PR I'm taking the existing `name+contents` based trust api and mixing in a `name` based trust system. Should we take a step back and reconsider this? Concretely:\r\n\r\n- We change `vim.secure.read` to error out when given a directory. It's kind of weird to \"read\" a directory anyways. (I wouldn't expect the result of reading a directory to be \"true\".)\r\n- We add a new `vim.secure.is_trusted` api that takes a `path` and a \"trust type\", which can be either \"name\" or \"name + contents\".\r\n  - This implies implementing the recursive hashing for directories. To keep things simple, I could have that error out for now as not supported, and we could implement it in a separate PR. Or I could do it in this PR, whatever you think is best.\r\n- We change the existing `vim.secure.trust` API to take a \"trust type\". Probably for backwards compat, we have the \"trust type\" default to \"name + contents\".\r\n- Similarly, it might be nice to add a \"trust type\" parameter to `:trust`.\r\n\r\nWhat do you think, @justinmk?",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-26T07:33:16Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2061208218",
            "id": 2061208218,
            "in_reply_to_id": 2060255476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5624qa",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2795801751,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2061208218/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-26T07:38:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2061208218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2063868172"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063868172"
                }
            },
            "author_association": "MEMBER",
            "body": "Replace this with an early return, then the rest of the function doesn't need to go in an `else` block.\r\n\r\n```suggestion\r\n    return true, \"directory\"\r\n```\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T15:04:01Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2063868172",
            "id": 2063868172,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57BCEM",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": 37,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2799644491,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063868172/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-28T15:04:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063868172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2063878840"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063878840"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: rename this function just `hash` or something: if it's a directory then nothing is being read, which is misleading (update the docstring accordingly as well).",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T15:09:27Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2063878840",
            "id": 2063878840,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57BEq4",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 33,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2799662798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063878840/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T15:09:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063878840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2063888847"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063888847"
                }
            },
            "author_association": "MEMBER",
            "body": "What if we compute the hash of the directory based solely on the names (and size/mtime?) of the files within the directory?\r\n\r\nThat gives you a reasonable (though not 100%) level of hashing the directory based on its current contents, which would change the hash if the contents of the directory are changed. Reading and hashing just the filenames would also be pretty quick. Getting size/mtimes would be slightly slower, but probably not by much. And this is not a hot codepath anyway so performance isn't critical.\r\n\r\n**EDIT:** On the other hand maybe this is a situation where we allow the user full freedom to trust the whole directory and leave the security implications to them. I can imagine it would be annoying to be constantly re-prompted to trust a directory any time a file is modified. So maybe it's best to leave this as-is.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T15:13:05Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2063888847",
            "id": 2063888847,
            "in_reply_to_id": 2060255476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57BHHP",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2799677772,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063888847/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T15:17:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2063888847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2064175850"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064175850"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders, I do find this api confusing:\r\n\r\n- `vim.secure.read`: it doesn't really make sense to \"read\" a directory\r\n- Trust for files is content+name based, trust for directories is just name based.\r\n\r\nAre we open to an api redesign here? I proposed something complicated with a new \"trust type\" concept above. Here's another proposal that doesn't introduce a \"trust type\" concept:\r\n\r\n- `vim.secure.read`: change to error out if given a directory. Hardly a breaking change as it was useless before when given a directory.\r\n- `vim.secure.trust`: update docs and UX to make it clear that trusting a directory is just name based.\r\n- Add a new `vim.secure.is_trusted` which simply returns a boolean. Less weird than `vim.secure.read` for directories.\r\n\r\nI think we could evolve this in the future to have a \"trust type\" concept if we think that's valuable.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T17:44:24Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2064175850",
            "id": 2064175850,
            "in_reply_to_id": 2060255476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57CNLq",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2800153539,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064175850/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T17:44:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064175850",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2064221520"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064221520"
                }
            },
            "author_association": "MEMBER",
            "body": "> `vim.secure.read`: change to error out if given a directory. Hardly a breaking change as it was useless before when given a directory.\r\n\r\nI would be ok with this, but\r\n\r\n> Add a new `vim.secure.is_trusted` which simply returns a boolean\r\n\r\nI don't like this. For files this is redundant. I prefer the approach you have now, though maybe instead of returning `true` we could return an empty string or something so that at least the return type of the first value from `vim.secure.read` is always the same.\r\n\r\n> I proposed something complicated with a new \"trust type\" concept above\r\n\r\nI think this is a bit overkill and makes things too complicated. I'm ok with letting trusting directories be a little more awkward/less polished, since it's very much a \"you're on your own\" use case anyway.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T18:06:09Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2064221520",
            "id": 2064221520,
            "in_reply_to_id": 2060255476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57CYVQ",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2800219639,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064221520/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-28T18:06:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064221520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2064857014"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064857014"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sure, renamed to `compute_hash`, and docstring updated.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T21:59:37Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2064857014",
            "id": 2064857014,
            "in_reply_to_id": 2063878840,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57Eze2",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 33,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2801093656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064857014/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T00:58:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064857014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2064867937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064867937"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sounds good!  I don't feel super strongly about this, but I've opted to continue to return `true` rather than `\"\"` to distinguish between reading a file and reading a directory (I could imagine this is useful if a caller is logging stuff).\r\n\r\nMarking this resolved.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T22:08:50Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2064867937",
            "id": 2064867937,
            "in_reply_to_id": 2060255476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57E2Jh",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2801093656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064867937/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T00:58:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064867937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2064868604"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064868604"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sounds good! Done.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-28T22:09:36Z",
            "diff_hunk": "@@ -21,6 +21,50 @@ local function read_trust()\n   return trust\n end\n \n+--- Reads the given file/directory at {fullpath} and returns the\n+--- contents and a hash of the contents. If {fullpath} is not a directory\n+--- and {bufnr} is given, then contents are read from the {bufnr} buffer rather\n+--- than the filesytesm.\n+---\n+---@param fullpath (string) Path to a file or directory to read.\n+---@param bufnr (number?) The number of the buffer.\n+---@return string|boolean? contents the contents of the file, or true if it's a directory\n+---@return string? hash the hash of the contents, or \"directory\" if it's a directory\n+local function read_and_hash(fullpath, bufnr)\n+  local contents ---@type string|boolean?\n+  local hash ---@type string\n+  if vim.fn.isdirectory(fullpath) == 1 then\n+    contents = true\n+    hash = \"directory\"",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2064868604",
            "id": 2064868604,
            "in_reply_to_id": 2063868172,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57E2T8",
            "original_commit_id": "2d1e8b5bbc383f783dcf6f44c9b2296fd3c56dd9",
            "original_line": 38,
            "original_position": 18,
            "original_start_line": 37,
            "path": "runtime/lua/vim/secure.lua",
            "position": null,
            "pull_request_review_id": 2801093656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064868604/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-29T00:58:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2064868604",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065168591"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065168591"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      if #cwd + 115 > 500 then\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:03:55Z",
            "diff_hunk": "@@ -144,6 +152,111 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      if #cwd + 23 > 500 then",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065168591",
            "id": 2065168591,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57F_jP",
            "original_commit_id": "7216cbe078d1960078793fc2e1a891008f882efc",
            "original_line": 165,
            "original_position": 61,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801525672,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065168591/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:03:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065168591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065170651"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065170651"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I must admit I blindly copied this from the test above. What are these magic numbers? Should I also make this change in the previous test?",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:07:37Z",
            "diff_hunk": "@@ -144,6 +152,111 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      if #cwd + 23 > 500 then",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065170651",
            "id": 2065170651,
            "in_reply_to_id": 2065168591,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GADb",
            "original_commit_id": "7216cbe078d1960078793fc2e1a891008f882efc",
            "original_line": 165,
            "original_position": 61,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801528535,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065170651/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:07:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065170651",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065171653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065171653"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually wait. See #33700",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:10:01Z",
            "diff_hunk": "@@ -144,6 +152,111 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      if #cwd + 23 > 500 then",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065171653",
            "id": 2065171653,
            "in_reply_to_id": 2065168591,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GATF",
            "original_commit_id": "7216cbe078d1960078793fc2e1a891008f882efc",
            "original_line": 165,
            "original_position": 61,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801530093,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065171653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:10:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065171653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065184531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065184531"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I've applied your improvement from #33700 to the test I added in this PR. Marking resolved.",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:22:14Z",
            "diff_hunk": "@@ -144,6 +152,111 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      if #cwd + 23 > 500 then",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065184531",
            "id": 2065184531,
            "in_reply_to_id": 2065168591,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GDcT",
            "original_commit_id": "7216cbe078d1960078793fc2e1a891008f882efc",
            "original_line": 165,
            "original_position": 61,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801545899,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065184531/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:22:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065184531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065197843"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065197843"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        {3:]] .. msg .. [[}{MATCH: +}|\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:35:55Z",
            "diff_hunk": "@@ -144,6 +152,112 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      local msg = cwd .. pathsep .. 'Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.'\n+      if #msg >= screen._width then\n+        pending('path too long')\n+        return\n+      end\n+\n+      -- Need to use feed_command instead of exec_lua because of the confirmation prompt\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065197843",
            "id": 2065197843,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GGsT",
            "original_commit_id": "b04d5c79ec0aeb352a331a81dee5ce20685ffd3a",
            "original_line": 178,
            "original_position": 74,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801566161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065197843/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065197843",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065197955"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065197955"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        {3:]] .. msg .. [[}{MATCH: +}|\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:36:07Z",
            "diff_hunk": "@@ -144,6 +152,112 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      local msg = cwd .. pathsep .. 'Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.'\n+      if #msg >= screen._width then\n+        pending('path too long')\n+        return\n+      end\n+\n+      -- Need to use feed_command instead of exec_lua because of the confirmation prompt\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|\n+        {3:[i]gnore, (v)iew, (d)eny, (a)llow: }^{MATCH: +}|\n+      ]])\n+      feed('d')\n+      screen:expect([[\n+        ^{MATCH: +}|\n+        {1:~{MATCH: +}}|*6\n+        {MATCH: +}|\n+      ]])\n+\n+      local trust = assert(read_file(stdpath('state') .. pathsep .. 'trust'))\n+      eq(string.format('! %s', cwd .. pathsep .. 'Xdir'), vim.trim(trust))\n+      eq(vim.NIL, exec_lua([[return vim.secure.read('Xdir')]]))\n+\n+      os.remove(stdpath('state') .. pathsep .. 'trust')\n+\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065197955",
            "id": 2065197955,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GGuD",
            "original_commit_id": "b04d5c79ec0aeb352a331a81dee5ce20685ffd3a",
            "original_line": 200,
            "original_position": 96,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801566161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065197955/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065197955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065198276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065198276"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        {3:]] .. msg .. [[}{MATCH: +}|\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:36:21Z",
            "diff_hunk": "@@ -144,6 +152,112 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      local msg = cwd .. pathsep .. 'Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.'\n+      if #msg >= screen._width then\n+        pending('path too long')\n+        return\n+      end\n+\n+      -- Need to use feed_command instead of exec_lua because of the confirmation prompt\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|\n+        {3:[i]gnore, (v)iew, (d)eny, (a)llow: }^{MATCH: +}|\n+      ]])\n+      feed('d')\n+      screen:expect([[\n+        ^{MATCH: +}|\n+        {1:~{MATCH: +}}|*6\n+        {MATCH: +}|\n+      ]])\n+\n+      local trust = assert(read_file(stdpath('state') .. pathsep .. 'trust'))\n+      eq(string.format('! %s', cwd .. pathsep .. 'Xdir'), vim.trim(trust))\n+      eq(vim.NIL, exec_lua([[return vim.secure.read('Xdir')]]))\n+\n+      os.remove(stdpath('state') .. pathsep .. 'trust')\n+\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|\n+        {3:[i]gnore, (v)iew, (d)eny, (a)llow: }^{MATCH: +}|\n+      ]])\n+      feed('a')\n+      screen:expect([[\n+        ^{MATCH: +}|\n+        {1:~{MATCH: +}}|*6\n+        {MATCH: +}|\n+      ]])\n+\n+      -- Directories aren't hashed in the trust database, instead a slug (\"directory\") is stored\n+      -- instead.\n+      local expected_hash = 'directory'\n+      trust = assert(read_file(stdpath('state') .. pathsep .. 'trust'))\n+      eq(string.format('%s %s', expected_hash, cwd .. pathsep .. 'Xdir'), vim.trim(trust))\n+      eq(true, exec_lua([[return vim.secure.read('Xdir')]]))\n+\n+      os.remove(stdpath('state') .. pathsep .. 'trust')\n+\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065198276",
            "id": 2065198276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GGzE",
            "original_commit_id": "b04d5c79ec0aeb352a331a81dee5ce20685ffd3a",
            "original_line": 225,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801566161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065198276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065198276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33617#discussion_r2065199501"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065199501"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        {3:]] .. msg .. [[}{MATCH: +}|\r\n```",
            "commit_id": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
            "created_at": "2025-04-29T01:36:37Z",
            "diff_hunk": "@@ -144,6 +152,112 @@ describe('vim.secure', function()\n       pcall_err(command, 'write')\n       eq(true, api.nvim_get_option_value('readonly', {}))\n     end)\n+\n+    it('directory', function()\n+      screen:set_default_attr_ids({\n+        [1] = { bold = true, foreground = Screen.colors.Blue1 },\n+        [2] = { bold = true, reverse = true },\n+        [3] = { bold = true, foreground = Screen.colors.SeaGreen },\n+        [4] = { reverse = true },\n+      })\n+\n+      local cwd = fn.getcwd()\n+      local msg = cwd .. pathsep .. 'Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.'\n+      if #msg >= screen._width then\n+        pending('path too long')\n+        return\n+      end\n+\n+      -- Need to use feed_command instead of exec_lua because of the confirmation prompt\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|\n+        {3:[i]gnore, (v)iew, (d)eny, (a)llow: }^{MATCH: +}|\n+      ]])\n+      feed('d')\n+      screen:expect([[\n+        ^{MATCH: +}|\n+        {1:~{MATCH: +}}|*6\n+        {MATCH: +}|\n+      ]])\n+\n+      local trust = assert(read_file(stdpath('state') .. pathsep .. 'trust'))\n+      eq(string.format('! %s', cwd .. pathsep .. 'Xdir'), vim.trim(trust))\n+      eq(vim.NIL, exec_lua([[return vim.secure.read('Xdir')]]))\n+\n+      os.remove(stdpath('state') .. pathsep .. 'trust')\n+\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|\n+        {3:[i]gnore, (v)iew, (d)eny, (a)llow: }^{MATCH: +}|\n+      ]])\n+      feed('a')\n+      screen:expect([[\n+        ^{MATCH: +}|\n+        {1:~{MATCH: +}}|*6\n+        {MATCH: +}|\n+      ]])\n+\n+      -- Directories aren't hashed in the trust database, instead a slug (\"directory\") is stored\n+      -- instead.\n+      local expected_hash = 'directory'\n+      trust = assert(read_file(stdpath('state') .. pathsep .. 'trust'))\n+      eq(string.format('%s %s', expected_hash, cwd .. pathsep .. 'Xdir'), vim.trim(trust))\n+      eq(true, exec_lua([[return vim.secure.read('Xdir')]]))\n+\n+      os.remove(stdpath('state') .. pathsep .. 'trust')\n+\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|\n+        {3:[i]gnore, (v)iew, (d)eny, (a)llow: }^{MATCH: +}|\n+      ]])\n+      feed('i')\n+      screen:expect([[\n+        ^{MATCH: +}|\n+        {1:~{MATCH: +}}|*6\n+        {MATCH: +}|\n+      ]])\n+\n+      -- Trust database is not updated\n+      eq(nil, read_file(stdpath('state') .. pathsep .. 'trust'))\n+\n+      feed_command([[lua vim.secure.read('Xdir')]])\n+      screen:expect([[\n+        {MATCH: +}|\n+        {1:~{MATCH: +}}|*3\n+        {2:{MATCH: +}}|\n+        :lua vim.secure.read('Xdir'){MATCH: +}|\n+        {3:]] .. cwd .. pathsep .. [[Xdir is not trusted. Note that directory trust is by name, if the contents change, the directory remains trusted.}{MATCH: +}|",
            "html_url": "https://github.com/neovim/neovim/pull/33617#discussion_r2065199501",
            "id": 2065199501,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57GHGN",
            "original_commit_id": "b04d5c79ec0aeb352a331a81dee5ce20685ffd3a",
            "original_line": 244,
            "original_position": 140,
            "original_start_line": null,
            "path": "test/functional/lua/secure_spec.lua",
            "position": null,
            "pull_request_review_id": 2801566161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065199501/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-29T01:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2065199501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "The bug fixes are certainly welcome, thank you!\r\n\r\nMaking the trust non-recursive is I think an important property. Recursively trusting directories significantly diminishes the value that the entire \"trust\" concept provides. So as long as that remains the case I don't have any objection here.\r\n\r\n**EDIT:** I think there also needs to be a UX element when asking a user if a *directory* is trusted, clearly stating that that implies that ALL files within the directory (not including subdirectories) are implicitly trusted.",
            "created_at": "2025-04-28T15:00:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/33617#issuecomment-2835548658",
            "id": 2835548658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33617",
            "node_id": "IC_kwDOAPphoM6pAwny",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835548658/reactions"
            },
            "updated_at": "2025-04-28T15:06:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2835548658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33617/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33617/commits",
    "created_at": "2025-04-25T00:55:20Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33617.diff",
    "draft": false,
    "head": {
        "label": "jfly:trust-fixes",
        "ref": "trust-fixes",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/jfly/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/jfly/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/jfly/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/jfly/neovim/branches{/branch}",
            "clone_url": "https://github.com/jfly/neovim.git",
            "collaborators_url": "https://api.github.com/repos/jfly/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/jfly/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/jfly/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/jfly/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/jfly/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/jfly/neovim/contributors",
            "created_at": "2024-10-10T20:54:06Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/jfly/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/jfly/neovim/downloads",
            "events_url": "https://api.github.com/repos/jfly/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/jfly/neovim/forks",
            "full_name": "jfly/neovim",
            "git_commits_url": "https://api.github.com/repos/jfly/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/jfly/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/jfly/neovim/git/tags{/sha}",
            "git_url": "git://github.com/jfly/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/jfly/neovim/hooks",
            "html_url": "https://github.com/jfly/neovim",
            "id": 870882602,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/jfly/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/jfly/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/jfly/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/jfly/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/jfly/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/jfly/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/jfly/neovim/merges",
            "milestones_url": "https://api.github.com/repos/jfly/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOM-idKg",
            "notifications_url": "https://api.github.com/repos/jfly/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
                "events_url": "https://api.github.com/users/jfly/events{/privacy}",
                "followers_url": "https://api.github.com/users/jfly/followers",
                "following_url": "https://api.github.com/users/jfly/following{/other_user}",
                "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jfly",
                "id": 277474,
                "login": "jfly",
                "node_id": "MDQ6VXNlcjI3NzQ3NA==",
                "organizations_url": "https://api.github.com/users/jfly/orgs",
                "received_events_url": "https://api.github.com/users/jfly/received_events",
                "repos_url": "https://api.github.com/users/jfly/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jfly",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/jfly/neovim/pulls{/number}",
            "pushed_at": "2025-04-29T02:07:31Z",
            "releases_url": "https://api.github.com/repos/jfly/neovim/releases{/id}",
            "size": 311152,
            "ssh_url": "git@github.com:jfly/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/jfly/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/jfly/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/jfly/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/jfly/neovim/subscription",
            "svn_url": "https://github.com/jfly/neovim",
            "tags_url": "https://api.github.com/repos/jfly/neovim/tags",
            "teams_url": "https://api.github.com/repos/jfly/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/jfly/neovim/git/trees{/sha}",
            "updated_at": "2024-10-10T20:54:06Z",
            "url": "https://api.github.com/repos/jfly/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8f911b53509febb047f3c6e6b1295ff736ff7d90",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
            "events_url": "https://api.github.com/users/jfly/events{/privacy}",
            "followers_url": "https://api.github.com/users/jfly/followers",
            "following_url": "https://api.github.com/users/jfly/following{/other_user}",
            "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/jfly",
            "id": 277474,
            "login": "jfly",
            "node_id": "MDQ6VXNlcjI3NzQ3NA==",
            "organizations_url": "https://api.github.com/users/jfly/orgs",
            "received_events_url": "https://api.github.com/users/jfly/received_events",
            "repos_url": "https://api.github.com/users/jfly/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/jfly",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33617",
    "id": 2480430837,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33617",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim core functionality or code",
            "id": 858327504,
            "name": "core",
            "node_id": "MDU6TGFiZWw4NTgzMjc1MDQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/core"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 8431892071,
            "name": "ci:backport release-0.11",
            "node_id": "LA_kwDOAPphoM8AAAAB9pR2Zw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:backport%20release-0.11"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f3f05486e589ccbc6c6f50a45e5c174472968f4c",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6T2F71",
    "number": 33617,
    "patch_url": "https://github.com/neovim/neovim/pull/33617.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33617/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8f911b53509febb047f3c6e6b1295ff736ff7d90",
    "title": "fix(trust): better support for trusting directories",
    "updated_at": "2025-04-29T02:03:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33617",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/277474?v=4",
        "events_url": "https://api.github.com/users/jfly/events{/privacy}",
        "followers_url": "https://api.github.com/users/jfly/followers",
        "following_url": "https://api.github.com/users/jfly/following{/other_user}",
        "gists_url": "https://api.github.com/users/jfly/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jfly",
        "id": 277474,
        "login": "jfly",
        "node_id": "MDQ6VXNlcjI3NzQ3NA==",
        "organizations_url": "https://api.github.com/users/jfly/orgs",
        "received_events_url": "https://api.github.com/users/jfly/received_events",
        "repos_url": "https://api.github.com/users/jfly/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jfly/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jfly/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jfly",
        "user_view_type": "public"
    }
}