{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31861/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31861/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31861"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31861"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31861/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/9f2c711b809e6433338a0c3d028bbd52141d159c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5823,
            "forks_count": 5823,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1843,
            "open_issues_count": 1843,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-01-21T00:10:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 304457,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85427,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-01-21T01:35:11Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85427,
            "watchers_count": 85427,
            "web_commit_signoff_required": false
        },
        "sha": "92d3bf101d07d52cfbd4c22e6e06251897adda34",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Minimal Lua version of Vim's matchit plugin that is treesitter-aware but supports syntax as fallback.\r\n\r\n*WIP*\r\n\r\n## TODO\r\n\r\n- [ ] Jump to unmatched group `]%` `[%`\r\n- [ ] Select surrounding group `v_a%`\r\n- [ ] TS: Support middle keywords ('elseif' and friends)\r\n- [ ] TS: HTML tags (everything not keyword or bracket)\r\n- [ ] Syntax: Support `b:match_skip`\r\n- [ ] Syntax: Wrap around after end of pair\r\n- [ ] Write tests\r\n- [ ] Fix `g:loaded_matchit` the right way\r\n- [x] Syntax: Support `b:match_ignorecase`\r\n\r\n\r\nI want to add:\r\n- [ ] Text object `i%` and `a%` (currently only `%` which acts like `w` with words\r\n\r\n## Deprecated\r\n- matchparen:\r\n  - `:DoMatchParen` / `:NoMatchParen`\r\n  - `:let matchparen_disable_cursor_hl = 1`\r\n- matchit:\r\n  - `:MatchDisable` / `:MatchEnable`\r\n  - `b:match_words` backrefs higher than `\\1`\r\n\r\n## New features\r\n\r\n- Treesitter support\r\n- Highlight keyword group under the cursor (like brackets with matchparen)\r\n- Ternary operator support\r\n\r\n\r\n---\r\n\r\nReferences:\r\n- https://github.com/neovim/neovim/issues/15462\r\n- https://github.com/neovim/neovim/pull/31563 \r\n- https://github.com/neovim/neovim/issues/15462#issuecomment-2481544422",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31861#discussion_r1903315089"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903315089"
                }
            },
            "author_association": "MEMBER",
            "body": "Note for later: consider `vim._,memoize` for potentially expensive treesitter calculations.",
            "commit_id": "9f2c711b809e6433338a0c3d028bbd52141d159c",
            "created_at": "2025-01-05T17:57:35Z",
            "diff_hunk": "@@ -20,6 +20,13 @@ local function jump_to_node(node, start)\n   api.nvim_win_set_cursor(0, { row + 1, col })\n end\n \n+--- @param node TSNode\n+local function anonymous_children(node)",
            "html_url": "https://github.com/neovim/neovim/pull/31861#discussion_r1903315089",
            "id": 1903315089,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xckiR",
            "original_commit_id": "a82305e410e242acc214274491075c9e506d3c11",
            "original_line": 23,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_matchpairs.lua",
            "position": null,
            "pull_request_review_id": 2530941852,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903315089/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-05T17:57:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1903315089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31861#discussion_r1918889215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918889215"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should there be a way to set this for multiple file types at a time? Otherwise people will need a bunch of `after/ftplugin/<lang>.lua` files to set `match_words`\r\n\r\nSomething more like how `vim.filetype.add()` is implemented?",
            "commit_id": "9f2c711b809e6433338a0c3d028bbd52141d159c",
            "created_at": "2025-01-16T16:51:59Z",
            "diff_hunk": "@@ -626,4 +626,62 @@ gc\t\t\tText object for the largest contiguous block of\n \t\t\t`gcgc` uncomments a comment block; `dgc` deletes it).\n \t\t\tWorks only in Operator-pending mode.\n \n+==============================================================================\n+3. Matching\t\t\t\t\t\t\t*matching*\n+\n+Nvim supports highlighting and jumping to matching groups based on |treesitter|\n+nodes or |syntax| groups.\n+\n+The groups are highlighted with |hl-MatchParen|.\n+\n+\t\t\t\t\t\t\t*matching-groups*\n+Treesitter capture groups that count as groups:\n+- `@punctuation.bracket`: Braces, brackets, and parentheses pairs.\n+- `@keyword`: Language-specific keywords.\n+\n+Syntax supported matching groups:\n+- 'matchpairs': Braces, brackets, and parentheses pairs.\n+- |b:match_words|: Language-specific keywords.\n+\n+\t\t\t\t\t\t*matching-%* *%-default*\n+[count]%\t\tJump [count] matches forwards through the\n+\t\t\t|matching-groups|.\n+\n+\t\t\t\t\t\t*matching-g%* *g%-default*\n+[count]g%\t\tJump [count] matches backwards through the\n+\t\t\t|matching-groups|.\n+\n+CONFIGURATION\t\t\t\t\t*matching-configuration*\n+\n+Extending the words recognized as matching groups is done using\n+|b:match_words| or 'matchpairs'.\n+\n+\t\t\t\t\t\t\t*b:match_words*\n+The format for |b:match_words| is similar to 'matchpairs': a comma\n+(,)-separated list of groups. Each group is a colon (:)-separated list of\n+patterns |pattern|. Here's an example for some Lua keywords: >vim\n+\t:let b:match_words = '\\<if\\>:\\<elseif\\>:\\<else\\>:\\<end\\>,'\n+\t\t\\ . '\\<function\\>:\\<end\\>'\n+<\n+Where |\\<| and |\\>| denote word boundaries. |b:match_words| also supports a\n+|Funcref| as value: >vim\n+\t:let b:match_words = 'GetMatchWords()'\n+<\n+The group definitions also support a single backref group |\\1|. For example,\n+>vim\n+\t:let b:match_words = '\\<\\(if|function\\)\\>:\\<end\\1\\>'\n+<\n+matches \"if\" with \"endif\" and \"function\" with \"endfunction\".",
            "html_url": "https://github.com/neovim/neovim/pull/31861#discussion_r1918889215",
            "id": 1918889215,
            "line": 679,
            "node_id": "PRRC_kwDOAPphoM5yX-z_",
            "original_commit_id": "e12acec5450b301064730d70731bfd4cfb29b351",
            "original_line": 679,
            "original_position": 49,
            "original_start_line": 670,
            "path": "runtime/doc/various.txt",
            "position": 54,
            "pull_request_review_id": 2556721166,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918889215/reactions"
            },
            "side": "RIGHT",
            "start_line": 675,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-16T16:51:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918889215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22371?v=4",
                "events_url": "https://api.github.com/users/dsully/events{/privacy}",
                "followers_url": "https://api.github.com/users/dsully/followers",
                "following_url": "https://api.github.com/users/dsully/following{/other_user}",
                "gists_url": "https://api.github.com/users/dsully/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dsully",
                "id": 22371,
                "login": "dsully",
                "node_id": "MDQ6VXNlcjIyMzcx",
                "organizations_url": "https://api.github.com/users/dsully/orgs",
                "received_events_url": "https://api.github.com/users/dsully/received_events",
                "repos_url": "https://api.github.com/users/dsully/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dsully/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dsully/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dsully",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31861#discussion_r1918891991"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918891991"
                }
            },
            "author_association": "MEMBER",
            "body": "That is simply for backward compatibility with existing ftplugins. Going forward, it will not be advertised as a first-class configuration interface. (That is still TBD, but will likely involve treesitter queries.)",
            "commit_id": "9f2c711b809e6433338a0c3d028bbd52141d159c",
            "created_at": "2025-01-16T16:53:56Z",
            "diff_hunk": "@@ -626,4 +626,62 @@ gc\t\t\tText object for the largest contiguous block of\n \t\t\t`gcgc` uncomments a comment block; `dgc` deletes it).\n \t\t\tWorks only in Operator-pending mode.\n \n+==============================================================================\n+3. Matching\t\t\t\t\t\t\t*matching*\n+\n+Nvim supports highlighting and jumping to matching groups based on |treesitter|\n+nodes or |syntax| groups.\n+\n+The groups are highlighted with |hl-MatchParen|.\n+\n+\t\t\t\t\t\t\t*matching-groups*\n+Treesitter capture groups that count as groups:\n+- `@punctuation.bracket`: Braces, brackets, and parentheses pairs.\n+- `@keyword`: Language-specific keywords.\n+\n+Syntax supported matching groups:\n+- 'matchpairs': Braces, brackets, and parentheses pairs.\n+- |b:match_words|: Language-specific keywords.\n+\n+\t\t\t\t\t\t*matching-%* *%-default*\n+[count]%\t\tJump [count] matches forwards through the\n+\t\t\t|matching-groups|.\n+\n+\t\t\t\t\t\t*matching-g%* *g%-default*\n+[count]g%\t\tJump [count] matches backwards through the\n+\t\t\t|matching-groups|.\n+\n+CONFIGURATION\t\t\t\t\t*matching-configuration*\n+\n+Extending the words recognized as matching groups is done using\n+|b:match_words| or 'matchpairs'.\n+\n+\t\t\t\t\t\t\t*b:match_words*\n+The format for |b:match_words| is similar to 'matchpairs': a comma\n+(,)-separated list of groups. Each group is a colon (:)-separated list of\n+patterns |pattern|. Here's an example for some Lua keywords: >vim\n+\t:let b:match_words = '\\<if\\>:\\<elseif\\>:\\<else\\>:\\<end\\>,'\n+\t\t\\ . '\\<function\\>:\\<end\\>'\n+<\n+Where |\\<| and |\\>| denote word boundaries. |b:match_words| also supports a\n+|Funcref| as value: >vim\n+\t:let b:match_words = 'GetMatchWords()'\n+<\n+The group definitions also support a single backref group |\\1|. For example,\n+>vim\n+\t:let b:match_words = '\\<\\(if|function\\)\\>:\\<end\\1\\>'\n+<\n+matches \"if\" with \"endif\" and \"function\" with \"endfunction\".",
            "html_url": "https://github.com/neovim/neovim/pull/31861#discussion_r1918891991",
            "id": 1918891991,
            "in_reply_to_id": 1918889215,
            "line": 679,
            "node_id": "PRRC_kwDOAPphoM5yX_fX",
            "original_commit_id": "e12acec5450b301064730d70731bfd4cfb29b351",
            "original_line": 679,
            "original_position": 49,
            "original_start_line": 670,
            "path": "runtime/doc/various.txt",
            "position": 54,
            "pull_request_review_id": 2556725689,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918891991/reactions"
            },
            "side": "RIGHT",
            "start_line": 675,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-16T16:54:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918891991",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31861#discussion_r1918896587"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918896587"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Should I keep it in the documentation? I wanted to keep the `b:match_words` tag for now.",
            "commit_id": "9f2c711b809e6433338a0c3d028bbd52141d159c",
            "created_at": "2025-01-16T16:57:14Z",
            "diff_hunk": "@@ -626,4 +626,62 @@ gc\t\t\tText object for the largest contiguous block of\n \t\t\t`gcgc` uncomments a comment block; `dgc` deletes it).\n \t\t\tWorks only in Operator-pending mode.\n \n+==============================================================================\n+3. Matching\t\t\t\t\t\t\t*matching*\n+\n+Nvim supports highlighting and jumping to matching groups based on |treesitter|\n+nodes or |syntax| groups.\n+\n+The groups are highlighted with |hl-MatchParen|.\n+\n+\t\t\t\t\t\t\t*matching-groups*\n+Treesitter capture groups that count as groups:\n+- `@punctuation.bracket`: Braces, brackets, and parentheses pairs.\n+- `@keyword`: Language-specific keywords.\n+\n+Syntax supported matching groups:\n+- 'matchpairs': Braces, brackets, and parentheses pairs.\n+- |b:match_words|: Language-specific keywords.\n+\n+\t\t\t\t\t\t*matching-%* *%-default*\n+[count]%\t\tJump [count] matches forwards through the\n+\t\t\t|matching-groups|.\n+\n+\t\t\t\t\t\t*matching-g%* *g%-default*\n+[count]g%\t\tJump [count] matches backwards through the\n+\t\t\t|matching-groups|.\n+\n+CONFIGURATION\t\t\t\t\t*matching-configuration*\n+\n+Extending the words recognized as matching groups is done using\n+|b:match_words| or 'matchpairs'.\n+\n+\t\t\t\t\t\t\t*b:match_words*\n+The format for |b:match_words| is similar to 'matchpairs': a comma\n+(,)-separated list of groups. Each group is a colon (:)-separated list of\n+patterns |pattern|. Here's an example for some Lua keywords: >vim\n+\t:let b:match_words = '\\<if\\>:\\<elseif\\>:\\<else\\>:\\<end\\>,'\n+\t\t\\ . '\\<function\\>:\\<end\\>'\n+<\n+Where |\\<| and |\\>| denote word boundaries. |b:match_words| also supports a\n+|Funcref| as value: >vim\n+\t:let b:match_words = 'GetMatchWords()'\n+<\n+The group definitions also support a single backref group |\\1|. For example,\n+>vim\n+\t:let b:match_words = '\\<\\(if|function\\)\\>:\\<end\\1\\>'\n+<\n+matches \"if\" with \"endif\" and \"function\" with \"endfunction\".",
            "html_url": "https://github.com/neovim/neovim/pull/31861#discussion_r1918896587",
            "id": 1918896587,
            "in_reply_to_id": 1918889215,
            "line": 679,
            "node_id": "PRRC_kwDOAPphoM5yYAnL",
            "original_commit_id": "e12acec5450b301064730d70731bfd4cfb29b351",
            "original_line": 679,
            "original_position": 49,
            "original_start_line": 670,
            "path": "runtime/doc/various.txt",
            "position": 54,
            "pull_request_review_id": 2556733212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918896587/reactions"
            },
            "side": "RIGHT",
            "start_line": 675,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-16T16:57:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918896587",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31861#discussion_r1918902321"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918902321"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, but it should state explicitly that these are supported for the sake of compatibility with `matchit`. Since we will keep shipping `matchit` (just not enable it by default), we can just link to their documentation and focus on our limitations (if any).",
            "commit_id": "9f2c711b809e6433338a0c3d028bbd52141d159c",
            "created_at": "2025-01-16T17:01:25Z",
            "diff_hunk": "@@ -626,4 +626,62 @@ gc\t\t\tText object for the largest contiguous block of\n \t\t\t`gcgc` uncomments a comment block; `dgc` deletes it).\n \t\t\tWorks only in Operator-pending mode.\n \n+==============================================================================\n+3. Matching\t\t\t\t\t\t\t*matching*\n+\n+Nvim supports highlighting and jumping to matching groups based on |treesitter|\n+nodes or |syntax| groups.\n+\n+The groups are highlighted with |hl-MatchParen|.\n+\n+\t\t\t\t\t\t\t*matching-groups*\n+Treesitter capture groups that count as groups:\n+- `@punctuation.bracket`: Braces, brackets, and parentheses pairs.\n+- `@keyword`: Language-specific keywords.\n+\n+Syntax supported matching groups:\n+- 'matchpairs': Braces, brackets, and parentheses pairs.\n+- |b:match_words|: Language-specific keywords.\n+\n+\t\t\t\t\t\t*matching-%* *%-default*\n+[count]%\t\tJump [count] matches forwards through the\n+\t\t\t|matching-groups|.\n+\n+\t\t\t\t\t\t*matching-g%* *g%-default*\n+[count]g%\t\tJump [count] matches backwards through the\n+\t\t\t|matching-groups|.\n+\n+CONFIGURATION\t\t\t\t\t*matching-configuration*\n+\n+Extending the words recognized as matching groups is done using\n+|b:match_words| or 'matchpairs'.\n+\n+\t\t\t\t\t\t\t*b:match_words*\n+The format for |b:match_words| is similar to 'matchpairs': a comma\n+(,)-separated list of groups. Each group is a colon (:)-separated list of\n+patterns |pattern|. Here's an example for some Lua keywords: >vim\n+\t:let b:match_words = '\\<if\\>:\\<elseif\\>:\\<else\\>:\\<end\\>,'\n+\t\t\\ . '\\<function\\>:\\<end\\>'\n+<\n+Where |\\<| and |\\>| denote word boundaries. |b:match_words| also supports a\n+|Funcref| as value: >vim\n+\t:let b:match_words = 'GetMatchWords()'\n+<\n+The group definitions also support a single backref group |\\1|. For example,\n+>vim\n+\t:let b:match_words = '\\<\\(if|function\\)\\>:\\<end\\1\\>'\n+<\n+matches \"if\" with \"endif\" and \"function\" with \"endfunction\".",
            "html_url": "https://github.com/neovim/neovim/pull/31861#discussion_r1918902321",
            "id": 1918902321,
            "in_reply_to_id": 1918889215,
            "line": 679,
            "node_id": "PRRC_kwDOAPphoM5yYCAx",
            "original_commit_id": "e12acec5450b301064730d70731bfd4cfb29b351",
            "original_line": 679,
            "original_position": 49,
            "original_start_line": 670,
            "path": "runtime/doc/various.txt",
            "position": 54,
            "pull_request_review_id": 2556743473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918902321/reactions"
            },
            "side": "RIGHT",
            "start_line": 675,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-16T17:01:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918902321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31861#discussion_r1918950933"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31861"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918950933"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Got it - didn't realize that was for backwards compatibility.",
            "commit_id": "9f2c711b809e6433338a0c3d028bbd52141d159c",
            "created_at": "2025-01-16T17:38:32Z",
            "diff_hunk": "@@ -626,4 +626,62 @@ gc\t\t\tText object for the largest contiguous block of\n \t\t\t`gcgc` uncomments a comment block; `dgc` deletes it).\n \t\t\tWorks only in Operator-pending mode.\n \n+==============================================================================\n+3. Matching\t\t\t\t\t\t\t*matching*\n+\n+Nvim supports highlighting and jumping to matching groups based on |treesitter|\n+nodes or |syntax| groups.\n+\n+The groups are highlighted with |hl-MatchParen|.\n+\n+\t\t\t\t\t\t\t*matching-groups*\n+Treesitter capture groups that count as groups:\n+- `@punctuation.bracket`: Braces, brackets, and parentheses pairs.\n+- `@keyword`: Language-specific keywords.\n+\n+Syntax supported matching groups:\n+- 'matchpairs': Braces, brackets, and parentheses pairs.\n+- |b:match_words|: Language-specific keywords.\n+\n+\t\t\t\t\t\t*matching-%* *%-default*\n+[count]%\t\tJump [count] matches forwards through the\n+\t\t\t|matching-groups|.\n+\n+\t\t\t\t\t\t*matching-g%* *g%-default*\n+[count]g%\t\tJump [count] matches backwards through the\n+\t\t\t|matching-groups|.\n+\n+CONFIGURATION\t\t\t\t\t*matching-configuration*\n+\n+Extending the words recognized as matching groups is done using\n+|b:match_words| or 'matchpairs'.\n+\n+\t\t\t\t\t\t\t*b:match_words*\n+The format for |b:match_words| is similar to 'matchpairs': a comma\n+(,)-separated list of groups. Each group is a colon (:)-separated list of\n+patterns |pattern|. Here's an example for some Lua keywords: >vim\n+\t:let b:match_words = '\\<if\\>:\\<elseif\\>:\\<else\\>:\\<end\\>,'\n+\t\t\\ . '\\<function\\>:\\<end\\>'\n+<\n+Where |\\<| and |\\>| denote word boundaries. |b:match_words| also supports a\n+|Funcref| as value: >vim\n+\t:let b:match_words = 'GetMatchWords()'\n+<\n+The group definitions also support a single backref group |\\1|. For example,\n+>vim\n+\t:let b:match_words = '\\<\\(if|function\\)\\>:\\<end\\1\\>'\n+<\n+matches \"if\" with \"endif\" and \"function\" with \"endfunction\".",
            "html_url": "https://github.com/neovim/neovim/pull/31861#discussion_r1918950933",
            "id": 1918950933,
            "in_reply_to_id": 1918889215,
            "line": 679,
            "node_id": "PRRC_kwDOAPphoM5yYN4V",
            "original_commit_id": "e12acec5450b301064730d70731bfd4cfb29b351",
            "original_line": 679,
            "original_position": 49,
            "original_start_line": 670,
            "path": "runtime/doc/various.txt",
            "position": 54,
            "pull_request_review_id": 2556824059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918950933/reactions"
            },
            "side": "RIGHT",
            "start_line": 675,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-16T17:38:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918950933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22371?v=4",
                "events_url": "https://api.github.com/users/dsully/events{/privacy}",
                "followers_url": "https://api.github.com/users/dsully/followers",
                "following_url": "https://api.github.com/users/dsully/following{/other_user}",
                "gists_url": "https://api.github.com/users/dsully/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dsully",
                "id": 22371,
                "login": "dsully",
                "node_id": "MDQ6VXNlcjIyMzcx",
                "organizations_url": "https://api.github.com/users/dsully/orgs",
                "received_events_url": "https://api.github.com/users/dsully/received_events",
                "repos_url": "https://api.github.com/users/dsully/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dsully/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dsully/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dsully",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Don't forget `matchparen.vim` -- these are so similar that they should be able to share a lot of code.",
            "created_at": "2025-01-04T17:44:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2571366059",
            "id": 2571366059,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZQ-6r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571366059/reactions"
            },
            "updated_at": "2025-01-04T17:44:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571366059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ah yes, forgot to mention it. That's also the idea indeed!\n\nOn that note, should this plugin be an almost compatible replacement for both, or just replace the common functionality but in another way?\n\nFor example, should we keep things like the matchit/matchparen names, `:DoMatchParen`, `:NoMatchParen`, pack/dist/opt/ path, etc?",
            "created_at": "2025-01-04T18:10:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2571372226",
            "id": 2571372226,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZRAbC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571372226/reactions"
            },
            "updated_at": "2025-01-04T18:10:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571372226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It should be a functional replacement, but no need to replicate the full interface (unless it's natural).\r\n\r\nAnd just for the record (I understand that this is draft and still early testing): The final module should be exposed similarly to `comment.lua`.",
            "created_at": "2025-01-04T18:18:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2571374077",
            "id": 2571374077,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZRA39",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571374077/reactions"
            },
            "updated_at": "2025-01-04T18:18:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571374077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't know if it's useful but I also implemented something very similar to this with https://github.com/lewis6991/nvim-treesitter-pairs . Does `@keyword` and `@punctuation.bracket`",
            "created_at": "2025-01-04T18:37:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2571378897",
            "id": 2571378897,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZRCDR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571378897/reactions"
            },
            "updated_at": "2025-01-04T18:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571378897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It should be a functional replacement, but no need to replicate the full interface (unless it's natural).\r\n\r\nNoted!\r\n\r\n> And just for the record (I understand that this is draft and still early testing): The final module should be exposed similarly to comment.lua.\r\n\r\nThanks for this. Even though this is indeed still a very early draft, this kind of feedback is already very welcome.\r\n\r\n> I don't know if it's useful but I also implemented something very similar to this with https://github.com/lewis6991/nvim-treesitter-pairs . Does @keyword and @punctuation.bracket\r\n\r\nThanks @lewis6991, indeed very similar, and definitely useful!",
            "created_at": "2025-01-04T18:57:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2571383209",
            "id": 2571383209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZRDGp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571383209/reactions"
            },
            "updated_at": "2025-01-04T18:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571383209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Limit search: visible in window, 100 lines above/below, 'synmaxcol', timeout?\r\n\r\nIdeally, the Lua rewrite (together with treesitter performance improvements in progress) will remove any performance concerns, so this shouldn't be necessary (and hence configurable).",
            "created_at": "2025-01-06T11:48:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2572949110",
            "id": 2572949110,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZXBZ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2572949110/reactions"
            },
            "updated_at": "2025-01-06T11:48:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2572949110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I might need some help with the parsing of `b:match_words`. The original implementation uses a lot of regex kungfu to achieve things like escaping certain chars, supporting backrefs and more vim-regex wizardry. If someone enjoys working on a lua function that parses this string to whatever Lua datastructure, it would be very welcome!",
            "created_at": "2025-01-06T17:53:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2573617926",
            "id": 2573617926,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZZksG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573617926/reactions"
            },
            "updated_at": "2025-01-06T17:53:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573617926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You can use Vim regex from Lua. If we memoize the parsed `match_words` per buffer, that should not be a performance bottleneck.",
            "created_at": "2025-01-06T17:55:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2573621525",
            "id": 2573621525,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZZlkV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573621525/reactions"
            },
            "updated_at": "2025-01-06T17:55:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573621525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks, I'll try t do that more. The problem is that there is a lot of manual parsing involved, e.g. manually finding capture groups, and then swapping the backrefs with the found groups. Just wish they would've used a stricter and simpler pattern for the matching words 😛.",
            "created_at": "2025-01-06T18:11:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2573648087",
            "id": 2573648087,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6ZZsDX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573648087/reactions"
            },
            "updated_at": "2025-01-06T19:06:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2573648087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also implemented a version of this using tree-sitter which handles the matching functionality:\r\n\r\nhttps://github.com/dsully/treesitter-jump.nvim\r\n\r\nPlease feel free to grab any useful code from there.",
            "created_at": "2025-01-12T17:24:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2585841596",
            "id": 2585841596,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6aIM-8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585841596/reactions"
            },
            "updated_at": "2025-01-12T17:28:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585841596",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/22371?v=4",
                "events_url": "https://api.github.com/users/dsully/events{/privacy}",
                "followers_url": "https://api.github.com/users/dsully/followers",
                "following_url": "https://api.github.com/users/dsully/following{/other_user}",
                "gists_url": "https://api.github.com/users/dsully/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dsully",
                "id": 22371,
                "login": "dsully",
                "node_id": "MDQ6VXNlcjIyMzcx",
                "organizations_url": "https://api.github.com/users/dsully/orgs",
                "received_events_url": "https://api.github.com/users/dsully/received_events",
                "repos_url": "https://api.github.com/users/dsully/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dsully/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dsully/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dsully",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks! I'll definitely have a look at it. However, one of the goals is to have a language agnostic implementation that does not require new TS queries / captures, and instead reuse the those from the TS highlights (which are ofc not language agnostic)",
            "created_at": "2025-01-12T17:49:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2585849014",
            "id": 2585849014,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6aIOy2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585849014/reactions"
            },
            "updated_at": "2025-01-12T17:49:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585849014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As I said earlier, the `b:match_words` format is quite extensive and complex. For example, it supports multiple (nested) backrefs in the middle and end groups. These backrefs are like regular RE and are numbered: `\\1`, `\\2`, etc.\r\n\r\nAs this would be a minimal implementation of matchit, I propose to only support `\\1`, at least for now.\r\n\r\nI've checked all files in [runtime/ftplugin](https://github.com/neovim/neovim/tree/master/runtime/ftplugin) and none of these define a matching group with a backref number higher than 1. This is probably also quite rare in user config (defining your own `b:match_words` is probably already quite rare).\r\n\r\nLet me know if this would be okay :)",
            "created_at": "2025-01-14T16:05:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2590358456",
            "id": 2590358456,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6aZbu4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590358456/reactions"
            },
            "updated_at": "2025-01-14T16:05:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590358456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We'll likely keep the two plugins in `opt`, at least for a while, so people can explicitly load these in their config if they need it.",
            "created_at": "2025-01-14T16:09:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2590377513",
            "id": 2590377513,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6aZgYp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590377513/reactions"
            },
            "updated_at": "2025-01-14T16:09:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590377513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As I said earlier, the b:match_words format is quite extensive and complex. \r\n\r\nMy vision for this was that we would eventually adapt these into equivalent treesitter queries, either as a separate file or bundled into `highlights.scm`. I don't want the `b:match_words` concept to live on indefinitely. We should move forward to query files which are much more precise and structured.",
            "created_at": "2025-01-14T16:42:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2590511007",
            "id": 2590511007,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6aaA-f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590511007/reactions"
            },
            "updated_at": "2025-01-14T16:42:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590511007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, that would require maintaining a parallel universe (in nvim-treesitter, so I have some standing on this issue), while we get `b:match_words` for free from Vim's ftplugins. So we shouldn't throw that away on a whim.\r\n\r\nOf course,\r\n1. we should only implement the minimal format actually used in our runtime,\r\n2. we can still add \"pair queries\" if that opens up sufficient improvements (which I don't see right now) to merit dropping filetypes without tree-sitter parser and rewriting the implementation for those with one.\r\n\r\nThis does not imply a commitment to keep these around forever; I just think the bar for pulling that trigger is relatively high (given current understanding). In any case, this discussion is not a blocker for this PR; I would just prefer to have _actual_ feature parity with `matchit` if possible (i.e., no significant out-of-the-box regression; I don't care about hypothetical features the format supports).",
            "created_at": "2025-01-14T16:51:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2590539071",
            "id": 2590539071,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6aaH0_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590539071/reactions"
            },
            "updated_at": "2025-01-15T15:48:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2590539071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I combined the implementations for highlighting pairs and jumping between groups. Now you get highlighting keywords \"for free\". I don't think that many people want this, so it shouldn't be the default, but could be nice to be able to configure it. For example:\r\n\r\n```lua\r\n-- user can add this to config instead:\r\nvim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI', 'WinEnter' }, {\r\n  callback = vim.schedule_wrap(function()\r\n    require('vim._matching').highlight({\r\n      \"@keywords\" = true,\r\n    })\r\n  end),\r\n})\r\n```\r\n\r\nOr maybe this could be something that is exposed in `vim.hl`? What do you think?\r\n\r\n(Not that important and could always be added later, but I noticed it as I was currently working on it.)",
            "created_at": "2025-01-16T15:10:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31861#issuecomment-2595983196",
            "id": 2595983196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
            "node_id": "IC_kwDOAPphoM6au49c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2595983196/reactions"
            },
            "updated_at": "2025-01-16T20:04:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2595983196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31861/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31861/commits",
    "created_at": "2025-01-04T17:39:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31861.diff",
    "draft": true,
    "head": {
        "label": "yochem:matchit-lua",
        "ref": "matchit-lua",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/yochem/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/yochem/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/yochem/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/yochem/neovim/branches{/branch}",
            "clone_url": "https://github.com/yochem/neovim.git",
            "collaborators_url": "https://api.github.com/repos/yochem/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/yochem/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/yochem/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/yochem/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/yochem/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/yochem/neovim/contributors",
            "created_at": "2023-03-13T14:39:08Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/yochem/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/yochem/neovim/downloads",
            "events_url": "https://api.github.com/repos/yochem/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/yochem/neovim/forks",
            "full_name": "yochem/neovim",
            "git_commits_url": "https://api.github.com/repos/yochem/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/yochem/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/yochem/neovim/git/tags{/sha}",
            "git_url": "git://github.com/yochem/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/yochem/neovim/hooks",
            "html_url": "https://github.com/yochem/neovim",
            "id": 613421928,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/yochem/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/yochem/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/yochem/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/yochem/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/yochem/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/yochem/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/yochem/neovim/merges",
            "milestones_url": "https://api.github.com/repos/yochem/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOJJATaA",
            "notifications_url": "https://api.github.com/repos/yochem/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/yochem/neovim/pulls{/number}",
            "pushed_at": "2025-01-20T05:27:11Z",
            "releases_url": "https://api.github.com/repos/yochem/neovim/releases{/id}",
            "size": 300587,
            "ssh_url": "git@github.com:yochem/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/yochem/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/yochem/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/yochem/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/yochem/neovim/subscription",
            "svn_url": "https://github.com/yochem/neovim",
            "tags_url": "https://api.github.com/repos/yochem/neovim/tags",
            "teams_url": "https://api.github.com/repos/yochem/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/yochem/neovim/git/trees{/sha}",
            "updated_at": "2025-01-16T17:15:53Z",
            "url": "https://api.github.com/repos/yochem/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "9f2c711b809e6433338a0c3d028bbd52141d159c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
            "events_url": "https://api.github.com/users/yochem/events{/privacy}",
            "followers_url": "https://api.github.com/users/yochem/followers",
            "following_url": "https://api.github.com/users/yochem/following{/other_user}",
            "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/yochem",
            "id": 23235841,
            "login": "yochem",
            "node_id": "MDQ6VXNlcjIzMjM1ODQx",
            "organizations_url": "https://api.github.com/users/yochem/orgs",
            "received_events_url": "https://api.github.com/users/yochem/received_events",
            "repos_url": "https://api.github.com/users/yochem/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/yochem",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31861",
    "id": 2260475208,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31861",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "dd895529b11584828b2cfb62a4793176fec33825",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6GvB1I",
    "number": 31861,
    "patch_url": "https://github.com/neovim/neovim/pull/31861.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31861/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/9f2c711b809e6433338a0c3d028bbd52141d159c",
    "title": "matchit / matchparen Lua implementation",
    "updated_at": "2025-01-19T22:14:12Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31861",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
        "events_url": "https://api.github.com/users/yochem/events{/privacy}",
        "followers_url": "https://api.github.com/users/yochem/followers",
        "following_url": "https://api.github.com/users/yochem/following{/other_user}",
        "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yochem",
        "id": 23235841,
        "login": "yochem",
        "node_id": "MDQ6VXNlcjIzMjM1ODQx",
        "organizations_url": "https://api.github.com/users/yochem/orgs",
        "received_events_url": "https://api.github.com/users/yochem/received_events",
        "repos_url": "https://api.github.com/users/yochem/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yochem",
        "user_view_type": "public"
    }
}