{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34710/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34710/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34710"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34710"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34710/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34710"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/2423ab8d511b659ca3933edb566e709376babd84"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6179,
            "forks_count": 6179,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1956,
            "open_issues_count": 1956,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T22:14:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332755,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91117,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-15T02:58:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91117,
            "watchers_count": 91117,
            "web_commit_signoff_required": false
        },
        "sha": "66f02ee1fea2cf3c033e48e58bd49e8b81c7a11e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "TODO\r\n- [ ] refactor: move most code to `runtime/pack/dist/opt/lua/nvim/cfilter.lua`\r\n- [ ] command preview performance: currently it can handles a quickfix list with more 12,000 entries almost instantly. I need to decide what it should do with much larger quickfix list (eg. `:grep nvim` inside Neovim repository)\r\n- [ ] Add tests\r\n\r\nFix #25410 \r\n<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34710#discussion_r2188411499"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34710"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188411499"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably only these command defs should live in plugin/cfilter.lua, and the rest of the code should live in `nvim/lua/cfilter.lua`. Then these commands can call `require('nvim.cfilter').foo()`.",
            "commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "created_at": "2025-07-06T15:40:18Z",
            "diff_hunk": "@@ -0,0 +1,170 @@\n+---@param bufnr integer\n+---@param lnum integer\n+---@return string?\n+local function get_line(bufnr, lnum)\n+  local line = vim.api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, false)[1]\n+  if not line then\n+    return nil\n+  end\n+  return line\n+end\n+\n+---@param searchpat string\n+---@return string\n+local function get_search_pat(searchpat)\n+  local firstchar = searchpat:sub(1, 1)\n+  local lastchar = searchpat:sub(-1)\n+  local pat = searchpat\n+  if firstchar == lastchar and (firstchar == '/' or firstchar == '\"' or firstchar == \"'\") then\n+    pat = searchpat:sub(2, -2)\n+    if pat == '' then\n+      -- Use the last search pattern\n+      pat = vim.fn.getreg('/')\n+    end\n+  end\n+  return pat\n+end\n+\n+---@param items table[]\n+---@param regex vim.regex\n+---@param bang boolean\n+---@param opts? { max_matches: integer }\n+---@return table[]\n+local function get_matched_items(items, regex, bang, opts)\n+  if not opts then opts = {} end\n+  local bufname = vim.api.nvim_buf_get_name\n+  local cond ---@type fun(val: table): boolean\n+  local results = {}\n+  if bang then\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return not (text_match or bufname_match)\n+    end\n+  else\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return text_match or bufname_match\n+    end\n+  end\n+\n+  local results_num = 0\n+  for i, item in ipairs(items) do\n+    if cond(item) then\n+      item.nvim_cfilter = {\n+        lnum = i - 1,\n+      }\n+      table.insert(results, item)\n+      if opts.max_matches then\n+        results_num = results_num + 1\n+        if results_num > opts.max_matches then\n+          break\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---@param is_qf boolean\n+---@param pat string\n+---@param bang boolean\n+local function cmd_cb(is_qf, pat, bang)\n+  local get_list, set_list ---@type function, function\n+  local cmd_name ---@type string\n+  pat = get_search_pat(pat)\n+  if pat == '' then\n+    return\n+  end\n+\n+  if is_qf then\n+    get_list = vim.fn.getqflist\n+    set_list = vim.fn.setqflist\n+    cmd_name = ':Cfilter' .. (bang and '!' or '')\n+  else\n+    get_list = function()\n+      return vim.fn.getloclist(0)\n+    end\n+    set_list = function(...)\n+      return vim.fn.setloclist(0, ...)\n+    end\n+    cmd_name = ':Lfilter' .. (bang and '!' or '')\n+  end\n+\n+  local regex = vim.regex(pat)\n+\n+  local title = cmd_name .. ' /' .. pat .. '/'\n+  set_list({}, ' ', {\n+    title = title,\n+    items = get_matched_items(get_list(), regex, bang),\n+  })\n+end\n+\n+---@param opts vim.api.keyset.create_user_command.command_args\n+---@param ns integer\n+---@param preview_buf integer\n+---@return 0|1|2\n+local function cmd_preview(opts, ns, preview_buf)\n+  local bang, pat = opts.bang, opts.args\n+  pat = get_search_pat(pat)\n+  if pat == '' then\n+    return 0\n+  end\n+\n+  local get_list = opts.name == 'Cfilter' and vim.fn.getqflist or function(...)\n+    return vim.fn.getloclist(0, ...)\n+  end\n+\n+  local qf_info = get_list({ qfbufnr = true, winid = true, items = true })\n+  local qfbufnr, qfwinid, items = qf_info.qfbufnr, qf_info.winid, qf_info.items\n+\n+  local max_matches = vim.api.nvim_win_get_height(qfwinid)\n+  local lines = {}\n+  local regex = vim.regex(pat)\n+  items = get_matched_items(items, regex, bang, { max_matches = max_matches })\n+  for _, item in ipairs(items) do\n+    local lnum = item.nvim_cfilter.lnum\n+    table.insert(lines, get_line(qfbufnr, lnum))\n+  end\n+  vim.bo[qfbufnr].modifiable = true\n+  local return_value = preview_buf and 2 or 1\n+  vim.api.nvim_buf_set_lines(preview_buf or qfbufnr, 0, -1, false, lines)\n+\n+  if not bang then\n+    for lnum = 0, vim.api.nvim_buf_line_count(qfbufnr) - 1, 1 do\n+      local line = get_line(qfbufnr, lnum)\n+      if line then\n+        local match_start, match_end = regex:match_str(line)\n+        if match_start and match_end then\n+          for _, buf in ipairs { qfbufnr, preview_buf } do\n+            vim.hl.range(buf, ns, 'IncSearch', { lnum, match_start }, { lnum, match_end })\n+          end\n+        end\n+      end\n+    end\n+  end\n+  return return_value\n+end\n+\n+vim.api.nvim_create_user_command('Cfilter', function(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/34710#discussion_r2188411499",
            "id": 2188411499,
            "line": 154,
            "node_id": "PRRC_kwDOAPphoM6CcIJr",
            "original_commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "original_line": 154,
            "original_position": 154,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/cfilter/plugin/cfilter.lua",
            "position": 154,
            "pull_request_review_id": 2991442382,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34710",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188411499/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T15:40:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188411499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34710#discussion_r2188412313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34710"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188412313"
                }
            },
            "author_association": "MEMBER",
            "body": "oh, but this is a \"opt\" plugin so this is fine as you have it.",
            "commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "created_at": "2025-07-06T15:40:55Z",
            "diff_hunk": "@@ -0,0 +1,170 @@\n+---@param bufnr integer\n+---@param lnum integer\n+---@return string?\n+local function get_line(bufnr, lnum)\n+  local line = vim.api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, false)[1]\n+  if not line then\n+    return nil\n+  end\n+  return line\n+end\n+\n+---@param searchpat string\n+---@return string\n+local function get_search_pat(searchpat)\n+  local firstchar = searchpat:sub(1, 1)\n+  local lastchar = searchpat:sub(-1)\n+  local pat = searchpat\n+  if firstchar == lastchar and (firstchar == '/' or firstchar == '\"' or firstchar == \"'\") then\n+    pat = searchpat:sub(2, -2)\n+    if pat == '' then\n+      -- Use the last search pattern\n+      pat = vim.fn.getreg('/')\n+    end\n+  end\n+  return pat\n+end\n+\n+---@param items table[]\n+---@param regex vim.regex\n+---@param bang boolean\n+---@param opts? { max_matches: integer }\n+---@return table[]\n+local function get_matched_items(items, regex, bang, opts)\n+  if not opts then opts = {} end\n+  local bufname = vim.api.nvim_buf_get_name\n+  local cond ---@type fun(val: table): boolean\n+  local results = {}\n+  if bang then\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return not (text_match or bufname_match)\n+    end\n+  else\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return text_match or bufname_match\n+    end\n+  end\n+\n+  local results_num = 0\n+  for i, item in ipairs(items) do\n+    if cond(item) then\n+      item.nvim_cfilter = {\n+        lnum = i - 1,\n+      }\n+      table.insert(results, item)\n+      if opts.max_matches then\n+        results_num = results_num + 1\n+        if results_num > opts.max_matches then\n+          break\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---@param is_qf boolean\n+---@param pat string\n+---@param bang boolean\n+local function cmd_cb(is_qf, pat, bang)\n+  local get_list, set_list ---@type function, function\n+  local cmd_name ---@type string\n+  pat = get_search_pat(pat)\n+  if pat == '' then\n+    return\n+  end\n+\n+  if is_qf then\n+    get_list = vim.fn.getqflist\n+    set_list = vim.fn.setqflist\n+    cmd_name = ':Cfilter' .. (bang and '!' or '')\n+  else\n+    get_list = function()\n+      return vim.fn.getloclist(0)\n+    end\n+    set_list = function(...)\n+      return vim.fn.setloclist(0, ...)\n+    end\n+    cmd_name = ':Lfilter' .. (bang and '!' or '')\n+  end\n+\n+  local regex = vim.regex(pat)\n+\n+  local title = cmd_name .. ' /' .. pat .. '/'\n+  set_list({}, ' ', {\n+    title = title,\n+    items = get_matched_items(get_list(), regex, bang),\n+  })\n+end\n+\n+---@param opts vim.api.keyset.create_user_command.command_args\n+---@param ns integer\n+---@param preview_buf integer\n+---@return 0|1|2\n+local function cmd_preview(opts, ns, preview_buf)\n+  local bang, pat = opts.bang, opts.args\n+  pat = get_search_pat(pat)\n+  if pat == '' then\n+    return 0\n+  end\n+\n+  local get_list = opts.name == 'Cfilter' and vim.fn.getqflist or function(...)\n+    return vim.fn.getloclist(0, ...)\n+  end\n+\n+  local qf_info = get_list({ qfbufnr = true, winid = true, items = true })\n+  local qfbufnr, qfwinid, items = qf_info.qfbufnr, qf_info.winid, qf_info.items\n+\n+  local max_matches = vim.api.nvim_win_get_height(qfwinid)\n+  local lines = {}\n+  local regex = vim.regex(pat)\n+  items = get_matched_items(items, regex, bang, { max_matches = max_matches })\n+  for _, item in ipairs(items) do\n+    local lnum = item.nvim_cfilter.lnum\n+    table.insert(lines, get_line(qfbufnr, lnum))\n+  end\n+  vim.bo[qfbufnr].modifiable = true\n+  local return_value = preview_buf and 2 or 1\n+  vim.api.nvim_buf_set_lines(preview_buf or qfbufnr, 0, -1, false, lines)\n+\n+  if not bang then\n+    for lnum = 0, vim.api.nvim_buf_line_count(qfbufnr) - 1, 1 do\n+      local line = get_line(qfbufnr, lnum)\n+      if line then\n+        local match_start, match_end = regex:match_str(line)\n+        if match_start and match_end then\n+          for _, buf in ipairs { qfbufnr, preview_buf } do\n+            vim.hl.range(buf, ns, 'IncSearch', { lnum, match_start }, { lnum, match_end })\n+          end\n+        end\n+      end\n+    end\n+  end\n+  return return_value\n+end\n+\n+vim.api.nvim_create_user_command('Cfilter', function(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/34710#discussion_r2188412313",
            "id": 2188412313,
            "in_reply_to_id": 2188411499,
            "line": 154,
            "node_id": "PRRC_kwDOAPphoM6CcIWZ",
            "original_commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "original_line": 154,
            "original_position": 154,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/cfilter/plugin/cfilter.lua",
            "position": 154,
            "pull_request_review_id": 2991443212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34710",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188412313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T15:41:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188412313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34710#discussion_r2188414598"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34710"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188414598"
                }
            },
            "author_association": "MEMBER",
            "body": "avoid the `_cb` suffix, use an `on_` suffix. `:help dev-naming`",
            "commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "created_at": "2025-07-06T15:43:24Z",
            "diff_hunk": "@@ -0,0 +1,170 @@\n+---@param bufnr integer\n+---@param lnum integer\n+---@return string?\n+local function get_line(bufnr, lnum)\n+  local line = vim.api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, false)[1]\n+  if not line then\n+    return nil\n+  end\n+  return line\n+end\n+\n+---@param searchpat string\n+---@return string\n+local function get_search_pat(searchpat)\n+  local firstchar = searchpat:sub(1, 1)\n+  local lastchar = searchpat:sub(-1)\n+  local pat = searchpat\n+  if firstchar == lastchar and (firstchar == '/' or firstchar == '\"' or firstchar == \"'\") then\n+    pat = searchpat:sub(2, -2)\n+    if pat == '' then\n+      -- Use the last search pattern\n+      pat = vim.fn.getreg('/')\n+    end\n+  end\n+  return pat\n+end\n+\n+---@param items table[]\n+---@param regex vim.regex\n+---@param bang boolean\n+---@param opts? { max_matches: integer }\n+---@return table[]\n+local function get_matched_items(items, regex, bang, opts)\n+  if not opts then opts = {} end\n+  local bufname = vim.api.nvim_buf_get_name\n+  local cond ---@type fun(val: table): boolean\n+  local results = {}\n+  if bang then\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return not (text_match or bufname_match)\n+    end\n+  else\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return text_match or bufname_match\n+    end\n+  end\n+\n+  local results_num = 0\n+  for i, item in ipairs(items) do\n+    if cond(item) then\n+      item.nvim_cfilter = {\n+        lnum = i - 1,\n+      }\n+      table.insert(results, item)\n+      if opts.max_matches then\n+        results_num = results_num + 1\n+        if results_num > opts.max_matches then\n+          break\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---@param is_qf boolean\n+---@param pat string\n+---@param bang boolean\n+local function cmd_cb(is_qf, pat, bang)",
            "html_url": "https://github.com/neovim/neovim/pull/34710#discussion_r2188414598",
            "id": 2188414598,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM6CcI6G",
            "original_commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/cfilter/plugin/cfilter.lua",
            "position": 77,
            "pull_request_review_id": 2991445357,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34710",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188414598/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T15:43:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188414598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34710#discussion_r2188451916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34710"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188451916"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I know it, but I don't know what should follows `on_`. `on_cmd` just sounds strange to me",
            "commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "created_at": "2025-07-06T16:22:38Z",
            "diff_hunk": "@@ -0,0 +1,170 @@\n+---@param bufnr integer\n+---@param lnum integer\n+---@return string?\n+local function get_line(bufnr, lnum)\n+  local line = vim.api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, false)[1]\n+  if not line then\n+    return nil\n+  end\n+  return line\n+end\n+\n+---@param searchpat string\n+---@return string\n+local function get_search_pat(searchpat)\n+  local firstchar = searchpat:sub(1, 1)\n+  local lastchar = searchpat:sub(-1)\n+  local pat = searchpat\n+  if firstchar == lastchar and (firstchar == '/' or firstchar == '\"' or firstchar == \"'\") then\n+    pat = searchpat:sub(2, -2)\n+    if pat == '' then\n+      -- Use the last search pattern\n+      pat = vim.fn.getreg('/')\n+    end\n+  end\n+  return pat\n+end\n+\n+---@param items table[]\n+---@param regex vim.regex\n+---@param bang boolean\n+---@param opts? { max_matches: integer }\n+---@return table[]\n+local function get_matched_items(items, regex, bang, opts)\n+  if not opts then opts = {} end\n+  local bufname = vim.api.nvim_buf_get_name\n+  local cond ---@type fun(val: table): boolean\n+  local results = {}\n+  if bang then\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return not (text_match or bufname_match)\n+    end\n+  else\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return text_match or bufname_match\n+    end\n+  end\n+\n+  local results_num = 0\n+  for i, item in ipairs(items) do\n+    if cond(item) then\n+      item.nvim_cfilter = {\n+        lnum = i - 1,\n+      }\n+      table.insert(results, item)\n+      if opts.max_matches then\n+        results_num = results_num + 1\n+        if results_num > opts.max_matches then\n+          break\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---@param is_qf boolean\n+---@param pat string\n+---@param bang boolean\n+local function cmd_cb(is_qf, pat, bang)",
            "html_url": "https://github.com/neovim/neovim/pull/34710#discussion_r2188451916",
            "id": 2188451916,
            "in_reply_to_id": 2188414598,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM6CcSBM",
            "original_commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/cfilter/plugin/cfilter.lua",
            "position": 77,
            "pull_request_review_id": 2991496067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34710",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188451916/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T16:22:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188451916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34710#discussion_r2188502716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34710"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188502716"
                }
            },
            "author_association": "MEMBER",
            "body": "`on_cmd` is fine",
            "commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "created_at": "2025-07-06T18:02:32Z",
            "diff_hunk": "@@ -0,0 +1,170 @@\n+---@param bufnr integer\n+---@param lnum integer\n+---@return string?\n+local function get_line(bufnr, lnum)\n+  local line = vim.api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, false)[1]\n+  if not line then\n+    return nil\n+  end\n+  return line\n+end\n+\n+---@param searchpat string\n+---@return string\n+local function get_search_pat(searchpat)\n+  local firstchar = searchpat:sub(1, 1)\n+  local lastchar = searchpat:sub(-1)\n+  local pat = searchpat\n+  if firstchar == lastchar and (firstchar == '/' or firstchar == '\"' or firstchar == \"'\") then\n+    pat = searchpat:sub(2, -2)\n+    if pat == '' then\n+      -- Use the last search pattern\n+      pat = vim.fn.getreg('/')\n+    end\n+  end\n+  return pat\n+end\n+\n+---@param items table[]\n+---@param regex vim.regex\n+---@param bang boolean\n+---@param opts? { max_matches: integer }\n+---@return table[]\n+local function get_matched_items(items, regex, bang, opts)\n+  if not opts then opts = {} end\n+  local bufname = vim.api.nvim_buf_get_name\n+  local cond ---@type fun(val: table): boolean\n+  local results = {}\n+  if bang then\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return not (text_match or bufname_match)\n+    end\n+  else\n+    ---@param val table\n+    ---@return boolean\n+    cond = function(val)\n+      local text_match = regex:match_str(val.text) ~= nil\n+      local bufname_match = regex:match_str(bufname(val.bufnr)) ~= nil\n+      return text_match or bufname_match\n+    end\n+  end\n+\n+  local results_num = 0\n+  for i, item in ipairs(items) do\n+    if cond(item) then\n+      item.nvim_cfilter = {\n+        lnum = i - 1,\n+      }\n+      table.insert(results, item)\n+      if opts.max_matches then\n+        results_num = results_num + 1\n+        if results_num > opts.max_matches then\n+          break\n+        end\n+      end\n+    end\n+  end\n+  return results\n+end\n+\n+---@param is_qf boolean\n+---@param pat string\n+---@param bang boolean\n+local function cmd_cb(is_qf, pat, bang)",
            "html_url": "https://github.com/neovim/neovim/pull/34710#discussion_r2188502716",
            "id": 2188502716,
            "in_reply_to_id": 2188414598,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM6Ccea8",
            "original_commit_id": "2423ab8d511b659ca3933edb566e709376babd84",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/cfilter/plugin/cfilter.lua",
            "position": 77,
            "pull_request_review_id": 2991551161,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34710",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188502716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T18:02:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188502716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would like some reviews before continuing ",
            "created_at": "2025-07-04T09:38:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/34710#issuecomment-3035216161",
            "id": 3035216161,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34710",
            "node_id": "IC_kwDOAPphoM606bkh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3035216161/reactions"
            },
            "updated_at": "2025-07-04T09:38:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3035216161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "looks like there is an existing test file in `test/functional/plugin/cfilter_spec.lua`",
            "created_at": "2025-07-06T15:46:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/34710#issuecomment-3042043989",
            "id": 3042043989,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34710",
            "node_id": "IC_kwDOAPphoM61UehV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042043989/reactions"
            },
            "updated_at": "2025-07-06T15:46:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3042043989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34710/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34710/commits",
    "created_at": "2025-06-29T18:45:42Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34710.diff",
    "draft": false,
    "head": {
        "label": "brianhuster:cfilter.lua",
        "ref": "cfilter.lua",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/brianhuster/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/brianhuster/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/brianhuster/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/brianhuster/neovim/branches{/branch}",
            "clone_url": "https://github.com/brianhuster/neovim.git",
            "collaborators_url": "https://api.github.com/repos/brianhuster/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/brianhuster/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/brianhuster/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/brianhuster/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/brianhuster/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/brianhuster/neovim/contributors",
            "created_at": "2025-02-01T09:06:09Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/brianhuster/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/brianhuster/neovim/downloads",
            "events_url": "https://api.github.com/repos/brianhuster/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/brianhuster/neovim/forks",
            "full_name": "brianhuster/neovim",
            "git_commits_url": "https://api.github.com/repos/brianhuster/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/brianhuster/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/brianhuster/neovim/git/tags{/sha}",
            "git_url": "git://github.com/brianhuster/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/brianhuster/neovim/hooks",
            "html_url": "https://github.com/brianhuster/neovim",
            "id": 925600113,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/brianhuster/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/brianhuster/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/brianhuster/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/brianhuster/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/brianhuster/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/brianhuster/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/brianhuster/neovim/merges",
            "milestones_url": "https://api.github.com/repos/brianhuster/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONyuJcQ",
            "notifications_url": "https://api.github.com/repos/brianhuster/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/brianhuster/neovim/pulls{/number}",
            "pushed_at": "2025-07-15T03:05:09Z",
            "releases_url": "https://api.github.com/repos/brianhuster/neovim/releases{/id}",
            "size": 323036,
            "ssh_url": "git@github.com:brianhuster/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/brianhuster/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/brianhuster/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/brianhuster/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/brianhuster/neovim/subscription",
            "svn_url": "https://github.com/brianhuster/neovim",
            "tags_url": "https://api.github.com/repos/brianhuster/neovim/tags",
            "teams_url": "https://api.github.com/repos/brianhuster/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/brianhuster/neovim/git/trees{/sha}",
            "updated_at": "2025-07-13T14:58:34Z",
            "url": "https://api.github.com/repos/brianhuster/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "2423ab8d511b659ca3933edb566e709376babd84",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
            "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
            "followers_url": "https://api.github.com/users/brianhuster/followers",
            "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
            "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/brianhuster",
            "id": 111893501,
            "login": "brianhuster",
            "node_id": "U_kgDOBqtb_Q",
            "organizations_url": "https://api.github.com/users/brianhuster/orgs",
            "received_events_url": "https://api.github.com/users/brianhuster/received_events",
            "repos_url": "https://api.github.com/users/brianhuster/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/brianhuster",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34710",
    "id": 2627172506,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34710",
    "labels": [],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6cl3ia",
    "number": 34710,
    "patch_url": "https://github.com/neovim/neovim/pull/34710.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34710/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/2423ab8d511b659ca3933edb566e709376babd84",
    "title": "feat(cfilter): rewrite in Lua and add command-preview",
    "updated_at": "2025-07-11T16:29:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34710",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
        "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
        "followers_url": "https://api.github.com/users/brianhuster/followers",
        "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
        "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/brianhuster",
        "id": 111893501,
        "login": "brianhuster",
        "node_id": "U_kgDOBqtb_Q",
        "organizations_url": "https://api.github.com/users/brianhuster/orgs",
        "received_events_url": "https://api.github.com/users/brianhuster/received_events",
        "repos_url": "https://api.github.com/users/brianhuster/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/brianhuster",
        "user_view_type": "public"
    }
}