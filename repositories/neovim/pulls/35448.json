{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35448/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35448/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35448"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35448"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35448/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/7fcea585e5ad5d0e97e5fea9f252ba5c6d3d2536"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6358,
            "forks_count": 6358,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 2001,
            "open_issues_count": 2001,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-10-14T02:23:27Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 347842,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 93440,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-10-14T02:23:32Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 93440,
            "watchers_count": 93440,
            "web_commit_signoff_required": false
        },
        "sha": "bc2fe135d11865b8ac33214e351312f5f454c4e8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Separate repo for testing this plugin is here: https://github.com/deathbeam/difftool.nvim without requiring nvim rebuild\r\n\r\nProblem:\r\nNeovim's built-in diff mode (nvim -d) does not support directory diffing\r\nas required by git difftool -d. This makes it difficult to compare\r\nentire directories, detect renames, and navigate changes efficiently\r\nwithin Neovim.\r\n\r\nSolution:\r\nAdd a DiffTool plugin and command that enables side-by-side diffing of\r\nfiles and directories in Neovim. The plugin supports rename detection,\r\nhighlights changes in the quickfix list, and provides a user command for\r\neasy invocation. This allows proper integration with git difftool -d for\r\ndirectory comparison.\r\n\r\nExample git config:\r\n\r\n```ini\r\n[diff]\r\n    tool = nvim_difftool\r\n\r\n[difftool \"nvim_difftool\"]\r\n    cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\r\n```\r\n\r\nExample `git difftool -d master` result on this PR:\r\n\r\n<img width=\"2544\" height=\"1431\" alt=\"image\" src=\"https://github.com/user-attachments/assets/599fea1f-bf18-4010-a9ac-f02e38aa5728\" />\r\n\r\nThe original implementation is mostly just grabbed from my code here: https://github.com/deathbeam/myplugins.nvim/blob/main/lua/myplugins/difftool.lua\r\n\r\nIm not sure if command plugin is best route to go for this or if there is even interest for something like this in core (imo it makes a lot of sense in core because git difftool -d is very useful and this removes the need for most external diff plugins with proper diffmode config and usage, at least for me).",
    "closed_at": "2025-10-12T02:24:39Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2296692340"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296692340"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\nend, { nargs = '*', complete = 'file' })\r\n```",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-24T14:53:12Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+if vim.g.loaded_difftool_plugin ~= nil then\n+  return\n+end\n+vim.g.loaded_difftool_plugin = true\n+\n+vim.api.nvim_create_user_command('DiffTool', function(opts)\n+  if #opts.fargs == 2 then\n+    require('difftool').diff(opts.fargs[1], opts.fargs[2])\n+  else\n+    vim.notify('Usage: DiffTool <left> <right>', vim.log.levels.ERROR)\n+  end\n+end, { nargs = '*' })",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2296692340",
            "id": 2296692340,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I5L50",
            "original_commit_id": "a4a9cfb152bdf15eb16033d5aa109cd898bf945a",
            "original_line": 12,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/plugin/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3149374318,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296692340/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T14:53:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296692340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2296707260"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296707260"
                }
            },
            "author_association": "MEMBER",
            "body": "Move `runtime/lua/difftool.lua` to `runtime/lua/nvim/difftool.lua` , that's where plugins live. This is not part of the stdlib.\r\n\r\n```suggestion\r\n    require('nvim.difftool').diff(opts.fargs[1], opts.fargs[2])\r\n```",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-24T15:25:44Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+if vim.g.loaded_difftool_plugin ~= nil then\n+  return\n+end\n+vim.g.loaded_difftool_plugin = true\n+\n+vim.api.nvim_create_user_command('DiffTool', function(opts)\n+  if #opts.fargs == 2 then\n+    require('difftool').diff(opts.fargs[1], opts.fargs[2])",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2296707260",
            "id": 2296707260,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I5Pi8",
            "original_commit_id": "e26ca74a9ad2b04d30fb83fd015ac114d5fe231d",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/plugin/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3149411686,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296707260/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T15:25:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296707260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2296708010"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296708010"
                }
            },
            "author_association": "MEMBER",
            "body": "`_plugin` is not normally suffixed on this convention\r\n```suggestion\r\nvim.g.loaded_difftool = true\r\n```",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-24T15:27:09Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+if vim.g.loaded_difftool_plugin ~= nil then\n+  return\n+end\n+vim.g.loaded_difftool_plugin = true",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2296708010",
            "id": 2296708010,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I5Puq",
            "original_commit_id": "e26ca74a9ad2b04d30fb83fd015ac114d5fe231d",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/plugin/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3149415057,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296708010/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T15:27:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296708010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2296711284"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296711284"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah I mostly copied how TOHtml is structured as it seemed like plugin to me as well, I will move it",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-24T15:37:15Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+if vim.g.loaded_difftool_plugin ~= nil then\n+  return\n+end\n+vim.g.loaded_difftool_plugin = true\n+\n+vim.api.nvim_create_user_command('DiffTool', function(opts)\n+  if #opts.fargs == 2 then\n+    require('difftool').diff(opts.fargs[1], opts.fargs[2])",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2296711284",
            "id": 2296711284,
            "in_reply_to_id": 2296707260,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I5Qh0",
            "original_commit_id": "e26ca74a9ad2b04d30fb83fd015ac114d5fe231d",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/plugin/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3149419679,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296711284/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T15:37:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296711284",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2296717966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296717966"
                }
            },
            "author_association": "MEMBER",
            "body": "TOHtml will be moved",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-24T15:56:03Z",
            "diff_hunk": "@@ -0,0 +1,12 @@\n+if vim.g.loaded_difftool_plugin ~= nil then\n+  return\n+end\n+vim.g.loaded_difftool_plugin = true\n+\n+vim.api.nvim_create_user_command('DiffTool', function(opts)\n+  if #opts.fargs == 2 then\n+    require('difftool').diff(opts.fargs[1], opts.fargs[2])",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2296717966",
            "id": 2296717966,
            "in_reply_to_id": 2296707260,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I5SKO",
            "original_commit_id": "e26ca74a9ad2b04d30fb83fd015ac114d5fe231d",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/plugin/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3149424929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296717966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-24T15:56:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296717966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2296897031"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296897031"
                }
            },
            "author_association": "MEMBER",
            "body": "this is definitely not how we would expose highlight configurability in core. probably can drop this for now.",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-25T01:12:12Z",
            "diff_hunk": "@@ -0,0 +1,506 @@\n+local default_config = {\n+  method = 'auto',\n+  ignore = {},\n+  rename = {\n+    detect = false,\n+    similarity = 0.5,\n+    chunk_size = 4096,\n+  },\n+  highlight = {\n+    A = 'DiffAdd',\n+    D = 'DiffDelete',",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2296897031",
            "id": 2296897031,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I594H",
            "original_commit_id": "0192215f4172e2c7131af95d6a4cb8e46486fac4",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": 9,
            "path": "runtime/lua/nvim/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3149605370,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296897031/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-25T01:12:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2296897031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2297573612"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297573612"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "yea i wasnt sure about this one either, alright removed (and just left it always at the diff group highlights)",
            "commit_id": "6d50d17e7705c8e81438ad897cbf7aa2abcab278",
            "created_at": "2025-08-25T09:21:10Z",
            "diff_hunk": "@@ -0,0 +1,506 @@\n+local default_config = {\n+  method = 'auto',\n+  ignore = {},\n+  rename = {\n+    detect = false,\n+    similarity = 0.5,\n+    chunk_size = 4096,\n+  },\n+  highlight = {\n+    A = 'DiffAdd',\n+    D = 'DiffDelete',",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2297573612",
            "id": 2297573612,
            "in_reply_to_id": 2296897031,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6I8jDs",
            "original_commit_id": "0192215f4172e2c7131af95d6a4cb8e46486fac4",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": 9,
            "path": "runtime/lua/nvim/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3150593671,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297573612/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-25T09:21:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2297573612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366401678"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366401678"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n• The |:DiffTool| command compares directories (and files).\n```",
            "commit_id": "4dd6ca641335bb4bc9a73df3f951a91375fa9109",
            "created_at": "2025-09-21T21:29:27Z",
            "diff_hunk": "@@ -196,6 +196,7 @@ EDITOR\n   \"(v)iew\" then run `:trust`.\n • |gx| in help buffers opens the online documentation for the tag under the\n   cursor.\n+• New |:DiffTool| command for comparing two files or directories side-by-side",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366401678",
            "id": 2366401678,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6NDGyO",
            "original_commit_id": "4dd6ca641335bb4bc9a73df3f951a91375fa9109",
            "original_line": 199,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 1,
            "pull_request_review_id": 3250167936,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366401678/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T21:29:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366401678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366408462"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366408462"
                }
            },
            "author_association": "MEMBER",
            "body": "alphanum order",
            "commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "created_at": "2025-09-21T21:51:25Z",
            "diff_hunk": "@@ -38,6 +38,7 @@ Help-link\t\tLoaded\tShort description ~\n |pi_zip.txt|\t\tYes\tZip archive explorer\n |spellfile.vim|\t\tYes\tInstall spellfile if missing\n |tohtml|\t\tYes\tConvert buffer to html, syntax included\n+|difftool|\t\tNo\tCompares two files or directories side-by-side",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366408462",
            "id": 2366408462,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6NDIcO",
            "original_commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "original_line": 41,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/plugins.txt",
            "position": 1,
            "pull_request_review_id": 3250174304,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366408462/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T21:51:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366408462",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366409324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366409324"
                }
            },
            "author_association": "MEMBER",
            "body": "\"in Neovim\" is redundant. it's assumed.",
            "commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "created_at": "2025-09-21T21:54:09Z",
            "diff_hunk": "@@ -157,4 +158,42 @@ tohtml({winid}, {opt})                                       *tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Builtin plugin: difftool                                            *difftool*\n+\n+\n+:DiffTool {left} {right}                                           *:DiffTool*\n+Compares two files or directories side-by-side in Neovim.",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366409324",
            "id": 2366409324,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6NDIps",
            "original_commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "original_line": 166,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/doc/plugins.txt",
            "position": 1,
            "pull_request_review_id": 3250175018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366409324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T21:54:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366409324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366410137"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366410137"
                }
            },
            "author_association": "MEMBER",
            "body": "why is this needed? why can't it handle BufDelete and/or other events? this `close()` function is already implicitly assuming \"the current buffer\" so it's not even that useful anyway.",
            "commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "created_at": "2025-09-21T21:56:35Z",
            "diff_hunk": "@@ -157,4 +158,42 @@ tohtml({winid}, {opt})                                       *tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Builtin plugin: difftool                                            *difftool*\n+\n+\n+:DiffTool {left} {right}                                           *:DiffTool*\n+Compares two files or directories side-by-side in Neovim.\n+Supports directory diffing, rename detection, and highlights changes\n+in quickfix list.\n+\n+The plugin is not loaded by default; use `:packadd nvim.difftool` before\n+invoking `:DiffTool`.\n+\n+Example `git difftool -d` integration using `DiffTool` command: >ini\n+    [difftool \"nvim_difftool\"]\n+      cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+    [diff]\n+      tool = nvim_difftool\n+<\n+\n+\n+close()                                                     *difftool.close()*\n+    Close the diff layout and clean up",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366410137",
            "id": 2366410137,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6NDI2Z",
            "original_commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "original_line": 182,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/doc/plugins.txt",
            "position": 1,
            "pull_request_review_id": 3250175538,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366410137/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T21:56:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366410137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366415128"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366415128"
                }
            },
            "author_association": "MEMBER",
            "body": "one benefit of putting the plugin in `pack/dist/opt/` is that it avoids this cargo-cult.\n\nthough when it graduates to core, i guess it's needed. or we need better guidance for users to disable plugins, such as \"do [something] to 'runtimepath'\".\n\nnothing actionable for now, can leave this as-is.",
            "commit_id": "7fcea585e5ad5d0e97e5fea9f252ba5c6d3d2536",
            "created_at": "2025-09-21T22:12:25Z",
            "diff_hunk": "@@ -0,0 +1,14 @@\n+if vim.g.loaded_difftool ~= nil then\n+  return\n+end\n+vim.g.loaded_difftool = true",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366415128",
            "id": 2366415128,
            "line": 4,
            "node_id": "PRRC_kwDOAPphoM6NDKEY",
            "original_commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/plugin/difftool.lua",
            "position": 4,
            "pull_request_review_id": 3250180350,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366415128/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T22:12:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366415128",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366415425"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366415425"
                }
            },
            "author_association": "MEMBER",
            "body": "alphanum order",
            "commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "created_at": "2025-09-21T22:13:29Z",
            "diff_hunk": "@@ -415,10 +415,12 @@ local config = {\n     section_order = {\n       'editorconfig.lua',\n       'tohtml.lua',\n+      'difftool.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366415425",
            "id": 2366415425,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6NDKJB",
            "original_commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "original_line": 418,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/gen/gen_vimdoc.lua",
            "position": 1,
            "pull_request_review_id": 3250180617,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366415425/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T22:13:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366415425",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2366416599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366416599"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "hmm, i just had it there because i kinda liked just doing :DiffTool to also close but yea its not super useful and its better if it cleans up when one of the wins is closed",
            "commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "created_at": "2025-09-21T22:17:20Z",
            "diff_hunk": "@@ -157,4 +158,42 @@ tohtml({winid}, {opt})                                       *tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Builtin plugin: difftool                                            *difftool*\n+\n+\n+:DiffTool {left} {right}                                           *:DiffTool*\n+Compares two files or directories side-by-side in Neovim.\n+Supports directory diffing, rename detection, and highlights changes\n+in quickfix list.\n+\n+The plugin is not loaded by default; use `:packadd nvim.difftool` before\n+invoking `:DiffTool`.\n+\n+Example `git difftool -d` integration using `DiffTool` command: >ini\n+    [difftool \"nvim_difftool\"]\n+      cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+    [diff]\n+      tool = nvim_difftool\n+<\n+\n+\n+close()                                                     *difftool.close()*\n+    Close the diff layout and clean up",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2366416599",
            "id": 2366416599,
            "in_reply_to_id": 2366410137,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6NDKbX",
            "original_commit_id": "68014cf70be7074732a97ba7b2b04783a40b2412",
            "original_line": 182,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/doc/plugins.txt",
            "position": 1,
            "pull_request_review_id": 3250181700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366416599/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-21T22:17:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2366416599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423101575"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423101575"
                }
            },
            "author_association": "MEMBER",
            "body": "should these WinClosed handlers be buffer-local? that avoids needing to clean them up later. it also might remove the need for the `pattern`.\n\n    buffer = ...",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:27:35Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423101575",
            "id": 2423101575,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QbZiH",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 65,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327549186,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423101575/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:27:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423101575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423103953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423103953"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks useful and may be something we want to expose publicly later. Or at least will find use for it in other parts of core. Can you create a new `runtime/lua/vim/_core/util.lua` module, that is where we can \"incubate\" internal-only things like this.",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:30:12Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423103953",
            "id": 2423103953,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QbaHR",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 99,
            "original_position": 99,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327552772,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423103953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:30:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423103953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105025"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105025"
                }
            },
            "author_association": "MEMBER",
            "body": "same for other cases\n```suggestion\nlocal function diff_dirs_builtin(left_dir, right_dir, opt)\n```",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:31:57Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105025",
            "id": 2423105025,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QbaYB",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 180,
            "original_position": 180,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327554381,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105025/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:31:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105176"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105176"
                }
            },
            "author_association": "MEMBER",
            "body": "another thing for `_core/util.lua`",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:32:22Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)\n+  --- Helper to check if a path matches ignore patterns\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- Helper to read a chunk of a file\n+  --- @param file string\n+  --- @param size number\n+  --- @return string? chunk or nil on error\n+  local function read_chunk(file, size)",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105176",
            "id": 2423105176,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QbaaY",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 201,
            "original_position": 201,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327554482,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105176/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:32:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105397"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105397"
                }
            },
            "author_association": "MEMBER",
            "body": "either don't leave a comment or make the comment useful. \"Helper\" is always useless. All functions help.",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:33:05Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)\n+  --- Helper to check if a path matches ignore patterns\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- Helper to read a chunk of a file\n+  --- @param file string\n+  --- @param size number\n+  --- @return string? chunk or nil on error\n+  local function read_chunk(file, size)\n+    local fd = io.open(file, 'rb')\n+    if not fd then\n+      return nil\n+    end\n+    local chunk = fd:read(size)\n+    fd:close()\n+    return tostring(chunk)\n+  end\n+\n+  --- Helper to calculate file similarity",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105397",
            "id": 2423105397,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qbad1",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 211,
            "original_position": 211,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327554655,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105397/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:33:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105563"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105563"
                }
            },
            "author_association": "MEMBER",
            "body": "useless comment",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:33:37Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)\n+  --- Helper to check if a path matches ignore patterns\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- Helper to read a chunk of a file\n+  --- @param file string\n+  --- @param size number\n+  --- @return string? chunk or nil on error\n+  local function read_chunk(file, size)\n+    local fd = io.open(file, 'rb')\n+    if not fd then\n+      return nil\n+    end\n+    local chunk = fd:read(size)\n+    fd:close()\n+    return tostring(chunk)\n+  end\n+\n+  --- Helper to calculate file similarity\n+  --- @param file1 string\n+  --- @param file2 string\n+  --- @param chunk_size number\n+  --- @param chunk_cache table<string, any>\n+  --- @return number similarity ratio (0 to 1)\n+  local function calculate_similarity(file1, file2, chunk_size, chunk_cache)\n+    -- Get or read chunk for file1\n+    local chunk1 = chunk_cache[file1]\n+    if not chunk1 then\n+      chunk1 = read_chunk(file1, chunk_size)\n+      chunk_cache[file1] = chunk1\n+    end\n+\n+    -- Get or read chunk for file2\n+    local chunk2 = chunk_cache[file2]\n+    if not chunk2 then\n+      chunk2 = read_chunk(file2, chunk_size)\n+      chunk_cache[file2] = chunk2\n+    end\n+\n+    if not chunk1 or not chunk2 then\n+      return 0\n+    end\n+    if chunk1 == chunk2 then\n+      return 1\n+    end\n+    local matches = 0\n+    local len = math.min(#chunk1, #chunk2)\n+    for i = 1, len do\n+      if chunk1:sub(i, i) == chunk2:sub(i, i) then\n+        matches = matches + 1\n+      end\n+    end\n+    return matches / len\n+  end\n+\n+  -- Create a map of all relative paths\n+\n+  --- @type table<string, {left: string?, right: string?}>\n+  local all_paths = {}\n+  --- @type table<string, string>\n+  local left_only = {}\n+  --- @type table<string, string>\n+  local right_only = {}\n+\n+  -- Helper to process files from a directory",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423105563",
            "id": 2423105563,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qbagb",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 257,
            "original_position": 257,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327554787,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105563/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:33:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423105563",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423106082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423106082"
                }
            },
            "author_association": "MEMBER",
            "body": "sadly `@inlinedoc` doesnt work for \"nested\" types. for now i suggest manually inlining this in the `rename` field below.",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:35:36Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)\n+  --- Helper to check if a path matches ignore patterns\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- Helper to read a chunk of a file\n+  --- @param file string\n+  --- @param size number\n+  --- @return string? chunk or nil on error\n+  local function read_chunk(file, size)\n+    local fd = io.open(file, 'rb')\n+    if not fd then\n+      return nil\n+    end\n+    local chunk = fd:read(size)\n+    fd:close()\n+    return tostring(chunk)\n+  end\n+\n+  --- Helper to calculate file similarity\n+  --- @param file1 string\n+  --- @param file2 string\n+  --- @param chunk_size number\n+  --- @param chunk_cache table<string, any>\n+  --- @return number similarity ratio (0 to 1)\n+  local function calculate_similarity(file1, file2, chunk_size, chunk_cache)\n+    -- Get or read chunk for file1\n+    local chunk1 = chunk_cache[file1]\n+    if not chunk1 then\n+      chunk1 = read_chunk(file1, chunk_size)\n+      chunk_cache[file1] = chunk1\n+    end\n+\n+    -- Get or read chunk for file2\n+    local chunk2 = chunk_cache[file2]\n+    if not chunk2 then\n+      chunk2 = read_chunk(file2, chunk_size)\n+      chunk_cache[file2] = chunk2\n+    end\n+\n+    if not chunk1 or not chunk2 then\n+      return 0\n+    end\n+    if chunk1 == chunk2 then\n+      return 1\n+    end\n+    local matches = 0\n+    local len = math.min(#chunk1, #chunk2)\n+    for i = 1, len do\n+      if chunk1:sub(i, i) == chunk2:sub(i, i) then\n+        matches = matches + 1\n+      end\n+    end\n+    return matches / len\n+  end\n+\n+  -- Create a map of all relative paths\n+\n+  --- @type table<string, {left: string?, right: string?}>\n+  local all_paths = {}\n+  --- @type table<string, string>\n+  local left_only = {}\n+  --- @type table<string, string>\n+  local right_only = {}\n+\n+  -- Helper to process files from a directory\n+  local function process_files(dir_path, is_left)\n+    local files = vim.fs.find(function(name, path)\n+      local rel_path = vim.fs.relpath(dir_path, vim.fs.joinpath(path, name))\n+      return not is_ignored(rel_path, opt.ignore)\n+    end, { limit = math.huge, path = dir_path, follow = false })\n+\n+    for _, full_path in ipairs(files) do\n+      local rel_path = vim.fs.relpath(dir_path, full_path)\n+      if rel_path then\n+        full_path = vim.fn.resolve(full_path)\n+\n+        if vim.fn.isdirectory(full_path) == 0 then\n+          all_paths[rel_path] = all_paths[rel_path] or { left = nil, right = nil }\n+\n+          if is_left then\n+            all_paths[rel_path].left = full_path\n+            if not all_paths[rel_path].right then\n+              left_only[rel_path] = full_path\n+            end\n+          else\n+            all_paths[rel_path].right = full_path\n+            if not all_paths[rel_path].left then\n+              right_only[rel_path] = full_path\n+            end\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  -- Process both directories\n+  process_files(left_dir, true)\n+  process_files(right_dir, false)\n+\n+  --- @type table<string, string>\n+  local renamed = {}\n+  --- @type table<string, string>\n+  local chunk_cache = {}\n+\n+  -- Detect possible renames\n+  if opt.rename.detect then\n+    for left_rel, left_path in pairs(left_only) do\n+      ---@type {similarity: number, path: string?, rel: string}\n+      local best_match = { similarity = opt.rename.similarity, path = nil }\n+\n+      for right_rel, right_path in pairs(right_only) do\n+        local similarity =\n+          calculate_similarity(left_path, right_path, opt.rename.chunk_size, chunk_cache)\n+\n+        if similarity > best_match.similarity then\n+          best_match = {\n+            similarity = similarity,\n+            path = right_path,\n+            rel = right_rel,\n+          }\n+        end\n+      end\n+\n+      if best_match.path and best_match.rel then\n+        renamed[left_rel] = best_match.rel\n+        all_paths[left_rel].right = best_match.path\n+        all_paths[best_match.rel] = nil\n+        left_only[left_rel] = nil\n+        right_only[best_match.rel] = nil\n+      end\n+    end\n+  end\n+\n+  local qf_entries = {}\n+\n+  -- Convert to quickfix entries\n+  for rel_path, files in pairs(all_paths) do\n+    local status = nil\n+    if files.left and files.right then\n+      --- @type number\n+      local similarity\n+      if opt.rename.detect then\n+        similarity =\n+          calculate_similarity(files.left, files.right, opt.rename.chunk_size, chunk_cache)\n+      else\n+        similarity = vim.fn.getfsize(files.left) == vim.fn.getfsize(files.right) and 1 or 0\n+      end\n+      if similarity < 1 then\n+        status = renamed[rel_path] and 'R' or 'M'\n+      end\n+    elseif files.left then\n+      status = 'D'\n+      files.right = right_dir .. rel_path\n+    elseif files.right then\n+      status = 'A'\n+      files.left = left_dir .. rel_path\n+    end\n+\n+    if status then\n+      table.insert(qf_entries, {\n+        filename = files.right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = rel_path,\n+          left = files.left,\n+          right = files.right,\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+local function diff_directories(left_dir, right_dir, opt)\n+  local method = opt.method\n+  if method == 'auto' then\n+    if not opt.rename.detect and vim.fn.executable('diff') == 1 then\n+      method = 'diffr'\n+    else\n+      method = 'builtin'\n+    end\n+  end\n+\n+  --- @type table[]\n+  local qf_entries\n+  if method == 'diffr' then\n+    qf_entries = diff_directories_diffr(left_dir, right_dir, opt)\n+  elseif method == 'builtin' then\n+    qf_entries = diff_directories_builtin(left_dir, right_dir, opt)\n+  else\n+    vim.notify('Unknown diff method: ' .. method, vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  -- Sort entries by filename for consistency\n+  table.sort(qf_entries, function(a, b)\n+    return a.user_data.rel < b.user_data.rel\n+  end)\n+\n+  vim.fn.setqflist({}, 'r', {\n+    nr = '$',\n+    title = 'DiffTool',\n+    items = qf_entries,\n+    ---@param info {id: number, start_idx: number, end_idx: number}\n+    quickfixtextfunc = function(info)\n+      --- @type table[]\n+      local items = vim.fn.getqflist({ id = info.id, items = 1 }).items\n+      local out = {}\n+      for item = info.start_idx, info.end_idx do\n+        local entry = items[item]\n+        table.insert(out, entry.text .. ' ' .. entry.user_data.rel)\n+      end\n+      return out\n+    end,\n+  })\n+\n+  setup_layout(true)\n+  vim.cmd.cfirst()\n+end\n+\n+local M = {}\n+\n+--- @class difftool.opt.rename\n+--- @inlinedoc",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423106082",
            "id": 2423106082,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qbaoi",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 422,
            "original_position": 422,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327556130,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423106082/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:35:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423106082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423107099"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423107099"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\ndescribe('nvim.difftool', function()\n```",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:39:21Z",
            "diff_hunk": "@@ -0,0 +1,64 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local clear = n.clear\n+local command = n.command\n+local eq = t.eq\n+local fn = n.fn\n+\n+local pathsep = n.get_pathsep()\n+local testdir_left = 'Xtest-difftool-left'\n+local testdir_right = 'Xtest-difftool-right'\n+\n+setup(function()\n+  n.mkdir_p(testdir_left)\n+  n.mkdir_p(testdir_right)\n+  t.write_file(testdir_left .. pathsep .. 'file1.txt', 'hello')\n+  t.write_file(testdir_left .. pathsep .. 'file2.txt', 'foo')\n+  t.write_file(testdir_right .. pathsep .. 'file1.txt', 'hello world') -- modified\n+  t.write_file(testdir_right .. pathsep .. 'file3.txt', 'bar') -- added\n+end)\n+\n+teardown(function()\n+  n.rmdir(testdir_left)\n+  n.rmdir(testdir_right)\n+end)\n+\n+describe('difftool directory diff', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423107099",
            "id": 2423107099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qba4b",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 27,
            "original_position": 27,
            "original_start_line": null,
            "path": "test/functional/plugin/difftool_spec.lua",
            "position": 1,
            "pull_request_review_id": 3327557246,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423107099/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:39:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423107099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423107374"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423107374"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n  layout.group = vim.api.nvim_create_augroup('nvim.difftool.events', { clear = true })\n```",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T19:40:13Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)\n+  --- Helper to check if a path matches ignore patterns\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- Helper to read a chunk of a file\n+  --- @param file string\n+  --- @param size number\n+  --- @return string? chunk or nil on error\n+  local function read_chunk(file, size)\n+    local fd = io.open(file, 'rb')\n+    if not fd then\n+      return nil\n+    end\n+    local chunk = fd:read(size)\n+    fd:close()\n+    return tostring(chunk)\n+  end\n+\n+  --- Helper to calculate file similarity\n+  --- @param file1 string\n+  --- @param file2 string\n+  --- @param chunk_size number\n+  --- @param chunk_cache table<string, any>\n+  --- @return number similarity ratio (0 to 1)\n+  local function calculate_similarity(file1, file2, chunk_size, chunk_cache)\n+    -- Get or read chunk for file1\n+    local chunk1 = chunk_cache[file1]\n+    if not chunk1 then\n+      chunk1 = read_chunk(file1, chunk_size)\n+      chunk_cache[file1] = chunk1\n+    end\n+\n+    -- Get or read chunk for file2\n+    local chunk2 = chunk_cache[file2]\n+    if not chunk2 then\n+      chunk2 = read_chunk(file2, chunk_size)\n+      chunk_cache[file2] = chunk2\n+    end\n+\n+    if not chunk1 or not chunk2 then\n+      return 0\n+    end\n+    if chunk1 == chunk2 then\n+      return 1\n+    end\n+    local matches = 0\n+    local len = math.min(#chunk1, #chunk2)\n+    for i = 1, len do\n+      if chunk1:sub(i, i) == chunk2:sub(i, i) then\n+        matches = matches + 1\n+      end\n+    end\n+    return matches / len\n+  end\n+\n+  -- Create a map of all relative paths\n+\n+  --- @type table<string, {left: string?, right: string?}>\n+  local all_paths = {}\n+  --- @type table<string, string>\n+  local left_only = {}\n+  --- @type table<string, string>\n+  local right_only = {}\n+\n+  -- Helper to process files from a directory\n+  local function process_files(dir_path, is_left)\n+    local files = vim.fs.find(function(name, path)\n+      local rel_path = vim.fs.relpath(dir_path, vim.fs.joinpath(path, name))\n+      return not is_ignored(rel_path, opt.ignore)\n+    end, { limit = math.huge, path = dir_path, follow = false })\n+\n+    for _, full_path in ipairs(files) do\n+      local rel_path = vim.fs.relpath(dir_path, full_path)\n+      if rel_path then\n+        full_path = vim.fn.resolve(full_path)\n+\n+        if vim.fn.isdirectory(full_path) == 0 then\n+          all_paths[rel_path] = all_paths[rel_path] or { left = nil, right = nil }\n+\n+          if is_left then\n+            all_paths[rel_path].left = full_path\n+            if not all_paths[rel_path].right then\n+              left_only[rel_path] = full_path\n+            end\n+          else\n+            all_paths[rel_path].right = full_path\n+            if not all_paths[rel_path].left then\n+              right_only[rel_path] = full_path\n+            end\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  -- Process both directories\n+  process_files(left_dir, true)\n+  process_files(right_dir, false)\n+\n+  --- @type table<string, string>\n+  local renamed = {}\n+  --- @type table<string, string>\n+  local chunk_cache = {}\n+\n+  -- Detect possible renames\n+  if opt.rename.detect then\n+    for left_rel, left_path in pairs(left_only) do\n+      ---@type {similarity: number, path: string?, rel: string}\n+      local best_match = { similarity = opt.rename.similarity, path = nil }\n+\n+      for right_rel, right_path in pairs(right_only) do\n+        local similarity =\n+          calculate_similarity(left_path, right_path, opt.rename.chunk_size, chunk_cache)\n+\n+        if similarity > best_match.similarity then\n+          best_match = {\n+            similarity = similarity,\n+            path = right_path,\n+            rel = right_rel,\n+          }\n+        end\n+      end\n+\n+      if best_match.path and best_match.rel then\n+        renamed[left_rel] = best_match.rel\n+        all_paths[left_rel].right = best_match.path\n+        all_paths[best_match.rel] = nil\n+        left_only[left_rel] = nil\n+        right_only[best_match.rel] = nil\n+      end\n+    end\n+  end\n+\n+  local qf_entries = {}\n+\n+  -- Convert to quickfix entries\n+  for rel_path, files in pairs(all_paths) do\n+    local status = nil\n+    if files.left and files.right then\n+      --- @type number\n+      local similarity\n+      if opt.rename.detect then\n+        similarity =\n+          calculate_similarity(files.left, files.right, opt.rename.chunk_size, chunk_cache)\n+      else\n+        similarity = vim.fn.getfsize(files.left) == vim.fn.getfsize(files.right) and 1 or 0\n+      end\n+      if similarity < 1 then\n+        status = renamed[rel_path] and 'R' or 'M'\n+      end\n+    elseif files.left then\n+      status = 'D'\n+      files.right = right_dir .. rel_path\n+    elseif files.right then\n+      status = 'A'\n+      files.left = left_dir .. rel_path\n+    end\n+\n+    if status then\n+      table.insert(qf_entries, {\n+        filename = files.right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = rel_path,\n+          left = files.left,\n+          right = files.right,\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+local function diff_directories(left_dir, right_dir, opt)\n+  local method = opt.method\n+  if method == 'auto' then\n+    if not opt.rename.detect and vim.fn.executable('diff') == 1 then\n+      method = 'diffr'\n+    else\n+      method = 'builtin'\n+    end\n+  end\n+\n+  --- @type table[]\n+  local qf_entries\n+  if method == 'diffr' then\n+    qf_entries = diff_directories_diffr(left_dir, right_dir, opt)\n+  elseif method == 'builtin' then\n+    qf_entries = diff_directories_builtin(left_dir, right_dir, opt)\n+  else\n+    vim.notify('Unknown diff method: ' .. method, vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  -- Sort entries by filename for consistency\n+  table.sort(qf_entries, function(a, b)\n+    return a.user_data.rel < b.user_data.rel\n+  end)\n+\n+  vim.fn.setqflist({}, 'r', {\n+    nr = '$',\n+    title = 'DiffTool',\n+    items = qf_entries,\n+    ---@param info {id: number, start_idx: number, end_idx: number}\n+    quickfixtextfunc = function(info)\n+      --- @type table[]\n+      local items = vim.fn.getqflist({ id = info.id, items = 1 }).items\n+      local out = {}\n+      for item = info.start_idx, info.end_idx do\n+        local entry = items[item]\n+        table.insert(out, entry.text .. ' ' .. entry.user_data.rel)\n+      end\n+      return out\n+    end,\n+  })\n+\n+  setup_layout(true)\n+  vim.cmd.cfirst()\n+end\n+\n+local M = {}\n+\n+--- @class difftool.opt.rename\n+--- @inlinedoc\n+---\n+--- Whether to detect renames, can be slow on very large directories\n+--- (default: `false`)\n+--- @field detect boolean\n+---\n+--- Minimum similarity for rename detection (0 to 1)\n+--- (default: `0.5`)\n+--- @field similarity number\n+---\n+--- Maximum chunk size to read from files for similarity calculation\n+--- (default: `4096`)\n+--- @field chunk_size number\n+\n+--- @class difftool.opt\n+--- @inlinedoc\n+---\n+--- Diff method to use\n+--- (default: `auto`)\n+--- @field method 'auto'|'builtin'|'diffr'\n+---\n+--- List of file patterns to ignore (for example: `'.git', '*.log'`)\n+--- (default: `{}`)\n+--- @field ignore string[]\n+---\n+--- Rename detection options (supported only by `builtin` method)\n+--- @field rename difftool.opt.rename\n+\n+--- Diff two files or directories\n+--- @param left string\n+--- @param right string\n+--- @param opt? difftool.opt\n+function M.open(left, right, opt)\n+  if not left or not right then\n+    vim.notify('Both arguments are required', vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  local config = vim.tbl_deep_extend('force', {\n+    method = 'auto',\n+    ignore = {},\n+    rename = {\n+      detect = false,\n+      similarity = 0.5,\n+      chunk_size = 4096,\n+    },\n+  }, opt or {})\n+\n+  layout.group = vim.api.nvim_create_augroup('difftool_au', { clear = true })",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423107374",
            "id": 2423107374,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qba8u",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 470,
            "original_position": 470,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327557466,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423107374/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T19:40:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423107374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423195201"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423195201"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "inlined it but not sure if the format is correct, its not in plugins.txt so i guess not, but had hard time finding example of correct format",
            "commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "created_at": "2025-10-11T22:44:19Z",
            "diff_hunk": "@@ -0,0 +1,534 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.left_win),\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    pattern = tostring(layout.right_win),\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Edit a file in a specific window\n+--- @param winnr number\n+--- @param file string\n+local function edit_in(winnr, file)\n+  vim.api.nvim_win_call(winnr, function()\n+    local current = vim.fs.abspath(vim.api.nvim_buf_get_name(vim.api.nvim_win_get_buf(winnr)))\n+\n+    -- Check if the current buffer is already the target file\n+    if current == (file and vim.fs.abspath(file) or '') then\n+      return\n+    end\n+\n+    -- Read the file into the buffer\n+    vim.cmd.edit(vim.fn.fnameescape(file))\n+  end)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  edit_in(layout.left_win, left_file)\n+  edit_in(layout.right_win, right_file)\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_directories_builtin(left_dir, right_dir, opt)\n+  --- Helper to check if a path matches ignore patterns\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- Helper to read a chunk of a file\n+  --- @param file string\n+  --- @param size number\n+  --- @return string? chunk or nil on error\n+  local function read_chunk(file, size)\n+    local fd = io.open(file, 'rb')\n+    if not fd then\n+      return nil\n+    end\n+    local chunk = fd:read(size)\n+    fd:close()\n+    return tostring(chunk)\n+  end\n+\n+  --- Helper to calculate file similarity\n+  --- @param file1 string\n+  --- @param file2 string\n+  --- @param chunk_size number\n+  --- @param chunk_cache table<string, any>\n+  --- @return number similarity ratio (0 to 1)\n+  local function calculate_similarity(file1, file2, chunk_size, chunk_cache)\n+    -- Get or read chunk for file1\n+    local chunk1 = chunk_cache[file1]\n+    if not chunk1 then\n+      chunk1 = read_chunk(file1, chunk_size)\n+      chunk_cache[file1] = chunk1\n+    end\n+\n+    -- Get or read chunk for file2\n+    local chunk2 = chunk_cache[file2]\n+    if not chunk2 then\n+      chunk2 = read_chunk(file2, chunk_size)\n+      chunk_cache[file2] = chunk2\n+    end\n+\n+    if not chunk1 or not chunk2 then\n+      return 0\n+    end\n+    if chunk1 == chunk2 then\n+      return 1\n+    end\n+    local matches = 0\n+    local len = math.min(#chunk1, #chunk2)\n+    for i = 1, len do\n+      if chunk1:sub(i, i) == chunk2:sub(i, i) then\n+        matches = matches + 1\n+      end\n+    end\n+    return matches / len\n+  end\n+\n+  -- Create a map of all relative paths\n+\n+  --- @type table<string, {left: string?, right: string?}>\n+  local all_paths = {}\n+  --- @type table<string, string>\n+  local left_only = {}\n+  --- @type table<string, string>\n+  local right_only = {}\n+\n+  -- Helper to process files from a directory\n+  local function process_files(dir_path, is_left)\n+    local files = vim.fs.find(function(name, path)\n+      local rel_path = vim.fs.relpath(dir_path, vim.fs.joinpath(path, name))\n+      return not is_ignored(rel_path, opt.ignore)\n+    end, { limit = math.huge, path = dir_path, follow = false })\n+\n+    for _, full_path in ipairs(files) do\n+      local rel_path = vim.fs.relpath(dir_path, full_path)\n+      if rel_path then\n+        full_path = vim.fn.resolve(full_path)\n+\n+        if vim.fn.isdirectory(full_path) == 0 then\n+          all_paths[rel_path] = all_paths[rel_path] or { left = nil, right = nil }\n+\n+          if is_left then\n+            all_paths[rel_path].left = full_path\n+            if not all_paths[rel_path].right then\n+              left_only[rel_path] = full_path\n+            end\n+          else\n+            all_paths[rel_path].right = full_path\n+            if not all_paths[rel_path].left then\n+              right_only[rel_path] = full_path\n+            end\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  -- Process both directories\n+  process_files(left_dir, true)\n+  process_files(right_dir, false)\n+\n+  --- @type table<string, string>\n+  local renamed = {}\n+  --- @type table<string, string>\n+  local chunk_cache = {}\n+\n+  -- Detect possible renames\n+  if opt.rename.detect then\n+    for left_rel, left_path in pairs(left_only) do\n+      ---@type {similarity: number, path: string?, rel: string}\n+      local best_match = { similarity = opt.rename.similarity, path = nil }\n+\n+      for right_rel, right_path in pairs(right_only) do\n+        local similarity =\n+          calculate_similarity(left_path, right_path, opt.rename.chunk_size, chunk_cache)\n+\n+        if similarity > best_match.similarity then\n+          best_match = {\n+            similarity = similarity,\n+            path = right_path,\n+            rel = right_rel,\n+          }\n+        end\n+      end\n+\n+      if best_match.path and best_match.rel then\n+        renamed[left_rel] = best_match.rel\n+        all_paths[left_rel].right = best_match.path\n+        all_paths[best_match.rel] = nil\n+        left_only[left_rel] = nil\n+        right_only[best_match.rel] = nil\n+      end\n+    end\n+  end\n+\n+  local qf_entries = {}\n+\n+  -- Convert to quickfix entries\n+  for rel_path, files in pairs(all_paths) do\n+    local status = nil\n+    if files.left and files.right then\n+      --- @type number\n+      local similarity\n+      if opt.rename.detect then\n+        similarity =\n+          calculate_similarity(files.left, files.right, opt.rename.chunk_size, chunk_cache)\n+      else\n+        similarity = vim.fn.getfsize(files.left) == vim.fn.getfsize(files.right) and 1 or 0\n+      end\n+      if similarity < 1 then\n+        status = renamed[rel_path] and 'R' or 'M'\n+      end\n+    elseif files.left then\n+      status = 'D'\n+      files.right = right_dir .. rel_path\n+    elseif files.right then\n+      status = 'A'\n+      files.left = left_dir .. rel_path\n+    end\n+\n+    if status then\n+      table.insert(qf_entries, {\n+        filename = files.right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = rel_path,\n+          left = files.left,\n+          right = files.right,\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+local function diff_directories(left_dir, right_dir, opt)\n+  local method = opt.method\n+  if method == 'auto' then\n+    if not opt.rename.detect and vim.fn.executable('diff') == 1 then\n+      method = 'diffr'\n+    else\n+      method = 'builtin'\n+    end\n+  end\n+\n+  --- @type table[]\n+  local qf_entries\n+  if method == 'diffr' then\n+    qf_entries = diff_directories_diffr(left_dir, right_dir, opt)\n+  elseif method == 'builtin' then\n+    qf_entries = diff_directories_builtin(left_dir, right_dir, opt)\n+  else\n+    vim.notify('Unknown diff method: ' .. method, vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  -- Sort entries by filename for consistency\n+  table.sort(qf_entries, function(a, b)\n+    return a.user_data.rel < b.user_data.rel\n+  end)\n+\n+  vim.fn.setqflist({}, 'r', {\n+    nr = '$',\n+    title = 'DiffTool',\n+    items = qf_entries,\n+    ---@param info {id: number, start_idx: number, end_idx: number}\n+    quickfixtextfunc = function(info)\n+      --- @type table[]\n+      local items = vim.fn.getqflist({ id = info.id, items = 1 }).items\n+      local out = {}\n+      for item = info.start_idx, info.end_idx do\n+        local entry = items[item]\n+        table.insert(out, entry.text .. ' ' .. entry.user_data.rel)\n+      end\n+      return out\n+    end,\n+  })\n+\n+  setup_layout(true)\n+  vim.cmd.cfirst()\n+end\n+\n+local M = {}\n+\n+--- @class difftool.opt.rename\n+--- @inlinedoc",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423195201",
            "id": 2423195201,
            "in_reply_to_id": 2423106082,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QbwZB",
            "original_commit_id": "d9c2ce9e6edf3950b4089d28e720059f64d22a83",
            "original_line": 422,
            "original_position": 422,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327667447,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423195201/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-11T22:44:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423195201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423206404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423206404"
                }
            },
            "author_association": "MEMBER",
            "body": "unfortunately has to be manual like this:\n\n```\n@field rename Controls rename detection:\n  - detect: ...\n  - similarity: ...\n  - chunk_size: ...\n```",
            "commit_id": "035d37613d245c290e18fd113a0873ad8bcb7547",
            "created_at": "2025-10-11T23:22:24Z",
            "diff_hunk": "@@ -0,0 +1,493 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+local util = require('vim._core.util')\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  local left_buf = util.edit_in(layout.left_win, left_file)\n+  local right_buf = util.edit_in(layout.right_win, right_file)\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    buffer = left_buf,\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    buffer = right_buf,\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_dirs_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_dirs_builtin(left_dir, right_dir, opt)\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- @param file1 string\n+  --- @param file2 string\n+  --- @param chunk_size number\n+  --- @param chunk_cache table<string, any>\n+  --- @return number similarity ratio (0 to 1)\n+  local function calculate_similarity(file1, file2, chunk_size, chunk_cache)\n+    -- Get or read chunk for file1\n+    local chunk1 = chunk_cache[file1]\n+    if not chunk1 then\n+      chunk1 = util.read_chunk(file1, chunk_size)\n+      chunk_cache[file1] = chunk1\n+    end\n+\n+    -- Get or read chunk for file2\n+    local chunk2 = chunk_cache[file2]\n+    if not chunk2 then\n+      chunk2 = util.read_chunk(file2, chunk_size)\n+      chunk_cache[file2] = chunk2\n+    end\n+\n+    if not chunk1 or not chunk2 then\n+      return 0\n+    end\n+    if chunk1 == chunk2 then\n+      return 1\n+    end\n+    local matches = 0\n+    local len = math.min(#chunk1, #chunk2)\n+    for i = 1, len do\n+      if chunk1:sub(i, i) == chunk2:sub(i, i) then\n+        matches = matches + 1\n+      end\n+    end\n+    return matches / len\n+  end\n+\n+  -- Create a map of all relative paths\n+\n+  --- @type table<string, {left: string?, right: string?}>\n+  local all_paths = {}\n+  --- @type table<string, string>\n+  local left_only = {}\n+  --- @type table<string, string>\n+  local right_only = {}\n+\n+  local function process_files_in_directory(dir_path, is_left)\n+    local files = vim.fs.find(function(name, path)\n+      local rel_path = vim.fs.relpath(dir_path, vim.fs.joinpath(path, name))\n+      return not is_ignored(rel_path, opt.ignore)\n+    end, { limit = math.huge, path = dir_path, follow = false })\n+\n+    for _, full_path in ipairs(files) do\n+      local rel_path = vim.fs.relpath(dir_path, full_path)\n+      if rel_path then\n+        full_path = vim.fn.resolve(full_path)\n+\n+        if vim.fn.isdirectory(full_path) == 0 then\n+          all_paths[rel_path] = all_paths[rel_path] or { left = nil, right = nil }\n+\n+          if is_left then\n+            all_paths[rel_path].left = full_path\n+            if not all_paths[rel_path].right then\n+              left_only[rel_path] = full_path\n+            end\n+          else\n+            all_paths[rel_path].right = full_path\n+            if not all_paths[rel_path].left then\n+              right_only[rel_path] = full_path\n+            end\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  -- Process both directories\n+  process_files_in_directory(left_dir, true)\n+  process_files_in_directory(right_dir, false)\n+\n+  --- @type table<string, string>\n+  local renamed = {}\n+  --- @type table<string, string>\n+  local chunk_cache = {}\n+\n+  -- Detect possible renames\n+  if opt.rename.detect then\n+    for left_rel, left_path in pairs(left_only) do\n+      ---@type {similarity: number, path: string?, rel: string}\n+      local best_match = { similarity = opt.rename.similarity, path = nil }\n+\n+      for right_rel, right_path in pairs(right_only) do\n+        local similarity =\n+          calculate_similarity(left_path, right_path, opt.rename.chunk_size, chunk_cache)\n+\n+        if similarity > best_match.similarity then\n+          best_match = {\n+            similarity = similarity,\n+            path = right_path,\n+            rel = right_rel,\n+          }\n+        end\n+      end\n+\n+      if best_match.path and best_match.rel then\n+        renamed[left_rel] = best_match.rel\n+        all_paths[left_rel].right = best_match.path\n+        all_paths[best_match.rel] = nil\n+        left_only[left_rel] = nil\n+        right_only[best_match.rel] = nil\n+      end\n+    end\n+  end\n+\n+  local qf_entries = {}\n+\n+  -- Convert to quickfix entries\n+  for rel_path, files in pairs(all_paths) do\n+    local status = nil\n+    if files.left and files.right then\n+      --- @type number\n+      local similarity\n+      if opt.rename.detect then\n+        similarity =\n+          calculate_similarity(files.left, files.right, opt.rename.chunk_size, chunk_cache)\n+      else\n+        similarity = vim.fn.getfsize(files.left) == vim.fn.getfsize(files.right) and 1 or 0\n+      end\n+      if similarity < 1 then\n+        status = renamed[rel_path] and 'R' or 'M'\n+      end\n+    elseif files.left then\n+      status = 'D'\n+      files.right = right_dir .. rel_path\n+    elseif files.right then\n+      status = 'A'\n+      files.left = left_dir .. rel_path\n+    end\n+\n+    if status then\n+      table.insert(qf_entries, {\n+        filename = files.right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = rel_path,\n+          left = files.left,\n+          right = files.right,\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+local function diff_dirs(left_dir, right_dir, opt)\n+  local method = opt.method\n+  if method == 'auto' then\n+    if not opt.rename.detect and vim.fn.executable('diff') == 1 then\n+      method = 'diffr'\n+    else\n+      method = 'builtin'\n+    end\n+  end\n+\n+  --- @type table[]\n+  local qf_entries\n+  if method == 'diffr' then\n+    qf_entries = diff_dirs_diffr(left_dir, right_dir, opt)\n+  elseif method == 'builtin' then\n+    qf_entries = diff_dirs_builtin(left_dir, right_dir, opt)\n+  else\n+    vim.notify('Unknown diff method: ' .. method, vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  -- Sort entries by filename for consistency\n+  table.sort(qf_entries, function(a, b)\n+    return a.user_data.rel < b.user_data.rel\n+  end)\n+\n+  vim.fn.setqflist({}, 'r', {\n+    nr = '$',\n+    title = 'DiffTool',\n+    items = qf_entries,\n+    ---@param info {id: number, start_idx: number, end_idx: number}\n+    quickfixtextfunc = function(info)\n+      --- @type table[]\n+      local items = vim.fn.getqflist({ id = info.id, items = 1 }).items\n+      local out = {}\n+      for item = info.start_idx, info.end_idx do\n+        local entry = items[item]\n+        table.insert(out, entry.text .. ' ' .. entry.user_data.rel)\n+      end\n+      return out\n+    end,\n+  })\n+\n+  setup_layout(true)\n+  vim.cmd.cfirst()\n+end\n+\n+local M = {}\n+\n+--- @class difftool.opt\n+--- @inlinedoc\n+---\n+--- Diff method to use\n+--- (default: `auto`)\n+--- @field method 'auto'|'builtin'|'diffr'\n+---\n+--- List of file patterns to ignore (for example: `'.git', '*.log'`)\n+--- (default: `{}`)\n+--- @field ignore string[]\n+---\n+--- Rename detection options (supported only by `builtin` method)\n+--- @field rename table\n+--- @field rename.detect boolean Whether to detect renames (default: false)\n+--- @field rename.similarity number Minimum similarity for rename detection (0 to 1) (default: 0.5)\n+--- @field rename.chunk_size number Maximum chunk size to read from files for similarity calculation (default: 4096)",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423206404",
            "id": 2423206404,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QbzIE",
            "original_commit_id": "035d37613d245c290e18fd113a0873ad8bcb7547",
            "original_line": 404,
            "original_position": 404,
            "original_start_line": 401,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327681784,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423206404/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-11T23:22:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423206404",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423221885"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423221885"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "So i tried bunch of stuff and only thing that was not breaking the formatting completely in plugins.txt was doing this:\r\n\r\n```\r\n--- Rename detection options (supported only by `builtin` method)\r\n--- @field rename table Controls rename detection\r\n---\r\n---   - {rename.detect} (`boolean`, default: `false`) Whether to detect renames\r\n---   - {rename.similarity} (`number`, default: `0.5`) Minimum similarity for rename detection (0 to 1)\r\n---   - {rename.chunk_size} (`number`, default: `4096`) Maximum chunk size to read from files for similarity calculation\r\n```\r\n\r\nWhich results in this:\r\n\r\n<img width=\"1206\" height=\"558\" alt=\"image\" src=\"https://github.com/user-attachments/assets/148fead2-23e3-4585-9c9a-42478f06f4f9\" />\r\n",
            "commit_id": "035d37613d245c290e18fd113a0873ad8bcb7547",
            "created_at": "2025-10-11T23:54:05Z",
            "diff_hunk": "@@ -0,0 +1,493 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+local util = require('vim._core.util')\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  local left_buf = util.edit_in(layout.left_win, left_file)\n+  local right_buf = util.edit_in(layout.right_win, right_file)\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    buffer = left_buf,\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    buffer = right_buf,\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_dirs_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')\n+  local qf_entries = {}\n+\n+  for _, line in ipairs(lines) do\n+    local modified_left, modified_right = line:match('^Files (.+) and (.+) differ$')\n+    if modified_left and modified_right then\n+      local left_exists = vim.fn.filereadable(modified_left) == 1\n+      local right_exists = vim.fn.filereadable(modified_right) == 1\n+      local status = '?'\n+      if left_exists and right_exists then\n+        status = 'M'\n+      elseif left_exists then\n+        status = 'D'\n+      elseif right_exists then\n+        status = 'A'\n+      end\n+      table.insert(qf_entries, {\n+        filename = modified_right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = vim.fs.relpath(left_dir, modified_left),\n+          left = vim.fs.abspath(modified_left),\n+          right = vim.fs.abspath(modified_right),\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories using built-in Lua implementation\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_dirs_builtin(left_dir, right_dir, opt)\n+  --- @param rel_path string?\n+  --- @param ignore string[]\n+  --- @return boolean\n+  local function is_ignored(rel_path, ignore)\n+    if not rel_path then\n+      return false\n+    end\n+    for _, pat in ipairs(ignore) do\n+      if vim.fn.match(rel_path, pat) >= 0 then\n+        return true\n+      end\n+    end\n+    return false\n+  end\n+\n+  --- @param file1 string\n+  --- @param file2 string\n+  --- @param chunk_size number\n+  --- @param chunk_cache table<string, any>\n+  --- @return number similarity ratio (0 to 1)\n+  local function calculate_similarity(file1, file2, chunk_size, chunk_cache)\n+    -- Get or read chunk for file1\n+    local chunk1 = chunk_cache[file1]\n+    if not chunk1 then\n+      chunk1 = util.read_chunk(file1, chunk_size)\n+      chunk_cache[file1] = chunk1\n+    end\n+\n+    -- Get or read chunk for file2\n+    local chunk2 = chunk_cache[file2]\n+    if not chunk2 then\n+      chunk2 = util.read_chunk(file2, chunk_size)\n+      chunk_cache[file2] = chunk2\n+    end\n+\n+    if not chunk1 or not chunk2 then\n+      return 0\n+    end\n+    if chunk1 == chunk2 then\n+      return 1\n+    end\n+    local matches = 0\n+    local len = math.min(#chunk1, #chunk2)\n+    for i = 1, len do\n+      if chunk1:sub(i, i) == chunk2:sub(i, i) then\n+        matches = matches + 1\n+      end\n+    end\n+    return matches / len\n+  end\n+\n+  -- Create a map of all relative paths\n+\n+  --- @type table<string, {left: string?, right: string?}>\n+  local all_paths = {}\n+  --- @type table<string, string>\n+  local left_only = {}\n+  --- @type table<string, string>\n+  local right_only = {}\n+\n+  local function process_files_in_directory(dir_path, is_left)\n+    local files = vim.fs.find(function(name, path)\n+      local rel_path = vim.fs.relpath(dir_path, vim.fs.joinpath(path, name))\n+      return not is_ignored(rel_path, opt.ignore)\n+    end, { limit = math.huge, path = dir_path, follow = false })\n+\n+    for _, full_path in ipairs(files) do\n+      local rel_path = vim.fs.relpath(dir_path, full_path)\n+      if rel_path then\n+        full_path = vim.fn.resolve(full_path)\n+\n+        if vim.fn.isdirectory(full_path) == 0 then\n+          all_paths[rel_path] = all_paths[rel_path] or { left = nil, right = nil }\n+\n+          if is_left then\n+            all_paths[rel_path].left = full_path\n+            if not all_paths[rel_path].right then\n+              left_only[rel_path] = full_path\n+            end\n+          else\n+            all_paths[rel_path].right = full_path\n+            if not all_paths[rel_path].left then\n+              right_only[rel_path] = full_path\n+            end\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n+  -- Process both directories\n+  process_files_in_directory(left_dir, true)\n+  process_files_in_directory(right_dir, false)\n+\n+  --- @type table<string, string>\n+  local renamed = {}\n+  --- @type table<string, string>\n+  local chunk_cache = {}\n+\n+  -- Detect possible renames\n+  if opt.rename.detect then\n+    for left_rel, left_path in pairs(left_only) do\n+      ---@type {similarity: number, path: string?, rel: string}\n+      local best_match = { similarity = opt.rename.similarity, path = nil }\n+\n+      for right_rel, right_path in pairs(right_only) do\n+        local similarity =\n+          calculate_similarity(left_path, right_path, opt.rename.chunk_size, chunk_cache)\n+\n+        if similarity > best_match.similarity then\n+          best_match = {\n+            similarity = similarity,\n+            path = right_path,\n+            rel = right_rel,\n+          }\n+        end\n+      end\n+\n+      if best_match.path and best_match.rel then\n+        renamed[left_rel] = best_match.rel\n+        all_paths[left_rel].right = best_match.path\n+        all_paths[best_match.rel] = nil\n+        left_only[left_rel] = nil\n+        right_only[best_match.rel] = nil\n+      end\n+    end\n+  end\n+\n+  local qf_entries = {}\n+\n+  -- Convert to quickfix entries\n+  for rel_path, files in pairs(all_paths) do\n+    local status = nil\n+    if files.left and files.right then\n+      --- @type number\n+      local similarity\n+      if opt.rename.detect then\n+        similarity =\n+          calculate_similarity(files.left, files.right, opt.rename.chunk_size, chunk_cache)\n+      else\n+        similarity = vim.fn.getfsize(files.left) == vim.fn.getfsize(files.right) and 1 or 0\n+      end\n+      if similarity < 1 then\n+        status = renamed[rel_path] and 'R' or 'M'\n+      end\n+    elseif files.left then\n+      status = 'D'\n+      files.right = right_dir .. rel_path\n+    elseif files.right then\n+      status = 'A'\n+      files.left = left_dir .. rel_path\n+    end\n+\n+    if status then\n+      table.insert(qf_entries, {\n+        filename = files.right,\n+        text = status,\n+        user_data = {\n+          diff = true,\n+          rel = rel_path,\n+          left = files.left,\n+          right = files.right,\n+        },\n+      })\n+    end\n+  end\n+\n+  return qf_entries\n+end\n+\n+--- Diff two directories\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+local function diff_dirs(left_dir, right_dir, opt)\n+  local method = opt.method\n+  if method == 'auto' then\n+    if not opt.rename.detect and vim.fn.executable('diff') == 1 then\n+      method = 'diffr'\n+    else\n+      method = 'builtin'\n+    end\n+  end\n+\n+  --- @type table[]\n+  local qf_entries\n+  if method == 'diffr' then\n+    qf_entries = diff_dirs_diffr(left_dir, right_dir, opt)\n+  elseif method == 'builtin' then\n+    qf_entries = diff_dirs_builtin(left_dir, right_dir, opt)\n+  else\n+    vim.notify('Unknown diff method: ' .. method, vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  -- Sort entries by filename for consistency\n+  table.sort(qf_entries, function(a, b)\n+    return a.user_data.rel < b.user_data.rel\n+  end)\n+\n+  vim.fn.setqflist({}, 'r', {\n+    nr = '$',\n+    title = 'DiffTool',\n+    items = qf_entries,\n+    ---@param info {id: number, start_idx: number, end_idx: number}\n+    quickfixtextfunc = function(info)\n+      --- @type table[]\n+      local items = vim.fn.getqflist({ id = info.id, items = 1 }).items\n+      local out = {}\n+      for item = info.start_idx, info.end_idx do\n+        local entry = items[item]\n+        table.insert(out, entry.text .. ' ' .. entry.user_data.rel)\n+      end\n+      return out\n+    end,\n+  })\n+\n+  setup_layout(true)\n+  vim.cmd.cfirst()\n+end\n+\n+local M = {}\n+\n+--- @class difftool.opt\n+--- @inlinedoc\n+---\n+--- Diff method to use\n+--- (default: `auto`)\n+--- @field method 'auto'|'builtin'|'diffr'\n+---\n+--- List of file patterns to ignore (for example: `'.git', '*.log'`)\n+--- (default: `{}`)\n+--- @field ignore string[]\n+---\n+--- Rename detection options (supported only by `builtin` method)\n+--- @field rename table\n+--- @field rename.detect boolean Whether to detect renames (default: false)\n+--- @field rename.similarity number Minimum similarity for rename detection (0 to 1) (default: 0.5)\n+--- @field rename.chunk_size number Maximum chunk size to read from files for similarity calculation (default: 4096)",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423221885",
            "id": 2423221885,
            "in_reply_to_id": 2423206404,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qb259",
            "original_commit_id": "035d37613d245c290e18fd113a0873ad8bcb7547",
            "original_line": 404,
            "original_position": 404,
            "original_start_line": 401,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 1,
            "pull_request_review_id": 3327708693,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423221885/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-11T23:54:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423221885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35448#discussion_r2423287439"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35448"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423287439"
                }
            },
            "author_association": "MEMBER",
            "body": "could use `vim.fn.systemlist()` instead",
            "commit_id": "7fcea585e5ad5d0e97e5fea9f252ba5c6d3d2536",
            "created_at": "2025-10-12T02:20:30Z",
            "diff_hunk": "@@ -0,0 +1,494 @@\n+--- @brief\n+---<pre>help\n+---:DiffTool {left} {right}                                           *:DiffTool*\n+---Compares two directories or files side-by-side.\n+---Supports directory diffing, rename detection, and highlights changes\n+---in quickfix list.\n+---</pre>\n+---\n+--- The plugin is not loaded by default; use `:packadd nvim.difftool` before invoking `:DiffTool`.\n+---\n+--- Example `git difftool -d` integration using `DiffTool` command:\n+---\n+--- ```ini\n+--- [difftool \"nvim_difftool\"]\n+---   cmd = nvim -c \"packadd nvim.difftool\" -c \"DiffTool $LOCAL $REMOTE\"\n+--- [diff]\n+---   tool = nvim_difftool\n+--- ```\n+\n+local highlight_groups = {\n+  A = 'DiffAdd',\n+  D = 'DiffDelete',\n+  M = 'DiffText',\n+  R = 'DiffChange',\n+}\n+\n+local layout = {\n+  group = nil,\n+  left_win = nil,\n+  right_win = nil,\n+}\n+\n+local util = require('vim._core.util')\n+\n+--- Set up a consistent layout with two diff windows\n+--- @param with_qf boolean whether to open the quickfix window\n+local function setup_layout(with_qf)\n+  local wins = vim.api.nvim_tabpage_list_wins(0)\n+  local left_valid = layout.left_win and vim.api.nvim_win_is_valid(layout.left_win)\n+  local right_valid = layout.right_win and vim.api.nvim_win_is_valid(layout.right_win)\n+  local wins_passed = left_valid and right_valid\n+\n+  local qf_passed = not with_qf\n+  if not qf_passed and wins_passed then\n+    for _, win in ipairs(wins) do\n+      local buf = vim.api.nvim_win_get_buf(win)\n+      local ft = vim.bo[buf].filetype\n+      if ft == 'qf' then\n+        qf_passed = true\n+        break\n+      end\n+    end\n+  end\n+\n+  if wins_passed and qf_passed then\n+    return false\n+  end\n+\n+  vim.cmd.only()\n+  layout.left_win = vim.api.nvim_get_current_win()\n+  vim.cmd.vsplit()\n+  layout.right_win = vim.api.nvim_get_current_win()\n+\n+  if with_qf then\n+    vim.cmd('botright copen')\n+  end\n+  vim.api.nvim_set_current_win(layout.right_win)\n+end\n+\n+--- Diff two files\n+--- @param left_file string\n+--- @param right_file string\n+--- @param with_qf boolean? whether to open the quickfix window\n+local function diff_files(left_file, right_file, with_qf)\n+  setup_layout(with_qf or false)\n+\n+  local left_buf = util.edit_in(layout.left_win, left_file)\n+  local right_buf = util.edit_in(layout.right_win, right_file)\n+\n+  -- When one of the windows is closed, clean up the layout\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    buffer = left_buf,\n+    callback = function()\n+      if layout.group and layout.left_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.left_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+  vim.api.nvim_create_autocmd('WinClosed', {\n+    group = layout.group,\n+    buffer = right_buf,\n+    callback = function()\n+      if layout.group and layout.right_win then\n+        vim.api.nvim_del_augroup_by_id(layout.group)\n+        layout.right_win = nil\n+        layout.group = nil\n+        vim.fn.setqflist({})\n+        vim.cmd.cclose()\n+      end\n+    end,\n+  })\n+\n+  vim.cmd('diffoff!')\n+  vim.api.nvim_win_call(layout.left_win, vim.cmd.diffthis)\n+  vim.api.nvim_win_call(layout.right_win, vim.cmd.diffthis)\n+end\n+\n+--- Diff two directories using external `diff` command\n+--- @param left_dir string\n+--- @param right_dir string\n+--- @param opt difftool.opt\n+--- @return table[] list of quickfix entries\n+local function diff_dirs_diffr(left_dir, right_dir, opt)\n+  local args = { 'diff', '-qrN' }\n+  for _, pattern in ipairs(opt.ignore) do\n+    table.insert(args, '-x')\n+    table.insert(args, pattern)\n+  end\n+  table.insert(args, left_dir)\n+  table.insert(args, right_dir)\n+\n+  local output = vim.fn.system(args)\n+  local lines = vim.split(output, '\\n')",
            "html_url": "https://github.com/neovim/neovim/pull/35448#discussion_r2423287439",
            "id": 2423287439,
            "line": 128,
            "node_id": "PRRC_kwDOAPphoM6QcG6P",
            "original_commit_id": "7fcea585e5ad5d0e97e5fea9f252ba5c6d3d2536",
            "original_line": 128,
            "original_position": 128,
            "original_start_line": 127,
            "path": "runtime/pack/dist/opt/nvim.difftool/lua/difftool.lua",
            "position": 128,
            "pull_request_review_id": 3327812786,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423287439/reactions"
            },
            "side": "RIGHT",
            "start_line": 127,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-12T02:23:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2423287439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok cleaned it up a bit and I think it might be ready for review at least. There are few things I could not find better solution for due to mostly quickfix api limitations:\r\n\r\n1. quickfix highlighting. This one is mostly minor issue as the autocommand for it is not too bad\r\n2. calling something when quickfix entry changes: this part is kinda annoying, as i have to use BufWinEnter instead and check if the bufnr is current qf diff entry, it would be much better if something like QuickFixEntryChanged autocmd existed or something in that style i guess\r\n\r\nOf course alternative to quickfix \"hacking\" is to just add custom handling for it but I did not wanted to invent new keybindings and workflow for navigating there and quickfix even with its limitations felt perfect to me.\r\n\r\nAlso for now it supports only 2-way diff with `$LOCAL $REMOTE`, I can probably try and support `$BASE $LOCAL $REMOTE $MERGED` but its possible it would get quite messy, not sure. But if there is need for it its for sure doable, I just prefer 2 way diffs so I did not spent much effort to try and support more here",
            "created_at": "2025-08-24T12:59:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218089509",
            "id": 3218089509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0CYl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218089509/reactions"
            },
            "updated_at": "2025-08-24T13:05:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218089509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think these should be taken into accounts:\r\n- Some kind of \"ignore\" option\r\n- Speed. I just tried it on 2 directories, and it has made Nvim hang since even before I sent the comment https://github.com/neovim/neovim/pull/35448#discussion_r2296692340. Meanwhile `diff -r` still gives me result instantly. Unix has `diff` CLI tool for comparing file and directories, and it is extremely fast, so some way to use it as the provider would be nice. Or I wonder if there is a existing library for comparing directories?",
            "created_at": "2025-08-24T15:27:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218188946",
            "id": 3218188946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0aqS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218188946/reactions"
            },
            "updated_at": "2025-08-24T15:39:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218188946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Please update the description (and commit message) as a Problem/Solution statement.\r\n\r\nI'm open to this (have been using the rather buggy https://github.com/will133/vim-dirdiff for a long time) but will wait for feedback from others.\r\n\r\nCan you publish it as a plugin so that people can try it out for awhile?\r\n\r\n",
            "created_at": "2025-08-24T15:32:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218191659",
            "id": 3218191659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0bUr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218191659/reactions"
            },
            "updated_at": "2025-08-24T15:32:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218191659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think these should be taken into accounts:\r\n> \r\n> * Some kind of \"ignore\" option\r\n> * Speed. I just tried it on 2 directories, and it has made Nvim hang since even before I sent the comment [feat(diff): add DiffTool plugin for file and directory comparison #35448 (comment)](https://github.com/neovim/neovim/pull/35448#discussion_r2296692340). Meanwhile `diff -r` still gives me result instantly. Unix has `diff` CLI tool for comparing file and directories, and it is extremely fast, so some way to use it as the provider would be nice. Or I wonder if there is a existing library for comparing directories?\r\n\r\nI bet this is caused by the file rename detection, which can definitely be optimized, my implementation is quite basic. Looking at some stuff, I can use `git diff --no-index --name-status` to do this in generic way using git, that is maybe way better.\r\n\r\nAlso for ignore, what do you mean by that one?\r\n\r\n\r\n\r\n> Please update the description (and commit message) as a Problem/Solution statement.\r\n> \r\n> I'm open to this (have been using the rather buggy https://github.com/will133/vim-dirdiff for a long time) but will wait for feedback from others.\r\n> \r\n> Can you publish it as a plugin so that people can try it out for awhile?\r\n\r\nI actually do have it published as a plugin here: https://github.com/deathbeam/myplugins.nvim?tab=readme-ov-file#difftool\r\n\r\nAnd alright will update the description in abit",
            "created_at": "2025-08-24T15:46:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218198894",
            "id": 3218198894,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0dFu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218198894/reactions"
            },
            "updated_at": "2025-08-24T15:46:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218198894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looking at some stuff, I can use `git diff --no-index --name-status` to do this in generic way using git\r\n\r\nIf this is going to use git-specific stuff then that starts a different conversation: either it needs to be shaped in a way that allows \"other VCS\" support in the future, or would need to decide to make it more clearly \"git-only\" by naming it `gitdifftool`.\r\n\r\nI would wait until there is actually feedback indicating that we want this in core...\r\n\r\n> I actually do have it published as a plugin here: https://github.com/deathbeam/myplugins.nvim?tab=readme-ov-file#difftool\r\n\r\nI mean an isolated plugin :)",
            "created_at": "2025-08-24T16:00:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218205923",
            "id": 3218205923,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0ezj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218205923/reactions"
            },
            "updated_at": "2025-08-24T16:00:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218205923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > Looking at some stuff, I can use `git diff --no-index --name-status` to do this in generic way using git\r\n> \r\n> If this is going to use git-specific stuff then that starts a different conversation: either it needs to be shaped in a way that allows \"other VCS\" support in the future, or would need to decide to make it more clearly \"git-only\" by naming it `gitdifftool`.\r\n> \r\n> I would wait until there is actually feedback indicating that we want this in core...\r\n> \r\n> > I actually do have it published as a plugin here: https://github.com/deathbeam/myplugins.nvim?tab=readme-ov-file#difftool\r\n> \r\n> I mean an isolated plugin :)\r\n\r\nIts not really git specific, --no-index means it doesnt need git working tree at all, just git cli and can work on any directory. \r\n\r\nAnd sure I can extract it to isolated plugin repo\r\n\r\nEDIT: But it looks like git diff --no-index do not support rename detection anyway or its bugged, so custom implementation for that still needsto be there, and `diff` does not really support rename detection either. But option is to simply have rename detection disabled by default then the implementation should be fast\r\n\r\nEDIT2: Disabled the rename detection by default",
            "created_at": "2025-08-24T16:08:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218210667",
            "id": 3218210667,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0f9r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218210667/reactions"
            },
            "updated_at": "2025-08-24T16:18:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218210667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Alright created separate repo here: https://github.com/deathbeam/difftool.nvim\r\n\r\nMostly with same implementation as here, and updated the commit message too\r\n\r\nEDIT: Also added diffr method to diffing to the plugin above for testing using `diff -qr` instead which is still a bit faster than doing it in lua and a bit more robust\r\n\r\nEDIT2: Added auto selection for either diff or builtin, also made builtin significantly faster (even though less accurate) while detecting renames",
            "created_at": "2025-08-24T16:32:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218223508",
            "id": 3218223508,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_0jGU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218223508/reactions"
            },
            "updated_at": "2025-08-24T21:55:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218223508",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Alright created separate repo here: https://github.com/deathbeam/difftool.nvim\r\n\r\nFirst impression is that this definitely replaces https://github.com/will133/vim-dirdiff for me, I like it!",
            "created_at": "2025-08-25T01:14:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3218543890",
            "id": 3218543890,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM6_1xUS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218543890/reactions"
            },
            "updated_at": "2025-08-25T01:14:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3218543890",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "are there plans to allow this dir diff through the existing `nvim -d` interface?\r\nit would make sense to me to extend the existing diff feature instead of adding an interface through a command.\r\nit would also fix some bugs caused by the directories not being recognized as arguments to neovim.",
            "created_at": "2025-08-25T19:50:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3221539443",
            "id": 3221539443,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7ABMpz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221539443/reactions"
            },
            "updated_at": "2025-08-25T19:50:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221539443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> are there plans to allow this dir diff through the existing `nvim -d` interface? it would make sense to me to extend the existing diff feature instead of adding an interface through a command. it would also fix some bugs caused by the directories not being recognized as arguments to neovim.\r\n\r\nI was thinking about this but I did not wanted to break existing functionality however unituitive it is for comparing directories and also biggest reason is that supporting more than 2 directories here is tricky (with `diff` provider also kinda impossible as it only supports 2) and nvim -d supports any amount of inputs afaik",
            "created_at": "2025-08-25T19:59:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3221562230",
            "id": 3221562230,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7ABSN2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221562230/reactions"
            },
            "updated_at": "2025-08-25T19:59:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3221562230",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Similar to https://github.com/neovim/neovim/pull/35627 , this should probably live in `runtime/pack/dist/opt/nvim.difftool` , at least initially.",
            "created_at": "2025-09-15T05:40:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3290565477",
            "id": 3290565477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7EIgtl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3290565477/reactions"
            },
            "updated_at": "2025-09-15T05:40:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3290565477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Similar to #35627 , this should probably live in `runtime/pack/dist/opt/nvim.difftool` , at least initially.\r\n\r\nhmm sure even though imo it would be better if the command was always available so it works out of the box for git. but i can move it",
            "created_at": "2025-09-17T17:43:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3303985570",
            "id": 3303985570,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7E7tGi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3303985570/reactions"
            },
            "updated_at": "2025-09-17T17:43:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3303985570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> so it works out of the box for git\r\n\r\nmeaning what? how does git use it? and why can't it call `:packadd nvim.difftool`",
            "created_at": "2025-09-17T17:48:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3304003048",
            "id": 3304003048,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7E7xXo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3304003048/reactions"
            },
            "updated_at": "2025-09-17T17:48:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3304003048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > so it works out of the box for git\r\n> \r\n> meaning what? how does git use it? and why can't it call `:packadd nvim.difftool`\r\n\r\nmeans doing this:\r\n\r\ncmd = nvim -c \"DiffTool $LOCAL $REMOTE\"\r\n\r\nbut i guess it can also just call packadd as well so its probably whatever",
            "created_at": "2025-09-17T18:00:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3304038261",
            "id": 3304038261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7E7591",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3304038261/reactions"
            },
            "updated_at": "2025-09-17T18:00:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3304038261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "if we move the plugin to work through the diff flag (`nvim -d`), which can be done in a few lines of code, then we wouldn't have to worry about doing a `packadd` since the dirs/files will be opened _after_ the config is loaded. this seems a little bit more native to me and less *hacky*. I'm sorry if this doesn't fit with what is expected from such a plugin but to me it feels similar to how the netrw plugin is set up.\r\n\r\nhttps://github.com/comfysage/ivy/blob/7633a93c2c63afc14f8742a22128ea14536f8b2b/config/plugin/diff.lua\r\nhttps://github.com/neovim/neovim/pull/35448#issuecomment-3221539443",
            "created_at": "2025-09-17T18:53:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3304193418",
            "id": 3304193418,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7E8f2K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3304193418/reactions"
            },
            "updated_at": "2025-09-17T18:59:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3304193418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For now moved the plugin to directory @justinmk suggested and updated the commit message. For replacing nvim -d, i guess the replacement is few lines of code yes but as I said earlier, nvim -d supports arbitrary number of arguments, adding support to arbitrary number of arguments here is not trivial (and with the `diff` backend not possible even). But maybe as optional feature it could be fine?\r\n\r\nI can look at implementing it as optional feature and check if the number of files is 2 etc",
            "created_at": "2025-09-20T16:24:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3315086236",
            "id": 3315086236,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7FmDOc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315086236/reactions"
            },
            "updated_at": "2025-09-20T16:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315086236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmm does vim.fn.argv() somehow depend on buffer names? for example I use oil.nvim and when i grab argv I get { \"oil:///tmp/git-difftool.qvtXgQ/left/\", \"/tmp/git-difftool.qvtXgQ/right/\" }\r\n\r\nthe oil buffer name, thats kinda odd. And the original args def did not had them:\r\n\r\n```\r\n 0.0  0.0 1142028 deathbe+ nvim -R -f -d -c wincmd l -c cd $GIT_PREFIX /tmp/git-difftool.zzr6sb/left/ /tmp/git-difftool.zzr6sb/right/\r\n```\r\n",
            "created_at": "2025-09-20T16:58:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3315105002",
            "id": 3315105002,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7FmHzq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315105002/reactions"
            },
            "updated_at": "2025-09-20T16:59:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315105002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`nvim -d` is an interesting idea that we can explore in a later PR, after we think difftool is mature enough.\r\n\r\n\r\n> does vim.fn.argv() somehow depend on buffer names\r\n\r\nThat gets the vim \"argument list\" which is different than the startup file args, it can be modified (renamed/added/removed) at any time by a plugin. `v:argv` has the raw args passed at startup (which will include non-file args), but that might be annoying to deal with since the last args are not always \"file args\" (e.g. `nvim -l ...`).\r\n\r\n(p.s. There is no reason for dir plugins like Oil to rename the buffers. A directory is a directory, it doesn't need a `oil://` scheme...)\r\n\r\nFor now I would suggest using `fn.argv()`, trim the `x://` scheme, and check that the resulting path exists. As a potential followup, maybe we should introduce `v:argf`: #35847 ",
            "created_at": "2025-09-20T18:18:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3315153123",
            "id": 3315153123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7FmTjj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315153123/reactions"
            },
            "updated_at": "2025-09-20T18:28:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315153123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Added tests and also added a bit more documentation + adjusted gen_vimdoc to generate docs for it",
            "created_at": "2025-09-20T23:58:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3315373537",
            "id": 3315373537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7FnJXh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315373537/reactions"
            },
            "updated_at": "2025-09-20T23:58:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3315373537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "moved to ready for review from draft as everything I wanted to do is mostly done and as mentioned previously, nvim -d support can be added separately at any point later",
            "created_at": "2025-09-29T16:32:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3347971066",
            "id": 3347971066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7Hjfv6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3347971066/reactions"
            },
            "updated_at": "2025-09-29T16:32:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3347971066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "lgtm after comments + rebase",
            "created_at": "2025-10-11T19:43:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3393618334",
            "id": 3393618334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7KRoGe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393618334/reactions"
            },
            "updated_at": "2025-10-11T19:43:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393618334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the review. Rebased and implemented the changes requested. Unsure about the rename inline doc tho but yea. Also made the WinClosed autocmds buf local, looks like it surprisingly works so thats super nice. Still need to clear the group after close to not leave the BufWinEnter and quickfix enter autocmds behind for no reason",
            "created_at": "2025-10-11T22:45:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3393712987",
            "id": 3393712987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7KR_Nb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393712987/reactions"
            },
            "updated_at": "2025-10-11T22:45:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393712987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "With `set nosplitright` this will open `b/` on the left side:\r\n\r\n    :DiffTool a/ b/\r\n\r\nI don't think that 'splitright' should affect the presentation here. 'splitright' only is relevant when the user creates a single split window, it's unrelated to how a group of windows should be arranged. For reference, vim-fugitive `:Gvdiffsplit` also makes the same judgement that I am suggesting here.",
            "created_at": "2025-10-12T02:39:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3393858610",
            "id": 3393858610,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7KSiwy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393858610/reactions"
            },
            "updated_at": "2025-10-12T02:39:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393858610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> With `set nosplitright` this will open `b/` on the left side:\r\n> \r\n> ```\r\n> :DiffTool a/ b/\r\n> ```\r\n> \r\n> I don't think that 'splitright' should affect the presentation here. 'splitright' only is relevant when the user creates a single split window, it's unrelated to how a group of windows should be arranged. For reference, vim-fugitive `:Gvdiffsplit` also makes the same judgement that I am suggesting here.\r\n\r\nYea that makes sense. Opened PR here with both improvements: https://github.com/neovim/neovim/pull/36145",
            "created_at": "2025-10-12T03:09:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/35448#issuecomment-3393873705",
            "id": 3393873705,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
            "node_id": "IC_kwDOAPphoM7KSmcp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393873705/reactions"
            },
            "updated_at": "2025-10-12T03:09:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3393873705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35448/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35448/commits",
    "created_at": "2025-08-24T04:02:29Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35448.diff",
    "draft": false,
    "head": {
        "label": "deathbeam:add-difftool",
        "ref": "add-difftool",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/deathbeam/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/deathbeam/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/deathbeam/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/deathbeam/neovim/branches{/branch}",
            "clone_url": "https://github.com/deathbeam/neovim.git",
            "collaborators_url": "https://api.github.com/repos/deathbeam/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/deathbeam/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/deathbeam/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/deathbeam/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/deathbeam/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/deathbeam/neovim/contributors",
            "created_at": "2024-03-10T23:42:10Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/deathbeam/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/deathbeam/neovim/downloads",
            "events_url": "https://api.github.com/repos/deathbeam/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/deathbeam/neovim/forks",
            "full_name": "deathbeam/neovim",
            "git_commits_url": "https://api.github.com/repos/deathbeam/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/deathbeam/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/deathbeam/neovim/git/tags{/sha}",
            "git_url": "git://github.com/deathbeam/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/deathbeam/neovim/hooks",
            "html_url": "https://github.com/deathbeam/neovim",
            "id": 770110790,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/deathbeam/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/deathbeam/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/deathbeam/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/deathbeam/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/deathbeam/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/deathbeam/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/deathbeam/neovim/merges",
            "milestones_url": "https://api.github.com/repos/deathbeam/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOLeb1Rg",
            "notifications_url": "https://api.github.com/repos/deathbeam/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
                "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
                "followers_url": "https://api.github.com/users/deathbeam/followers",
                "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
                "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/deathbeam",
                "id": 5115805,
                "login": "deathbeam",
                "node_id": "MDQ6VXNlcjUxMTU4MDU=",
                "organizations_url": "https://api.github.com/users/deathbeam/orgs",
                "received_events_url": "https://api.github.com/users/deathbeam/received_events",
                "repos_url": "https://api.github.com/users/deathbeam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/deathbeam",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/deathbeam/neovim/pulls{/number}",
            "pushed_at": "2025-10-14T00:05:48Z",
            "releases_url": "https://api.github.com/repos/deathbeam/neovim/releases{/id}",
            "size": 305463,
            "ssh_url": "git@github.com:deathbeam/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/deathbeam/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/deathbeam/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/deathbeam/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/deathbeam/neovim/subscription",
            "svn_url": "https://github.com/deathbeam/neovim",
            "tags_url": "https://api.github.com/repos/deathbeam/neovim/tags",
            "teams_url": "https://api.github.com/repos/deathbeam/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/deathbeam/neovim/git/trees{/sha}",
            "updated_at": "2025-03-03T17:40:20Z",
            "url": "https://api.github.com/repos/deathbeam/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "7fcea585e5ad5d0e97e5fea9f252ba5c6d3d2536",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
            "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
            "followers_url": "https://api.github.com/users/deathbeam/followers",
            "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
            "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/deathbeam",
            "id": 5115805,
            "login": "deathbeam",
            "node_id": "MDQ6VXNlcjUxMTU4MDU=",
            "organizations_url": "https://api.github.com/users/deathbeam/orgs",
            "received_events_url": "https://api.github.com/users/deathbeam/received_events",
            "repos_url": "https://api.github.com/users/deathbeam/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/deathbeam",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35448",
    "id": 2769540629,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35448",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 3010934759,
            "name": "diff",
            "node_id": "MDU6TGFiZWwzMDEwOTM0NzU5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diff"
        }
    ],
    "locked": false,
    "merge_commit_sha": "fec02ae8e411658a5f97291ac9d7cf7426f1fcbf",
    "merged_at": "2025-10-12T02:24:39Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6lE9YV",
    "number": 35448,
    "patch_url": "https://github.com/neovim/neovim/pull/35448.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35448/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/7fcea585e5ad5d0e97e5fea9f252ba5c6d3d2536",
    "title": "feat(diff): add DiffTool command for file and directory comparison",
    "updated_at": "2025-10-12T08:29:00Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35448",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5115805?v=4",
        "events_url": "https://api.github.com/users/deathbeam/events{/privacy}",
        "followers_url": "https://api.github.com/users/deathbeam/followers",
        "following_url": "https://api.github.com/users/deathbeam/following{/other_user}",
        "gists_url": "https://api.github.com/users/deathbeam/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/deathbeam",
        "id": 5115805,
        "login": "deathbeam",
        "node_id": "MDQ6VXNlcjUxMTU4MDU=",
        "organizations_url": "https://api.github.com/users/deathbeam/orgs",
        "received_events_url": "https://api.github.com/users/deathbeam/received_events",
        "repos_url": "https://api.github.com/users/deathbeam/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/deathbeam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/deathbeam/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/deathbeam",
        "user_view_type": "public"
    }
}