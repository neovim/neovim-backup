{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31024/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31024/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31024"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31024"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31024/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31024"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/74919174cf99a2af593760ebd7102973cb5a4261"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6198,
            "forks_count": 6198,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1970,
            "open_issues_count": 1970,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-21T05:18:47Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 334403,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91287,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-22T03:04:19Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91287,
            "watchers_count": 91287,
            "web_commit_signoff_required": false
        },
        "sha": "b34e137e43d359c8db4fb76028dea3b410842aff",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "## Problem:\r\n1. Neovim's current modules such as `diagnostic` and `lsp.inlay_hint` contain many variables whose lifecycle is related to buffers.\r\n2. Variables with scope, such as `vim.b`, can only be VimScript variables, cannot save metatables, and return copies, so they cannot be used directly for modification.\r\n\r\n## Solution:\r\nAdd `vim.gl`, `vim.bl`, `vim.wl`, `vim.tl` to store Lua variables, with the same scope rules and lifecycle as VimScript variables.\r\n\r\nCloses https://github.com/neovim/neovim/issues/12544",
    "closed_at": "2024-12-19T15:56:19Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't think that's the right approach. Ideally, `vim.b` should transparently handle all types at the editor (C) level, just as is planned for `vim.o`. Having a separate table is confusing.\r\n\r\nAt best (and as a stop-gap), we should overload `vim.b` etc. To gauge the possible benefit given the significant cost, it would be important to have use cases where this is actually _needed_ (not just convenient).",
            "created_at": "2024-11-01T09:10:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451560839",
            "id": 2451560839,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SH9mH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451560839/reactions"
            },
            "updated_at": "2024-11-01T09:10:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451560839",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I don't think that's the right approach. \r\n\r\nI agree that this is not a perfect implementation, it looks a bit hack.\r\n\r\n> Ideally, `vim.b` should transparently handle all types at the editor (C) level, just as is planned for `vim.o`. Having a separate table is confusing.\r\n\r\nI don't think such an interface is likely to exist. The `vim.b` interface is defined as a bridge between Lua and VimScript, and if we save a variable with a metatable like `vim.b.foo`, it implies that you can access it in VimScript. If it has a `metatable`, then accessing `b:foo()` and `vim.b.foo()` or `b:foo.bar` and `vim.b.bar` in VimScript could be completely different from Lua, unless we implement Lua's metatable mechanism in the VimScript interpreter. This would require a lot of unnecessary work since our long-term goal is Lua. Unlike `vim.o`, we cannot do away with editor options, but we can eliminate dependency on VimScript variables. And given the fundamental differences in data structures between VimScript and Lua, I doubt it can be implemented either. The pattern in this PR can even store userdata from C.\r\n\r\nSo based on the reasons above, my main idea is to differentiate these two types of data using different interfaces:\r\n\r\n1. `vim.b`, for storing VimScript data, returns a copy of the data when accessed by Lua;\r\n2. `vim.bl`, for storing Lua data, returns a copy of the data when accessed by VimScript.\r\n\r\nThis ensures that both Lua and VimScript can access the data, and the behavior of the accessed data is deterministic. The first point is a fact of the current implementation; I have only implemented the second point. Furthermore, even if we achieve a completely transparent mechanism for `vim.b`, then allowing `vim.bl = vim.b` will also ensure the behavior of this interface, preventing any breaking changes.\r\n\r\nExcept for this implementation in this PR and direct changes to the C code, there may currently be a lack of a mechanism to accomplish this, see https://github.com/neovim/neovim/pull/28748#issuecomment-2112718134. So if we agree that this interface is stable, then I think we can (temporarily) accept the implementation in this PR.\r\n\r\n> it would be important to have use cases where this is actually _needed_ (not just convenient).\r\n\r\nThis not only reduces the complexity of `inlay_hint.lua` (which has led to many bug reports), but it could also be applied to `codelens.lua` which similarly requires buffer variable management (the buffer variable management in inlay hints may be in a difficult-to-replicate balance). For an editor, there will be many similar use cases, and I think that's why vim provided it.",
            "created_at": "2024-11-01T10:26:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451654460",
            "id": 2451654460,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SIUc8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451654460/reactions"
            },
            "updated_at": "2024-11-01T10:42:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451654460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think this behavior should be consistent with @justinmk 's [proposal](https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687) (containers with non-matching languages are read-only), but there is no overload for `vim.b` here to distinguish between different data structures.",
            "created_at": "2024-11-01T11:45:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451745067",
            "id": 2451745067,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SIqkr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451745067/reactions"
            },
            "updated_at": "2024-11-01T11:45:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451745067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but there is no overload for vim.b here to distinguish between different data structures.\r\n\r\nYes, and my point is that the overload is a **fundamental** part of that proposal. \r\n\r\nWhile these accessors were indeed created as a bridge, that was long before the switch to a \"Lua first\" policy. Today's goals are different, so the bridge aspect becomes secondary _for variables_ (as opposed to options, which are a first-class _generic_ object).",
            "created_at": "2024-11-01T12:29:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451797015",
            "id": 2451797015,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SI3QX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451797015/reactions"
            },
            "updated_at": "2024-11-01T12:29:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451797015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So based on this, it means: the variable `foo` created by `vim.b.foo` is a read-only copy when accessed with `b:foo`, and vice versa, right?\r\n\r\nNot only are the types of variables blurred, but I am also concerned that this is an implicit breaking change, as it would cause variables created with `vim.b` to become invalid in code modified by VimScript. However, there shouldn't be many plugins that mix the two languages now.\r\n\r\nAdditionally, this approach should be based on C rather than Lua, and it needs to truly implement management of Lua variables (this PR is still built on the lifecycle management of VimScript variables). Unless we make the way to access Lua variables in VimScript less direct, for example, by requiring specific function calls (as in this PR) to access them. I don't know if this is acceptable, as it also invalidates the code that accesses variables created by `vim.b` in VimScript, but the advantage is that it can be implemented immediately in this PR without changing C, and the breaking change is explicit.",
            "created_at": "2024-11-01T13:18:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451858686",
            "id": 2451858686,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJGT-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451858686/reactions"
            },
            "updated_at": "2024-11-01T13:18:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451858686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No, the point is to _add_ (Lua-only) support for (meta)tables and function handles, with the (documented) caveat that these (and only these) are _not_ bridged.\r\n\r\nIn any case, adding a parallel API for this is _not_ acceptable; other trade-offs can be made.",
            "created_at": "2024-11-01T13:20:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451862488",
            "id": 2451862488,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJHPY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451862488/reactions"
            },
            "updated_at": "2024-11-01T13:57:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451862488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So I think it is like this: \r\n\r\nAccessing VimScript variables from Lua remains the same; however, when creating variables of types `table`, `thread`, and `userdata` using `vim.b.foo`, direct access via `b:foo` is not possible, but you can use `b:lua_var_foo()` to get a copy of it. The inclusion of `table` (regardless of whether metatable exists) is because it is not a basic type, and the current behavior already returns a copy, which is not direct enough (the documentation has a fairly long description of this special case). For other basic types, this change is completely transparent and will not be perceived, including modifying them. This maintains our Lua-first policy while avoiding a parallel API, and it can be implemented in this PR. The breaking change only requires users to avoid modifying the table (or dictionary in VimScript) simultaneously in both VimScript and Lua, and I think it is impossible to find a direct way for them to do this. This might be a relatively balanced trade-off.",
            "created_at": "2024-11-01T13:57:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451916572",
            "id": 2451916572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJUcc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451916572/reactions"
            },
            "updated_at": "2024-11-01T13:57:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451916572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, exactly. At the current state of things, accessing Lua variables from vimscript is simply not a very common use case. (Doesn't mean we should break already existing support for it, especially \"simple\" types like `int` and `string`, as you say.) And tables/dicts never fully worked beforehand, so a small regression that makes the distinction clearer would be ok.",
            "created_at": "2024-11-01T14:01:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451923660",
            "id": 2451923660,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJWLM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451923660/reactions"
            },
            "updated_at": "2024-11-01T14:02:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451923660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it implies that you can access it in VimScript. \n\nI'm pretty sure that's the plan. We want the bridge to work both ways. Where the data is actually stored shouldn't matter.\n\nWill require changes in C",
            "created_at": "2024-11-01T14:05:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451930107",
            "id": 2451930107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJXv7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451930107/reactions"
            },
            "updated_at": "2024-11-01T14:06:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451930107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, but we don't need full bidirectionality right now; as long as the API need not change, adding partial support (in Lua) if that 1. unlocks useful features now and 2. doesn't box us in for the end goal is fine.",
            "created_at": "2024-11-01T14:10:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451937773",
            "id": 2451937773,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJZnt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451937773/reactions"
            },
            "updated_at": "2024-11-01T14:10:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451937773",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "~... and doesn't break anything. Doing something too naive on the current interface is very likely break things.~\n\n~Remind me why we need this now? There are already internal mechanisms in place for handling buffer state.~\n\n~Note it is this proposal (https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687) that closes the linked issue.~\n\n\nSorry, caught up on the comments.",
            "created_at": "2024-11-01T14:14:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2451945264",
            "id": 2451945264,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6SJbcw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451945264/reactions"
            },
            "updated_at": "2024-11-01T14:32:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451945264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Accessing VimScript variables from Lua remains the same; however, when creating variables of types `table`, `thread`, and `userdata` using `vim.b.foo`, direct access via `b:foo` is not possible, \r\n\r\n`b:foo` should return a (degraded serialized) copy. E.g. for a table, it returns the table without metainfo. For a closure, it returns a string or throws an error 🤷 .\r\n\r\nThe point is that the Lua-side `vim.b` layer is merely an ENHANCEMENT on the existing functionality. Period.\r\n\r\n> but you can use `b:lua_var_foo()` to get a copy of it.\r\n\r\nI don't get what you mean by this. `b:foo` should either return a copy or throw an error. There is nothing called `b:lua_var_foo()`.",
            "created_at": "2024-12-19T15:52:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2554753424",
            "id": 2554753424,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6YRnGQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554753424/reactions"
            },
            "updated_at": "2024-12-19T15:53:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554753424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Closing this since it doesn't implement https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687 . The proposal in https://github.com/neovim/neovim/issues/12544#issuecomment-1116794687 is still quite clear AFAICT. The above discussion hopefully clears some things.",
            "created_at": "2024-12-19T15:56:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2554774214",
            "id": 2554774214,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6YRsLG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554774214/reactions"
            },
            "updated_at": "2024-12-19T15:56:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554774214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The `vim.b` interface is defined as a bridge between Lua and VimScript, and if we save a variable with a metatable like `vim.b.foo`, it implies that you can access it in VimScript.\r\n\r\n`vim.b` (and `b:` in Vimscript) are simply scoped variables that have a lifetime attached to their scopes (buffers, windows, tabs, etc.). \r\n\r\nThere is no need to introduce some other separate interface for that. And, attempting to serialize data when requested from Vimscript, is already well-supported, so why wouldn't we continue to support that?",
            "created_at": "2024-12-19T15:58:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2554785422",
            "id": 2554785422,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6YRu6O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554785422/reactions"
            },
            "updated_at": "2024-12-19T15:58:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2554785422",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There are some subsequent discussions in the matrix room. I planned to implement it according to the proposal above in the way implemented in this PR. Still, the discussion revealed that implementing it in Lua would result in unacceptable breaking changes. The conclusion is that this proposal should be implemented in C. I forgot to close this PR.",
            "created_at": "2024-12-20T12:51:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/31024#issuecomment-2556947673",
            "id": 2556947673,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
            "node_id": "IC_kwDOAPphoM6YZ-zZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556947673/reactions"
            },
            "updated_at": "2024-12-20T12:51:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2556947673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31024/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31024/commits",
    "created_at": "2024-11-01T08:57:04Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31024.diff",
    "draft": false,
    "head": {
        "label": "ofseed:lua-scoped-variables",
        "ref": "lua-scoped-variables",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ofseed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ofseed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ofseed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ofseed/neovim/branches{/branch}",
            "clone_url": "https://github.com/ofseed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ofseed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ofseed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ofseed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ofseed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ofseed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ofseed/neovim/contributors",
            "created_at": "2021-11-30T18:13:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ofseed/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ofseed/neovim/downloads",
            "events_url": "https://api.github.com/repos/ofseed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ofseed/neovim/forks",
            "full_name": "ofseed/neovim",
            "git_commits_url": "https://api.github.com/repos/ofseed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ofseed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ofseed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ofseed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ofseed/neovim/hooks",
            "html_url": "https://github.com/ofseed/neovim",
            "id": 433537354,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ofseed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ofseed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ofseed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ofseed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ofseed/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ofseed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ofseed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ofseed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGddBSg",
            "notifications_url": "https://api.github.com/repos/ofseed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ofseed/neovim/pulls{/number}",
            "pushed_at": "2025-07-21T10:38:55Z",
            "releases_url": "https://api.github.com/repos/ofseed/neovim/releases{/id}",
            "size": 325328,
            "ssh_url": "git@github.com:ofseed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ofseed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ofseed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ofseed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ofseed/neovim/subscription",
            "svn_url": "https://github.com/ofseed/neovim",
            "tags_url": "https://api.github.com/repos/ofseed/neovim/tags",
            "teams_url": "https://api.github.com/repos/ofseed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ofseed/neovim/git/trees{/sha}",
            "updated_at": "2025-07-21T08:45:39Z",
            "url": "https://api.github.com/repos/ofseed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "74919174cf99a2af593760ebd7102973cb5a4261",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
            "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofseed/followers",
            "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofseed",
            "id": 61115159,
            "login": "ofseed",
            "node_id": "MDQ6VXNlcjYxMTE1MTU5",
            "organizations_url": "https://api.github.com/users/ofseed/orgs",
            "received_events_url": "https://api.github.com/users/ofseed/received_events",
            "repos_url": "https://api.github.com/users/ofseed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofseed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31024",
    "id": 2157742223,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31024",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 7421978602,
            "name": "editor",
            "node_id": "LA_kwDOAPphoM8AAAABumJn6g",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor"
        }
    ],
    "locked": false,
    "merge_commit_sha": "43a89708f937b96c46b67d1cb6091c99da958078",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6AnIiP",
    "number": 31024,
    "patch_url": "https://github.com/neovim/neovim/pull/31024.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31024/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/74919174cf99a2af593760ebd7102973cb5a4261",
    "title": "feat(editor): add scoped variables for lua",
    "updated_at": "2025-07-21T08:15:45Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31024",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}