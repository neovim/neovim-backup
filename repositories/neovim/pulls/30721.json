{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30721/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30721/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30721"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30721"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30721/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30721"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6b86a70b23ceef97965ecc65e49b5bc1e08d29bb"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6037,
            "forks_count": 6037,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1913,
            "open_issues_count": 1913,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-04-21T23:49:28Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 318183,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 88840,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-04-22T02:39:42Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 88840,
            "watchers_count": 88840,
            "web_commit_signoff_required": false
        },
        "sha": "8ef3dd3afa20024f439d8b7a69f316069c1909d3",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Fixes #28444. This requires moving the default statusline implementation into the format DSL as opposed to C",
    "closed_at": "2025-04-17T14:49:23Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30721#discussion_r1792475024"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30721"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1792475024"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      // For back-compat, statusline has a fallback when empty (unlike 'winbar').\r\n```",
            "commit_id": "6b86a70b23ceef97965ecc65e49b5bc1e08d29bb",
            "created_at": "2024-10-08T20:38:10Z",
            "diff_hunk": "@@ -382,7 +315,13 @@ static void win_redr_custom(win_T *wp, bool draw_winbar, bool draw_ruler)\n       }\n     } else {\n       opt_idx = kOptStatusline;\n+\n       stl = ((*wp->w_p_stl != NUL) ? wp->w_p_stl : p_stl);\n+      // statusline has a fallback when its NUL (unlike winbar)",
            "html_url": "https://github.com/neovim/neovim/pull/30721#discussion_r1792475024",
            "id": 1792475024,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q1v-Q",
            "original_commit_id": "77a4d2e8c169efe0abfa1f4b8dc580e5558fa528",
            "original_line": 320,
            "original_position": 116,
            "original_start_line": null,
            "path": "src/nvim/statusline.c",
            "position": null,
            "pull_request_review_id": 2355480704,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30721",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1792475024/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-08T20:38:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1792475024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30721#discussion_r1793325041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30721"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793325041"
                }
            },
            "author_association": "MEMBER",
            "body": "ruler?\r\n```suggestion\r\n/// @return  fallback fmt string when 'statusline' is empty. Changes if 'ruler' is set or if 'showcmdloc=statusline'\r\n```",
            "commit_id": "6b86a70b23ceef97965ecc65e49b5bc1e08d29bb",
            "created_at": "2024-10-09T11:08:47Z",
            "diff_hunk": "@@ -62,6 +62,34 @@ typedef enum {\n   kNumBaseHexadecimal = 16,\n } NumberBase;\n \n+/// @return  fallback fmt string when 'statusline' is empty. Changes if 'rule' is set or if 'showcmdloc=statusline'",
            "html_url": "https://github.com/neovim/neovim/pull/30721#discussion_r1793325041",
            "id": 1793325041,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q4_fx",
            "original_commit_id": "cd3e39d3cba9dd8786de8dcfd3abf9667df217dc",
            "original_line": 65,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/statusline.c",
            "position": null,
            "pull_request_review_id": 2356826011,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30721",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793325041/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T11:08:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793325041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30721#discussion_r1793325380"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30721"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793325380"
                }
            },
            "author_association": "MEMBER",
            "body": "ruler",
            "commit_id": "6b86a70b23ceef97965ecc65e49b5bc1e08d29bb",
            "created_at": "2024-10-09T11:09:06Z",
            "diff_hunk": "@@ -62,6 +62,34 @@ typedef enum {\n   kNumBaseHexadecimal = 16,\n } NumberBase;\n \n+/// @return  fallback fmt string when 'statusline' is empty. Changes if 'rule' is set or if 'showcmdloc=statusline'\n+char *statusline_default_fmt(void)\n+{\n+  // 'showcmd' information if 'showcmdloc' == \"statusline\".\n+  bool showcmd_in_statusline = p_sc && *p_sloc == 's';\n+\n+  // The fallback statusline changes depending on the following:\n+  // The possible cases are:\n+  //  - 'showcmdloc' == \"statusline\" and 'rule' is set\n+  //  - 'showcmdloc' == \"statusline\" and 'rule' is unset\n+  //  - 'showcmdloc' != \"statusline\" and 'rule' is set\n+  //  - 'showcmdloc' != \"statusline\" and 'rule' is unset",
            "html_url": "https://github.com/neovim/neovim/pull/30721#discussion_r1793325380",
            "id": 1793325380,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q4_lE",
            "original_commit_id": "cd3e39d3cba9dd8786de8dcfd3abf9667df217dc",
            "original_line": 76,
            "original_position": 15,
            "original_start_line": 73,
            "path": "src/nvim/statusline.c",
            "position": null,
            "pull_request_review_id": 2356826594,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30721",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793325380/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-09T11:09:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793325380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "the failing tests suggest that the C default status line implementation is a little tricky to translate into a format string ",
            "created_at": "2024-10-09T11:11:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2402024659",
            "id": 2402024659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6PK_zT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402024659/reactions"
            },
            "updated_at": "2024-10-09T11:11:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402024659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the C default status line implementation is a little tricky to translate into a format string\r\n\r\nMight need to define a lua/vimscript function(s) which are part of the new default fmt. Or depending on the exact behavior, maybe a new 'statusline' flag is needed.",
            "created_at": "2024-10-09T11:14:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2402030702",
            "id": 2402030702,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6PLBRu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402030702/reactions"
            },
            "updated_at": "2024-10-09T11:14:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402030702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'll try to debug the tests to understand what's happening",
            "created_at": "2024-10-09T11:24:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2402049382",
            "id": 2402049382,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6PLF1m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402049382/reactions"
            },
            "updated_at": "2024-10-09T11:24:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402049382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "FYI: to [run a single test](https://github.com/neovim/neovim/blob/master/test/README.md#filter-by-file) you can use TEST_FILE:\r\n\r\n    TEST_FILE=test/functional/example_spec.lua make functionaltest\r\n\r\n",
            "created_at": "2024-10-09T11:34:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2402068631",
            "id": 2402068631,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6PLKiX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402068631/reactions"
            },
            "updated_at": "2024-10-09T11:34:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402068631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Replicating the **exact** behavior of the C implementation is non-trivial. This is because it has quirks. Some are:\r\n\r\n1. The exact placement of `'showcmd'`, `'ruler`' and `'keymap'` depend on the global variable `ru_col`. The Lua API does not expose `ru_col`\r\n2. When the window size is small, the content of `'showcmd'` may write on top `'keymap'` (bug?). See screenshot below where I had `:set arabic` (adds `<arab>`) and the number of columns is was 17\r\n\r\n![c-statusline](https://github.com/user-attachments/assets/6ee7c3ac-5561-4946-ba51-c8697b8625ed)\r\n\r\n3. The amount of padding required for items \"on the right\" depends on the width of \"items on the left\", so using `\"%{minwid}.{maxwid}\"` isn't straight forward.\r\n\r\nPlease note I'm new to neovim core so what I mentioned above may not 100% be accurate.\r\n\r\n--- \r\n\r\nWe could re-implement the default statusline as a vimscript/lua function, but trying to preserve the C implementation quirks makes it rather awkward. Here's a dirty inefficient attempt at translating the C logic into lua to illustrate what I mean (not exactly easy to maintain). `vim.api.nvim_get_ru_col()` is not part of the API, I created it myself to expose `ru_col`. \r\n\r\n\r\n```lua\r\n-- strings are not immutable in lua. To avoid too many allocations consider using a string buffer\r\nfunction statusline()\r\n  local winid = vim.g.statusline_winid\r\n  local bufid = vim.api.nvim_win_get_buf(winid)\r\n  -- start with the filename\r\n  local left = vim.api.nvim_eval_statusline(\"%f\", {winid = winid}).str\r\n  local result \r\n\r\n  local is_modified = vim.api.nvim_get_option_value(\"modified\", { buf = bufid })\r\n  local is_readonly = vim.api.nvim_get_option_value(\"readonly\", { buf = bufid })\r\n  local is_help = vim.api.nvim_get_option_value(\"buftype\", { buf = bufid }) == \"help\"\r\n  local is_preview = vim.api.nvim_get_option_value(\"previewwindow\", { win = winid })\r\n\r\n  -- if the buffer/window is special then prepend a space and add format specifiers\r\n  -- we can't stick %h%w%m%r directly because an extra space is only included if the buffer is special\r\n  if is_modified or is_readonly or is_help or is_preview then\r\n    left = left .. \" \"\r\n  end\r\n\r\n  if is_help then\r\n    left = left .. \"[Help]\"\r\n  end\r\n  if is_preview then\r\n    left = left .. \"[Preview]\"\r\n  end\r\n  if is_modified then\r\n    left = left .. \"[+]\"\r\n  end\r\n  if is_readonly then\r\n    left = left .. \"[RO]\"\r\n  end\r\n\r\n  local is_stl_global = vim.o.statusline == 3\r\n  local stl_width\r\n  if is_stl_global then\r\n    stl_width = vim.o.columns\r\n  else\r\n    stl_width = vim.api.nvim_win_get_width(winid)\r\n  end\r\n\r\n  local ru_col = vim.api.nvim_get_ru_col() -- TODO: not actually part of the API. Just a hacky function I added temporarily for demonstration purposes\r\n  local this_ru_col = math.max(ru_col - (vim.o.columns - stl_width), (stl_width + 1) / 2);\r\n\r\n  if this_ru_col <= 1 then\r\n    left = \"<\" -- no room for file name!\r\n  else\r\n    local len = string.len(left)\r\n    if len >= this_ru_col then\r\n      first_char_idx = len-this_ru_col-1\r\n      left = string.sub(left, first_char_idx)\r\n      left = \"<\" .. left\r\n    end\r\n  end\r\n\r\n  local fillchar\r\n  if winid == vim.api.nvim_get_current_win() then\r\n    fillchar = vim.opt.fillchars:get(\"stl\")\r\n  else\r\n    fillchar = vim.opt.fillchars:get(\"stlnc\")\r\n  end\r\n  -- fallback to \" \" if empty\r\n  if vim.tbl_isempty(fillchar) then\r\n    fillchar = \" \"\r\n  end\r\n\r\n  if vim.o.showcmd and vim.o.showcmdloc == \"statusline\" then\r\n    local showcmd_width = math.min(10, this_ru_col - string.len(left) - 2);\r\n    if showcmd_width > 0 then\r\n      local showcmd_str = vim.api.nvim_eval_statusline(\"%S\", {}).str\r\n      local showcmd_at = this_ru_col-showcmd_width-1\r\n      local padding_needed = showcmd_at-string.len(left) \r\n      result = left .. string.rep(fillchar, padding_needed) .. showcmd_str\r\n    else\r\n      reuslt = left\r\n    end\r\n  else\r\n    result = left\r\n  end\r\n\r\n  -- 'keymap'\r\n  -- TODO: handle case where showcmd_str is allowed to overwrite keymap_name\r\n  local keymap_name = nil\r\n  if vim.b.keymap_name ~= nil then\r\n    keymap_name = vim.api.nvim_eval_statusline(\"%k\", {}).str\r\n    if this_ru_col-string.len(result) > string.len(keymap_name) + 1 then\r\n      local showkeymap_at = this_ru_col - string.len(keymap_name) - 1\r\n      -- padding_needed = -(this_ru_col-padding_needed - showkeymap_at)\r\n      pdding_needed = showkeymap_at-string.len(result)\r\n      result = result .. string.rep(fillchar, padding_needed) .. keymap_name\r\n    end\r\n  end\r\n\r\n  if vim.o.ruler then\r\n    local ruler\r\n    local position = vim.api.nvim_eval_statusline(\"%(%l,%c%V%)\", { winid = windid}).str\r\n    local percentage = vim.api.nvim_eval_statusline(\"%P%%\", { winid = winid }).str\r\n\r\n    -- compute space between ruler and percetnage\r\n    if this_ru_col + string.len(position)+string.len(percentage)+1 < stl_width then -- +1 because at least we need one space\r\n      local padding_needed = stl_width-this_ru_col-string.len(position)-string.len(percentage)+1\r\n      ruler = position .. string.rep(fillchar, padding_needed) .. percentage\r\n    else\r\n      ruler = position\r\n    end\r\n\r\n    local padding_needed = this_ru_col-string.len(result)\r\n    result = result .. string.rep(fillchar, padding_needed) .. ruler\r\n\r\n  end\r\n\r\n  return result\r\n\r\nend\r\n```\r\n\r\nThe `ru_col` api:\r\n\r\n```C\r\nInteger nvim_get_ru_col(void)\r\n  FUNC_API_SINCE(11)\r\n{\r\n  return (Integer) ru_col;\r\n}\r\n```\r\n\r\n--- \r\n\r\nHow should we proceed given this information?\r\n\r\nI think that adding a relatively simple (unlike the above) vimscript/lua function that mimics the C statusline without preserving the same quirks is a sound idea since it will avoid the extra complexity and most users will likely not notice the difference.\r\n\r\n",
            "created_at": "2024-10-12T18:25:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2408652021",
            "id": 2408652021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6PkRz1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408652021/reactions"
            },
            "updated_at": "2024-10-12T18:25:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408652021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think that adding a relatively simple (unlike the above) vimscript/lua function that mimics the C statusline without preserving the same quirks\r\n\r\nYes, that's the main idea. If there are minor differences then it may be acceptable. Moving the C code to a similar or bigger amount of Lua code isn't really useful.\r\n\r\nDoes `v:echospace` help with positioning?",
            "created_at": "2024-10-12T22:48:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2408722129",
            "id": 2408722129,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6Pki7R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408722129/reactions"
            },
            "updated_at": "2024-10-12T22:48:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408722129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Does v:echospace help with positioning?\r\n\r\nI don't think so. `v:echospace` is equivalent to `sc_col-1`, but `sc_col` is independent of `ru_col` when there's a status line.\r\n\r\n---\r\n\r\nWhere should a hypothetical lua statusline live? Right now I have something like this\r\n\r\n```lua\r\nfunction default_statusline()\r\n  local buffer = \"%<%f %h%m%r%=\"\r\n\r\n  local has_showcmd = vim.o.showcmd and vim.o.showcmdloc == \"statusline\"\r\n  local has_keymap = vim.b.keymap_name ~= nil\r\n\r\n  local showcmd = has_showcmd and (has_keymap and \"%-4.S \") or \"%-11.S\" or \"\"\r\n  local keymap = has_keymap and \"%k \" or \"\"\r\n  local ruler = vim.o.ruler and \"%-14.(%l,%c%V%) %P\" or \"\"\r\n\r\n  return buffer .. showcmd .. keymap .. ruler\r\nend\r\n```\r\n\r\nIf we want to maintain the convention that `vim.o.statusline = \"\"` means \"use the default statusline\", then `win_redr_custom()` must call this *lua* function when it finds out that `'statusline'` is empty, but I'm unsure if this is currently possible.",
            "created_at": "2024-10-14T09:40:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2410613544",
            "id": 2410613544,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6Prwso",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2410613544/reactions"
            },
            "updated_at": "2024-10-14T09:40:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2410613544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Where should a hypothetical lua statusline live?\r\n\r\nI guess in `runtime/lua/vim/_defaults.lua`. But the more I think about this, the more I'm leaning towards avoiding that entirely. Instead, can you list (tersely; I can read above for the full details) what currently isn't possible with the `%x` flags in 'statusline' ? And then we need to decide if we want to add new flags to support that, or just drop those \"features\".\r\n\r\nAlso, parts of the \"lua statusline\" you show look like they don't need to be in a function. E.g. the `keymap_name ? %k : ''` expression can be inlined in a 'statusline' expression.\r\n\r\nWhat is blocking us from a self-contained 'statusline' expression instead of a function? That is the goal.",
            "created_at": "2024-10-14T20:00:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2412101135",
            "id": 2412101135,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6Pxb4P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2412101135/reactions"
            },
            "updated_at": "2024-10-14T20:05:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2412101135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">The keymap_name ? %k : '' expression can be inlined in a 'statusline' expression\r\n\r\nI needed a trailing space `\"%k \"` to mimic the C implementation, otherwise it would \"hug\" the ruler part. (Should've been a trailing `fillchar` instead of space now that I think about it).\r\n\r\n> What is blocking us from a self-contained 'statusline' expression instead of a function? That is the goal.\r\n\r\n1) In the C implementation, `'showcmd'` is placed independently of `'keymap'`. See screenshots below. What this means is that the minimum width taken by `\"%S\"` changes depending on the existence of a `'keymap'`.\r\n\r\n![keymap](https://github.com/user-attachments/assets/3c9e97d4-0b26-45a2-bddc-87efc29a38ac)\r\n\r\nFurthermore, the *exact* space between the `'showcmd'` part and `'keymap'` part depends on the *length* of the `b:keymap_name`. See screenshot below.\r\n\r\n![image](https://github.com/user-attachments/assets/759f4ec2-b87f-4910-be12-c7e988602735)\r\n\r\n\r\nSuggestion: maaaybe swap the order of and `'showcmd'` and `'keymap'`. That way the width taken by `'showcmd'` won't be dynamic.\r\n\r\n2) In the C implementation, the `'keymap'` part may be omitted if there's not enough \"room\" for it. See snippet below from `win_redr_status()`. A 'statusline' expression can't conditionally hide it.\r\n\r\n```c\r\nif (get_keymap_str(wp, \"<%s>\", NameBuff, MAXPATHL)\r\n    && this_ru_col - len > (int)strlen(NameBuff) + 1) {\r\n  grid_line_puts(off + this_ru_col - (int)strlen(NameBuff) - 1, NameBuff, -1, attr);\r\n}\r\n```\r\n\r\nSuggestion: Drop \"feature\". Only affects small windows\r\n\r\n3) In the C implementation, the `showcmd` part may be omitted as per the snippet below from `win_redr_status()`.\r\n\r\n```c\r\n// Draw the 'showcmd' information if 'showcmdloc' == \"statusline\".\r\nif (p_sc && *p_sloc == 's') {\r\n  const int sc_width = MIN(10, this_ru_col - len - 2);\r\n\r\n  if (sc_width > 0) {\r\n    grid_line_puts(off + this_ru_col - sc_width - 1, showcmd_buf, sc_width, attr);\r\n  }\r\n}\r\n```\r\n\r\nSuggestion: Drop \"feature\". Only affects small windows\r\n\r\n4) The \"ruler\" part (`\"%-14.(%l,%c%V%) %P\"`) is always shown regardless of the value of `'ruler'`, but the C implementation only adds it if `'ruler'` is set.\r\n\r\n5) The C implementation may call `win_redr_custom()` if the user has set a custom `'rulerformat'`. A 'statusline' expression hard codes the \"ruler\" part.\r\n\r\n6) The `\"%P\"` part (for percentage) is always shown. But in the C implementation, it's only added if there's \"room\" for it. See the condition from `win_redr_ruler()` below.\r\n\r\n7) The padding between `\"%l,%c%V%\"` and `\" %P\"` is normally `14`, but in the C implementation it's dynamically calculated to ensure it doesn't take too much space. See the loop from `win_redr_ruler()` below. [^1].\r\n\r\n[^1]: Here `i` is the length of the `%l,%c%V%` part, and `o` is the length of `%l,%c%V% %P`. We add a `fillchar` every iteration as padding\r\n\r\n```c\r\nint i = (int)strlen(buffer);\r\nget_rel_pos(wp, buffer + i + 1, RULER_BUF_LEN - i - 1);\r\nint o = i + vim_strsize(buffer + i + 1);\r\n\r\n....\r\n\r\n// Never use more than half the window/screen width, leave the other half\r\n// for the filename.\r\nint this_ru_col = MAX(ru_col - (Columns - width), (width + 1) / 2);\r\nif (this_ru_col + o < width) {\r\n  // Need at least 3 chars left for get_rel_pos() + NUL.\r\n  while (this_ru_col + o < width && RULER_BUF_LEN > i + 4) {\r\n    i += (int)schar_get(buffer + i, fillchar);\r\n    o++;\r\n  }\r\n  get_rel_pos(wp, buffer + i, RULER_BUF_LEN - i);\r\n}\r\n```\r\n\r\n---\r\n\r\nI do agree that a 'statusline' expression is ideal. It will make it easier for users to customize it.\r\n",
            "created_at": "2024-10-15T08:08:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2413182950",
            "id": 2413182950,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6P1j_m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2413182950/reactions"
            },
            "updated_at": "2024-10-15T08:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2413182950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Great analysis, thanks. Those compromises don't sound bad to me. Let's start with what can be expressed as a self-contained 'statusline' expression and see how it behaves. If there is a truly needed feature, we can track that as an enhancement to the 'statusline' expressions.\r\n\r\nNote that meanwhile this might break a lot of tests, we'll have to see how many...",
            "created_at": "2024-10-16T13:11:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2416801477",
            "id": 2416801477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6QDXbF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416801477/reactions"
            },
            "updated_at": "2024-10-16T13:11:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2416801477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I used ` \"%<%f %h%m%r%=%-10.S%k %-14.(%l,%c%V%) %P\"` as a start.\r\n\r\n> Those compromises don't sound bad to me\r\n\r\nSame. They mostly impact small windows which I don't think are very common.\r\n\r\n>If there is a truly needed feature, we can track that as an enhancement to the 'statusline' expressions.\r\n\r\nI think the main enhancement we might need involves `'ruler'`. As of now, a self-contained 'statusline' expression will break `'ruler'` (doing `:set noruler` won't actually disable the `\"%(%l,%c%V%) %P\"` part). It also doesn't respect a custom `'rulerformat'`.\r\n\r\n---\r\n\r\nSuggestion: Consider adding a `'ruler'` flag `\"%u\"` (`\"%r\"` is already taken). Maybe something like this: \r\n\r\n1) when \"`ruler\"` is on, `vim.o.statusline = \"%f %u\"` is equivalent to `vim.o.statusline = \"%f \" .. vim.o.rulerformat`.\r\n2) when \"`ruler`\" is off,  `vim.o.statusline = \"%f %u\"` is equivalent to `vim.o.statusline = \"%f \"`. \r\n\r\nAdditionally, If `rulerformat` is empty then fallback to something that resembles the C ruler like `\"%-14.(%l,%c%V%) %P\"`. This will allow us to simplify `win_redr_ruler()` as well since we're essentially getting rid of the C implementation of `ruler`.\r\n\r\nStill, this doesn't solve point 6 and 7 from the above post.\r\n\r\nSide note: I'm not sure how useful is the concept of distinguishing`'rulerformat'` from `'statusline'` but I suppose we have to preserve it for backward compatibility. ",
            "created_at": "2024-10-16T16:18:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2417305586",
            "id": 2417305586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6QFSfy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2417305586/reactions"
            },
            "updated_at": "2024-10-16T16:24:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2417305586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Suggestion: Consider adding a `'ruler'` flag `\"%u\"` (`\"%r\"` is already taken). Maybe something like this: \r\n> 1) when \"`ruler\"` is on, `vim.o.statusline = \"%f %u\"` is equivalent to `vim.o.statusline = \"%f \" .. vim.o.rulerformat`.\r\n\r\nI did something similar except that it respects `ru_col`. This has the desirable side effect that the space taken by 'ruler' is dynamic. With `vim.o.rulerformat = \"%l,%c%V%= %P\"`:\r\n\r\n![image](https://github.com/user-attachments/assets/f8c19ab2-5518-40c9-b689-69e35437eed4)\r\n\r\n![image](https://github.com/user-attachments/assets/e59b7c3d-ffc8-4ef1-a506-d050dbde75e5)\r\n\r\nI believe this fixes point 4, 5 and 7 from the analysis post above.\r\n\r\n---\r\n\r\nImplementation-wise, this adds a little complexity because  \"%u\" recursively calls `build_stl_str_hl()`, but since that function uses static variables, we have to add an offset to ensure the called `build_stl_str_hl()` doesn't overwrite the caller `build_stl_str_hl()`'s static memory.\r\n\r\nIt would be easier to just allocate new memory, but given how frequently this function is called I decided its better to re-use existing memory instead",
            "created_at": "2024-10-20T14:49:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2425023976",
            "id": 2425023976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6Qiu3o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2425023976/reactions"
            },
            "updated_at": "2024-10-20T15:08:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2425023976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can you rebase this? Try `git fetch --all && git merge --squash origin/master`",
            "created_at": "2025-01-27T10:08:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2615327309",
            "id": 2615327309,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6b4rpN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2615327309/reactions"
            },
            "updated_at": "2025-01-27T10:08:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2615327309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://github.com/neovim/neovim/pull/33036",
            "created_at": "2025-04-17T14:49:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/30721#issuecomment-2813196823",
            "id": 2813196823,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
            "node_id": "IC_kwDOAPphoM6nrfoX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813196823/reactions"
            },
            "updated_at": "2025-04-17T14:49:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2813196823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30721/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30721/commits",
    "created_at": "2024-10-08T15:11:07Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30721.diff",
    "draft": true,
    "head": {
        "label": "msaher:statusline-default-dsl",
        "ref": "statusline-default-dsl",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/msaher/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/msaher/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/msaher/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/msaher/neovim/branches{/branch}",
            "clone_url": "https://github.com/msaher/neovim.git",
            "collaborators_url": "https://api.github.com/repos/msaher/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/msaher/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/msaher/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/msaher/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/msaher/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/msaher/neovim/contributors",
            "created_at": "2022-04-27T14:54:51Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/msaher/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/msaher/neovim/downloads",
            "events_url": "https://api.github.com/repos/msaher/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/msaher/neovim/forks",
            "full_name": "msaher/neovim",
            "git_commits_url": "https://api.github.com/repos/msaher/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/msaher/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/msaher/neovim/git/tags{/sha}",
            "git_url": "git://github.com/msaher/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/msaher/neovim/hooks",
            "html_url": "https://github.com/msaher/neovim",
            "id": 486236747,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/msaher/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/msaher/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/msaher/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/msaher/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/msaher/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/msaher/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/msaher/neovim/merges",
            "milestones_url": "https://api.github.com/repos/msaher/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHPtiSw",
            "notifications_url": "https://api.github.com/repos/msaher/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
                "events_url": "https://api.github.com/users/msaher/events{/privacy}",
                "followers_url": "https://api.github.com/users/msaher/followers",
                "following_url": "https://api.github.com/users/msaher/following{/other_user}",
                "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/msaher",
                "id": 77233589,
                "login": "msaher",
                "node_id": "MDQ6VXNlcjc3MjMzNTg5",
                "organizations_url": "https://api.github.com/users/msaher/orgs",
                "received_events_url": "https://api.github.com/users/msaher/received_events",
                "repos_url": "https://api.github.com/users/msaher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/msaher",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/msaher/neovim/pulls{/number}",
            "pushed_at": "2025-04-15T05:27:22Z",
            "releases_url": "https://api.github.com/repos/msaher/neovim/releases{/id}",
            "size": 311372,
            "ssh_url": "git@github.com:msaher/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/msaher/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/msaher/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/msaher/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/msaher/neovim/subscription",
            "svn_url": "https://github.com/msaher/neovim",
            "tags_url": "https://api.github.com/repos/msaher/neovim/tags",
            "teams_url": "https://api.github.com/repos/msaher/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/msaher/neovim/git/trees{/sha}",
            "updated_at": "2025-01-27T10:54:04Z",
            "url": "https://api.github.com/repos/msaher/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6b86a70b23ceef97965ecc65e49b5bc1e08d29bb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
            "events_url": "https://api.github.com/users/msaher/events{/privacy}",
            "followers_url": "https://api.github.com/users/msaher/followers",
            "following_url": "https://api.github.com/users/msaher/following{/other_user}",
            "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/msaher",
            "id": 77233589,
            "login": "msaher",
            "node_id": "MDQ6VXNlcjc3MjMzNTg5",
            "organizations_url": "https://api.github.com/users/msaher/orgs",
            "received_events_url": "https://api.github.com/users/msaher/received_events",
            "repos_url": "https://api.github.com/users/msaher/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/msaher",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30721",
    "id": 2113354176,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30721",
    "labels": [],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM599znA",
    "number": 30721,
    "patch_url": "https://github.com/neovim/neovim/pull/30721.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30721/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6b86a70b23ceef97965ecc65e49b5bc1e08d29bb",
    "title": "feat(statusline): nvim_eval_statusline('') returns default statusline",
    "updated_at": "2025-04-17T14:49:24Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30721",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/77233589?v=4",
        "events_url": "https://api.github.com/users/msaher/events{/privacy}",
        "followers_url": "https://api.github.com/users/msaher/followers",
        "following_url": "https://api.github.com/users/msaher/following{/other_user}",
        "gists_url": "https://api.github.com/users/msaher/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/msaher",
        "id": 77233589,
        "login": "msaher",
        "node_id": "MDQ6VXNlcjc3MjMzNTg5",
        "organizations_url": "https://api.github.com/users/msaher/orgs",
        "received_events_url": "https://api.github.com/users/msaher/received_events",
        "repos_url": "https://api.github.com/users/msaher/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/msaher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/msaher/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/msaher",
        "user_view_type": "public"
    }
}