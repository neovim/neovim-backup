{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/36164/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/36164/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/36164"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/36164"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/36164/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/dc00e69d7697866d8eaf132b7c31f37dc09245a3"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6358,
            "forks_count": 6358,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 2001,
            "open_issues_count": 2001,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-10-14T02:23:27Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 347842,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 93440,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-10-14T02:23:32Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 93440,
            "watchers_count": 93440,
            "web_commit_signoff_required": false
        },
        "sha": "aaec3e5b0dab1e38099abb6371724ab2b199532e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\r\nNon-trivial to write output of vim.net.request to buffer. Currently requires extra\r\ncode in `runtime/plugin/net.lua` which can't be reused by others.\r\n\r\n```lua\r\nvim.net.request('https://neovim.io', {}, vim.schedule_wrap(function(err, res)\r\n  if not err then\r\n    local buf = vim.api.nvim_create_buf(true, false)\r\n    if res then\r\n      local lines = vim.split(res.body, '\\n', { plain = true })\r\n      vim.api.nvim_buf_set_lines(buf, 0, -1, true, lines)\r\n    end\r\n  end\r\nend))\r\n```\r\n\r\nSolution:\r\nAccept an optional `buf` argument to indicate the buffer to write output\r\nto, similar to `outpath`.\r\n\r\n```lua\r\nvim.net.request('https://neovim.io', { outbuf = buf })\r\n```\r\n\r\n---\r\n\r\nIt would be really nice to do this in streaming manner, but I don't think `vim.system` currently supports this? Anyone an idea if this would be possible?\r\n\r\n---\r\n\r\nFixes a couple follow-ups mentioned in #34140:\r\n- [Make plugin/net.lua smaller](https://github.com/neovim/neovim/pull/34140#discussion_r2203512183)\r\n- [Option to cancel requests](https://github.com/neovim/neovim/pull/34140#discussion_r2173754322). @lewis6991 care to review this? I simply added the return value proposed by @tampueroc.\r\n- [vim.net.request.Opts class](https://github.com/neovim/neovim/pull/34140#discussion_r2203509803)\r\n- [vim.validate single calls](https://github.com/neovim/neovim/pull/34140#discussion_r2203509951)\r\n- [Use `(''):format(...)` instead of `..`](https://github.com/neovim/neovim/pull/34140#discussion_r2203513647)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2426832834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2426832834"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "is the description worth it to have two separate autocmd definitions? or should I just combine them?",
            "commit_id": "a7f6ee737fac05f31b23a1f16a32119090b4314f",
            "created_at": "2025-10-13T16:41:39Z",
            "diff_hunk": "@@ -1,43 +1,37 @@\n vim.g.loaded_remote_file_loader = true\n \n---- Callback for BufReadCmd on remote URLs.\n---- @param args { buf: integer }\n-local function on_remote_read(args)\n+local augroup = vim.api.nvim_create_augroup('nvim.net.remotefile', {})\n+local pattern = { 'http://*', 'https://*' }\n+\n+local function request(args)\n   if vim.fn.executable('curl') ~= 1 then\n-    vim.api.nvim_echo({\n-      { 'Warning: `curl` not found; remote URL loading disabled.', 'WarningMsg' },\n-    }, true, {})\n+    vim.notify(\n+      '[vim.net.request]: curl not found; remote URL loading disabled.',\n+      vim.log.levels.WARN\n+    )\n     return true\n   end\n \n-  local bufnr = args.buf\n-  local url = vim.api.nvim_buf_get_name(bufnr)\n-  local view = vim.fn.winsaveview()\n-\n-  vim.api.nvim_echo({ { 'Fetching ' .. url .. ' …', 'MoreMsg' } }, true, {})\n-\n-  vim.net.request(\n-    url,\n-    { retry = 3 },\n-    vim.schedule_wrap(function(err, content)\n-      if err then\n-        vim.notify('Failed to fetch ' .. url .. ': ' .. tostring(err), vim.log.levels.ERROR)\n-        vim.fn.winrestview(view)\n-        return\n-      end\n+  local url = args.file\n+  vim.api.nvim_echo({ { ('Fetching %s …'):format(url), 'MoreMsg' } }, true, {})\n \n-      local lines = vim.split(content.body, '\\n', { plain = true })\n-      vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, lines)\n-\n-      vim.fn.winrestview(view)\n-      vim.api.nvim_echo({ { 'Loaded ' .. url, 'Normal' } }, true, {})\n-    end)\n-  )\n+  vim.net.request(url, { retry = 3, buf = args.buf }, vim.schedule_wrap(function(err, _)\n+    local lvl = err and vim.log.levels.ERROR or vim.log.levels.INFO\n+    local msg = err and ('Failed to fetch %s: %s'):format(url, err) or ('Loaded %s'):format(url)\n+    vim.notify(msg, lvl)\n+  end))\n end\n \n vim.api.nvim_create_autocmd('BufReadCmd', {\n-  group = vim.api.nvim_create_augroup('nvim.net.remotefile', {}),\n-  pattern = { 'http://*', 'https://*' },\n+  group = augroup,\n+  pattern = pattern,\n   desc = 'Edit remote files (:edit https://example.com)',\n-  callback = on_remote_read,\n+  callback = request,\n+})\n+\n+vim.api.nvim_create_autocmd('FileReadCmd', {\n+  group = augroup,\n+  pattern = pattern,\n+  desc = 'Read remote files (:read https://example.com)',\n+  callback = request,\n })",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2426832834",
            "id": 2426832834,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QpofC",
            "original_commit_id": "1775ec60dde74c170a8977c9ee3eea0c0e6dc1f1",
            "original_line": 41,
            "original_position": 68,
            "original_start_line": 32,
            "path": "runtime/plugin/nvim/net.lua",
            "position": 1,
            "pull_request_review_id": 3332309138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2426832834/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-13T16:41:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2426832834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2426834151"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2426834151"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I also considered `outbuf` or similar to be more descriptive. Any opinion on this?",
            "commit_id": "a7f6ee737fac05f31b23a1f16a32119090b4314f",
            "created_at": "2025-10-13T16:42:24Z",
            "diff_hunk": "@@ -1,25 +1,37 @@\n local M = {}\n \n+---@class vim.net.request.Opts\n+---@inlinedoc\n+---\n+---Enables verbose output.\n+---@field verbose boolean?\n+---\n+---Number of retries on transient failures (default: 3).\n+---@field retry integer?\n+---\n+---File path to save the response body to. If set, the `body` value in the\n+---Response Object will be `true` instead of the response body.\n+---@field outpath string?\n+---\n+---Buffer to save the response body to. If set, the `body` value in the\n+---Response Object will be `true` instead of the response body.\n+---@field buf integer?",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2426834151",
            "id": 2426834151,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qpozn",
            "original_commit_id": "1775ec60dde74c170a8977c9ee3eea0c0e6dc1f1",
            "original_line": 18,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 1,
            "pull_request_review_id": 3332310847,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2426834151/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-13T16:42:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2426834151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2427057719"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427057719"
                }
            },
            "author_association": "MEMBER",
            "body": "combine",
            "commit_id": "a7f6ee737fac05f31b23a1f16a32119090b4314f",
            "created_at": "2025-10-13T18:38:01Z",
            "diff_hunk": "@@ -1,43 +1,37 @@\n vim.g.loaded_remote_file_loader = true\n \n---- Callback for BufReadCmd on remote URLs.\n---- @param args { buf: integer }\n-local function on_remote_read(args)\n+local augroup = vim.api.nvim_create_augroup('nvim.net.remotefile', {})\n+local pattern = { 'http://*', 'https://*' }\n+\n+local function request(args)\n   if vim.fn.executable('curl') ~= 1 then\n-    vim.api.nvim_echo({\n-      { 'Warning: `curl` not found; remote URL loading disabled.', 'WarningMsg' },\n-    }, true, {})\n+    vim.notify(\n+      '[vim.net.request]: curl not found; remote URL loading disabled.',\n+      vim.log.levels.WARN\n+    )\n     return true\n   end\n \n-  local bufnr = args.buf\n-  local url = vim.api.nvim_buf_get_name(bufnr)\n-  local view = vim.fn.winsaveview()\n-\n-  vim.api.nvim_echo({ { 'Fetching ' .. url .. ' …', 'MoreMsg' } }, true, {})\n-\n-  vim.net.request(\n-    url,\n-    { retry = 3 },\n-    vim.schedule_wrap(function(err, content)\n-      if err then\n-        vim.notify('Failed to fetch ' .. url .. ': ' .. tostring(err), vim.log.levels.ERROR)\n-        vim.fn.winrestview(view)\n-        return\n-      end\n+  local url = args.file\n+  vim.api.nvim_echo({ { ('Fetching %s …'):format(url), 'MoreMsg' } }, true, {})\n \n-      local lines = vim.split(content.body, '\\n', { plain = true })\n-      vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, lines)\n-\n-      vim.fn.winrestview(view)\n-      vim.api.nvim_echo({ { 'Loaded ' .. url, 'Normal' } }, true, {})\n-    end)\n-  )\n+  vim.net.request(url, { retry = 3, buf = args.buf }, vim.schedule_wrap(function(err, _)\n+    local lvl = err and vim.log.levels.ERROR or vim.log.levels.INFO\n+    local msg = err and ('Failed to fetch %s: %s'):format(url, err) or ('Loaded %s'):format(url)\n+    vim.notify(msg, lvl)\n+  end))\n end\n \n vim.api.nvim_create_autocmd('BufReadCmd', {\n-  group = vim.api.nvim_create_augroup('nvim.net.remotefile', {}),\n-  pattern = { 'http://*', 'https://*' },\n+  group = augroup,\n+  pattern = pattern,\n   desc = 'Edit remote files (:edit https://example.com)',\n-  callback = on_remote_read,\n+  callback = request,\n+})\n+\n+vim.api.nvim_create_autocmd('FileReadCmd', {\n+  group = augroup,\n+  pattern = pattern,\n+  desc = 'Read remote files (:read https://example.com)',\n+  callback = request,\n })",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2427057719",
            "id": 2427057719,
            "in_reply_to_id": 2426832834,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6QqfY3",
            "original_commit_id": "1775ec60dde74c170a8977c9ee3eea0c0e6dc1f1",
            "original_line": 41,
            "original_position": 68,
            "original_start_line": 32,
            "path": "runtime/plugin/nvim/net.lua",
            "position": 1,
            "pull_request_review_id": 3332654656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427057719/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-13T18:38:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427057719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2427058016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427058016"
                }
            },
            "author_association": "MEMBER",
            "body": "`outbuf` seems good because it aligns with `outpath`",
            "commit_id": "a7f6ee737fac05f31b23a1f16a32119090b4314f",
            "created_at": "2025-10-13T18:38:11Z",
            "diff_hunk": "@@ -1,25 +1,37 @@\n local M = {}\n \n+---@class vim.net.request.Opts\n+---@inlinedoc\n+---\n+---Enables verbose output.\n+---@field verbose boolean?\n+---\n+---Number of retries on transient failures (default: 3).\n+---@field retry integer?\n+---\n+---File path to save the response body to. If set, the `body` value in the\n+---Response Object will be `true` instead of the response body.\n+---@field outpath string?\n+---\n+---Buffer to save the response body to. If set, the `body` value in the\n+---Response Object will be `true` instead of the response body.\n+---@field buf integer?",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2427058016",
            "id": 2427058016,
            "in_reply_to_id": 2426834151,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Qqfdg",
            "original_commit_id": "1775ec60dde74c170a8977c9ee3eea0c0e6dc1f1",
            "original_line": 18,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": 1,
            "pull_request_review_id": 3332655028,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427058016/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-13T18:38:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427058016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2427111939"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427111939"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure if `g:loaded_remote_file_loader` has a special meaning (@tampueroc?), but otherwise I'm in favor of changing it to `loaded_nvim_net_plugin`.",
            "commit_id": "dc00e69d7697866d8eaf132b7c31f37dc09245a3",
            "created_at": "2025-10-13T19:08:38Z",
            "diff_hunk": "@@ -1,43 +1,34 @@\n-vim.g.loaded_remote_file_loader = true\n-\n---- Callback for BufReadCmd on remote URLs.\n---- @param args { buf: integer }\n-local function on_remote_read(args)\n-  if vim.fn.executable('curl') ~= 1 then\n-    vim.api.nvim_echo({\n-      { 'Warning: `curl` not found; remote URL loading disabled.', 'WarningMsg' },\n-    }, true, {})\n-    return true\n-  end\n-\n-  local bufnr = args.buf\n-  local url = vim.api.nvim_buf_get_name(bufnr)\n-  local view = vim.fn.winsaveview()\n-\n-  vim.api.nvim_echo({ { 'Fetching ' .. url .. ' …', 'MoreMsg' } }, true, {})\n-\n-  vim.net.request(\n-    url,\n-    { retry = 3 },\n-    vim.schedule_wrap(function(err, content)\n-      if err then\n-        vim.notify('Failed to fetch ' .. url .. ': ' .. tostring(err), vim.log.levels.ERROR)\n-        vim.fn.winrestview(view)\n-        return\n-      end\n-\n-      local lines = vim.split(content.body, '\\n', { plain = true })\n-      vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, lines)\n-\n-      vim.fn.winrestview(view)\n-      vim.api.nvim_echo({ { 'Loaded ' .. url, 'Normal' } }, true, {})\n-    end)\n-  )\n+if vim.g.loaded_nvim_net_plugin ~= nil then",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2427111939",
            "id": 2427111939,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6QqsoD",
            "original_commit_id": "9e86ea1ddde7d5ce588569def6e6fa8199342620",
            "original_line": 1,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/plugin/nvim/net.lua",
            "position": 36,
            "pull_request_review_id": 3332728157,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427111939/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-13T19:08:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427111939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2427164191"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427164191"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yeah, I'm in favor of changing it. Don't think there should be any downstream conflicts.",
            "commit_id": "dc00e69d7697866d8eaf132b7c31f37dc09245a3",
            "created_at": "2025-10-13T19:35:19Z",
            "diff_hunk": "@@ -1,43 +1,34 @@\n-vim.g.loaded_remote_file_loader = true\n-\n---- Callback for BufReadCmd on remote URLs.\n---- @param args { buf: integer }\n-local function on_remote_read(args)\n-  if vim.fn.executable('curl') ~= 1 then\n-    vim.api.nvim_echo({\n-      { 'Warning: `curl` not found; remote URL loading disabled.', 'WarningMsg' },\n-    }, true, {})\n-    return true\n-  end\n-\n-  local bufnr = args.buf\n-  local url = vim.api.nvim_buf_get_name(bufnr)\n-  local view = vim.fn.winsaveview()\n-\n-  vim.api.nvim_echo({ { 'Fetching ' .. url .. ' …', 'MoreMsg' } }, true, {})\n-\n-  vim.net.request(\n-    url,\n-    { retry = 3 },\n-    vim.schedule_wrap(function(err, content)\n-      if err then\n-        vim.notify('Failed to fetch ' .. url .. ': ' .. tostring(err), vim.log.levels.ERROR)\n-        vim.fn.winrestview(view)\n-        return\n-      end\n-\n-      local lines = vim.split(content.body, '\\n', { plain = true })\n-      vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, lines)\n-\n-      vim.fn.winrestview(view)\n-      vim.api.nvim_echo({ { 'Loaded ' .. url, 'Normal' } }, true, {})\n-    end)\n-  )\n+if vim.g.loaded_nvim_net_plugin ~= nil then",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2427164191",
            "id": 2427164191,
            "in_reply_to_id": 2427111939,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6Qq5Yf",
            "original_commit_id": "9e86ea1ddde7d5ce588569def6e6fa8199342620",
            "original_line": 1,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/plugin/nvim/net.lua",
            "position": 36,
            "pull_request_review_id": 3332802289,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427164191/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-13T19:35:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427164191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2427347080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427347080"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Noticed the error-return value is the other way around commpared to |dev-error-patterns|. Should I change it? (would be a breaking change)",
            "commit_id": "dc00e69d7697866d8eaf132b7c31f37dc09245a3",
            "created_at": "2025-10-13T21:17:56Z",
            "diff_hunk": "@@ -3946,27 +3946,58 @@ Lua module: vim.net                                                  *vim.net*\n vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n     Makes an HTTP GET request to the given URL (asynchronous).\n \n-    This function operates in one mode:\n-    • Asynchronous (non-blocking): Returns immediately and passes the response\n-      object to the provided `on_response` handler on completion.\n+    This function is asynchronous (non-blocking), returning immediately and\n+    passing the response object to the optional `on_response` handler on\n+    completion.\n+\n+    Examples: >lua\n+        -- Write to response to file\n+        vim.net.request('https://neovim.io/charter/', {\n+          outpath = 'vision.html',\n+        })\n+\n+        -- Process the response\n+        vim.net.request(\n+          'https://api.github.com/repos/neovim/neovim',\n+          {},\n+          function (err, res)\n+            if err then return end\n+            local stars = vim.json.decode(res.body).stargazers_count\n+            vim.print(('Neovim currently has %d stars'):format(stars))\n+          end\n+        )\n+\n+        -- Write to both file and current buffer, but cancel it\n+        local job = vim.net.request('https://neovim.io/charter/', {\n+          outpath = 'vision.html',\n+          outbuf = 0,\n+        })\n+        job:cancel()\n+<\n \n     Parameters: ~\n       • {url}          (`string`) The URL for the request.\n-      • {opts}         (`table?`) Optional parameters:\n-                       • `verbose` (boolean|nil): Enables verbose output.\n-                       • `retry` (integer|nil): Number of retries on transient\n+      • {opts}         (`table?`) A table with the following fields:\n+                       • {verbose} (`boolean?`) Enables verbose output.\n+                       • {retry} (`integer?`) Number of retries on transient\n                          failures (default: 3).\n-                       • `outpath` (string|nil): File path to save the\n-                         response body to. If set, the `body` value in the\n-                         Response Object will be `true` instead of the\n-                         response body.\n-      • {on_response}  (`fun(err?: string, response?: { body: string|boolean })`)\n+                       • {outpath} (`string?`) File path to save the response\n+                         body to. If set, the `body` value in the Response\n+                         Object will be `true` instead of the response body.\n+                       • {outbuf} (`integer?`) Buffer to save the response\n+                         body to. If set, the `body` value in the Response\n+                         Object will be `true` instead of the response body.\n+      • {on_response}  (`fun(err: string?, response: { body: string|boolean }?)?`)\n                        Callback invoked on request completion. The `body`\n                        field in the response object contains the raw response\n-                       data (text or binary). Called with (err, nil) on\n-                       failure, or (nil, { body = string|boolean }) on\n+                       data (text or binary). Called with `(err, nil)` on\n+                       failure, or `(nil, { body = string|boolean })` on",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2427347080",
            "id": 2427347080,
            "line": 3994,
            "node_id": "PRRC_kwDOAPphoM6QrmCI",
            "original_commit_id": "962e1cec3544d93a379969cb47cc08537aed875f",
            "original_line": 3994,
            "original_position": 62,
            "original_start_line": 3990,
            "path": "runtime/doc/lua.txt",
            "position": 62,
            "pull_request_review_id": 3333062618,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427347080/reactions"
            },
            "side": "RIGHT",
            "start_line": 3990,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-13T21:17:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427347080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36164#discussion_r2427579767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36164"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427579767"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't actually know if there is a finalized pattern for passing an error to a callback, but I think usually err is passed as the first arg. paging @lewis6991 @mfussenegger \r\n\r\nrelated?: https://github.com/neovim/neovim/pull/34140#discussion_r2173754322",
            "commit_id": "dc00e69d7697866d8eaf132b7c31f37dc09245a3",
            "created_at": "2025-10-14T00:01:16Z",
            "diff_hunk": "@@ -3946,27 +3946,58 @@ Lua module: vim.net                                                  *vim.net*\n vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n     Makes an HTTP GET request to the given URL (asynchronous).\n \n-    This function operates in one mode:\n-    • Asynchronous (non-blocking): Returns immediately and passes the response\n-      object to the provided `on_response` handler on completion.\n+    This function is asynchronous (non-blocking), returning immediately and\n+    passing the response object to the optional `on_response` handler on\n+    completion.\n+\n+    Examples: >lua\n+        -- Write to response to file\n+        vim.net.request('https://neovim.io/charter/', {\n+          outpath = 'vision.html',\n+        })\n+\n+        -- Process the response\n+        vim.net.request(\n+          'https://api.github.com/repos/neovim/neovim',\n+          {},\n+          function (err, res)\n+            if err then return end\n+            local stars = vim.json.decode(res.body).stargazers_count\n+            vim.print(('Neovim currently has %d stars'):format(stars))\n+          end\n+        )\n+\n+        -- Write to both file and current buffer, but cancel it\n+        local job = vim.net.request('https://neovim.io/charter/', {\n+          outpath = 'vision.html',\n+          outbuf = 0,\n+        })\n+        job:cancel()\n+<\n \n     Parameters: ~\n       • {url}          (`string`) The URL for the request.\n-      • {opts}         (`table?`) Optional parameters:\n-                       • `verbose` (boolean|nil): Enables verbose output.\n-                       • `retry` (integer|nil): Number of retries on transient\n+      • {opts}         (`table?`) A table with the following fields:\n+                       • {verbose} (`boolean?`) Enables verbose output.\n+                       • {retry} (`integer?`) Number of retries on transient\n                          failures (default: 3).\n-                       • `outpath` (string|nil): File path to save the\n-                         response body to. If set, the `body` value in the\n-                         Response Object will be `true` instead of the\n-                         response body.\n-      • {on_response}  (`fun(err?: string, response?: { body: string|boolean })`)\n+                       • {outpath} (`string?`) File path to save the response\n+                         body to. If set, the `body` value in the Response\n+                         Object will be `true` instead of the response body.\n+                       • {outbuf} (`integer?`) Buffer to save the response\n+                         body to. If set, the `body` value in the Response\n+                         Object will be `true` instead of the response body.\n+      • {on_response}  (`fun(err: string?, response: { body: string|boolean }?)?`)\n                        Callback invoked on request completion. The `body`\n                        field in the response object contains the raw response\n-                       data (text or binary). Called with (err, nil) on\n-                       failure, or (nil, { body = string|boolean }) on\n+                       data (text or binary). Called with `(err, nil)` on\n+                       failure, or `(nil, { body = string|boolean })` on",
            "html_url": "https://github.com/neovim/neovim/pull/36164#discussion_r2427579767",
            "id": 2427579767,
            "in_reply_to_id": 2427347080,
            "line": 3994,
            "node_id": "PRRC_kwDOAPphoM6Qse13",
            "original_commit_id": "962e1cec3544d93a379969cb47cc08537aed875f",
            "original_line": 3994,
            "original_position": 62,
            "original_start_line": 3990,
            "path": "runtime/doc/lua.txt",
            "position": 62,
            "pull_request_review_id": 3333429582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427579767/reactions"
            },
            "side": "RIGHT",
            "start_line": 3990,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-14T00:03:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2427579767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Nice to see this. Buffers should be a ubiquitous concept accepted by any function that can write output. Similar to how URIs should be accepted wherever a filepath is accepted.\r\n\r\nEventually we should think about how to make this more pervasive, but this is a good step for now, thanks!",
            "created_at": "2025-10-13T18:40:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/36164#issuecomment-3398652946",
            "id": 3398652946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36164",
            "node_id": "IC_kwDOAPphoM7Kk1QS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3398652946/reactions"
            },
            "updated_at": "2025-10-13T18:40:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3398652946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Buffers should be a ubiquitous concept accepted by any function that can write output.\r\n\r\nYes, I agree. Initially also thought about changing `outpath`/`outbuf` to simply `out` that can be an integer (buffer) or string (filepath), but didn't do it bc I didn't see the pattern anywhere else. Would be nice though.",
            "created_at": "2025-10-13T20:12:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/36164#issuecomment-3398921954",
            "id": 3398921954,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36164",
            "node_id": "IC_kwDOAPphoM7Kl27i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3398921954/reactions"
            },
            "updated_at": "2025-10-13T20:12:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3398921954",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/36164/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/36164/commits",
    "created_at": "2025-10-13T16:22:00Z",
    "diff_url": "https://github.com/neovim/neovim/pull/36164.diff",
    "draft": true,
    "head": {
        "label": "yochem:net-request-fixes",
        "ref": "net-request-fixes",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/yochem/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/yochem/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/yochem/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/yochem/neovim/branches{/branch}",
            "clone_url": "https://github.com/yochem/neovim.git",
            "collaborators_url": "https://api.github.com/repos/yochem/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/yochem/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/yochem/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/yochem/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/yochem/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/yochem/neovim/contributors",
            "created_at": "2023-03-13T14:39:08Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/yochem/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/yochem/neovim/downloads",
            "events_url": "https://api.github.com/repos/yochem/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/yochem/neovim/forks",
            "full_name": "yochem/neovim",
            "git_commits_url": "https://api.github.com/repos/yochem/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/yochem/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/yochem/neovim/git/tags{/sha}",
            "git_url": "git://github.com/yochem/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/yochem/neovim/hooks",
            "html_url": "https://github.com/yochem/neovim",
            "id": 613421928,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/yochem/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/yochem/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/yochem/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/yochem/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/yochem/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/yochem/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/yochem/neovim/merges",
            "milestones_url": "https://api.github.com/repos/yochem/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOJJATaA",
            "notifications_url": "https://api.github.com/repos/yochem/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/yochem/neovim/pulls{/number}",
            "pushed_at": "2025-10-13T21:40:21Z",
            "releases_url": "https://api.github.com/repos/yochem/neovim/releases{/id}",
            "size": 339707,
            "ssh_url": "git@github.com:yochem/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/yochem/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/yochem/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/yochem/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/yochem/neovim/subscription",
            "svn_url": "https://github.com/yochem/neovim",
            "tags_url": "https://api.github.com/repos/yochem/neovim/tags",
            "teams_url": "https://api.github.com/repos/yochem/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/yochem/neovim/git/trees{/sha}",
            "updated_at": "2025-09-21T20:06:11Z",
            "url": "https://api.github.com/repos/yochem/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "dc00e69d7697866d8eaf132b7c31f37dc09245a3",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
            "events_url": "https://api.github.com/users/yochem/events{/privacy}",
            "followers_url": "https://api.github.com/users/yochem/followers",
            "following_url": "https://api.github.com/users/yochem/following{/other_user}",
            "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/yochem",
            "id": 23235841,
            "login": "yochem",
            "node_id": "MDQ6VXNlcjIzMjM1ODQx",
            "organizations_url": "https://api.github.com/users/yochem/orgs",
            "received_events_url": "https://api.github.com/users/yochem/received_events",
            "repos_url": "https://api.github.com/users/yochem/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/yochem",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/36164",
    "id": 2910787312,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36164",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "b8ee98daddd8f6f017f030c83ead937c290ccf1f",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6tfxbw",
    "number": 36164,
    "patch_url": "https://github.com/neovim/neovim/pull/36164.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/36164/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/dc00e69d7697866d8eaf132b7c31f37dc09245a3",
    "title": "Add output buffer option to vim.net.request",
    "updated_at": "2025-10-14T00:01:16Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/36164",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
        "events_url": "https://api.github.com/users/yochem/events{/privacy}",
        "followers_url": "https://api.github.com/users/yochem/followers",
        "following_url": "https://api.github.com/users/yochem/following{/other_user}",
        "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yochem",
        "id": 23235841,
        "login": "yochem",
        "node_id": "MDQ6VXNlcjIzMjM1ODQx",
        "organizations_url": "https://api.github.com/users/yochem/orgs",
        "received_events_url": "https://api.github.com/users/yochem/received_events",
        "repos_url": "https://api.github.com/users/yochem/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yochem",
        "user_view_type": "public"
    }
}