{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/10854/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/10854/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/10854"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/10854"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/10854/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/10854"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/72973d044d0af230f2d516832803df57b172c313"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6168,
            "forks_count": 6168,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1965,
            "open_issues_count": 1965,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-08T01:56:22Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332418,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90922,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-08T02:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90922,
            "watchers_count": 90922,
            "web_commit_signoff_required": false
        },
        "sha": "6a21fe9fd16cfedc87b58064d09218e5c06ddd89",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Latest failure for that test:\r\n```\r\n[ RUN      ] shell command :! throttles shell-command output greater than ~10KB: \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\n486.75 ms ERR\r\ntest/functional/ui/screen.lua:587: Failed to match any screen lines.\r\nExpected (anywhere): \"\r\n%.\"\r\nActual:\r\n  |1096: foo                                         |\r\n  |1097: foo                                         |\r\n  |1098: foo                                         |\r\n  |1099: foo                                         |\r\n  |[...]                                             |\r\n  |                                                  |\r\n  |{3:-- TERMINAL --}                                    |\r\nstack traceback:\r\n\ttest/functional/ui/screen.lua:587: in function '_wait'\r\n\ttest/functional/ui/screen.lua:370: in function 'expect'\r\n\ttest/functional/ui/output_spec.lua:61: in function <test/functional/ui/output_spec.lua:52>\r\n```\r\n(https://travis-ci.org/neovim/neovim/jobs/594313045#L6551)",
    "closed_at": "2025-07-02T08:51:26Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Failed:\r\n```\r\nRepeating all tests (run 92 of 200) . . .\r\n[----------] Global test environment setup.\r\n[----------] Running tests from test/functional/ui/output_spec.lua\r\n[ RUN      ] shell command :! displays output without LF/EOF. #4646 #4569 #3772: 13.97 ms OK\r\n[ RUN      ] shell command :! throttles shell-command output greater than ~10KB: \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nERR\r\ntest/functional/ui/screen.lua:581: Failed to match any screen lines.\r\nExpected (anywhere): \"\r\n%.\"\r\nActual:\r\n  |572: foo                                          |\r\n  |573: foo                                          |\r\n  |574: foo                                          |\r\n  |575: foo                                          |\r\n  |                                                  |\r\n  |                                                  |\r\n  |{3:-- TERMINAL --}                                    |\r\nstack traceback:\r\n\ttest/functional/ui/screen.lua:581: in function '_wait'\r\n\ttest/functional/ui/screen.lua:368: in function 'expect'\r\n\ttest/functional/ui/output_spec.lua:57: in function <test/functional/ui/output_spec.lua:52>\r\n[----------] 2 tests from test/functional/ui/output_spec.lua (306.00 ms total)\r\n```\r\n\r\nHow/why does it fail after ~300ms when it should wait for 20s though?\r\n(https://github.com/blueyed/neovim/blob/7ada6209e142816f4d5cbc3de3ac1cc314824968/test/functional/ui/output_spec.lua#L57)",
            "created_at": "2019-08-26T12:37:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524843300",
            "id": 524843300,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDg0MzMwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524843300/reactions"
            },
            "updated_at": "2019-08-26T12:37:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524843300",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The failure looks like it matched the \".\", but then tested again afterwards, where it was removed (temporarily), and `failure_after_success` gets set then..",
            "created_at": "2019-08-26T13:09:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524853915",
            "id": 524853915,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDg1MzkxNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524853915/reactions"
            },
            "updated_at": "2019-08-26T13:09:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524853915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Alternatively/additionally something like this might be useful, to display a dot always:\r\n```diff\r\ndiff --git i/src/nvim/os/shell.c w/src/nvim/os/shell.c\r\nindex 19d199f4d..79f6602eb 100644\r\n--- i/src/nvim/os/shell.c\r\n+++ w/src/nvim/os/shell.c\r\n@@ -390,7 +390,7 @@ static bool out_data_decide_throttle(size_t size)\r\n   static uint64_t   started     = 0;  // Start time of the current throttle.\r\n   static size_t     received    = 0;  // Bytes observed since last throttle.\r\n   static size_t     visit       = 0;  // \"Pulse\" count of the current throttle.\r\n-  static char       pulse_msg[] = { ' ', ' ', ' ', '\\0' };\r\n+  static char       pulse_msg[] = { '.', ' ', ' ', '\\0' };\r\n\r\n   if (!size) {\r\n     bool previous_decision = (visit > 0);\r\n@@ -418,7 +418,6 @@ static bool out_data_decide_throttle(size_t size)\r\n   size_t tick = (visit % 20 == 0)\r\n                 ? 3  // Force all dots \"...\" on last visit.\r\n                 : (visit % 4);\r\n-  pulse_msg[0] = (tick == 0) ? ' ' : '.';\r\n   pulse_msg[1] = (tick == 0 || 1 == tick) ? ' ' : '.';\r\n   pulse_msg[2] = (tick == 0 || 1 == tick || 2 == tick) ? ' ' : '.';\r\n   if (visit == 1) {\r\n```",
            "created_at": "2019-08-26T13:23:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524858426",
            "id": 524858426,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDg1ODQyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524858426/reactions"
            },
            "updated_at": "2019-08-26T13:23:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524858426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "With retry:\r\n```\r\nRepeating all tests (run 97 of 200) . . .\r\n[----------] Global test environment setup.\r\n[----------] Running tests from test/functional/ui/output_spec.lua\r\n[ RUN      ] shell command :! displays output without LF/EOF. #4646 #4569 #3772: 15.37 ms OK\r\n[ RUN      ] shell command :! throttles shell-command output greater than ~10KB: \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nERR\r\ntest/functional/helpers.lua:403: \r\nretry() attempts: 4\r\ntest/functional/ui/screen.lua:581: Failed to match any screen lines.\r\nExpected (anywhere): \"\r\n%.\"\r\nActual:\r\n  |29997: foo                                        |\r\n  |29998: foo                                        |\r\n  |29999: foo                                        |\r\n  |30000: foo                                        |\r\n  |                                                  |\r\n  |{UNEXPECTED foreground = tonumber('0x000002'):Press ENTER or type command to continue}{1: }          |\r\n  |{3:-- TERMINAL --}                                    |\r\nstack traceback:\r\n\ttest/functional/helpers.lua:403: in function 'retry'\r\n\ttest/functional/ui/output_spec.lua:58: in function <test/functional/ui/output_spec.lua:53>\r\n```",
            "created_at": "2019-08-26T13:24:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524858792",
            "id": 524858792,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDg1ODc5Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524858792/reactions"
            },
            "updated_at": "2019-08-26T13:24:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524858792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The main issue here appears to be though that `any` should (optionally) not check for later changes I guess.",
            "created_at": "2019-08-26T13:25:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524859172",
            "id": 524859172,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDg1OTE3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524859172/reactions"
            },
            "updated_at": "2019-08-26T13:25:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524859172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Latest:\r\n```\r\nRepeating all tests (run 97 of 200) . . .\r\n[----------] Global test environment setup.\r\n[----------] Running tests from test/functional/ui/output_spec.lua\r\n[ RUN      ] shell command :! displays output without LF/EOF. #4646 #4569 #3772: 15.37 ms OK\r\n[ RUN      ] shell command :! throttles shell-command output greater than ~10KB: \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nERR\r\ntest/functional/helpers.lua:403: \r\nretry() attempts: 4\r\ntest/functional/ui/screen.lua:581: Failed to match any screen lines.\r\nExpected (anywhere): \"\r\n%.\"\r\nActual:\r\n  |29997: foo                                        |\r\n  |29998: foo                                        |\r\n  |29999: foo                                        |\r\n  |30000: foo                                        |\r\n  |                                                  |\r\n  |{UNEXPECTED foreground = tonumber('0x000002'):Press ENTER or type command to continue}{1: }          |\r\n  |{3:-- TERMINAL --}                                    |\r\nstack traceback:\r\n\ttest/functional/helpers.lua:403: in function 'retry'\r\n\ttest/functional/ui/output_spec.lua:58: in function <test/functional/ui/output_spec.lua:53>\r\n[----------] 2 tests from test/functional/ui/output_spec.lua (21824.55 ms total)\r\n[----------] Global test environment teardown.\r\n------------------------------------------------------------------------------\r\n$NVIM_LOG_FILE: /Users/travis/build/neovim/neovim/build/.nvimlog\r\n(empty)\r\n------------------------------------------------------------------------------\r\n[==========] 2 tests from 1 test file ran. (21824.71 ms total)\r\n```\r\nSuspicious that's around 95 always (some global state kept when repeating?!).\r\nAt least it took > 20s now.",
            "created_at": "2019-08-26T15:13:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524900776",
            "id": 524900776,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDkwMDc3Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524900776/reactions"
            },
            "updated_at": "2019-08-26T15:13:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524900776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The main issue here appears to be though that `any` should (optionally) not check for later changes I guess.\r\n\r\nI think there should be something that does not fail due to later changes.\r\n/cc @bfredl ",
            "created_at": "2019-08-26T15:14:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524901094",
            "id": 524901094,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDkwMTA5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524901094/reactions"
            },
            "updated_at": "2019-08-26T15:14:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524901094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > The main issue here appears to be though that `any` should (optionally) not check for later changes I guess.\r\n> \r\n> I think there should be something that does not fail due to later changes.\r\n\r\nThat is the intended semantics of `any` so I think it's fine to just change `any` to work like that.\r\n",
            "created_at": "2019-08-26T15:29:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524906907",
            "id": 524906907,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDkwNjkwNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524906907/reactions"
            },
            "updated_at": "2019-08-26T15:29:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524906907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That is the intended semantics of any so I think it's fine to just change any to work like that.\r\n\r\nThe meaning of `any` is to check that a string is visible on a part of the grid instead of the entire grid. The question of checking a intermediate state instead of the final state is completely orthogonal to that, and should be a separate flag. I do not see any value in needlessly entangling the two. In particular external state will now become final with full grid _or_ no grid at all, but suddenly instead intermediate if partial grid is used.",
            "created_at": "2019-08-26T15:47:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524913862",
            "id": 524913862,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDkxMzg2Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524913862/reactions"
            },
            "updated_at": "2019-08-26T15:47:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524913862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl \r\nShould we have a general flag then that allows to pass with intermediate states?\r\n(the existing `intermediate` is something else, right?)",
            "created_at": "2019-08-26T15:50:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524915312",
            "id": 524915312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDkxNTMxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524915312/reactions"
            },
            "updated_at": "2019-08-26T15:50:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524915312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "yes, maybe the existing `intermediate` flag name is a bit unfortunate, it really means `unchanged_with_intermediate`, which I probably thought was to long. ",
            "created_at": "2019-08-26T15:55:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-524917182",
            "id": 524917182,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDkxNzE4Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524917182/reactions"
            },
            "updated_at": "2019-08-26T15:55:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/524917182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Last:\r\n```\r\nRepeating all tests (run 158 of 200) . . .\r\n[----------] Global test environment setup.\r\n[----------] Running tests from test/functional/ui/output_spec.lua\r\n[ RUN      ] shell command :! displays output without LF/EOF. #4646 #4569 #3772: 44.05 ms OK\r\n[ RUN      ] shell command :! throttles shell-command output greater than ~10KB: \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nwarning: Screen changes were received after the expected state. This indicates\r\nindeterminism in the test. Try adding screen:expect(...) (or wait()) between\r\nasynchronous (feed(), nvim_input()) and synchronous API calls.\r\n  - Use screen:redraw_debug() to investigate; it may find relevant intermediate\r\n    states that should be added to the test to make it more robust.\r\n  - If the purpose of the test is to assert state after some user input sent\r\n    with feed(), adding screen:expect() before the feed() will help to ensure\r\n    the input is sent when Nvim is in a predictable state. This is preferable\r\n    to wait(), for being closer to real user interaction.\r\n  - wait() can trigger redraws and consequently generate more indeterminism.\r\n    Try removing wait().\r\n      \r\nERR\r\ntest/functional/helpers.lua:403: \r\nretry() attempts: 4\r\ntest/functional/ui/screen.lua:581: Failed to match any screen lines.\r\nExpected (anywhere): \"\r\n%.\"\r\nActual:\r\n  |3456789                                           |\r\n  |30000: 0123456789012345678901234567890123456789012|\r\n  |34567890123456789012345678901234567890123456789012|\r\n  |3456789                                           |\r\n  |                                                  |\r\n  |{UNEXPECTED foreground = tonumber('0x000002'):Press ENTER or type command to continue}{1: }          |\r\n  |{3:-- TERMINAL --}                                    |\r\nstack traceback:\r\n\ttest/functional/helpers.lua:403: in function 'retry'\r\n\ttest/functional/ui/output_spec.lua:58: in function <test/functional/ui/output_spec.lua:53>\r\n[----------] 2 tests from test/functional/ui/output_spec.lua (21723.76 ms total)\r\n```",
            "created_at": "2019-08-27T00:34:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525086030",
            "id": 525086030,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTA4NjAzMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525086030/reactions"
            },
            "updated_at": "2019-08-27T00:34:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525086030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> yes, maybe the existing `intermediate` flag name is a bit unfortunate, it really means `unchanged_with_intermediate`, which I probably thought was to long.\r\n\r\nCurrently there is:\r\n```\r\n  if flags.intermediate and flags.unchanged then\r\n    error(\"Choose only one of 'intermediate' and 'unchanged', not both\")\r\n  end\r\n```\r\nI.e. we could have the current behavior be described by specifying `unchanged=true, intermediate=true` (instead of renaming it to `unchanged_with_intermediate` - this could be used internally then only).\r\nAnd this test here would then use only `intermediate=true` maybe.\r\n\r\nBut using `unchanged_with_intermediate` explicitly might be better.  And then the new one (here) could be named `intermediate_ok` or similar.\r\n\r\nHowever, it seems that it appears to be still flaky given what `intermediate_ok=true` would do (last failure).",
            "created_at": "2019-08-27T00:45:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525088149",
            "id": 525088149,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTA4ODE0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525088149/reactions"
            },
            "updated_at": "2019-08-27T00:45:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525088149",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not sure I like `unchanged=true, intermediate=true`, I think there should be one flag for `unchanged_with_intermediate` (where the supplied state still should be the final one), but it could have a shorter name. Then another flag for when the supplied state itself is allowed to be intermediate, I was thinking of calling it `allow_failure_after` rather or something (because the state doesn't have to be intermediate, we just allow failed states after it).",
            "created_at": "2019-08-27T10:13:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525236703",
            "id": 525236703,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTIzNjcwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525236703/reactions"
            },
            "updated_at": "2019-08-27T10:13:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525236703",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`unchanged=x, intermediate=x` makes the most sense to me. \r\n\r\n- `unchanged=true, intermediate=true` means \"final state looks the same, ignore temporary changes\"\r\n- `unchanged=true, intermediate=false` means \"final state and intermediate states must not change\"\r\n- `unchanged=false, intermediate=false` is the existing/default behavior\r\n- `unchanged=false, intermediate=true` is not implemented, probably not needed, so just guard it with an assert.\r\n\r\nAdding more flags would mean more combinations, most of which are nonsense.",
            "created_at": "2019-08-27T10:25:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525240525",
            "id": 525240525,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI0MDUyNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525240525/reactions"
            },
            "updated_at": "2019-08-27T10:26:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525240525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "But then rather that `unchanged=false, intermediate=true` doesn't mean anything to start with, because `intermediate` is a sub-flag that modifies `unchanged` behaivor. ",
            "created_at": "2019-08-27T10:29:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525241820",
            "id": 525241820,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI0MTgyMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525241820/reactions"
            },
            "updated_at": "2019-08-27T10:29:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525241820",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Adding more flags would mean more combinations, most of which are nonsense.\r\n\r\nBut the alternative never was to add \"more flags\", rather just rename the `intermediate` flag.",
            "created_at": "2019-08-27T10:34:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525243381",
            "id": 525243381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI0MzM4MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525243381/reactions"
            },
            "updated_at": "2019-08-27T10:34:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525243381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> But the alternative never was to add \"more flags\", rather just rename the `intermediate` flag.\r\n\r\nOne new flag would be needed though (`allow_failure_after`).\r\n\r\nBut it does not seem to be the problem with https://github.com/neovim/neovim/pull/10854#issuecomment-524843300 after all - it should only be a warning after all, not cause it to fail.  (still good to have a way to suppress this warning then)",
            "created_at": "2019-08-27T11:21:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525257506",
            "id": 525257506,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI1NzUwNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525257506/reactions"
            },
            "updated_at": "2019-08-27T11:21:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525257506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> One new flag would be needed though (allow_failure_after).\r\n\r\nThis was about `unchanged_with_intermediate=true` versus `unchanged=true, intermediate=true` (versus doing nothing about it) only. The former does not need \"more flags\" than the later, as a flag is only renamed. Whether `allow_failure_after` should be added is a separate decision, which depends only on if we want that particular functionality or not.",
            "created_at": "2019-08-27T11:40:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525263021",
            "id": 525263021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI2MzAyMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525263021/reactions"
            },
            "updated_at": "2019-08-27T11:40:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525263021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Doesn't `unchanged=x, intermediate=x` allow us to support `allow_failure_after` without actually adding the `allow_failure_after` flag?",
            "created_at": "2019-08-27T12:17:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525274513",
            "id": 525274513,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI3NDUxMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525274513/reactions"
            },
            "updated_at": "2019-08-27T12:17:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525274513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No, none of `unchanged=x, intermediate=x` is about changing the meaning of the asserted state. They still expect the final state to be the supplied one, and only change what is allowed/expected _before_ that. Cramming in `allow_failure_after` as a special combination of those seems like flag tetris to me. It is an entire new behavior, and should have a dedicated flag if supported.",
            "created_at": "2019-08-27T12:21:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525275800",
            "id": 525275800,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI3NTgwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525275800/reactions"
            },
            "updated_at": "2019-08-27T12:21:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525275800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`any_intermediate` ?",
            "created_at": "2019-08-27T12:52:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525286584",
            "id": 525286584,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI4NjU4NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525286584/reactions"
            },
            "updated_at": "2019-08-27T12:52:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525286584",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "maybe, but `allow_failure_after` sounds less ambiguous to me. Though maybe \"allow failure\"  reads as an oxymoron, perhaps `allow_nonmatching_after` ?",
            "created_at": "2019-08-27T13:00:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-525289879",
            "id": 525289879,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTI4OTg3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525289879/reactions"
            },
            "updated_at": "2019-08-27T13:00:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/525289879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`screen.lua` has seen a lot of improvements since then.",
            "created_at": "2025-07-02T08:51:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/10854#issuecomment-3027015386",
            "id": 3027015386,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
            "node_id": "IC_kwDOAPphoM60bJba",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3027015386/reactions"
            },
            "updated_at": "2025-07-02T08:51:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3027015386",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/10854/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/10854/commits",
    "created_at": "2019-08-26T11:54:37Z",
    "diff_url": "https://github.com/neovim/neovim/pull/10854.diff",
    "draft": false,
    "head": {
        "label": "blueyed:fix-output-spec",
        "ref": "fix-output-spec",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/blueyed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/blueyed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/blueyed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/blueyed/neovim/branches{/branch}",
            "clone_url": "https://github.com/blueyed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/blueyed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/blueyed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/blueyed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/blueyed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/blueyed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/blueyed/neovim/contributors",
            "created_at": "2014-12-04T09:02:19Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/blueyed/neovim/deployments",
            "description": "vim out of the box",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/blueyed/neovim/downloads",
            "events_url": "https://api.github.com/repos/blueyed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/blueyed/neovim/forks",
            "full_name": "blueyed/neovim",
            "git_commits_url": "https://api.github.com/repos/blueyed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/blueyed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/blueyed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/blueyed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://neovim.org/",
            "hooks_url": "https://api.github.com/repos/blueyed/neovim/hooks",
            "html_url": "https://github.com/blueyed/neovim",
            "id": 27532154,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/blueyed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/blueyed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/blueyed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/blueyed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/blueyed/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/blueyed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/blueyed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/blueyed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNzUzMjE1NA==",
            "notifications_url": "https://api.github.com/repos/blueyed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/blueyed/neovim/pulls{/number}",
            "pushed_at": "2022-06-30T08:30:07Z",
            "releases_url": "https://api.github.com/repos/blueyed/neovim/releases{/id}",
            "size": 170058,
            "ssh_url": "git@github.com:blueyed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/blueyed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/blueyed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/blueyed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/blueyed/neovim/subscription",
            "svn_url": "https://github.com/blueyed/neovim",
            "tags_url": "https://api.github.com/repos/blueyed/neovim/tags",
            "teams_url": "https://api.github.com/repos/blueyed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/blueyed/neovim/git/trees{/sha}",
            "updated_at": "2019-07-31T12:32:01Z",
            "url": "https://api.github.com/repos/blueyed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "72973d044d0af230f2d516832803df57b172c313",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
            "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
            "followers_url": "https://api.github.com/users/blueyed/followers",
            "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
            "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/blueyed",
            "id": 9766,
            "login": "blueyed",
            "node_id": "MDQ6VXNlcjk3NjY=",
            "organizations_url": "https://api.github.com/users/blueyed/orgs",
            "received_events_url": "https://api.github.com/users/blueyed/received_events",
            "repos_url": "https://api.github.com/users/blueyed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/blueyed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/10854",
    "id": 310886508,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/10854",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 110418643,
            "name": "test",
            "node_id": "MDU6TGFiZWwxMTA0MTg2NDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/test"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwODg2NTA4",
    "number": 10854,
    "patch_url": "https://github.com/neovim/neovim/pull/10854.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/10854/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/72973d044d0af230f2d516832803df57b172c313",
    "title": "tests: output_spec: fix \"throttles shell-command output greater than ~10KB\"",
    "updated_at": "2025-07-02T08:51:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/10854",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
        "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
        "followers_url": "https://api.github.com/users/blueyed/followers",
        "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
        "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/blueyed",
        "id": 9766,
        "login": "blueyed",
        "node_id": "MDQ6VXNlcjk3NjY=",
        "organizations_url": "https://api.github.com/users/blueyed/orgs",
        "received_events_url": "https://api.github.com/users/blueyed/received_events",
        "repos_url": "https://api.github.com/users/blueyed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/blueyed",
        "user_view_type": "public"
    }
}