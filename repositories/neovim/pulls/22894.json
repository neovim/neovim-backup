{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/22894/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/22894/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/22894"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/22894"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/22894/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/5874fe9a5e5f55bbdf77583401e2099c35842e97"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6275,
            "forks_count": 6275,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1988,
            "open_issues_count": 1988,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-25T23:24:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 339513,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92240,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-26T02:19:53Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92240,
            "watchers_count": 92240,
            "web_commit_signoff_required": false
        },
        "sha": "38b0bb3c93022afcc54c0891d2eced02d2a9fa3a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "https://en.wikipedia.org/wiki/Circular_buffer\r\n\r\nThe motivation is to use this in the lsp module for progress\r\nmessages. Currently if the user doesn't consume them they are added\r\nindefinitely to a table, growing memory usage unbounded.\r\n\r\n\r\nCould also add this as a private thing inside the lsp module, but I have a similar implementation in nvim-dap, so I suspect this may be generally useful.",
    "closed_at": "2023-06-08T10:11:25Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158473657"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158473657"
                }
            },
            "author_association": "MEMBER",
            "body": "Or `vim.ringbuffer`, `vim.create_ringbuf` or something like that ?",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T12:48:17Z",
            "diff_hunk": "@@ -810,5 +810,74 @@ function vim.defaulttable(create)\n   })\n end\n \n+--- Create a ring buffer limited to a maximal number of items.\n+--- Once the buffer is full, adding a new entry overrides the oldest entry.\n+---\n+--- <pre>\n+---   local ringbuf = vim.ringbuf(4)\n+---   ringbuf.add(\"a\")\n+---   ringbuf.add(\"b\")\n+---   ringbuf.add(\"c\")\n+---   ringbuf.add(\"d\")\n+---   ringbuf.add(\"e\")      -- overrides \"a\"\n+---   print(ringbuf.poll()) -- returns \"b\"\n+---   print(ringbuf.poll()) -- returns \"c\"\n+--- </pre>\n+---\n+--- Returns a table with the following functions:\n+--- - add(item: T): Adds an item to the buffer\n+--- - clear(): Removes all items from the buffer\n+--- - peek(): Returns the last unread item, without removing it\n+--- - poll(): Removes and returns the last unread item\n+---\n+---@generic T\n+---@param size integer\n+---@return {add: fun(item: T), poll: (fun(): T|nil), peek: (fun():T|nil), clear: fun()} (table)\n+function vim.ringbuf(size)",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158473657",
            "id": 1158473657,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDOe5",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 836,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 1372839533,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158473657/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T12:48:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158473657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158489163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158489163"
                }
            },
            "author_association": "MEMBER",
            "body": "Personally I would go the class based approach here, mostly because:\r\n- it's more conventional Lua \r\n-  makes it less opaque which is good for inspection/debugging.\r\n- creates less funcrefs\r\n\r\n```lua\r\n local ringbuf = vim.ringbuf(4)\r\n ringbuf:add(\"a\")\r\n ringbuf:add(\"b\")\r\n ringbuf:add(\"c\")\r\n ringbuf:add(\"d\")\r\n ringbuf:add(\"e\")      -- overrides \"a\"\r\n print(ringbuf:poll()) -- returns \"b\"\r\n print(ringbuf:poll()) -- returns \"c\"\r\n```\r\n\r\n```lua\r\nfunction ringbuf:add(item)\r\n    self._items[self._idx_write] = item\r\n    self._idx_write = (self._idx_write + 1) % self._size\r\n    if self._idx_write == self._idx_read then\r\n      self._idx_read = (self._idx_read + 1) % self._size\r\n    end\r\n  end\r\n```",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:01:38Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158489163",
            "id": 1158489163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDSRL",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1753,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372863885,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158489163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:03:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158489163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158489941"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158489941"
                }
            },
            "author_association": "MEMBER",
            "body": "Would `get()` or `pop()` be better?",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:02:21Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"\n+<\n+\n+    Returns a table with the following functions:\n+    • add(item: T): Adds an item to the buffer\n+    • clear(): Removes all items from the buffer\n+    • peek(): Returns the last unread item, without removing it\n+    • poll(): Removes and returns the last unread item",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158489941",
            "id": 1158489941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDSdV",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1760,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372865152,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158489941/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:02:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158489941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158494317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158494317"
                }
            },
            "author_association": "MEMBER",
            "body": "and `put()` or `push()` instead of `add()`, respectively (standard terminology)\r\n\r\n(the point is to have a \"matching pair\")",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:06:21Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"\n+<\n+\n+    Returns a table with the following functions:\n+    • add(item: T): Adds an item to the buffer\n+    • clear(): Removes all items from the buffer\n+    • peek(): Returns the last unread item, without removing it\n+    • poll(): Removes and returns the last unread item",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158494317",
            "id": 1158494317,
            "in_reply_to_id": 1158489941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDTht",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1760,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372872372,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158494317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:06:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158494317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158498978"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158498978"
                }
            },
            "author_association": "MEMBER",
            "body": "That thought also crossed my mind. I had the impression that the function/closure pattern is currently more common in the codebase but I don't mind changing it.\r\n\r\nDepending on the outcome, maybe worth noting in https://github.com/neovim/neovim/issues/16810",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:10:16Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158498978",
            "id": 1158498978,
            "in_reply_to_id": 1158489163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDUqi",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1753,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372879753,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158498978/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:10:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158498978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158501615"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158501615"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd go with `pop()` and `push()` then. `put` is used in some languages to set a given key. `map.put(\"x\", 1)` - where you expect the same call to override the item with the same key. The operation here behaves a bit differently.\r\n\r\n`get()` imho doesn't signal the \"removes the item\" behavior.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:12:27Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"\n+<\n+\n+    Returns a table with the following functions:\n+    • add(item: T): Adds an item to the buffer\n+    • clear(): Removes all items from the buffer\n+    • peek(): Returns the last unread item, without removing it\n+    • poll(): Removes and returns the last unread item",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158501615",
            "id": 1158501615,
            "in_reply_to_id": 1158489941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDVTv",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1760,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372883817,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158501615/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:12:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158501615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158501669"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158501669"
                }
            },
            "author_association": "MEMBER",
            "body": "How about `read()` and `write()`? It's the terminology used in src/nvim/rbuffer.c.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:12:30Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"\n+<\n+\n+    Returns a table with the following functions:\n+    • add(item: T): Adds an item to the buffer\n+    • clear(): Removes all items from the buffer\n+    • peek(): Returns the last unread item, without removing it\n+    • poll(): Removes and returns the last unread item",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158501669",
            "id": 1158501669,
            "in_reply_to_id": 1158489941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDVUl",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1760,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372883893,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158501669/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:13:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158501669",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158506839"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158506839"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, it only adds/removes one item at a time. The I guess `push()` and `pop()` are better.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:16:46Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"\n+<\n+\n+    Returns a table with the following functions:\n+    • add(item: T): Adds an item to the buffer\n+    • clear(): Removes all items from the buffer\n+    • peek(): Returns the last unread item, without removing it\n+    • poll(): Removes and returns the last unread item",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158506839",
            "id": 1158506839,
            "in_reply_to_id": 1158489941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDWlX",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1760,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372892125,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158506839/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:16:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158506839",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1158507610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158507610"
                }
            },
            "author_association": "MEMBER",
            "body": "My impression is that we are using both depending on the context. Both libuv and ts bindings use the class style. Other ts classes use it too (langtree and highlighter). There are pros/cons to each.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-05T13:17:23Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1158507610",
            "id": 1158507610,
            "in_reply_to_id": 1158489163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FDWxa",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1753,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1372893295,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158507610/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-05T13:23:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1158507610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1164090288"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164090288"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a way to convert this to class style while still keeping the lua-ls generic type parameter working?\r\nclass generics are still very limited: https://github.com/LuaLS/lua-language-server/issues/1861\r\n\r\nI was trying something like:\r\n\r\n```lua\r\n---@class vim.Ringbuf<T>\r\n---@field private items T[]\r\n\r\n--- ...\r\n\r\n---@type vim.Ringbuf<T>\r\nlocal ringbuf = {\r\n  items = {},\r\n  idx_read = 0,\r\n  idx_write = 0,\r\n  size = size + 1,\r\n}\r\nreturn setmetatable(ringbuf, { __index = Ringbuf })\r\n```\r\n\r\nBut the `T` in both `---@field private items T[]` and `---@type vim.Ringbuf<T>` is undefined\r\n\r\n",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-12T12:50:59Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1164090288",
            "id": 1164090288,
            "in_reply_to_id": 1158489163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FYpuw",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1753,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1381249331,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164090288/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T12:50:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164090288",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1164097559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164097559"
                }
            },
            "author_association": "MEMBER",
            "body": "Generics in lua ls don't work properly atm. There's a big tracking issue for them.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-12T12:56:31Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1164097559",
            "id": 1164097559,
            "in_reply_to_id": 1158489163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5FYrgX",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1753,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1381260106,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164097559/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-12T12:56:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1164097559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1171312207"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171312207"
                }
            },
            "author_association": "MEMBER",
            "body": "Changed it to class style.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-19T13:07:22Z",
            "diff_hunk": "@@ -1738,6 +1738,33 @@ pesc({s})                                                         *vim.pesc()*\n     See also: ~\n       • https://github.com/rxi/lume\n \n+ringbuf({size})                                                *vim.ringbuf()*\n+    Create a ring buffer limited to a maximal number of items. Once the buffer\n+    is full, adding a new entry overrides the oldest entry.\n+>\n+\n+    local ringbuf = vim.ringbuf(4)\n+    ringbuf.add(\"a\")\n+    ringbuf.add(\"b\")\n+    ringbuf.add(\"c\")\n+    ringbuf.add(\"d\")\n+    ringbuf.add(\"e\")      -- overrides \"a\"\n+    print(ringbuf.poll()) -- returns \"b\"\n+    print(ringbuf.poll()) -- returns \"c\"",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1171312207",
            "id": 1171312207,
            "in_reply_to_id": 1158489163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5F0M5P",
            "original_commit_id": "08ae2ed82599a5b40b657fed47ba75e3b64e554b",
            "original_line": 1753,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1392028975,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171312207/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-04-19T13:07:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171312207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1171319302"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171319302"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we underscore these field names to signify they are unstable? Or do we want to make them a part of the contract?\r\n\r\n```suggestion\r\n  ---@class vim.Ringbuf<T>\r\n  ---@field private _items table[]\r\n  ---@field private _idx_read integer\r\n  ---@field private _idx_write integer\r\n  ---@field private _size integer\r\n```",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-19T13:12:23Z",
            "diff_hunk": "@@ -989,4 +989,88 @@ function vim.map(f, src, ...)\n   return vim.iter(src, ...):map(f):totable()\n end\n \n+do\n+  ---@class vim.Ringbuf<T>\n+  ---@field private items table[]\n+  ---@field private idx_read integer\n+  ---@field private idx_write integer\n+  ---@field private size integer",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1171319302",
            "id": 1171319302,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5F0OoG",
            "original_commit_id": "d9518d09b88bd4bd1ffda6fa5ed576610823a7d4",
            "original_line": 997,
            "original_position": 9,
            "original_start_line": 993,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 1392040479,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171319302/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-19T13:12:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171319302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1171327785"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171327785"
                }
            },
            "author_association": "MEMBER",
            "body": "The `private` modifier prevents them from showing up in completions with lua-ls and results in warnings that the fields are private if accessed anyways. I'd think that should be good enough, given that they're also not documented, but I'm also fine with adding the underscore as extra measure if you think it's worth it.",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-19T13:17:50Z",
            "diff_hunk": "@@ -989,4 +989,88 @@ function vim.map(f, src, ...)\n   return vim.iter(src, ...):map(f):totable()\n end\n \n+do\n+  ---@class vim.Ringbuf<T>\n+  ---@field private items table[]\n+  ---@field private idx_read integer\n+  ---@field private idx_write integer\n+  ---@field private size integer",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1171327785",
            "id": 1171327785,
            "in_reply_to_id": 1171319302,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5F0Qsp",
            "original_commit_id": "d9518d09b88bd4bd1ffda6fa5ed576610823a7d4",
            "original_line": 997,
            "original_position": 9,
            "original_start_line": 993,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 1392051496,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171327785/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-19T13:17:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171327785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1171343918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171343918"
                }
            },
            "author_association": "MEMBER",
            "body": "One of the ways in how I learn to use an API is by using it and looking at what it does, even before looking at documentation, and I'll usually just TLDR the docs anyway. Often I'll just do `:lua vim.inspect(...)` and look at the shape of stuff, if I see it contains fields that are prefixed with an underscore, then I'll know not to depend on them.\r\n\r\n> The private modifier prevents them from showing up in completions with lua-ls and results in warnings that the fields are private if accessed anyways. \r\n\r\nThis assumes the user is using luals which I don't think we should do given that teal and fennel exist.\r\n\r\n> given that they're also not documented\r\n\r\nI don't think this is strong enough. A lack of documentation is often enough just a bug.\r\n",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-04-19T13:27:57Z",
            "diff_hunk": "@@ -989,4 +989,88 @@ function vim.map(f, src, ...)\n   return vim.iter(src, ...):map(f):totable()\n end\n \n+do\n+  ---@class vim.Ringbuf<T>\n+  ---@field private items table[]\n+  ---@field private idx_read integer\n+  ---@field private idx_write integer\n+  ---@field private size integer",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1171343918",
            "id": 1171343918,
            "in_reply_to_id": 1171319302,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5F0Uou",
            "original_commit_id": "d9518d09b88bd4bd1ffda6fa5ed576610823a7d4",
            "original_line": 997,
            "original_position": 9,
            "original_start_line": 993,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 1392072440,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171343918/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-04-19T13:27:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1171343918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/22894#discussion_r1199579343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/22894"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1199579343"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    self._items = {}\r\n    self._idx_read = 0\r\n    self._idx_write = 0\r\n```",
            "commit_id": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
            "created_at": "2023-05-20T08:24:28Z",
            "diff_hunk": "@@ -986,4 +986,98 @@ function vim.map(f, src, ...)\n   return vim.iter(src, ...):map(f):totable()\n end\n \n+do\n+  ---@class vim.Ringbuf<T>\n+  ---@field private _items table[]\n+  ---@field private _idx_read integer\n+  ---@field private _idx_write integer\n+  ---@field private _size integer\n+  local Ringbuf = {}\n+\n+  --- Clear all items\n+  function Ringbuf.clear(self)\n+    self.items = {}\n+    self.idx_read = 0\n+    self.idx_write = 0",
            "html_url": "https://github.com/neovim/neovim/pull/22894#discussion_r1199579343",
            "id": 1199579343,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5HgCDP",
            "original_commit_id": "88c36f0cf1f9a0c1df24a04f1f503c59abc62955",
            "original_line": 1001,
            "original_position": 16,
            "original_start_line": 999,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 1435379315,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1199579343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-05-20T08:24:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1199579343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "- I was planning to introduce `vim.inter` for all things related to \"iterables\". Since this is technically an iterable (or should be) I guess it belongs in there? Or do we need a separate module for various \"data structures\"?\r\n- nit: `feat(lua)` for lua features",
            "created_at": "2023-04-20T00:35:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1515550430",
            "id": 1515550430,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5aVXbe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515550430/reactions"
            },
            "updated_at": "2023-04-20T00:35:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1515550430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk on the other hand, there's a bunch of \"data structure\" already under the top-level `vim` module (`vim.empty_dict()`, `vim.defaulttable()`, `vim.tbl_*`, `vim.list_*` -- in fact, it's a veritable grab bag of functions...)?",
            "created_at": "2023-05-20T08:22:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1555861270",
            "id": 1555861270,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5cvI8W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1555861270/reactions"
            },
            "updated_at": "2023-05-20T08:22:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1555861270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @justinmk on the other hand, there's a bunch of \"data structure\" already under the top-level vim module (vim.empty_dict(), vim.defaulttable(), vim.tbl_*, vim.list_* -- in fact, it's a veritable grab bag of functions...)?\r\n\r\nSince we long ago decided to add `vim.x.y` submodules, \"top level is a grab bag\" is not a valid precedent.\r\n\r\n* Top-level `vim.*` is appropriate for \"language-level features\" like e.g. `vim.empty_dict()`.\r\n* `vim.tbl_xx` and `vim.list_xx` are deprecated in favor of `vim.iter`.\r\n\r\nWe have `vim.iter` now, doesn't this fit in there? Though it isn't yet actually iterable.",
            "created_at": "2023-06-05T02:55:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1575961846",
            "id": 1575961846,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5d70T2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1575961846/reactions"
            },
            "updated_at": "2023-06-05T12:37:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1575961846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> vim.tbl_xx and vim.list_xx are deprecated in favor of vim.iter.\r\n\r\nThat's the first I hear about it. There's a bunch of methods (like `is_array`, `keys`) that do not fit into an iterable module.",
            "created_at": "2023-06-05T08:23:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1576337094",
            "id": 1576337094,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5d9P7G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576337094/reactions"
            },
            "updated_at": "2023-06-05T08:23:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576337094",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> That's the first I hear about it.\r\n\r\nvim.iter is recent...\r\n\r\n> There's a bunch of methods (like `is_array`, `keys`) that do not fit into an iterable module.\r\n\r\nIndeed, nothing changes there. Those are \"language-level\" / fundamental things. Though arguably with hindsight they might all live in a `vim.util` module, but this is all orthogonal to the topic of a collections module or iterable module.\r\n\r\nConcrete proposal: https://github.com/neovim/neovim/issues/23913",
            "created_at": "2023-06-05T08:33:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1576358770",
            "id": 1576358770,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5d9VNy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576358770/reactions"
            },
            "updated_at": "2023-06-05T08:55:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576358770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> vim.iter is recent...\r\n\r\nStill, it can't absorb _all_ these functions, unless you want to turn _it_ into a grab bag...\r\n\r\n> Those are \"language-level\" / fundamental things. Though arguably with hindsight they might all live in a vim.util module, but this is all orthogonal to the topic of a collections module or iterable module.\r\n\r\nI'm not so sure; aren't we discussing exactly the shape of the iterable module (and possibly collections, if it doesn't fit and that can better absorb other top-level functions)?",
            "created_at": "2023-06-05T08:39:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1576372297",
            "id": 1576372297,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5d9YhJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576372297/reactions"
            },
            "updated_at": "2023-06-05T08:39:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576372297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Personally, I think a ringbuffer is a special kind of table -- the fact that it fundamentally supports `push` in addition to `pop` makes it very different from an iterator. Of course, it makes sense to _convert_ a ringbuffer into an iterator -- just like a table -- so you can use it in an iterable chain in case you want to drain it fully. But it's not obvious how to handle an \"active\" ringbuffer (i.e., support `push`ing _while_ draining, which is the standard use case.)",
            "created_at": "2023-06-05T08:57:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1576400339",
            "id": 1576400339,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5d9fXT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576400339/reactions"
            },
            "updated_at": "2023-06-05T08:57:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576400339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Agreed. So to unblock this, \r\n\r\n- `vim.ringbuf` seems like the right place. \r\n- Should ringbuf provide an iterator function so that it can be consumed by `vim.iter` ?",
            "created_at": "2023-06-05T12:39:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1576712970",
            "id": 1576712970,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5d-rsK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576712970/reactions"
            },
            "updated_at": "2023-06-05T12:39:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1576712970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should ringbuf provide an iterator function so that it can be consumed by vim.iter ?\r\n\r\nI think are are several options, and not necessarily mutually exclusive:\r\n\r\n- Add a `Ringbuf:iter()` that returns a `Iter` object\r\n- Change `Iter.new()` to check if the argument has a metatable with `__call` and if so, use it as iterator function instead of as table, this would change:\r\n\r\n```lua\r\nlocal rb = vim.ringbuf(10)\r\nrb:push(\"a\")\r\nrb:push(\"b\")\r\nfor x in vim.iter(rb) do\r\n  print(x)\r\nend\r\n```\r\n\r\nTo return `a` and `b` instead of the items of the table (`_idx_read`, `_items` ...)\r\n\r\n\r\n\r\nWhat currently also works is something like this:\r\n\r\n```lua\r\nlocal rb = vim.ringbuf(10)\r\nrb:push(\"a\")\r\nrb:push(\"b\")\r\n\r\nlocal function pop()\r\n  return rb:pop()\r\nend\r\n\r\nfor x in vim.iter(pop) do\r\n  print(x)\r\nend\r\n```\r\n\r\nWe could also add a `vim.partial` to turn that into:\r\n\r\n\r\n```lua\r\nlocal rb = vim.ringbuf(10)\r\nrb:push(\"a\")\r\nrb:push(\"b\")\r\n\r\nfor x in vim.iter(vim.partial(rb.pop, rb)) do\r\n  print(x)\r\nend\r\n```\r\n\r\n\r\n---\r\n\r\nI think any of these could be done as follow up too, so I'll go ahead and merge this.\r\n",
            "created_at": "2023-06-08T07:35:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1582057128",
            "id": 1582057128,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5eTEao",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582057128/reactions"
            },
            "updated_at": "2023-06-08T07:35:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582057128",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think any of these could be done as follow up too, so I'll go ahead and merge this.\r\n\r\nDon't forget a `news.txt` entry ;)\r\n\r\n(My personal preference would be for option 2, as this feels more natural to me.)",
            "created_at": "2023-06-08T07:36:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1582058575",
            "id": 1582058575,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5eTExP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582058575/reactions"
            },
            "updated_at": "2023-06-08T07:37:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582058575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Opened a PR that would implement 2): https://github.com/neovim/neovim/pull/23957\r\nWe can discuss the options there",
            "created_at": "2023-06-08T10:41:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1582350941",
            "id": 1582350941,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5eUMJd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582350941/reactions"
            },
            "updated_at": "2023-06-08T10:41:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582350941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We could also add a `vim.partial` to turn that into:\r\n\r\nI think we want \"partial\" in any case. Should probably live in `vim.func.partial`.",
            "created_at": "2023-06-08T13:00:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/22894#issuecomment-1582538748",
            "id": 1582538748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
            "node_id": "IC_kwDOAPphoM5eU5_8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582538748/reactions"
            },
            "updated_at": "2023-06-08T13:00:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1582538748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/22894/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/22894/commits",
    "created_at": "2023-04-05T12:47:15Z",
    "diff_url": "https://github.com/neovim/neovim/pull/22894.diff",
    "draft": false,
    "head": {
        "label": "mfussenegger:ringbuffer",
        "ref": "ringbuffer",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/mfussenegger/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/mfussenegger/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/mfussenegger/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/mfussenegger/neovim/branches{/branch}",
            "clone_url": "https://github.com/mfussenegger/neovim.git",
            "collaborators_url": "https://api.github.com/repos/mfussenegger/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/mfussenegger/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/mfussenegger/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/mfussenegger/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/mfussenegger/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/mfussenegger/neovim/contributors",
            "created_at": "2020-01-25T15:44:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/mfussenegger/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/mfussenegger/neovim/downloads",
            "events_url": "https://api.github.com/repos/mfussenegger/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/mfussenegger/neovim/forks",
            "full_name": "mfussenegger/neovim",
            "git_commits_url": "https://api.github.com/repos/mfussenegger/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/mfussenegger/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/mfussenegger/neovim/git/tags{/sha}",
            "git_url": "git://github.com/mfussenegger/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/mfussenegger/neovim/hooks",
            "html_url": "https://github.com/mfussenegger/neovim",
            "id": 236190222,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/mfussenegger/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/mfussenegger/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/mfussenegger/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/mfussenegger/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/mfussenegger/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/mfussenegger/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/mfussenegger/neovim/merges",
            "milestones_url": "https://api.github.com/repos/mfussenegger/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzYxOTAyMjI=",
            "notifications_url": "https://api.github.com/repos/mfussenegger/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/mfussenegger/neovim/pulls{/number}",
            "pushed_at": "2025-08-08T22:15:37Z",
            "releases_url": "https://api.github.com/repos/mfussenegger/neovim/releases{/id}",
            "size": 327428,
            "ssh_url": "git@github.com:mfussenegger/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/mfussenegger/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/mfussenegger/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/mfussenegger/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/mfussenegger/neovim/subscription",
            "svn_url": "https://github.com/mfussenegger/neovim",
            "tags_url": "https://api.github.com/repos/mfussenegger/neovim/tags",
            "teams_url": "https://api.github.com/repos/mfussenegger/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/mfussenegger/neovim/git/trees{/sha}",
            "updated_at": "2024-01-03T04:13:43Z",
            "url": "https://api.github.com/repos/mfussenegger/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "5874fe9a5e5f55bbdf77583401e2099c35842e97",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/22894",
    "id": 1303145120,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/22894",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "7c661207cc4357553ed2b057b6c8f28400024361",
    "merged_at": "2023-06-08T10:11:25Z",
    "milestone": {
        "closed_at": "2024-05-16T14:11:42Z",
        "closed_issues": 440,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2024-05-12T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 0,
        "state": "closed",
        "title": "0.10",
        "updated_at": "2025-01-05T13:24:13Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5NrGqg",
    "number": 22894,
    "patch_url": "https://github.com/neovim/neovim/pull/22894.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/22894/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/5874fe9a5e5f55bbdf77583401e2099c35842e97",
    "title": "feat(lua): vim.ringbuf",
    "updated_at": "2025-08-25T04:20:06Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/22894",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    }
}