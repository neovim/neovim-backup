{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35658/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35658/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35658"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35658"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35658/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35658"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/c31c462e02e3d69b17323edad8e8abf984f0149a"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6310,
            "forks_count": 6310,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1996,
            "open_issues_count": 1996,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-09-09T01:58:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 341252,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92608,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-09-09T02:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92608,
            "watchers_count": 92608,
            "web_commit_signoff_required": false
        },
        "sha": "21f2c2b19c40882dc6985f87a2e3527c60e3cfaa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n\r\n## Problem\r\n\r\nThe methods in `vim.lsp.buf.*` surface errors in different scenarios. The goal of https://github.com/neovim/neovim/pull/34523 is to introduce a new `callback` argument that will receive the errors returned by the language servers when handling the LSP request. However there are cases where we (the editor) error before even entering the async LSP loop, and the goal of this PR is to address those scenarios.\r\n\r\nhttps://github.com/neovim/neovim/pull/34523#discussion_r2312648694 mentions an example of this: We invoke `vim.notify()` [in methods like `vim.lsp.buf.definition()`](https://github.com/neovim/neovim/blob/1cb1cfead017df79aa590d1d297b116a85cb31c0/runtime/lua/vim/lsp/buf.lua#L195) when there are no clients to handle the request. The `callback` argument from https://github.com/neovim/neovim/pull/34523 isn't exactly applicable to this \"error\" since we haven't even made a request.\r\n\r\n## Proposal\r\n\r\nLet's modify these LSP functions to return a boolean indicating success/failure and an optional error message. This way we can remove the `silent` option (as users can decide what to do on failure).",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35658#discussion_r2328400477"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35658"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2328400477"
                }
            },
            "author_association": "MEMBER",
            "body": "LMK if you think that instead we should deprecate this setting instead of just ignoring it entirely.",
            "commit_id": "c31c462e02e3d69b17323edad8e8abf984f0149a",
            "created_at": "2025-09-06T23:18:10Z",
            "diff_hunk": "@@ -98,14 +96,11 @@ function M.hover(config)\n     end\n \n     if vim.tbl_isempty(results1) then\n-      if config.silent ~= true then",
            "html_url": "https://github.com/neovim/neovim/pull/35658#discussion_r2328400477",
            "id": 2328400477,
            "line": 101,
            "node_id": "PRRC_kwDOAPphoM6KyJJd",
            "original_commit_id": "c31c462e02e3d69b17323edad8e8abf984f0149a",
            "original_line": 101,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 24,
            "pull_request_review_id": 3193968859,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35658",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2328400477/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-09-06T23:18:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2328400477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I think I like this idea, but should at least log the failure. Silent failures can be very problematic, especially if the error isn't sent \"up the chain\". For example, a plugin may call `vim.lsp.buf.foo()` but forget to send its result to the user.\r\n\r\nHowever, to make a confident decision on this, it will help to explain the Problem being solved. That also will inform us about which paths in `vim.lsp.buf` will get this treatment, and which won't.",
            "created_at": "2025-09-08T03:58:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/35658#issuecomment-3264499920",
            "id": 3264499920,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
            "node_id": "IC_kwDOAPphoM7ClFDQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264499920/reactions"
            },
            "updated_at": "2025-09-08T03:58:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264499920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think I like this idea, but should at least log the failure. Silent failures can be very problematic, especially if the error isn't sent \"up the chain\". For example, a plugin may call `vim.lsp.buf.foo()` but forget to send its result to the user.\r\n> \r\n> However, to make a confident decision on this, it will help to explain the Problem being solved. That also will inform us about which paths in `vim.lsp.buf` will get this treatment, and which won't.\r\n\r\nGood points. I've updated the PR description to explain what I'm trying to do here.",
            "created_at": "2025-09-08T04:42:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/35658#issuecomment-3264579931",
            "id": 3264579931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
            "node_id": "IC_kwDOAPphoM7ClYlb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264579931/reactions"
            },
            "updated_at": "2025-09-08T04:42:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264579931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> However there are cases where we (the editor) error before even entering the async LSP loop, and the goal of this PR is to address those scenarios.\r\n\r\nIsn't this a bit of an implementation detail that the consumer of the API shouldn't need to worry about?\r\n\r\nE.g. with this, together with the callback addition, I'd have to do:\r\n\r\n\r\n```lua\r\nlocal ok = vim.lsp.buf.hover(function(err, result))\r\n  if err then\r\n    ...\r\n  end\r\n\r\nend)\r\n\r\nif not ok then\r\n   ...\r\nend\r\n```\r\n\r\nvs. only:\r\n\r\n```lua\r\nvim.lsp.buf.hover(function(err, result))\r\n  if err then\r\n    ...\r\n  end\r\nend)\r\n```\r\n\r\nNot to mention that anyone who customizes the keymap would have to do this to retain any sort of feedback for the actions.\r\n\r\n\r\nMy suggestion would be to:\r\n\r\n- Unify the error case so it always happens via the callback\r\n- If the user doesn't provide a callback, add a default callback that retains the vim.notify behavior so users who don't customize the callback but the keymap retain the feedback.\r\n",
            "created_at": "2025-09-08T05:03:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/35658#issuecomment-3264614370",
            "id": 3264614370,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
            "node_id": "IC_kwDOAPphoM7Clg_i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264614370/reactions"
            },
            "updated_at": "2025-09-08T05:03:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3264614370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My suggestion would be to:\r\n> -    Unify the error case so it always happens via the callback\r\n> -    If the user doesn't provide a callback, add a default callback that retains the vim.notify behavior so users who don't customize the callback but the keymap retain the feedback.\r\n\r\nThis suggestion makes sense, but I think it is moving towards a local maxima that only considers the case of LSP keymaps.\r\n\r\nIf you move all errors to the callback, then that prevents users from handling errors synchronously. E.g. quite a few `vim.uv.*` functions will raise error synchronously if they can. Additionally for LSP, each client can error which we need to return, so the error object needs to be something like `table<integer,string>`.\r\n\r\nAdding a default callback that implements `vim.notify` isn't a pattern we should be replicating generally for async functions.\r\n\r\nI suggest:\r\n\r\n```lua\r\n--- @param cb fun(err table<integer,string>, result: any)\r\n--- @return boolean stat\r\n--- @return string? err\r\nvim.lsp.buf.*(cb) ... end\r\n```\r\n\r\nWhich can be used internally with a basic wrapper to handle the errors.\r\n\r\n```lua\r\nlocal function lsp_keymap(fun, ...)\r\n  local stat, err = fun(..., function(errs)\r\n    for _, err in pairs(errs or {}) do\r\n      vim.notify(err, vim.log.levels.ERROR)\r\n    end\r\n  end)\r\n  if not stat then\r\n    vim.notify(err, vim.log.levels.ERROR)\r\n  end\r\nend\r\n```\r\n\r\nAnd then in `_defaults.lua`:\r\n\r\n```lua\r\n    vim.keymap.set('n', '<Plug>nvim.lsp.rename', function()\r\n      lsp_keymap(vim.lsp.buf.rename)\r\n    end, { desc = 'vim.lsp.buf.rename()' })\r\n  \r\n    vim.keymap.set('n', 'grr', '<Plug>nvim.lsp.rename')\r\n```\r\n\r\n- If callback isn't provided, then one (better) option would be to run it synchronously, and return the client errors as another return value:\r\n  ```lua\r\n  --- @return true, table<integer,string> client errs\r\n  --- @return false, string err\r\n  ``` \r\n  This aligns with `vim.uv.*`\r\n- If users want a different mapping for rename, they remap `<Plug>nvim.lsp.rename` which is a dedicated keymap binding. This could be another function in `vim.defaults.*` but `<Plug>` exists exactly for this case.\r\n- On the other side plugins can re-implement `<Plug>nvim.lsp.rename` instead of monkey patching `vim.lsp.buf`, or adding a direct mapping.\r\n- Program errors are not masked or passed to `vim.notify`, and are raised normally (with a stack trace).\r\n- `vim.lsp.buf` is more programmatic and avoids side-effects like `vim.notify`, and follows a more pure pattern like `vim.uv.*` (which I consider a good design).\r\n- No more `silent` options.\r\n- We can use this pattern for most/all async functions. The main difference is the shape of `err` and `result` in the callback.\r\n\r\nOne thing this proposal doesn't cover is keymap customisations (limitation of `<Plug>`), but I'm not sure how much weight this should get. That may be an argument to expose the generic keymap wrapper.",
            "created_at": "2025-09-08T08:47:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/35658#issuecomment-3265249838",
            "id": 3265249838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
            "node_id": "IC_kwDOAPphoM7Cn8Iu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265249838/reactions"
            },
            "updated_at": "2025-09-08T08:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265249838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but I think it is moving towards a local maxima that only considers the case of LSP keymaps.\r\n\r\nIt's from the point of view that `vim.lsp.buf` functions are direct user-entrypoints. With keymaps being the most common use-case.\r\n\r\n`vim.uv` in comparison is a low-level API that users rarely invoke directly without some program code around it.\r\n\r\n\r\n> If you move all errors to the callback, then that prevents users from handling errors synchronously.\r\n\r\nWhy would that be an issue?\r\nYou have to handle callback errors anyway.\r\n\r\n> E.g. quite a few vim.uv.* functions will raise error synchronously if they can\r\n\r\nSometimes that's because there's a semantic difference, or because of other API implications. Take `vim.uv.spawn` for example. The function returns a handle/pid in the success case.\r\n\r\nGiven that the process is async and the handle/pid is to be used while the command is executing, providing that within the callback wouldn't make sense.\r\nIf the process can't be started, it can't provide a handle, therefore it has to be `nil`.\r\n\r\nWe don't have the same semantic requirements for `vim.lsp.buf` - except if you returned a handle/object too, e.g. one with `:cancel`.\r\n\r\nThat you want to introduce a internal wrapper is a sign that the API would be hard to use as-is, which again - goes to the question if those functions are high-level or low-level API. My stance remains that they should be high-level that users can invoke directly.\r\n\r\n\r\n> One thing this proposal doesn't cover is keymap customisations (limitation of <Plug>), but I'm not sure how much weight this should get\r\n\r\nImho it should get a lot of weight, because it is not unusual to customize them. `code_action` is a good example which allows filtering and to apply the first match immediately without prompt to have a command/keymap for common actions like \"Organize Import\"\r\n\r\nSome other examples from my dotfiles:\r\n\r\n```\r\nsetk(\"n\", \"gr\", function() vim.lsp.buf.references({ includeDeclaration = false }) end)\r\nsetk({\"n\", \"x\"}, \"<leader>r\", \"<Cmd>lua vim.lsp.buf.code_action { context = { only = {'refactor'} }}<CR>\")\r\nsetk(\"n\", \"crn\", \"<Cmd>lua vim.lsp.buf.rename(vim.fn.input('New Name: '))<CR>\")\r\n```\r\n\r\nWith your suggested change I'd likely end up copying the internal error handling wrapper.\r\nI'd survive, but it feels like this goes against the general direction of making LSP easier to setup/configure.\r\n\r\n\r\n> Additionally for LSP, each client can error which we need to return, so the error object needs to be something like table<integer,string>.\r\n\r\nTo handle that we could introduce a `RequestErr` object that even contains a `__tostring__` for easy printing of a formatted error message.\r\n",
            "created_at": "2025-09-08T10:14:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/35658#issuecomment-3265594252",
            "id": 3265594252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
            "node_id": "IC_kwDOAPphoM7CpQOM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265594252/reactions"
            },
            "updated_at": "2025-09-08T10:14:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265594252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It's from the point of view that vim.lsp.buf functions are direct user-entrypoints. With keymaps being the most common use-case.\r\n\r\nYes it is an entry-point for users, but users require different forms for different use cases:\r\n- Interactive entry points: keymaps and user commands\r\n- Plugins and scripts (API)\r\n\r\nA \"one size fits all\" approach isn't something we will be able to standardize.\r\n\r\nI want to reposition `vim.lsp.buf.*` into API, and move away from users needing to invoke Lua functions directly. User commands should be used for this.\r\n\r\n> vim.uv in comparison is a low-level API that users rarely invoke directly without some program code around it.\r\n\r\nSome of it is low-level, but its API is a good design, which I want to replicate across all of our Nvim functions. Nothing about that design is \"low-level\", unless you consider API functions returning errors as low level.\r\n\r\n> Why would that be an issue?\r\n> You have to handle callback errors anyway.\r\n\r\nCallback errors are deferred. There are benefits in being able to process synchronous ones in the same event loop iteration since you know nothing in the environment has changed (buffers, etc).\r\n\r\n> Sometimes that's because there's a semantic difference, or because of other API implications. Take vim.uv.spawn for example. The function returns a handle/pid in the success case.\r\n\r\nThe same applies here. If we can't make requests, then there won't be requests we need to cancel. Cancellation of these actions is also planned, and will look similar to `vim.uv.*` in which the async function will return a handle which we can use to cancel the requests.\r\n\r\n> We don't have the same semantic requirements for vim.lsp.buf - except if you returned a handle/object too, e.g. one with :cancel.\r\n\r\nWe do have the same requirements.\r\n\r\n> That you want to introduce a internal wrapper is a sign that the API would be hard to use as-is, which again - goes to the question if those functions are high-level or low-level API.\r\n\r\nMore difficult to use specifically for keymaps, yes, easier to use as API, yes. Having a generic adapter function means we can have much more focussed API design without having to worry about unwanted side-effects (`silent`), and keymaps can just follow a slightly different pattern. It also means error handling for the interactive path happens in one place, instead of `vim.notify` being scattered in lots of places.\r\n\r\nThis also isn't so much of a question of high-level and low-level. Yes, removing `vim.nofify` calls and `silent` would make these _less_ high-level, but this is more of a question of API vs interactive use cases.\r\n\r\n> mho it should get a lot of weight, because it is not unusual to customize them. code_action is a good example which allows filtering and to apply the first match immediately without prompt to have a command/keymap for common actions like \"Organize Import\"\r\n\r\nOk, then we can expose the adapter function. This is an argument against `<Plug>` mappings though. I think this area still needs more work. Ideally, plugins should be able to re-implement certain editor operations without monkey patching code, and likewise users should be able to customise editor actions.\r\n\r\n> To handle that we could introduce a RequestErr object that even contains a __tostring__ for easy printing of a formatted error message.\r\n\r\nHonestly, I think this is a bad and messy idea. `__tostring__` would be ok for a human readable string of all the client errors, but it shouldn't be used for shoving in non-client errors. They really need to be handled separately.\r\n\r\n> With your suggested change I'd likely end up copying the internal error handling wrapper.\r\n\r\nWhy? The wrapper would just server as an adapter to get the _exact_ same capabilities we have now, specifically handling returned errors instead of implicitly calling `vim.notify`. I omitted other function parameters for brevity, but these would need to be catered for.\r\n\r\n",
            "created_at": "2025-09-08T11:22:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/35658#issuecomment-3265840211",
            "id": 3265840211,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
            "node_id": "IC_kwDOAPphoM7CqMRT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265840211/reactions"
            },
            "updated_at": "2025-09-08T11:27:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3265840211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35658/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35658/commits",
    "created_at": "2025-09-06T23:17:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35658.diff",
    "draft": true,
    "head": {
        "label": "MariaSolOs:lsp-errors",
        "ref": "lsp-errors",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2025-09-06T23:16:45Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 330188,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 4,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2025-09-01T20:58:20Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 4,
            "watchers_count": 4,
            "web_commit_signoff_required": false
        },
        "sha": "c31c462e02e3d69b17323edad8e8abf984f0149a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35658",
    "id": 2805549495,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35658",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "416fc2038720ead534d6f32575d3cc563977dcfd",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6nOUm3",
    "number": 35658,
    "patch_url": "https://github.com/neovim/neovim/pull/35658.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35658/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/c31c462e02e3d69b17323edad8e8abf984f0149a",
    "title": "feat(lsp): return code and error instead of using `vim.notify`",
    "updated_at": "2025-09-08T11:27:16Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35658",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs",
        "user_view_type": "public"
    }
}