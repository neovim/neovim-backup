{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32692/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32692/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/32692"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32692"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32692/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32692"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/98023b79414e9405b30e910ae07f65e1dfa10cad"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5926,
            "forks_count": 5926,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1872,
            "open_issues_count": 1872,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-03-11T01:51:56Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 311541,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 87036,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-03-11T02:33:20Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 87036,
            "watchers_count": 87036,
            "web_commit_signoff_required": false
        },
        "sha": "b45a44dd32634ed359e2dfde078f753e9e4e9294",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This greatly improves the performance of scrolling and re-parsing large buffers with combined injections (meaning lots of tracked regions). Instead of a linear search to find intersecting regions, the language tree now uses an interval tree which performs the search in logarithmic time.\r\n\r\nThings to note:\r\n\r\n- `LanguageTree:included_regions()` now returns regions in ascending order, sorted by region start point. It also no longer returns a table with holes. (I believe this also means `._trees` no longer has holes?)\r\n  - It can also be run asynchronously now, as it would cause a good amount of stutter when there was a large number of regions.\r\n- Regions in the interval tree are keyed by their convex hull, meaning one range which spans the start point of the first range and end point of the last range. This means that sometimes combined injections will match as \"intersecting\" even if they aren't technically in the viewport, but this doesn't affect the correctness of the code from what I can tell. The benefit is that this greatly simplifies the tree construction code, allowing it to be done in *linear time*.\r\n  - Each tree node still also keeps track of the original region data in another field.\r\n- Interval tree code was constructed by referencing [this Wikipedia article](https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree).\r\n- This commit removes the heuristic to keep some trees based on the amount of new injection regions, and always invalidates the injection trees upon re-parsing (since incremental tree validation was already not supported). Keeping that code added complexity, was expensive when there were many ranges, and was not always even applicable.",
    "closed_at": null,
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Before we continue with this; is there any reason we can't use extmarks for this instead which are already stored in a btree and are adjusted on edits. One reason I could think of is that we need a way to efficiently set the regions in the parser, which might be inefficient to pull out of the extmark tree.",
            "created_at": "2025-03-02T10:52:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692673166",
            "id": 2692673166,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6gfu6O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692673166/reactions"
            },
            "updated_at": "2025-03-02T10:52:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692673166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This commit removes the heuristic to keep some trees based on the amount of new injection regions, and always invalidates the injection trees upon re-parsing (since incremental tree validation was already not supported). Keeping that code added complexity, was expensive when there were many ranges, and was not always even applicable.\r\n\r\nNow that region lookup is cheap, what about looking up each new region for incremental invalidation? I think some code and tests can be adapted from https://github.com/neovim/neovim/pull/26827/commits/f13ab9a0bcb586efe7c3b3a1fad8f5679fd32905.",
            "created_at": "2025-03-02T12:45:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692714962",
            "id": 2692714962,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6gf5HS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692714962/reactions"
            },
            "updated_at": "2025-03-02T12:45:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692714962",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Before we continue with this; is there any reason we can't use extmarks for this instead which are already stored in a btree and are adjusted on edits. One reason I could think of is that we need a way to efficiently set the regions in the parser, which might be inefficient to pull out of the extmark tree.\r\n\r\nWouldn't this be expensive because the extmark tree could grow quite large and lookups can occur frequently? The proposed solution looks efficient and addresses performance and edge-case issues with the current implementation.\r\n\r\nPrior to this PR and browsing the existing solution I was thinking some kind of segment tree might be appropriate but @ribru17's interval tree approach is a better fit and at least as efficient.\r\n",
            "created_at": "2025-03-02T17:18:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692824117",
            "id": 2692824117,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggTw1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692824117/reactions"
            },
            "updated_at": "2025-03-02T17:18:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692824117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4213509?v=4",
                "events_url": "https://api.github.com/users/qgates/events{/privacy}",
                "followers_url": "https://api.github.com/users/qgates/followers",
                "following_url": "https://api.github.com/users/qgates/following{/other_user}",
                "gists_url": "https://api.github.com/users/qgates/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qgates",
                "id": 4213509,
                "login": "qgates",
                "node_id": "MDQ6VXNlcjQyMTM1MDk=",
                "organizations_url": "https://api.github.com/users/qgates/orgs",
                "received_events_url": "https://api.github.com/users/qgates/received_events",
                "repos_url": "https://api.github.com/users/qgates/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qgates/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qgates/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qgates",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Before we continue with this; is there any reason we can't use extmarks for this instead which are already stored in a btree and are adjusted on edits. One reason I could think of is that we need a way to efficiently set the regions in the parser, which might be inefficient to pull out of the extmark tree.\r\n\r\nInteresting idea. I wish I knew more about the extmark world to give a good answer, but I think that they could be used if they can answer \"yes\" to these questions (also assuming your proposed issue with using extmarks somehow isn't a problem):\r\n\r\n- Can we efficiently query all extmarks that intersect a given range? Or if not, would this be easy to update?\r\n- Can we store arbitrary data in extmarks? E.g. in our interval tree here we store the associated tree's index and its full parse range\r\n- Can you efficiently check if a given range is completely contained in the tree? I.e. I would love to use whatever tree structure we pick to address https://github.com/neovim/neovim/issues/32660#issuecomment-2692603524",
            "created_at": "2025-03-02T17:20:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692824999",
            "id": 2692824999,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggT-n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692824999/reactions"
            },
            "updated_at": "2025-03-02T17:20:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692824999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Wouldn't this be expensive because the extmark tree could grow quite large and lookups can occur frequently?\n\nYes exactly. The extmark tree is already implemented with a highly efficient data structure.",
            "created_at": "2025-03-02T17:58:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692837762",
            "id": 2692837762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggXGC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692837762/reactions"
            },
            "updated_at": "2025-03-02T17:58:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692837762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can we efficiently query all extmarks that intersect a given range? Or if not, would this be easy to update?\n\nYes, @bfredl added extranges for exactly this. Querying intersections is built directly into the structure.\n\n> Can we store arbitrary data in extmarks? E.g. in our interval tree here we store the associated tree's index and its full parse range\n\nNo, or not yet. We could hold userdata in a side table which is indexed with the extmark id?\n\n> Can you efficiently check if a given range is completely contained in the tree? I.e. I would love to use whatever tree structure we pick to address Syntax highlight flicker when same buffer open in multiple windows at different scroll positions #32660 (comment)\n\nI'm not sure. I think so. Isn't this the same as the first point?",
            "created_at": "2025-03-02T18:02:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692839031",
            "id": 2692839031,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggXZ3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692839031/reactions"
            },
            "updated_at": "2025-03-02T18:02:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692839031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure. I think so. Isn't this the same as the first point?\r\n\r\nYeah probably goes hand-in-hand with the first point, slightly different though. E.g. if our tree has ranges {0, 2} and {4, 5} then a query for ranges intersecting {0, 5} would return both ranges, but a query to check if {0, 5} is *fully* contained would return false (because there is a hole from {2, 4})",
            "created_at": "2025-03-02T18:21:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692846643",
            "id": 2692846643,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggZQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692846643/reactions"
            },
            "updated_at": "2025-03-02T18:21:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692846643",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "At the very least we could have an explicit mark for each region to cover this.\n\nThere are probably a few areas where we might have to be slightly creative to get the best design.\n\nThe only thing to keep in mind is the C<->Lua overhead. Additionally the marktree isn't the _fastest_ for iterating. It's designed for fast searching/querying, insertion and deletion of marks. If we need to iterate every range often, then it might not be worth considering.",
            "created_at": "2025-03-02T18:29:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692849263",
            "id": 2692849263,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggZ5v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692849263/reactions"
            },
            "updated_at": "2025-03-02T18:29:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692849263",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is there a way to populate the marktree efficiently when giving a sorted list of regions? Right now this PR populates the tree in linear time (rather than nlogn) by making use of the already sorted injection range list",
            "created_at": "2025-03-02T21:57:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692927973",
            "id": 2692927973,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggtHl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692927973/reactions"
            },
            "updated_at": "2025-03-02T21:57:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692927973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not sure. It's basically just a btree so however efficient that is. @bfredl and @luukvbaal will have a better idea.\n\nDo either of you think using the marktree for treesitter ranges would be worth pursuing? Or would a pure Lua interval tree be a better fit?",
            "created_at": "2025-03-02T22:13:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692934491",
            "id": 2692934491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggutb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692934491/reactions"
            },
            "updated_at": "2025-03-02T22:13:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692934491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It is essentially this https://atom-editor.cc/blog/2015/06/16/optimizing-an-important-atom-primitive/ except it is a 20-wide B+tree for cache locality but the principle is the same ",
            "created_at": "2025-03-02T22:30:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692941774",
            "id": 2692941774,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggwfO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692941774/reactions"
            },
            "updated_at": "2025-03-02T22:30:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692941774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I see... but to populate it we can only insert elements one at a time? I have found that an nlogn population for the tree was pretty catastrophic for languages with many regions",
            "created_at": "2025-03-02T22:43:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2692947434",
            "id": 2692947434,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ggx3q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692947434/reactions"
            },
            "updated_at": "2025-03-02T22:43:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2692947434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > This commit removes the heuristic to keep some trees based on the amount of new injection regions, and always invalidates the injection trees upon re-parsing (since incremental tree validation was already not supported). Keeping that code added complexity, was expensive when there were many ranges, and was not always even applicable.\r\n> \r\n> Now that region lookup is cheap, what about looking up each new region for incremental invalidation? I think some code and tests can be adapted from [f13ab9a](https://github.com/neovim/neovim/commit/f13ab9a0bcb586efe7c3b3a1fad8f5679fd32905).\r\n\r\nSorry, forgot to reply to this. I had thought about this, can look into it for a future PR, but wouldn't this mean the tree would need to incrementally update with edits? I don't know how to efficiently update the ranges if e.g. another tree is inserted before, so the trees after it need to get shifted over",
            "created_at": "2025-03-03T01:53:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2693075737",
            "id": 2693075737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6ghRMZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2693075737/reactions"
            },
            "updated_at": "2025-03-03T01:53:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2693075737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My two cents: I think using extmarks would be great but maybe should be left as a TODO. Doesn't look like there is a way to construct a mark tree in linear time right now, and constructing it in linearithmic time is not acceptable for large files (this comment agrees https://github.com/neovim/neovim/blob/47cfe901d739149f88b6f917fc1f310727700b40/src/nvim/extmark.c#L54). Also some complexity would exist to correlate the tree's marks with injection trees/regions since it is designed for extmark highlights primarily. If someone smarter than me (anyone else) disagrees then I'll defer to their opinion",
            "created_at": "2025-03-04T02:48:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2696041235",
            "id": 2696041235,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6gslMT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2696041235/reactions"
            },
            "updated_at": "2025-03-04T02:56:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2696041235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Doesn't look like there is a way to construct a mark tree in linear time right now, and constructing it in linearithmic time is not acceptable for large files\r\n\r\nIsn't this predicated on the constraint that we are running the full injection query on startup? Whereas the end-goal is to run the injection query as little as possible; at least for non-combined injections. For combined injections I'm leaning towards that either: we don't optimize for them, or, implement them differently to non-combined injections. Non-combined are much more typical, so they should be the focus.\r\n\r\n> Sorry, forgot to reply to this. I had thought about this, can look into it for a future PR, but wouldn't this mean the tree would need to incrementally update with edits? I don't know how to efficiently update the ranges if e.g. another tree is inserted before, so the trees after it need to get shifted over\r\n\r\nDoes this imply that the interval tree doesn't handle insertion/deletion of elements efficiently? This is something we need as we are using treesitter in a text-editor.",
            "created_at": "2025-03-05T10:40:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2700530879",
            "id": 2700530879,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6g9tS_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2700530879/reactions"
            },
            "updated_at": "2025-03-05T10:40:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2700530879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Isn't this predicated on the constraint that we are running the full injection query on startup? Whereas the end-goal is to run the injection query as little as possible; at least for non-combined injections. For combined injections I'm leaning towards that either: we don't optimize for them, or, implement them differently to non-combined injections. Non-combined are much more typical, so they should be the focus.\r\n\r\nYeah, but this PR was specifically made to address combined injection performance. Imo the performance for non-combined injections is already (practically) as good as possible. The only improvement would be incremental injection parsing/validation but that is a really tall order and imo relies on https://github.com/tree-sitter/tree-sitter/discussions/800\r\n\r\n> Does this imply that the interval tree doesn't handle insertion/deletion of elements efficiently? This is something we need as we are using treesitter in a text-editor.\r\n\r\nWell upon editing all injection trees are invalidated, so no latency will be noticed while editing but parsing won't be incremental for the injection trees. This is the case before and after this PR (but I think I'll add back the validation heuristic from earlier for a slight perf help). This PR keeps the same performance when finding injection ranges, and just improves `is_valid()` meaning that e.g. scrolling buffers with lots of combined injections will no longer be insanely slow. Ofc incremental validation would be great but I didn't want that in the scope of this PR",
            "created_at": "2025-03-05T16:41:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701491501",
            "id": 2701491501,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hBX0t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701491501/reactions"
            },
            "updated_at": "2025-03-05T16:41:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701491501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Ofc incremental validation would be great but I didn't want that in the scope of this PR\n\nThe main concern is about investing along a design route that will eventually become obsolete, that was the reason I made the suggestion about exploring using the marktree. Otherwise we are over-investing in a local-maxima.",
            "created_at": "2025-03-05T17:22:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701595630",
            "id": 2701595630,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hBxPu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701595630/reactions"
            },
            "updated_at": "2025-03-05T17:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701595630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah that's fair. Though I would say investing in the marktree would be a similar situation (obviously not as bad because the data structure is already there). Ideally, I think we would assign injections to nodes in the parent tree, and those nodes' ranges are the injection regions we track. They would ideally be updated after each parse without need for any other overhead, and if the node is no longer present we would be able to see that and remove it. Then if we had this, we could probably just run the injection query over changed tree regions (after an edit, to detect new nodes), so things will be as efficient as possible",
            "created_at": "2025-03-05T17:29:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701614215",
            "id": 2701614215,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hB1yH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701614215/reactions"
            },
            "updated_at": "2025-03-05T17:34:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701614215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Interesting. I don't think there's anything preventing us from doing that now, we own the node metatable so should be able to add whatever userdata we want to it.",
            "created_at": "2025-03-05T17:40:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701638694",
            "id": 2701638694,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hB7wm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701638694/reactions"
            },
            "updated_at": "2025-03-05T17:40:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701638694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That would be great then. Do we have a way to refresh stored nodes after a tree parse?",
            "created_at": "2025-03-05T17:47:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701655523",
            "id": 2701655523,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hB_3j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701655523/reactions"
            },
            "updated_at": "2025-03-05T17:47:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701655523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Erm, good question, this probably needs more thought. Might actually require upstream support (for node userdata).\n\nMaybe we can do it indirectly by using the node id as a key into a side table? We'd need to leverage a weak table somehow to prevent memory leaks.",
            "created_at": "2025-03-05T17:50:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701661678",
            "id": 2701661678,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hCBXu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701661678/reactions"
            },
            "updated_at": "2025-03-05T17:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701661678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That makes sense- according to Max even unchanged nodes can have their ID's changed after a parse, and I've noticed it's basically any node after an edit sadly (he did say it was a conservative way of tracking them...). But I guess depending on our implementation this could be anything from an extra inefficiency to actually breaking correctness",
            "created_at": "2025-03-05T17:53:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/32692#issuecomment-2701669452",
            "id": 2701669452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
            "node_id": "IC_kwDOAPphoM6hCDRM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701669452/reactions"
            },
            "updated_at": "2025-03-05T17:53:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2701669452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32692/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/32692/commits",
    "created_at": "2025-03-02T07:31:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/32692.diff",
    "draft": true,
    "head": {
        "label": "ribru17:interval_tree",
        "ref": "interval_tree",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ribru17/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ribru17/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ribru17/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ribru17/neovim/branches{/branch}",
            "clone_url": "https://github.com/ribru17/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ribru17/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ribru17/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ribru17/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ribru17/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ribru17/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ribru17/neovim/contributors",
            "created_at": "2023-12-31T05:02:30Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ribru17/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ribru17/neovim/downloads",
            "events_url": "https://api.github.com/repos/ribru17/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ribru17/neovim/forks",
            "full_name": "ribru17/neovim",
            "git_commits_url": "https://api.github.com/repos/ribru17/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ribru17/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ribru17/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ribru17/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ribru17/neovim/hooks",
            "html_url": "https://github.com/ribru17/neovim",
            "id": 737455179,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ribru17/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ribru17/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ribru17/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ribru17/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ribru17/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ribru17/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ribru17/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ribru17/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK_SsSw",
            "notifications_url": "https://api.github.com/repos/ribru17/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ribru17/neovim/pulls{/number}",
            "pushed_at": "2025-03-11T02:11:13Z",
            "releases_url": "https://api.github.com/repos/ribru17/neovim/releases{/id}",
            "size": 303065,
            "ssh_url": "git@github.com:ribru17/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ribru17/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ribru17/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ribru17/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ribru17/neovim/subscription",
            "svn_url": "https://github.com/ribru17/neovim",
            "tags_url": "https://api.github.com/repos/ribru17/neovim/tags",
            "teams_url": "https://api.github.com/repos/ribru17/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ribru17/neovim/git/trees{/sha}",
            "updated_at": "2025-03-11T02:11:24Z",
            "url": "https://api.github.com/repos/ribru17/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "98023b79414e9405b30e910ae07f65e1dfa10cad",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/32692",
    "id": 2366526574,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32692",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f9063d77f1696cc4d8dfbc0949a663ddee0bbfcc",
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 1,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 50,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-03-10T13:27:33Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "PR_kwDOAPphoM6NDlRu",
    "number": 32692,
    "patch_url": "https://github.com/neovim/neovim/pull/32692.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/32692/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/98023b79414e9405b30e910ae07f65e1dfa10cad",
    "title": "perf(treesitter): track injection regions in an interval tree",
    "updated_at": "2025-03-05T17:53:46Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/32692",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17",
        "user_view_type": "public"
    }
}