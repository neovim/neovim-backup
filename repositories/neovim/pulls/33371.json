{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33371/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33371/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33371"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33371"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33371/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33371"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/f1a417daac341468b52421941371e4069095e0d1"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6116,
            "forks_count": 6116,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1969,
            "open_issues_count": 1969,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-10T00:47:14Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 327001,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90210,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-10T02:19:20Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90210,
            "watchers_count": 90210,
            "web_commit_signoff_required": false
        },
        "sha": "dd9ac565d867b1388266969614530bedb7da7405",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This pr aims to add multiline support to the prompt buffer. For now this is just a POC.\r\n\r\nWorks toward #32420 and #32661\r\n\r\n### Proposal:\r\n- Track how much text has been submitted already to the prompt buffer callback.\r\n- When the user submits, send the text after the previously submitted point.\r\n- Make the content before last submit Readonly so it's locked in place.\r\n\r\n### Questions:\r\n- How to handle buffer changes through API ?\r\n- ~~The callback may insert or remove text in the buffer before we lock in the submit location?~~\r\n- Should we expose this location to user somehow?\r\n\r\n### Example:\r\n\r\nhttps://github.com/user-attachments/assets/5b45027d-328c-46f3-a70d-6342d3fa6d84\r\n\r\n\r\n### Notes\r\n- [x] Figure out how submition key should be mapped (enter, shift-enter, custom?)\r\n       Choosing shift enter for new line and enter as submit for now.\r\n- [x] Fix undo/redo (why doesn't it work?) (undo redo with partially modifiable buffer is complicated. I guess that's why it's disabled. What to do. a ton of edge cases. Particularly since under works in branches. Also buftype can be changed at any point)\r\n- [ ] dd on prompt line clears the prompt too (fix it)\r\n- [x] o/O in normal mode doesn't work. it shoudl create a newline\r\n       - check nv_open in normal.c, open_line in change.c . basic editibility check won't be enough. Probably the undo redo and dd ar the same. One key issue is operators can work on multiple lines at a time. How to handle that when only part of buffer is editable. For example with O on prompt line should we all text below it one line down and put a line there at prompt?\r\n- [ ] bug after O prompt text becomes editable. figure out why\r\n- [x] a/i at prompt location creates a new prompt in a newline when user input to prompt is none\r\n- [ ] enter on normal mode submits the text should we retain this behavior?\r\n- [x] When buftype is set to prompt set the last submit location to end of buffer\r\n- [ ] Things like d5k doesn't work (it deletes non editable region) (broken on master too)\r\n- [ ] Backspace doesn't work sometimes in prompt buffer where it should (Can't seem to reproduce now)\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33371#discussion_r2072629570"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33371"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072629570"
                }
            },
            "author_association": "MEMBER",
            "body": "can use memcpy since we already calculated the lengths. not sure why `concat_str` doesn't do that.",
            "commit_id": "f1a417daac341468b52421941371e4069095e0d1",
            "created_at": "2025-05-04T14:15:43Z",
            "diff_hunk": "@@ -574,6 +574,20 @@ char *concat_str(const char *restrict str1, const char *restrict str2)\n   return dest;\n }\n \n+/// Concatenate two strings with separator in middle and return the result in allocated memory.\n+char *join_str(const char *restrict str1, const char *restrict str2, const char *restrict sep)\n+  FUNC_ATTR_NONNULL_RET FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL\n+{\n+  size_t l = strlen(str1);\n+  size_t s = strlen(sep);\n+  char *dest = xmalloc(l + s + strlen(str2) + 1);\n+  STRCPY(dest, str1);",
            "html_url": "https://github.com/neovim/neovim/pull/33371#discussion_r2072629570",
            "id": 2072629570,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57idFC",
            "original_commit_id": "4010b2308b960d84ded2b8a0f27adfd8d564a2f8",
            "original_line": 584,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/strings.c",
            "position": null,
            "pull_request_review_id": 2813479418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33371",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072629570/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-04T14:15:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072629570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33371#discussion_r2072629998"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33371"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072629998"
                }
            },
            "author_association": "MEMBER",
            "body": "since `join_str` isn't joining a list (`ga_concat_strings_sep` does that already), it's probably not that useful. the normal way to do this would be like:\r\n\r\n    a2 = concat_str(a, \",\")\r\n    a3 = concat_str(a2, b)",
            "commit_id": "f1a417daac341468b52421941371e4069095e0d1",
            "created_at": "2025-05-04T14:18:31Z",
            "diff_hunk": "@@ -574,6 +574,20 @@ char *concat_str(const char *restrict str1, const char *restrict str2)\n   return dest;\n }\n \n+/// Concatenate two strings with separator in middle and return the result in allocated memory.\n+char *join_str(const char *restrict str1, const char *restrict str2, const char *restrict sep)\n+  FUNC_ATTR_NONNULL_RET FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL\n+{\n+  size_t l = strlen(str1);\n+  size_t s = strlen(sep);\n+  char *dest = xmalloc(l + s + strlen(str2) + 1);\n+  STRCPY(dest, str1);\n+  STRCPY(dest + l, sep);",
            "html_url": "https://github.com/neovim/neovim/pull/33371#discussion_r2072629998",
            "id": 2072629998,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57idLu",
            "original_commit_id": "4010b2308b960d84ded2b8a0f27adfd8d564a2f8",
            "original_line": 585,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/strings.c",
            "position": null,
            "pull_request_review_id": 2813480000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33371",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072629998/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-04T14:18:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072629998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33371#discussion_r2072643953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33371"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072643953"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> (ga_concat_strings_sep does that already),\r\n\r\nGreat. I was so sure there has to be equivalent of this already in the codebase. But couldn't find it. I'll move it to reuse ga_concat_strings_sep. Or the above double call as you've suggested. I was trying to reduce the number of copies we make I think.",
            "commit_id": "f1a417daac341468b52421941371e4069095e0d1",
            "created_at": "2025-05-04T15:22:38Z",
            "diff_hunk": "@@ -574,6 +574,20 @@ char *concat_str(const char *restrict str1, const char *restrict str2)\n   return dest;\n }\n \n+/// Concatenate two strings with separator in middle and return the result in allocated memory.\n+char *join_str(const char *restrict str1, const char *restrict str2, const char *restrict sep)\n+  FUNC_ATTR_NONNULL_RET FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL\n+{\n+  size_t l = strlen(str1);\n+  size_t s = strlen(sep);\n+  char *dest = xmalloc(l + s + strlen(str2) + 1);\n+  STRCPY(dest, str1);\n+  STRCPY(dest + l, sep);",
            "html_url": "https://github.com/neovim/neovim/pull/33371#discussion_r2072643953",
            "id": 2072643953,
            "in_reply_to_id": 2072629998,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57iglx",
            "original_commit_id": "4010b2308b960d84ded2b8a0f27adfd8d564a2f8",
            "original_line": 585,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/strings.c",
            "position": null,
            "pull_request_review_id": 2813495435,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33371",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072643953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-04T15:22:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2072643953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33371#discussion_r2096865338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33371"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2096865338"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk this basically breaks current prompt buffer behavior. Since currently pressing `<enter>` directly submites the prompt. I don't think we should break this behavior. I can think of couple of alternatives\r\n\r\n1. Make <enter> submit the user input and shift+<enter> enters a new line in prompt buffer. With it we have a question. Multiline paste needs to work with this too, obviously. But it won't directly work as it does like this. Since the paste won't have shift+enter. Is pasting tracked somewhere? Is there a way to differentiate paste from userinput? particularly when done with `<C-r>` in input mode?\r\n2. Add a way to configure the submit button. set_prompt_submit_key(\"<cr>\") for example. The default being `<cr>` when `<cr>` is used is submit key prompt buffer retains all current behavior with all it's flaws. If the submit key is set to some other key, then the multi line functionalities work.\r\n3. Define e separate buftype for a multiline prompt buffer. separating it from the current prompt buffer behavior we have.\r\n\r\n2 and 3 basically make multi-line support opt-in. I guess some combination of these can also be done. What do you think?",
            "commit_id": "f1a417daac341468b52421941371e4069095e0d1",
            "created_at": "2025-05-20T04:08:04Z",
            "diff_hunk": "@@ -1067,7 +1067,7 @@ static int insert_handle_key(InsertState *s)\n       cmdwin_result = CAR;\n       return 0;\n     }\n-    if (bt_prompt(curbuf)) {\n+    if (mod_mask & MOD_MASK_SHIFT && bt_prompt(curbuf)) {",
            "html_url": "https://github.com/neovim/neovim/pull/33371#discussion_r2096865338",
            "id": 2096865338,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM58-6A6",
            "original_commit_id": "4010b2308b960d84ded2b8a0f27adfd8d564a2f8",
            "original_line": 1070,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": null,
            "pull_request_review_id": 2852526574,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33371",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2096865338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-01T23:40:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2096865338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33371#discussion_r2119733835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33371"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2119733835"
                }
            },
            "author_association": "MEMBER",
            "body": ">  Is pasting tracked somewhere? Is there a way to differentiate paste from userinput? particularly when done with `<C-r>` in input mode?\r\n\r\nyes, in `src/nvim/getchar.c`, see `paste_store` and `paste_repeat`. but, I think we shouldn't mess with that. \r\n\r\ninstead, to avoid \"breaking\" the current prompt-buffer behavior, we can define a *default mapping* so that `<Enter>` continues to work as users expect. but plugins/users can easily support Enter-as-newline by *unmapping* that default mapping.\r\n\r\nthus, internally, at a low-level, we use something like you have here to \"submit\". and we just define a default mapping for Enter (`:nnoremap <CR> <S-CR>`) in prompt-buffers.\r\n\r\n> Add a way to configure the submit button. set_prompt_submit_key(\"\") for example\r\n\r\ncan't that be a mapping (see above)? \r\n\r\n> Define e separate buftype for a multiline prompt buffer.\r\n\r\ndon't think we need this.",
            "commit_id": "f1a417daac341468b52421941371e4069095e0d1",
            "created_at": "2025-06-01T23:46:54Z",
            "diff_hunk": "@@ -1067,7 +1067,7 @@ static int insert_handle_key(InsertState *s)\n       cmdwin_result = CAR;\n       return 0;\n     }\n-    if (bt_prompt(curbuf)) {\n+    if (mod_mask & MOD_MASK_SHIFT && bt_prompt(curbuf)) {",
            "html_url": "https://github.com/neovim/neovim/pull/33371#discussion_r2119733835",
            "id": 2119733835,
            "in_reply_to_id": 2096865338,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-WJJL",
            "original_commit_id": "4010b2308b960d84ded2b8a0f27adfd8d564a2f8",
            "original_line": 1070,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": null,
            "pull_request_review_id": 2886281737,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33371",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2119733835/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-01T23:46:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2119733835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> Track how much text has been submitted already to the prompt buffer callback.\r\n\r\nhere be dragons. does it handle deleted text? `dd` deletes text in prompt buffers.\r\n\r\nis there a way we can avoid maintaining this extra state? tends to be fragile.",
            "created_at": "2025-05-04T14:19:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2849246950",
            "id": 2849246950,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6p1A7m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849246950/reactions"
            },
            "updated_at": "2025-05-04T14:19:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849246950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> here be dragons. does it handle deleted text? dd deletes text in prompt buffers.\r\n\r\nIt does handle text deletion in current prompt. And previous text before that is basically readonly. I think I did show c/d operations in the demo.\r\n\r\nWhat I'm not sure if it handles right is probably editing actions through API. I haven't done serious testing on that but I suspect there might be bunch of edge-cases there.\r\n\r\n> is there a way we can avoid maintaining this extra state? tends to be fragile.\r\n\r\nTrue. I've been thinking about it. Before this the prompt was always lastline of buffer. When we allow multilines that's no longer true. It seems to me we have to track that state of it to work. Open to ideas though.\r\n\r\nAlso it's currently not worth reviewing. I had marely put together a quick prototype. It needs more work before it can be considered.",
            "created_at": "2025-05-04T15:32:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2849279368",
            "id": 2849279368,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6p1I2I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849279368/reactions"
            },
            "updated_at": "2025-05-04T15:32:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849279368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It seems to me we have to track that state of it to work.\r\n\r\nThe `'[` / `']` marks are doing that to some extent. Ideally we can just re-use those, and any cases that are missed, can be delegated to that instead of managing it specifically for prompt buffers.",
            "created_at": "2025-05-04T15:41:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2849283665",
            "id": 2849283665,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6p1J5R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849283665/reactions"
            },
            "updated_at": "2025-05-04T17:49:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849283665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > It seems to me we have to track that state of it to work.\r\n> \r\n> The `'[` / `']` are doing that to some extent. Ideally we can just re-use those, and any cases that are missed, can be delegated to that instead of managing it specifically for prompt buffers.\r\n\r\nI'm currently not aware of what they do. Will  look into that. If there's already something keeping track of things like that, it's definitely better to use that instead of adding a new one.",
            "created_at": "2025-05-04T16:20:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2849298622",
            "id": 2849298622,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6p1Ni-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849298622/reactions"
            },
            "updated_at": "2025-05-04T16:20:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2849298622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk I'm seeing that lots of the editing stuff doesn't support the prompt buffer. For example, undo/redo is disabled. Things like range edits (like `d5k` in normal mode) can modify read-only portions of the buffer. The main issue is the read-only and writeable segments in the same buffer. Good part of neovim treats it as non-existent. Or broadly disables the feature to avoid facing it. Can you check the Notes section in the pr? And provide your opinion on those? I feel like achieving 100% regular buffer like editing experience will be complicated. But we can probably get to 90% of that without way there. I'm not sure how to deal with undo/redo yet, though.\r\n\r\nAlso, I looked at '[ , '] marks. They basically kind of do the same. They work by adding Pos_T variables (b_op_start,, b_op_end) to the file_buffer struct, like I'm adding the line number here. Then the mark system uses those values from the buffer to expose those positions as marks. Even if we go that route, we'll be adding an additional state. With marks, we can expose it to the user, but that takes away at least a key for the mark spot. I'm not sure if any special ones are still unused. Also, we can't directly overload '[/ '] marks. They kind of represent completely different thing from what we are trying to achieve here. \r\n\r\n",
            "created_at": "2025-05-20T11:06:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2893934521",
            "id": 2893934521,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6sfe-5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893934521/reactions"
            },
            "updated_at": "2025-05-20T12:14:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2893934521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I feel like achieving 100% regular buffer like editing experience will be complicated. But we can probably get to 90% of that without way there. I'm not sure how to deal with undo/redo yet, though.\r\n\r\nyeah, I don't think 100% is a goal. the idea of https://github.com/neovim/neovim/issues/32420 is primarily that the *input* (writable) section can intuitively support multiline input.\r\n\r\nlet's consider undo/redo out of scope, they aren't useful in prompt buffers afaik.\r\n\r\nhowever, a major goal is that it should be easy for plugins to get the text of the *current prompt* (multiline or not) and be able to *update* the unsubmitted prompt. that avoids the need to support every editing feature, because then plugins can do fancy stuff in e.g. a floating window.\r\n\r\n> How to handle buffer changes through API ?\r\n\r\nplugins are free to do arbirary things to prompt-buffers. there is no defined expectation for this.\r\n\r\nthe important thing is that we maintain a meaningful region for the \"writeable\" (prompt) region vs the \"readonly\" region.\r\n\r\n> The callback may insert or remove text in the buffer before we lock in the submit location?\r\n\r\nthe `'[` or `'.` mark tells us the last-changed part. we shouldn't be trying to calculate that any other way. if that mark is telling us the wrong thing, we need to find out why and perhaps fix it.\r\n",
            "created_at": "2025-06-02T00:10:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2928174337",
            "id": 2928174337,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6uiGUB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2928174337/reactions"
            },
            "updated_at": "2025-06-02T00:10:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2928174337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> however, a major goal is that it should be easy for plugins to get the text of the current prompt (multiline or not) and be able to update the unsubmitted prompt\r\n\r\nThat much is already done. \r\n\r\n> the important thing is that we maintain a meaningful region for the \"writeable\" (prompt) region vs the \"readonly\" region.\r\n\r\nMy question basically was, do we block changes in the readonly section from the API too? Or should we allow api to make arbitrary changes to the buffer? Even on the ReadOnly section. That gives extra power to the plugins. Technically, we can't exactly block it either. As the plugin can just switch the buftype to regular text make arbitrary changes, then switch back to the prompt buffer. So maybe it's not worth blocking APIs.\r\n\r\n> the '[ or '. mark tells us the last-changed part. we shouldn't be trying to calculate that any other way. if that mark is telling us the wrong thing, we need to find out why and perhaps fix it.\r\n\r\nThat's different. It's doing what it's supposed to do. For example, say you are editing something in insert mode. Then went to different line edited that. The marks are keeping track of that. But that's not what we need we need the start of current prompt. Modifying the prompt is not one edit actions. There can be multiple as user switches between modes or applies some operator. The '[ mark will track only the last edit action not the whole prompt edit.\r\n\r\n> The callback may insert or remove text in the buffer before we lock in the submit location?\r\n\r\nThat question is resolved now. We track the last submit location after callback is done. So any modifications done in the callback would be tracked. What we are not tracking is edits through api. I think I should take a look at mark/extmark subsystem to see if we can leverage that to keep track of api edits.",
            "created_at": "2025-06-02T06:11:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2928971424",
            "id": 2928971424,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6ulI6g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2928971424/reactions"
            },
            "updated_at": "2025-06-02T06:11:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2928971424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> let's consider undo/redo out of scope, they aren't useful in prompt buffers afaik.\r\n\r\nAn alternative would be to allow undo but delete the past undo history at submission (or perhaps rather reply) time. This makes it possible to undo while editing one specific input section, but you cannot undo things owned by the plugin or somehow go back to earlier sections.",
            "created_at": "2025-06-02T07:03:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2929122676",
            "id": 2929122676,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6ult10",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2929122676/reactions"
            },
            "updated_at": "2025-06-02T07:03:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2929122676",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My question basically was, do we block changes in the readonly section from the API too?\r\n\r\nPlugins (e.g. AI chat plugins) need to be able to show arbitrary stuff in the \"readonly\" section.\r\n\r\nWhy would we want to block changes to the readonly section? Our central task is to correctly set the \"prompt\" region, and we don't care what happens in the \"readonly\" region as long as the user *editing* UX isn't weird.\r\n\r\nUsing a extmark `nvim_buf_set_extmark()` may \"track\" changes, or at least it should in theory. Try setting an extmark on the readonly \"boundary\", and it should adjust as edits are made (by plugin code) to the \"readonly\" region.",
            "created_at": "2025-06-02T11:16:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2930109765",
            "id": 2930109765,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6upe1F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930109765/reactions"
            },
            "updated_at": "2025-06-02T11:16:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2930109765",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> An alternative would be to allow undo but delete the past undo history at submission (or perhaps rather reply) time. This makes it possible to undo while editing one specific input section, but you cannot undo things owned by the plugin or somehow go back to earlier sections.\r\n\r\nThat's a really good idea. I'll try that out.\r\n\r\n> Plugins (e.g. AI chat plugins) need to be able to show arbitrary stuff in the \"readonly\" section.\r\nWhy would we want to block changes to the readonly section? Our central task is to correctly set the \"prompt\" region, and we don't care what happens in the \"readonly\" region as long as the user editing UX isn't weird.\r\n\r\nYeah we don't want to block that. That basic chat behavior is already possible by modifying the buffer in submission callback. What's missing is is if some arbitary edit is done on read only part outside of the callback. Because that can break how last prompt submit is tracked. \r\n\r\nFor example, currently master. Prompt buffer submits last line all the time. Say user is modifying editing the prompt submission. At that moment some other running code appends to the buffer. Basically changing the location of last line. Now users old input is practically lost. Last line would get submitted to callback at enter. We are still suffering from that issue in the pr too. But in a different way. If some line get's added/removed in the readonly section (text above current prompt)  we will sent wrong lines in submission as our last submit position is wrong. This issue doesn't occur if edits are done in prompt submit callback as we expect changes to happen in that windows.\r\n\r\nSo basically even if we aren't blocking the ali edits in readonly we want to keep track of them. I'll checkout how extmarks track edits. I think having last submit location as extmark would be much more useful then just a LineNo.",
            "created_at": "2025-06-02T14:33:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2931018998",
            "id": 2931018998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6us8z2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2931018998/reactions"
            },
            "updated_at": "2025-06-02T14:33:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2931018998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can Neovim detect Shift+Enter on all kinds of terminals? Or at least on most of them? I primarily use kitty. But also tried out on konsole (kde terminal) there it doesn't seem to detect shifted `<CR>`.\r\n\r\nNow I feel like assigning `<CR>` for submit and `<S-CR>` as insert line is better. Because,\r\n1. Keeps backward compatibility. `<CR>` just submits as before\r\n2. `<S-CR>` is always available for entering multiple lines on all prompt buffers. Plugins don't need to add explicit support.\r\n    if they don't want multiline text they can just map `<S-CR>` to `<NOP>`  `inoremap <S-CR> <NOP>`. It's also pretty simple to just split the input before processing in the callback\r\n3. If in some terminal, neovim can't detect `<S-CR>` prompt buffer still works. Although multiline won't work. At least, single-line inputs will be working. Technically, multiline can still be done with `o/O` in normal mode even in that case. On the other hand, if we map `<CR>` to `<S-CR>` and treat that as submit prompt buffers will be completely broken. As submitting won't work without `<S-CR>` being detected.\r\n4. If some plugin want's `<CR>` to add newline and `<S-CR>` to be submit. They can just remap the keys.\r\n```viml\r\n     inoremap <CR> <S-CR>\r\n     inoremap <S-CR> <CR>\r\n```\r\n\r\nParticularly, 2 and 3 are clear wins compared to the other approach, and we don't lose anything doing it this way.\r\n",
            "created_at": "2025-06-04T14:52:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/33371#issuecomment-2940351633",
            "id": 2940351633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
            "node_id": "IC_kwDOAPphoM6vQjSR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2940351633/reactions"
            },
            "updated_at": "2025-06-04T14:55:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2940351633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33371/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33371/commits",
    "created_at": "2025-04-07T13:51:57Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33371.diff",
    "draft": true,
    "head": {
        "label": "shadmansaleh:feat/multiline_promptbuffer",
        "ref": "feat/multiline_promptbuffer",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/shadmansaleh/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/shadmansaleh/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/shadmansaleh/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/shadmansaleh/neovim/branches{/branch}",
            "clone_url": "https://github.com/shadmansaleh/neovim.git",
            "collaborators_url": "https://api.github.com/repos/shadmansaleh/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/shadmansaleh/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/shadmansaleh/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/shadmansaleh/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/shadmansaleh/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/shadmansaleh/neovim/contributors",
            "created_at": "2021-03-16T15:07:33Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/shadmansaleh/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/shadmansaleh/neovim/downloads",
            "events_url": "https://api.github.com/repos/shadmansaleh/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/shadmansaleh/neovim/forks",
            "full_name": "shadmansaleh/neovim",
            "git_commits_url": "https://api.github.com/repos/shadmansaleh/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/shadmansaleh/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/shadmansaleh/neovim/git/tags{/sha}",
            "git_url": "git://github.com/shadmansaleh/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/shadmansaleh/neovim/hooks",
            "html_url": "https://github.com/shadmansaleh/neovim",
            "id": 348391941,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/shadmansaleh/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/shadmansaleh/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/shadmansaleh/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/shadmansaleh/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/shadmansaleh/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/shadmansaleh/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/shadmansaleh/neovim/merges",
            "milestones_url": "https://api.github.com/repos/shadmansaleh/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNDgzOTE5NDE=",
            "notifications_url": "https://api.github.com/repos/shadmansaleh/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/shadmansaleh/neovim/pulls{/number}",
            "pushed_at": "2025-06-09T05:31:35Z",
            "releases_url": "https://api.github.com/repos/shadmansaleh/neovim/releases{/id}",
            "size": 317902,
            "ssh_url": "git@github.com:shadmansaleh/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/shadmansaleh/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/shadmansaleh/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/shadmansaleh/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/shadmansaleh/neovim/subscription",
            "svn_url": "https://github.com/shadmansaleh/neovim",
            "tags_url": "https://api.github.com/repos/shadmansaleh/neovim/tags",
            "teams_url": "https://api.github.com/repos/shadmansaleh/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/shadmansaleh/neovim/git/trees{/sha}",
            "updated_at": "2025-06-04T14:09:54Z",
            "url": "https://api.github.com/repos/shadmansaleh/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "f1a417daac341468b52421941371e4069095e0d1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
            "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
            "followers_url": "https://api.github.com/users/shadmansaleh/followers",
            "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
            "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/shadmansaleh",
            "id": 13149513,
            "login": "shadmansaleh",
            "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
            "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
            "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
            "repos_url": "https://api.github.com/users/shadmansaleh/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/shadmansaleh",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33371",
    "id": 2443399890,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33371",
    "labels": [
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "fba15828d6d61a69ff6da3aabe9c1e24b822abb7",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6Ro1LS",
    "number": 33371,
    "patch_url": "https://github.com/neovim/neovim/pull/33371.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33371/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/f1a417daac341468b52421941371e4069095e0d1",
    "title": "WIP: Add support for multiline input in prompt buffer",
    "updated_at": "2025-06-04T14:55:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33371",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
        "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
        "followers_url": "https://api.github.com/users/shadmansaleh/followers",
        "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
        "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/shadmansaleh",
        "id": 13149513,
        "login": "shadmansaleh",
        "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
        "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
        "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
        "repos_url": "https://api.github.com/users/shadmansaleh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/shadmansaleh",
        "user_view_type": "public"
    }
}