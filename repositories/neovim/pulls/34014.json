{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34014/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34014/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34014"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34014"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34014/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/13de3e3b8f0bd2692a50c004c367bdb24d9f866d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6134,
            "forks_count": 6134,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1965,
            "open_issues_count": 1965,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-17T02:49:56Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 328511,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90375,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-17T02:36:18Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90375,
            "watchers_count": 90375,
            "web_commit_signoff_required": false
        },
        "sha": "5ea6a022c02d278008fabc71970765fa282311ce",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\r\nDiagnostic positions are not being updated after text changes, which means `vim.diagnostic.open_float` and `vim.diagnostic.jump` will work with outdated positions when text is changed until diagnostics are updated again (if ever).\r\n\r\nSolution:\r\nCreate extmarks in `vim.diagnostic.set` and use their positions for `vim.diagnostic.open_float` and `next_diagnostic` (used by `vim.diagnostic.jump`, `vim.diagnostic.get_next` and `vim.diagnostic.get_prev`).\r\n\r\n### A bit more details\r\n\r\nBuiltin handlers use extmarks (even if indirectly), so visually it looks fine,\r\nbut `open_float` and `jump` use original positions directly causing a mismatch.\r\n\r\nExamples:\r\n\r\n1. When writing a treesitter query, ftplugin for it has linting on save out of\r\nthe box, which sets diagnostics which are then not updated until the next save.\r\n2. LSP diagnostics. Some servers (probably only in very large projects) might\r\nnot be able to update diagnostics fast enough.\r\n3. Setting diagnostics from quickfix list. You set diagnostics\r\n`vim.diagnostic.fromqflist` + `vim.diagnostic.set` inside `QuickFixCmdPost`\r\nautocmd, which won't be updated until next time you run `:make`, even though\r\nquickfix list itself usually adjusts positions just fine. It's possible to work\r\naround that by setting diagnostics again in `TextChanged` autocmd, but would be\r\nnicer to turn it into an easier more out-of-the-box experience.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2088066037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088066037"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "should `type(opts.namespace) == 'table'` case be supported?\r\n\r\nNeither types nor docs seem to allow it, but implicitly it has been supported since\r\n`get_diagnostics` does",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-14T05:27:00Z",
            "diff_hunk": "@@ -2150,43 +2277,69 @@ function M.open_float(opts, ...)\n   end\n \n   local scope = ({ l = 'line', c = 'cursor', b = 'buffer' })[opts.scope] or opts.scope or 'line'\n-  local lnum, col --- @type integer, integer\n-  local opts_pos = opts.pos\n+  local extmarks_start = { 0, 0 }\n+  local extmarks_end = { -1, -1 }\n   if scope == 'line' or scope == 'cursor' then\n+    local opts_pos = opts.pos\n+\n     if not opts_pos then\n       local pos = api.nvim_win_get_cursor(0)\n-      lnum = pos[1] - 1\n-      col = pos[2]\n+      extmarks_start[1] = pos[1] - 1\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = pos[2]\n+      end\n     elseif type(opts_pos) == 'number' then\n-      lnum = opts_pos\n+      extmarks_start[1] = opts_pos\n     elseif type(opts_pos) == 'table' then\n-      lnum, col = opts_pos[1], opts_pos[2]\n+      extmarks_start[1] = opts_pos[1]\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = opts_pos[2]\n+      end\n     else\n       error(\"Invalid value for option 'pos'\")\n     end\n+\n+    extmarks_end[1] = extmarks_start[1]\n+\n+    if scope == 'cursor' then\n+      extmarks_end[2] = extmarks_start[2]\n+    end\n   elseif scope ~= 'buffer' then\n     error(\"Invalid value for option 'scope'\")\n   end\n \n-  local diagnostics = get_diagnostics(bufnr, opts --[[@as vim.diagnostic.GetOpts]], true)\n+  local namespaces = {} ---@type integer[]\n+  if type(opts.namespace) == 'number' then\n+    namespaces[1] = opts.namespace\n+  else\n+    for namespace in pairs(diagnostic_cache[bufnr]) do\n+      table.insert(namespaces, namespace)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2088066037",
            "id": 2088066037,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM58dVv1",
            "original_commit_id": "6274c7e68359409b0cf36ce3335b51a805d2435a",
            "original_line": 2350,
            "original_position": 251,
            "original_start_line": 2314,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2838770779,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088066037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-14T05:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088066037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2088083863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088083863"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is useful in particular for `vim.diagnostic.set(vim.diagnostic.fromqflist())` use case.\r\n\r\nWhen using `:make` or similar it's normal to end up with unloaded buffers associated with quickfix items if you didn't edit that buffer before running `:make`, in which case it would not create extmarks and you wouldn't be able to jump between diagnostics.\r\n\r\nBuiltin diagnostic handlers currently do nothing for unloaded buffers, meaning you won't get underlines, virtual text etc.\r\nIdeally they should also be changed to use this function. I planned to do that in a separate follow-up PR though.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-14T05:45:30Z",
            "diff_hunk": "@@ -1179,6 +1242,24 @@ function M.config(opts, namespace)\n   end\n end\n \n+--- Execute a given function now if the given buffer is already loaded or once it is loaded later.\n+---\n+---@param bufnr integer Buffer number\n+---@param fn fun()\n+local function once_buf_loaded(bufnr, fn)\n+  if api.nvim_buf_is_loaded(bufnr) then\n+    fn()\n+  else\n+    api.nvim_create_autocmd('BufRead', {\n+      buffer = bufnr,\n+      once = true,\n+      callback = function()\n+        fn()\n+      end,\n+    })\n+  end\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2088083863",
            "id": 2088083863,
            "line": 1266,
            "node_id": "PRRC_kwDOAPphoM58daGX",
            "original_commit_id": "6274c7e68359409b0cf36ce3335b51a805d2435a",
            "original_line": 1266,
            "original_position": 142,
            "original_start_line": 1249,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 121,
            "pull_request_review_id": 2838798226,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088083863/reactions"
            },
            "side": "RIGHT",
            "start_line": 1254,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-14T05:45:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088083863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2088100715"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088100715"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Seems like these assertions are only needed because `vim.Diagnostic` is used both for what is expected as an input and what's kept in an internal value (`diagnostic_cache`), so that `vim.diagnostic.set`, for example, would not complain about a missing `namespace` or `extmark_id`, which should not be provided by users of this API.\r\n\r\nWe should be pretty certain that diagnostics stored in `diagnostic_cache` have both `namespace` and `extmark_id` already. Probably asserts should be there instead if inference wouldn't be enough.\r\n\r\nShould I introduce that type separation between input and internal?",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-14T05:56:28Z",
            "diff_hunk": "@@ -1007,15 +1009,63 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do\n+    local ns = M.get_namespace(namespace)\n+\n+    local extmarks = api.nvim_buf_get_extmarks(\n+      bufnr,\n+      ns.user_data.location_ns,\n+      { 0, 0 },\n+      { -1, -1 },\n+      {}\n+    )\n+\n+    extmarks_index[namespace] = {}\n+\n+    for _, extmark in ipairs(extmarks) do\n+      extmarks_index[namespace][extmark[1]] = extmark\n+    end\n+\n+    local filtered_diagnostics =\n+      filter_by_severity(opts.severity, diagnostic_cache[bufnr][namespace])\n+\n+    for _, diagnostic in ipairs(filtered_diagnostics) do\n+      for _, extmark in ipairs(extmarks) do\n+        if extmark[1] == diagnostic.extmark_id then\n+          table.insert(diagnostics, diagnostic)\n+        end\n+      end\n+    end\n+  end\n \n   if opts._highest then\n     filter_highest(diagnostics)\n   end\n \n-  local line_diagnostics = diagnostic_lines(diagnostics)\n+  local line_diagnostics = {} --- @type table<integer,vim.Diagnostic[]>\n+  for _, diagnostic in ipairs(diagnostics) do\n+    local namespace = diagnostic.namespace\n+    assert(namespace, 'namespace must be set')\n+\n+    local extmark_id = diagnostic.extmark_id\n+    assert(extmark_id, 'extmark_id must be set')",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2088100715",
            "id": 2088100715,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM58deNr",
            "original_commit_id": "24785fc7d1d01ee2b39e2e36d04412b8ab9a7cdf",
            "original_line": 1059,
            "original_position": 62,
            "original_start_line": 1055,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2838823057,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088100715/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-14T05:59:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2088100715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170028"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170028"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah we should support it for consistency with other diagnostic APIs (e.g. https://github.com/neovim/neovim/pull/33982). I can follow up with a PR for this later.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-17T17:13:51Z",
            "diff_hunk": "@@ -2150,43 +2277,69 @@ function M.open_float(opts, ...)\n   end\n \n   local scope = ({ l = 'line', c = 'cursor', b = 'buffer' })[opts.scope] or opts.scope or 'line'\n-  local lnum, col --- @type integer, integer\n-  local opts_pos = opts.pos\n+  local extmarks_start = { 0, 0 }\n+  local extmarks_end = { -1, -1 }\n   if scope == 'line' or scope == 'cursor' then\n+    local opts_pos = opts.pos\n+\n     if not opts_pos then\n       local pos = api.nvim_win_get_cursor(0)\n-      lnum = pos[1] - 1\n-      col = pos[2]\n+      extmarks_start[1] = pos[1] - 1\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = pos[2]\n+      end\n     elseif type(opts_pos) == 'number' then\n-      lnum = opts_pos\n+      extmarks_start[1] = opts_pos\n     elseif type(opts_pos) == 'table' then\n-      lnum, col = opts_pos[1], opts_pos[2]\n+      extmarks_start[1] = opts_pos[1]\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = opts_pos[2]\n+      end\n     else\n       error(\"Invalid value for option 'pos'\")\n     end\n+\n+    extmarks_end[1] = extmarks_start[1]\n+\n+    if scope == 'cursor' then\n+      extmarks_end[2] = extmarks_start[2]\n+    end\n   elseif scope ~= 'buffer' then\n     error(\"Invalid value for option 'scope'\")\n   end\n \n-  local diagnostics = get_diagnostics(bufnr, opts --[[@as vim.diagnostic.GetOpts]], true)\n+  local namespaces = {} ---@type integer[]\n+  if type(opts.namespace) == 'number' then\n+    namespaces[1] = opts.namespace\n+  else\n+    for namespace in pairs(diagnostic_cache[bufnr]) do\n+      table.insert(namespaces, namespace)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170028",
            "id": 2094170028,
            "in_reply_to_id": 2088066037,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM580n-s",
            "original_commit_id": "6274c7e68359409b0cf36ce3335b51a805d2435a",
            "original_line": 2350,
            "original_position": 251,
            "original_start_line": 2314,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848354807,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170028/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-17T17:16:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170397"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170397"
                }
            },
            "author_association": "MEMBER",
            "body": "Wonder if we should keep this field private as it feels like an implementation detail.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-17T17:16:38Z",
            "diff_hunk": "@@ -55,6 +55,8 @@ end\n --- @field user_data? any arbitrary data plugins can add\n ---\n --- @field namespace? integer\n+---\n+--- @field extmark_id? integer",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170397",
            "id": 2094170397,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM580oEd",
            "original_commit_id": "ff8b6b56f6ee9cc09b896a1da26492bd7e06950d",
            "original_line": 59,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848354807,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170397/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-17T17:16:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170679"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170679"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah LuaLS isn't the best at complex type inference, but different types would be a bit of an overkill IMO.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-17T17:18:39Z",
            "diff_hunk": "@@ -1007,15 +1009,63 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do\n+    local ns = M.get_namespace(namespace)\n+\n+    local extmarks = api.nvim_buf_get_extmarks(\n+      bufnr,\n+      ns.user_data.location_ns,\n+      { 0, 0 },\n+      { -1, -1 },\n+      {}\n+    )\n+\n+    extmarks_index[namespace] = {}\n+\n+    for _, extmark in ipairs(extmarks) do\n+      extmarks_index[namespace][extmark[1]] = extmark\n+    end\n+\n+    local filtered_diagnostics =\n+      filter_by_severity(opts.severity, diagnostic_cache[bufnr][namespace])\n+\n+    for _, diagnostic in ipairs(filtered_diagnostics) do\n+      for _, extmark in ipairs(extmarks) do\n+        if extmark[1] == diagnostic.extmark_id then\n+          table.insert(diagnostics, diagnostic)\n+        end\n+      end\n+    end\n+  end\n \n   if opts._highest then\n     filter_highest(diagnostics)\n   end\n \n-  local line_diagnostics = diagnostic_lines(diagnostics)\n+  local line_diagnostics = {} --- @type table<integer,vim.Diagnostic[]>\n+  for _, diagnostic in ipairs(diagnostics) do\n+    local namespace = diagnostic.namespace\n+    assert(namespace, 'namespace must be set')\n+\n+    local extmark_id = diagnostic.extmark_id\n+    assert(extmark_id, 'extmark_id must be set')",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170679",
            "id": 2094170679,
            "in_reply_to_id": 2088100715,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM580oI3",
            "original_commit_id": "24785fc7d1d01ee2b39e2e36d04412b8ab9a7cdf",
            "original_line": 1059,
            "original_position": 62,
            "original_start_line": 1055,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848356285,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170679/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-17T17:18:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170679",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170828"
                }
            },
            "author_association": "MEMBER",
            "body": "You can combine the assignment and the `assert`:\r\n```suggestion\r\n    local namespace = diagnostic.namespace, 'namespace must be set')\r\n```",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-17T17:19:31Z",
            "diff_hunk": "@@ -1007,15 +1009,63 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do\n+    local ns = M.get_namespace(namespace)\n+\n+    local extmarks = api.nvim_buf_get_extmarks(\n+      bufnr,\n+      ns.user_data.location_ns,\n+      { 0, 0 },\n+      { -1, -1 },\n+      {}\n+    )\n+\n+    extmarks_index[namespace] = {}\n+\n+    for _, extmark in ipairs(extmarks) do\n+      extmarks_index[namespace][extmark[1]] = extmark\n+    end\n+\n+    local filtered_diagnostics =\n+      filter_by_severity(opts.severity, diagnostic_cache[bufnr][namespace])\n+\n+    for _, diagnostic in ipairs(filtered_diagnostics) do\n+      for _, extmark in ipairs(extmarks) do\n+        if extmark[1] == diagnostic.extmark_id then\n+          table.insert(diagnostics, diagnostic)\n+        end\n+      end\n+    end\n+  end\n \n   if opts._highest then\n     filter_highest(diagnostics)\n   end\n \n-  local line_diagnostics = diagnostic_lines(diagnostics)\n+  local line_diagnostics = {} --- @type table<integer,vim.Diagnostic[]>\n+  for _, diagnostic in ipairs(diagnostics) do\n+    local namespace = diagnostic.namespace\n+    assert(namespace, 'namespace must be set')",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094170828",
            "id": 2094170828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM580oLM",
            "original_commit_id": "ff8b6b56f6ee9cc09b896a1da26492bd7e06950d",
            "original_line": 1056,
            "original_position": 59,
            "original_start_line": 1055,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848356453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-17T17:19:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094170828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094175331"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094175331"
                }
            },
            "author_association": "MEMBER",
            "body": "Opened https://github.com/neovim/neovim/pull/34073 for this.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-17T17:43:03Z",
            "diff_hunk": "@@ -2150,43 +2277,69 @@ function M.open_float(opts, ...)\n   end\n \n   local scope = ({ l = 'line', c = 'cursor', b = 'buffer' })[opts.scope] or opts.scope or 'line'\n-  local lnum, col --- @type integer, integer\n-  local opts_pos = opts.pos\n+  local extmarks_start = { 0, 0 }\n+  local extmarks_end = { -1, -1 }\n   if scope == 'line' or scope == 'cursor' then\n+    local opts_pos = opts.pos\n+\n     if not opts_pos then\n       local pos = api.nvim_win_get_cursor(0)\n-      lnum = pos[1] - 1\n-      col = pos[2]\n+      extmarks_start[1] = pos[1] - 1\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = pos[2]\n+      end\n     elseif type(opts_pos) == 'number' then\n-      lnum = opts_pos\n+      extmarks_start[1] = opts_pos\n     elseif type(opts_pos) == 'table' then\n-      lnum, col = opts_pos[1], opts_pos[2]\n+      extmarks_start[1] = opts_pos[1]\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = opts_pos[2]\n+      end\n     else\n       error(\"Invalid value for option 'pos'\")\n     end\n+\n+    extmarks_end[1] = extmarks_start[1]\n+\n+    if scope == 'cursor' then\n+      extmarks_end[2] = extmarks_start[2]\n+    end\n   elseif scope ~= 'buffer' then\n     error(\"Invalid value for option 'scope'\")\n   end\n \n-  local diagnostics = get_diagnostics(bufnr, opts --[[@as vim.diagnostic.GetOpts]], true)\n+  local namespaces = {} ---@type integer[]\n+  if type(opts.namespace) == 'number' then\n+    namespaces[1] = opts.namespace\n+  else\n+    for namespace in pairs(diagnostic_cache[bufnr]) do\n+      table.insert(namespaces, namespace)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094175331",
            "id": 2094175331,
            "in_reply_to_id": 2088066037,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM580pRj",
            "original_commit_id": "6274c7e68359409b0cf36ce3335b51a805d2435a",
            "original_line": 2350,
            "original_position": 251,
            "original_start_line": 2314,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848361223,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094175331/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-17T17:43:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094175331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094351644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094351644"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I guess there's a type in your suggestion?\r\n\r\nDid you mean this f8de0867edf33656dc63e4bd5cd5fad6ccccbd00?",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-18T04:23:33Z",
            "diff_hunk": "@@ -1007,15 +1009,63 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do\n+    local ns = M.get_namespace(namespace)\n+\n+    local extmarks = api.nvim_buf_get_extmarks(\n+      bufnr,\n+      ns.user_data.location_ns,\n+      { 0, 0 },\n+      { -1, -1 },\n+      {}\n+    )\n+\n+    extmarks_index[namespace] = {}\n+\n+    for _, extmark in ipairs(extmarks) do\n+      extmarks_index[namespace][extmark[1]] = extmark\n+    end\n+\n+    local filtered_diagnostics =\n+      filter_by_severity(opts.severity, diagnostic_cache[bufnr][namespace])\n+\n+    for _, diagnostic in ipairs(filtered_diagnostics) do\n+      for _, extmark in ipairs(extmarks) do\n+        if extmark[1] == diagnostic.extmark_id then\n+          table.insert(diagnostics, diagnostic)\n+        end\n+      end\n+    end\n+  end\n \n   if opts._highest then\n     filter_highest(diagnostics)\n   end\n \n-  local line_diagnostics = diagnostic_lines(diagnostics)\n+  local line_diagnostics = {} --- @type table<integer,vim.Diagnostic[]>\n+  for _, diagnostic in ipairs(diagnostics) do\n+    local namespace = diagnostic.namespace\n+    assert(namespace, 'namespace must be set')",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094351644",
            "id": 2094351644,
            "in_reply_to_id": 2094170828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM581UUc",
            "original_commit_id": "ff8b6b56f6ee9cc09b896a1da26492bd7e06950d",
            "original_line": 1056,
            "original_position": 59,
            "original_start_line": 1055,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848683357,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094351644/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-18T04:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094351644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094352496"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094352496"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes that. I shouldn't review PRs from my phone lol.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-18T04:28:56Z",
            "diff_hunk": "@@ -1007,15 +1009,63 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do\n+    local ns = M.get_namespace(namespace)\n+\n+    local extmarks = api.nvim_buf_get_extmarks(\n+      bufnr,\n+      ns.user_data.location_ns,\n+      { 0, 0 },\n+      { -1, -1 },\n+      {}\n+    )\n+\n+    extmarks_index[namespace] = {}\n+\n+    for _, extmark in ipairs(extmarks) do\n+      extmarks_index[namespace][extmark[1]] = extmark\n+    end\n+\n+    local filtered_diagnostics =\n+      filter_by_severity(opts.severity, diagnostic_cache[bufnr][namespace])\n+\n+    for _, diagnostic in ipairs(filtered_diagnostics) do\n+      for _, extmark in ipairs(extmarks) do\n+        if extmark[1] == diagnostic.extmark_id then\n+          table.insert(diagnostics, diagnostic)\n+        end\n+      end\n+    end\n+  end\n \n   if opts._highest then\n     filter_highest(diagnostics)\n   end\n \n-  local line_diagnostics = diagnostic_lines(diagnostics)\n+  local line_diagnostics = {} --- @type table<integer,vim.Diagnostic[]>\n+  for _, diagnostic in ipairs(diagnostics) do\n+    local namespace = diagnostic.namespace\n+    assert(namespace, 'namespace must be set')",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094352496",
            "id": 2094352496,
            "in_reply_to_id": 2094170828,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM581Uhw",
            "original_commit_id": "ff8b6b56f6ee9cc09b896a1da26492bd7e06950d",
            "original_line": 1056,
            "original_position": 59,
            "original_start_line": 1055,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848684096,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094352496/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-18T04:28:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094352496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094353340"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094353340"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Made it private like this 75cb0dc8ab590a2347a1c65b8950410fde3da59d\r\n\r\nHad to disable diagnostic in test for luals not to complain. As I understand another way is to prepend `_` to a field name. Which one is preferred?",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-18T04:35:33Z",
            "diff_hunk": "@@ -55,6 +55,8 @@ end\n --- @field user_data? any arbitrary data plugins can add\n ---\n --- @field namespace? integer\n+---\n+--- @field extmark_id? integer",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094353340",
            "id": 2094353340,
            "in_reply_to_id": 2094170397,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM581Uu8",
            "original_commit_id": "ff8b6b56f6ee9cc09b896a1da26492bd7e06950d",
            "original_line": 59,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848685586,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094353340/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-18T04:35:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094353340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094355983"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094355983"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Underscore seems to cause less trouble 754e20563ca019a972c2659955bccaec74374919",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-18T04:44:03Z",
            "diff_hunk": "@@ -55,6 +55,8 @@ end\n --- @field user_data? any arbitrary data plugins can add\n ---\n --- @field namespace? integer\n+---\n+--- @field extmark_id? integer",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094355983",
            "id": 2094355983,
            "in_reply_to_id": 2094170397,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM581VYP",
            "original_commit_id": "ff8b6b56f6ee9cc09b896a1da26492bd7e06950d",
            "original_line": 59,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848690625,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094355983/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-18T04:44:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094355983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2094357206"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094357206"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Added it here 3c325a08bdafaf02e7b61fd64634d5f1dcd9842f\r\nOnly implementation change.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-18T04:52:23Z",
            "diff_hunk": "@@ -2150,43 +2277,69 @@ function M.open_float(opts, ...)\n   end\n \n   local scope = ({ l = 'line', c = 'cursor', b = 'buffer' })[opts.scope] or opts.scope or 'line'\n-  local lnum, col --- @type integer, integer\n-  local opts_pos = opts.pos\n+  local extmarks_start = { 0, 0 }\n+  local extmarks_end = { -1, -1 }\n   if scope == 'line' or scope == 'cursor' then\n+    local opts_pos = opts.pos\n+\n     if not opts_pos then\n       local pos = api.nvim_win_get_cursor(0)\n-      lnum = pos[1] - 1\n-      col = pos[2]\n+      extmarks_start[1] = pos[1] - 1\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = pos[2]\n+      end\n     elseif type(opts_pos) == 'number' then\n-      lnum = opts_pos\n+      extmarks_start[1] = opts_pos\n     elseif type(opts_pos) == 'table' then\n-      lnum, col = opts_pos[1], opts_pos[2]\n+      extmarks_start[1] = opts_pos[1]\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = opts_pos[2]\n+      end\n     else\n       error(\"Invalid value for option 'pos'\")\n     end\n+\n+    extmarks_end[1] = extmarks_start[1]\n+\n+    if scope == 'cursor' then\n+      extmarks_end[2] = extmarks_start[2]\n+    end\n   elseif scope ~= 'buffer' then\n     error(\"Invalid value for option 'scope'\")\n   end\n \n-  local diagnostics = get_diagnostics(bufnr, opts --[[@as vim.diagnostic.GetOpts]], true)\n+  local namespaces = {} ---@type integer[]\n+  if type(opts.namespace) == 'number' then\n+    namespaces[1] = opts.namespace\n+  else\n+    for namespace in pairs(diagnostic_cache[bufnr]) do\n+      table.insert(namespaces, namespace)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2094357206",
            "id": 2094357206,
            "in_reply_to_id": 2088066037,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM581VrW",
            "original_commit_id": "6274c7e68359409b0cf36ce3335b51a805d2435a",
            "original_line": 2350,
            "original_position": 251,
            "original_start_line": 2314,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2848692303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094357206/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-18T04:52:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2094357206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2106115509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2106115509"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Not sure why it was expected to show float in a position one character past actual diagnostic position previously. Now it only shows up only exactly at the position.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-25T07:42:11Z",
            "diff_hunk": "@@ -2942,7 +3030,7 @@ describe('vim.diagnostic', function()\n           vim.diagnostic.set(_G.diagnostic_ns, _G.diagnostic_bufnr, diagnostics)\n           vim.api.nvim_win_set_cursor(0, { 1, 1 })\n           local float_bufnr, winnr =\n-            vim.diagnostic.open_float({ header = false, scope = 'cursor', pos = { 2, 1 } })\n+            vim.diagnostic.open_float({ header = false, scope = 'cursor', pos = { 2, 0 } })",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2106115509",
            "id": 2106115509,
            "line": 3033,
            "node_id": "PRRC_kwDOAPphoM59iMW1",
            "original_commit_id": "8fac0021e83fe8cf04e29f0dc726092275f5bca3",
            "original_line": 3033,
            "original_position": 109,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": 83,
            "pull_request_review_id": 2866753271,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2106115509/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-25T07:42:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2106115509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2116057467"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116057467"
                }
            },
            "author_association": "MEMBER",
            "body": "is there a 1-line comment that can give an intuition of what this block does",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-30T14:40:28Z",
            "diff_hunk": "@@ -1214,6 +1298,45 @@ function M.set(namespace, bufnr, diagnostics, opts)\n     set_diagnostic_cache(namespace, bufnr, diagnostics)\n   end\n \n+  once_buf_loaded(bufnr, function()\n+    local ns = M.get_namespace(namespace)\n+\n+    if not ns.user_data.location_ns then\n+      ns.user_data.location_ns =\n+        api.nvim_create_namespace(string.format('nvim.%s.diagnostic', ns.name))\n+    end\n+\n+    api.nvim_buf_clear_namespace(bufnr, ns.user_data.location_ns, 0, -1)\n+\n+    local lines = api.nvim_buf_get_lines(bufnr, 0, -1, true)\n+    for _, diagnostic in ipairs(diagnostics) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2116057467",
            "id": 2116057467,
            "line": 1306,
            "node_id": "PRRC_kwDOAPphoM5-IHl7",
            "original_commit_id": "616bae1691fd8d7d7ac892bb38894cdd8f58b2a6",
            "original_line": 1306,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 142,
            "pull_request_review_id": 2881574266,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116057467/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-30T14:40:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116057467",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2116058330"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116058330"
                }
            },
            "author_association": "MEMBER",
            "body": "same here: 1-line comment that gives an intuition of what this nested for-loop is doing.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-30T14:40:57Z",
            "diff_hunk": "@@ -2176,44 +2299,81 @@ function M.open_float(opts, ...)\n     opts = get_resolved_options({ float = float_opts }, nil, bufnr).float\n   end\n \n+  local buf_lines = api.nvim_buf_get_lines(bufnr, 0, -1, true)\n   local scope = ({ l = 'line', c = 'cursor', b = 'buffer' })[opts.scope] or opts.scope or 'line'\n-  local lnum, col --- @type integer, integer\n-  local opts_pos = opts.pos\n+  local extmarks_start = { 0, 0 }\n+  local extmarks_end = { -1, -1 }\n   if scope == 'line' or scope == 'cursor' then\n+    local opts_pos = opts.pos\n+\n     if not opts_pos then\n       local pos = api.nvim_win_get_cursor(0)\n-      lnum = pos[1] - 1\n-      col = pos[2]\n+      extmarks_start[1] = pos[1] - 1\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = pos[2]\n+      end\n     elseif type(opts_pos) == 'number' then\n-      lnum = opts_pos\n+      extmarks_start[1] = opts_pos\n     elseif type(opts_pos) == 'table' then\n-      lnum, col = opts_pos[1], opts_pos[2]\n+      extmarks_start[1] = opts_pos[1]\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = opts_pos[2]\n+      end\n     else\n       error(\"Invalid value for option 'pos'\")\n     end\n+\n+    extmarks_end[1] = extmarks_start[1]\n+\n+    if scope == 'cursor' then\n+      extmarks_start[2] = math.min(extmarks_start[2], #buf_lines[extmarks_start[1] + 1] - 1)\n+      extmarks_end[2] = extmarks_start[2]\n+    end\n   elseif scope ~= 'buffer' then\n     error(\"Invalid value for option 'scope'\")\n   end\n \n-  local diagnostics = get_diagnostics(bufnr, opts --[[@as vim.diagnostic.GetOpts]], true)\n+  local namespaces ---@type integer[]\n+  local opts_namespace = opts.namespace\n+  if type(opts_namespace) == 'number' then\n+    namespaces = { opts_namespace }\n+  elseif type(opts_namespace) == 'table' then\n+    namespaces = opts_namespace\n+  else\n+    namespaces = vim.tbl_keys(diagnostic_cache[bufnr])\n+  end\n \n-  if scope == 'line' then\n-    --- @param d vim.Diagnostic\n-    diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum\n-        and lnum <= d.end_lnum\n-        and (d.lnum == d.end_lnum or lnum ~= d.end_lnum or d.end_col ~= 0)\n-    end, diagnostics)\n-  elseif scope == 'cursor' then\n-    -- If `col` is past the end of the line, show if the cursor is on the last char in the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n-    --- @param d vim.Diagnostic\n-    diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum\n-        and lnum <= d.end_lnum\n-        and (lnum ~= d.lnum or col >= math.min(d.col, line_length - 1))\n-        and ((d.lnum == d.end_lnum and d.col == d.end_col) or lnum ~= d.end_lnum or col < d.end_col)\n-    end, diagnostics)\n+  ---@type vim.Diagnostic[]\n+  local diagnostics = {}\n+  for _, namespace in ipairs(namespaces) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2116058330",
            "id": 2116058330,
            "line": 2355,
            "node_id": "PRRC_kwDOAPphoM5-IHza",
            "original_commit_id": "616bae1691fd8d7d7ac892bb38894cdd8f58b2a6",
            "original_line": 2355,
            "original_position": 272,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 252,
            "pull_request_review_id": 2881575579,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116058330/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-30T14:40:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116058330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2116060549"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116060549"
                }
            },
            "author_association": "MEMBER",
            "body": "is it possible for these tests to re-use a shared function, to make them less verbose?\r\n\r\nindirection can make things harder to read, but if these tests are mostly doing the same kind of thing, then using a shared function can be much more readable because it makes it obvious what is being tested in each case.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-30T14:42:12Z",
            "diff_hunk": "@@ -1430,6 +1430,94 @@ describe('vim.diagnostic', function()\n         eq(true, exec_lua('return _G.jumped'))\n       end)\n     end)\n+\n+    it('finds next diagnostic at a logical location after text changes before', function()",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2116060549",
            "id": 2116060549,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-IIWF",
            "original_commit_id": "616bae1691fd8d7d7ac892bb38894cdd8f58b2a6",
            "original_line": 1434,
            "original_position": 14,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": null,
            "pull_request_review_id": 2881579195,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116060549/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-30T14:42:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2116060549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2117252623"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117252623"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "added a comment before the loop and a couple inside of it",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-31T04:49:22Z",
            "diff_hunk": "@@ -1214,6 +1298,45 @@ function M.set(namespace, bufnr, diagnostics, opts)\n     set_diagnostic_cache(namespace, bufnr, diagnostics)\n   end\n \n+  once_buf_loaded(bufnr, function()\n+    local ns = M.get_namespace(namespace)\n+\n+    if not ns.user_data.location_ns then\n+      ns.user_data.location_ns =\n+        api.nvim_create_namespace(string.format('nvim.%s.diagnostic', ns.name))\n+    end\n+\n+    api.nvim_buf_clear_namespace(bufnr, ns.user_data.location_ns, 0, -1)\n+\n+    local lines = api.nvim_buf_get_lines(bufnr, 0, -1, true)\n+    for _, diagnostic in ipairs(diagnostics) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2117252623",
            "id": 2117252623,
            "in_reply_to_id": 2116057467,
            "line": 1306,
            "node_id": "PRRC_kwDOAPphoM5-MrYP",
            "original_commit_id": "616bae1691fd8d7d7ac892bb38894cdd8f58b2a6",
            "original_line": 1306,
            "original_position": 165,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 142,
            "pull_request_review_id": 2883359374,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117252623/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-31T04:49:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117252623",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2117253636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117253636"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "added a comment before the loop and inside",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-31T04:49:36Z",
            "diff_hunk": "@@ -2176,44 +2299,81 @@ function M.open_float(opts, ...)\n     opts = get_resolved_options({ float = float_opts }, nil, bufnr).float\n   end\n \n+  local buf_lines = api.nvim_buf_get_lines(bufnr, 0, -1, true)\n   local scope = ({ l = 'line', c = 'cursor', b = 'buffer' })[opts.scope] or opts.scope or 'line'\n-  local lnum, col --- @type integer, integer\n-  local opts_pos = opts.pos\n+  local extmarks_start = { 0, 0 }\n+  local extmarks_end = { -1, -1 }\n   if scope == 'line' or scope == 'cursor' then\n+    local opts_pos = opts.pos\n+\n     if not opts_pos then\n       local pos = api.nvim_win_get_cursor(0)\n-      lnum = pos[1] - 1\n-      col = pos[2]\n+      extmarks_start[1] = pos[1] - 1\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = pos[2]\n+      end\n     elseif type(opts_pos) == 'number' then\n-      lnum = opts_pos\n+      extmarks_start[1] = opts_pos\n     elseif type(opts_pos) == 'table' then\n-      lnum, col = opts_pos[1], opts_pos[2]\n+      extmarks_start[1] = opts_pos[1]\n+\n+      if scope == 'cursor' then\n+        extmarks_start[2] = opts_pos[2]\n+      end\n     else\n       error(\"Invalid value for option 'pos'\")\n     end\n+\n+    extmarks_end[1] = extmarks_start[1]\n+\n+    if scope == 'cursor' then\n+      extmarks_start[2] = math.min(extmarks_start[2], #buf_lines[extmarks_start[1] + 1] - 1)\n+      extmarks_end[2] = extmarks_start[2]\n+    end\n   elseif scope ~= 'buffer' then\n     error(\"Invalid value for option 'scope'\")\n   end\n \n-  local diagnostics = get_diagnostics(bufnr, opts --[[@as vim.diagnostic.GetOpts]], true)\n+  local namespaces ---@type integer[]\n+  local opts_namespace = opts.namespace\n+  if type(opts_namespace) == 'number' then\n+    namespaces = { opts_namespace }\n+  elseif type(opts_namespace) == 'table' then\n+    namespaces = opts_namespace\n+  else\n+    namespaces = vim.tbl_keys(diagnostic_cache[bufnr])\n+  end\n \n-  if scope == 'line' then\n-    --- @param d vim.Diagnostic\n-    diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum\n-        and lnum <= d.end_lnum\n-        and (d.lnum == d.end_lnum or lnum ~= d.end_lnum or d.end_col ~= 0)\n-    end, diagnostics)\n-  elseif scope == 'cursor' then\n-    -- If `col` is past the end of the line, show if the cursor is on the last char in the line\n-    local line_length = #api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\n-    --- @param d vim.Diagnostic\n-    diagnostics = vim.tbl_filter(function(d)\n-      return lnum >= d.lnum\n-        and lnum <= d.end_lnum\n-        and (lnum ~= d.lnum or col >= math.min(d.col, line_length - 1))\n-        and ((d.lnum == d.end_lnum and d.col == d.end_col) or lnum ~= d.end_lnum or col < d.end_col)\n-    end, diagnostics)\n+  ---@type vim.Diagnostic[]\n+  local diagnostics = {}\n+  for _, namespace in ipairs(namespaces) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2117253636",
            "id": 2117253636,
            "in_reply_to_id": 2116058330,
            "line": 2355,
            "node_id": "PRRC_kwDOAPphoM5-MroE",
            "original_commit_id": "616bae1691fd8d7d7ac892bb38894cdd8f58b2a6",
            "original_line": 2355,
            "original_position": 272,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": 252,
            "pull_request_review_id": 2883360462,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117253636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-31T04:49:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117253636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2117257309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117257309"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "reused it via `describe` + `before_each`",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-05-31T04:50:46Z",
            "diff_hunk": "@@ -1430,6 +1430,94 @@ describe('vim.diagnostic', function()\n         eq(true, exec_lua('return _G.jumped'))\n       end)\n     end)\n+\n+    it('finds next diagnostic at a logical location after text changes before', function()",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2117257309",
            "id": 2117257309,
            "in_reply_to_id": 2116060549,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5-Mshd",
            "original_commit_id": "616bae1691fd8d7d7ac892bb38894cdd8f58b2a6",
            "original_line": 1434,
            "original_position": 14,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": null,
            "pull_request_review_id": 2883364474,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117257309/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-31T04:50:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2117257309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2143124450"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143124450"
                }
            },
            "author_association": "MEMBER",
            "body": "this has triple-nested for-loops and doesn't say even 1 comment giving a hint about what it does.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-06-12T15:56:52Z",
            "diff_hunk": "@@ -1028,15 +1029,60 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2143124450",
            "id": 2143124450,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_vXvi",
            "original_commit_id": "3f9093e619c3ff73fc742c12578151335244b1f8",
            "original_line": 1040,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2921787819,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143124450/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T15:56:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143124450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2143128112"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143128112"
                }
            },
            "author_association": "MEMBER",
            "body": "are we actually testing anything here or is this just redundantly testing the existing behavior  of extmarks?\r\n\r\nis there a less verbose way to instead (1) assert that extmarks are mapped as expected to a diagnostic, and (2) just assume that extmarks work they way they should?\r\n\r\nsame question for all the other tests.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-06-12T15:58:36Z",
            "diff_hunk": "@@ -3478,6 +3549,88 @@ describe('vim.diagnostic', function()\n         end)\n       )\n     end)\n+\n+    it('shows diagnostics at their logical locations after text changes before', function()",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2143128112",
            "id": 2143128112,
            "line": 3553,
            "node_id": "PRRC_kwDOAPphoM5_vYow",
            "original_commit_id": "3f9093e619c3ff73fc742c12578151335244b1f8",
            "original_line": 3553,
            "original_position": 101,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": 92,
            "pull_request_review_id": 2921793839,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143128112/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T15:58:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2143128112",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2144284146"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144284146"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Looking at it now, I think I've messed up and this nesting is completely unnecessary. Currently this loop does two things:\r\n\r\n1. Fills in `extmarks_index` with extmarks indexed first by namespace and then extmark id. It's just a cache to avoid calling `nvim_buf_get_extmark_by_id` in multiple loops below (`line_diagnostics` filling, `sort_diagnostics`, `is_next`). I've assumed calling `nvim_buf_get_extmark_by_id` every time instead of looking it up in the cache would negatively affect performance. For no any real reason other than that I saw cache being used on top of `nvim_buf_get_lines` in `get_diagnostics`.\r\n2. Regarding two loops below `filter_by_severity`. I think it should actually just be a concatenation of `filter_by_severity` results across all namespaces and nothing else. I initially wrote it hoping I would be able to get rid of two loops below by using extmark ranges to find next/prev diagnostics, but I couldn't figure out how to properly take severity filtering into account. And I've forgot to clean that up.\r\n\r\nAt a minimum I will drop these nested loops inside.\r\n\r\nI'll also try to figure out again if the loops after this one can be replaced with extmark lookups and if so I think `extmarks_index` will be gone.\r\n\r\nBut if I won't figure that out, does it make sense to keep `extmarks_index` or should I just call `nvim_buf_get_extmark_by_id` directly where needed instead?",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-06-13T06:17:51Z",
            "diff_hunk": "@@ -1028,15 +1029,60 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2144284146",
            "id": 2144284146,
            "in_reply_to_id": 2143124450,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_zy3y",
            "original_commit_id": "3f9093e619c3ff73fc742c12578151335244b1f8",
            "original_line": 1040,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2923537628,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144284146/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-13T06:17:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144284146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2144284245"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144284245"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": ">redundantly testing the existing behavior of extmarks?\r\n\r\nIn a sense, yes. But just setting extmarks isn't the whole story. If we only check that we set extmarks correctly, we can revert all the changes where they are being used and tests will still happily pass, confirming basically nothing. These tests are more useful to confirm the behavior end to end. They confirm that extmark positions are not only set correctly, but also used to find diagnostics to show them in a floating window or jump between them. For these use cases I don't really see any reason to care that this behavior is implemented using extmarks. That's why extmarks are not mentioned in the tests right now.\r\n\r\nThese extmarks are not really visible to the user in any way except through API. And testing the behavior the user most likely cares about seems to be more useful than testing an implementation detail, which is only exposed to the user by accident, just because all the extmarks can be easily retrieved by the user through API, no matter what, as far as I'm aware.\r\n\r\nBut these are just my opinions and I only occasionally contribute and don't maintain the project. So the final decision is not going to be mine anyway.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-06-13T06:17:56Z",
            "diff_hunk": "@@ -3478,6 +3549,88 @@ describe('vim.diagnostic', function()\n         end)\n       )\n     end)\n+\n+    it('shows diagnostics at their logical locations after text changes before', function()",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2144284245",
            "id": 2144284245,
            "in_reply_to_id": 2143128112,
            "line": 3553,
            "node_id": "PRRC_kwDOAPphoM5_zy5V",
            "original_commit_id": "3f9093e619c3ff73fc742c12578151335244b1f8",
            "original_line": 3553,
            "original_position": 101,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": 92,
            "pull_request_review_id": 2923537779,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144284245/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-13T06:17:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2144284245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34014#discussion_r2148246689"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34014"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148246689"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I completely removed these loops.",
            "commit_id": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
            "created_at": "2025-06-15T15:11:06Z",
            "diff_hunk": "@@ -1028,15 +1029,60 @@ local function next_diagnostic(search_forward, opts)\n   -- Adjust row to be 0-indexed\n   position[1] = position[1] - 1\n \n+  -- Clamp column\n+  position[2] = math.max(0, position[2])\n+\n   local wrap = if_nil(opts.wrap, true)\n \n-  local diagnostics = get_diagnostics(bufnr, opts, true)\n+  local diagnostics = {} ---@type vim.Diagnostic[]\n+  ---ns -> extmark_id -> Diagnostic[]\n+  local extmarks_index = {} ---@type table<integer, table<integer, vim.api.keyset.get_extmark_item>>\n+  for namespace in pairs(diagnostic_cache[bufnr]) do",
            "html_url": "https://github.com/neovim/neovim/pull/34014#discussion_r2148246689",
            "id": 2148246689,
            "in_reply_to_id": 2143124450,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AC6Sh",
            "original_commit_id": "3f9093e619c3ff73fc742c12578151335244b1f8",
            "original_line": 1040,
            "original_position": 21,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2929752440,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148246689/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-15T15:11:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2148246689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Not quite sure why luals says types can't be inferred. I'm not used to luals annotations very much though.\r\n\r\nFor the first one\r\n\r\n>runtime/lua/vim/diagnostic.lua:1315:11 [Warning] Can not infer type. (no-unknown)\r\n>              end_col = math.min(end_col, #lines[end_row + 1])\r\n>              ^^^^^^^\r\n\r\nCan it be caused by a mismatch between `integer` / `number` when using `math.min`? Should I add explicit type annotations?\r\n\r\nFor the other two I have no clue what's wrong at all\r\n\r\n>runtime/lua/vim/diagnostic.lua:1318:13 [Warning] Can not infer type. (no-unknown)\r\n>                end_row = end_row - 1\r\n>                ^^^^^^^\r\n>runtime/lua/vim/diagnostic.lua:1323:13 [Warning] Can not infer type. (no-unknown)\r\n>                end_col = end_col - 1\r\n>                ^^^^^^^\r\n\r\nLocally with luals in neovim I see the first warning (with `math.min`) as flaky, sometimes it's there and might disappear after a couple edits, sometimes it's not there at all right from the start. Other two I didn't encounter at all. Maybe something with my neovim setup or version mismatch, not sure. But I can see them when running `cmake --build build --target luals`.",
            "created_at": "2025-05-14T06:25:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2878835201",
            "id": 2878835201,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6rl4oB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2878835201/reactions"
            },
            "updated_at": "2025-05-14T06:44:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2878835201",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders could you take a look at this PR please?",
            "created_at": "2025-05-20T03:59:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2892841489",
            "id": 2892841489,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6sbUIR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2892841489/reactions"
            },
            "updated_at": "2025-05-20T03:59:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2892841489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @gpanders could you take a look at this PR please?\r\n\r\n~I would like https://github.com/neovim/neovim/pull/34073 to be merged first though so that this PR doesn't cherry-pick those changes.~\r\n\r\nMerged. @faergeek could you please rebase this PR to include those changes here?",
            "created_at": "2025-05-21T02:36:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2896348354",
            "id": 2896348354,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6sosTC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2896348354/reactions"
            },
            "updated_at": "2025-05-21T18:29:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2896348354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@MariaSolOs done",
            "created_at": "2025-05-22T04:07:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2899838210",
            "id": 2899838210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6s2AUC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899838210/reactions"
            },
            "updated_at": "2025-05-22T04:07:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899838210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@gpanders could you take a look? lua_ls doesn't fail anymore, CI is all green.",
            "created_at": "2025-05-29T06:03:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2918398229",
            "id": 2918398229,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6t8zkV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2918398229/reactions"
            },
            "updated_at": "2025-05-29T06:03:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2918398229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't get why this requires so much new code. Why does mapping information to extmarks require 100s of lines of code for every random module that needs it?\r\n\r\nAnd there are still just big blocks of non-trivial code here (triple-nested for-loops) without a 1-line comment that gives insight into what the logic does.\r\n\r\nDoes this PR add a new \"cache\" or is it only updating the existing \"cache\" structure(s)? \r\n\r\n\r\n\r\n> Diagnostic positions are not being updated after text changes, which means `vim.diagnostic.open_float` and `vim.diagnostic.jump` will work with outdated positions\r\n\r\nThat problem requires 350 lines of new code? We really don't have code that does something similar already, that can be re-used? Or could make it re-usable somehow? E.g. in `vim.lsp.util` for example.",
            "created_at": "2025-06-12T16:01:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2967408729",
            "id": 2967408729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6w3xBZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2967408729/reactions"
            },
            "updated_at": "2025-06-12T16:03:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2967408729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">Does this PR add a new \"cache\" or is it only updating the existing \"cache\" structure(s)?\r\n\r\n~It does add a new local cache for extmarks in `next_diagnostic` (https://github.com/neovim/neovim/pull/34014#discussion_r2144284146)~. Other than that it only adds `_extmark_id` field to an existing `diagnostic_cache`.\r\n\r\n>We really don't have code that does something similar already, that can be re-used? Or could make it re-usable somehow? E.g. in `vim.lsp.util` for example.\r\n\r\nI'm not very familiar with neovim codebase. But grepping just by `nvim_buf_set_extmark` most usages I've found were in tests. And in the implementation I couldn't find anything similar enough that could've been extracted to be reused here.",
            "created_at": "2025-06-13T06:27:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/34014#issuecomment-2969216081",
            "id": 2969216081,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
            "node_id": "IC_kwDOAPphoM6w-qRR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2969216081/reactions"
            },
            "updated_at": "2025-06-16T03:37:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2969216081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34014/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34014/commits",
    "created_at": "2025-05-14T05:25:32Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34014.diff",
    "draft": false,
    "head": {
        "label": "faergeek:diagnostics-extmarks",
        "ref": "diagnostics-extmarks",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/faergeek/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/faergeek/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/faergeek/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/faergeek/neovim/branches{/branch}",
            "clone_url": "https://github.com/faergeek/neovim.git",
            "collaborators_url": "https://api.github.com/repos/faergeek/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/faergeek/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/faergeek/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/faergeek/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/faergeek/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/faergeek/neovim/contributors",
            "created_at": "2025-05-14T05:23:02Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/faergeek/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/faergeek/neovim/downloads",
            "events_url": "https://api.github.com/repos/faergeek/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/faergeek/neovim/forks",
            "full_name": "faergeek/neovim",
            "git_commits_url": "https://api.github.com/repos/faergeek/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/faergeek/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/faergeek/neovim/git/tags{/sha}",
            "git_url": "git://github.com/faergeek/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/faergeek/neovim/hooks",
            "html_url": "https://github.com/faergeek/neovim",
            "id": 983246572,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/faergeek/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/faergeek/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/faergeek/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/faergeek/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/faergeek/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/faergeek/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/faergeek/neovim/merges",
            "milestones_url": "https://api.github.com/repos/faergeek/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOOpsm7A",
            "notifications_url": "https://api.github.com/repos/faergeek/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
                "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
                "followers_url": "https://api.github.com/users/faergeek/followers",
                "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
                "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/faergeek",
                "id": 3524621,
                "login": "faergeek",
                "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
                "organizations_url": "https://api.github.com/users/faergeek/orgs",
                "received_events_url": "https://api.github.com/users/faergeek/received_events",
                "repos_url": "https://api.github.com/users/faergeek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/faergeek",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/faergeek/neovim/pulls{/number}",
            "pushed_at": "2025-06-15T14:37:41Z",
            "releases_url": "https://api.github.com/repos/faergeek/neovim/releases{/id}",
            "size": 327141,
            "ssh_url": "git@github.com:faergeek/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/faergeek/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/faergeek/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/faergeek/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/faergeek/neovim/subscription",
            "svn_url": "https://github.com/faergeek/neovim",
            "tags_url": "https://api.github.com/repos/faergeek/neovim/tags",
            "teams_url": "https://api.github.com/repos/faergeek/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/faergeek/neovim/git/trees{/sha}",
            "updated_at": "2025-06-15T14:15:55Z",
            "url": "https://api.github.com/repos/faergeek/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
            "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
            "followers_url": "https://api.github.com/users/faergeek/followers",
            "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/faergeek",
            "id": 3524621,
            "login": "faergeek",
            "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
            "organizations_url": "https://api.github.com/users/faergeek/orgs",
            "received_events_url": "https://api.github.com/users/faergeek/received_events",
            "repos_url": "https://api.github.com/users/faergeek/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/faergeek",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34014",
    "id": 2518197530,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34014",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "locked": false,
    "merge_commit_sha": "42aa955f4198392a6b4ae145a42f8caa3c425545",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6WGKUa",
    "number": 34014,
    "patch_url": "https://github.com/neovim/neovim/pull/34014.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34014/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/13de3e3b8f0bd2692a50c004c367bdb24d9f866d",
    "title": "fix(diagnostics): position diagnostics using extmarks",
    "updated_at": "2025-06-16T03:37:46Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34014",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/3524621?v=4",
        "events_url": "https://api.github.com/users/faergeek/events{/privacy}",
        "followers_url": "https://api.github.com/users/faergeek/followers",
        "following_url": "https://api.github.com/users/faergeek/following{/other_user}",
        "gists_url": "https://api.github.com/users/faergeek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/faergeek",
        "id": 3524621,
        "login": "faergeek",
        "node_id": "MDQ6VXNlcjM1MjQ2MjE=",
        "organizations_url": "https://api.github.com/users/faergeek/orgs",
        "received_events_url": "https://api.github.com/users/faergeek/received_events",
        "repos_url": "https://api.github.com/users/faergeek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/faergeek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/faergeek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/faergeek",
        "user_view_type": "public"
    }
}