{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32282/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32282/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/32282"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32282"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32282/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/583ee0e8bfd922831d9e26106fb0fc6e330aa3c2"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5841,
            "forks_count": 5841,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1854,
            "open_issues_count": 1854,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-02-04T02:07:35Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 307298,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85859,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-02-04T02:07:39Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85859,
            "watchers_count": 85859,
            "web_commit_signoff_required": false
        },
        "sha": "3a2893015759396e5345a1a85e0427705e0570b4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem: No table of contents in health checks and Markdown files.\r\n\r\nSolution: Refactor `show_toc()` function to support multiple queries. Add Markdown query. Add buffer-local `gO` mapping in `checkhealth` and `markdown` ftplugin.\r\n\r\nAlso rename (internal) `vim.vimhelp` module to `vim.render` as itcontains generic functions.\r\n\r\n---\r\n\r\nProblem: Cannot jump between sections with `[[` and `]]`.\r\n\r\nSolution: Refactor `show_toc` function and implement `jump` function for\r\ntext buffers. Map to `[[`/`]]` in `help` and `checkhealth` ftplugin.\r\n\r\n(Turns out markdown already has these mappings in its ftplugin file. We could still override those since the treesitter functions are bound to be more robust than the simple regex searches.)\r\n\r\n---\r\n\r\nPossible follow-ups:\r\n* refactor the `g==` function and add it for markdown files (not done because it's too noisy right now).\r\n\r\nclose #32165\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938358878"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938358878"
                }
            },
            "author_association": "MEMBER",
            "body": "Why are the second and third commands separated by both a `|` and a `\\n`? Only one of them is needed.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-01T22:43:14Z",
            "diff_hunk": "@@ -82,5 +91,6 @@ vim.keymap.set('n', 'g==', function()\n end, { buffer = true })\n \n vim.b.undo_ftplugin = (vim.b.undo_ftplugin or '')\n-  .. '\\n exe \"nunmap <buffer> gO\" | exe \"nunmap <buffer> g==\"'\n+  .. '\\n exe \"nunmap <buffer> gO\" | exe \"nunmap <buffer> g==\" | '\n+  .. '\\n exe \"nunmap <buffer> ]]\" | exe \"nunmap <buffer> [[\"'",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938358878",
            "id": 1938358878,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ziQJe",
            "original_commit_id": "cf6f20f108aa9bb65d67e498eefd1a1d91e4afe7",
            "original_line": 94,
            "original_position": 44,
            "original_start_line": 94,
            "path": "runtime/ftplugin/help.lua",
            "position": null,
            "pull_request_review_id": 2588423952,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938358878/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-01T22:43:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938358878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938358946"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938358946"
                }
            },
            "author_association": "MEMBER",
            "body": "Same here",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-01T22:43:58Z",
            "diff_hunk": "@@ -0,0 +1,14 @@\n+vim.keymap.set('n', 'gO', function()\n+  require('vim.render').show_toc()\n+end, { buffer = 0, silent = true, desc = 'Show table of contents for current buffer' })\n+\n+vim.keymap.set('n', ']]', function()\n+  require('vim.render').jump({ count = 1, level = 1 })\n+end, { buffer = 0, silent = false, desc = 'Jump to next section' })\n+vim.keymap.set('n', '[[', function()\n+  require('vim.render').jump({ count = -1, level = 1 })\n+end, { buffer = 0, silent = false, desc = 'Jump to previous section' })\n+\n+vim.b.undo_ftplugin = (vim.b.undo_ftplugin or '')\n+  .. '\\n exe \"nunmap <buffer> gO\"'\n+  .. '\\n | exe \"nunmap <buffer> ]]\" | exe \"nunmap <buffer> [[\"'",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938358946",
            "id": 1938358946,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ziQKi",
            "original_commit_id": "cf6f20f108aa9bb65d67e498eefd1a1d91e4afe7",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/ftplugin/checkhealth.lua",
            "position": null,
            "pull_request_review_id": 2588424126,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938358946/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-01T22:43:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938358946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938359512"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938359512"
                }
            },
            "author_association": "MEMBER",
            "body": "eh, better safe than sorry ",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-01T22:47:06Z",
            "diff_hunk": "@@ -82,5 +91,6 @@ vim.keymap.set('n', 'g==', function()\n end, { buffer = true })\n \n vim.b.undo_ftplugin = (vim.b.undo_ftplugin or '')\n-  .. '\\n exe \"nunmap <buffer> gO\" | exe \"nunmap <buffer> g==\"'\n+  .. '\\n exe \"nunmap <buffer> gO\" | exe \"nunmap <buffer> g==\" | '\n+  .. '\\n exe \"nunmap <buffer> ]]\" | exe \"nunmap <buffer> [[\"'",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938359512",
            "id": 1938359512,
            "in_reply_to_id": 1938358878,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ziQTY",
            "original_commit_id": "cf6f20f108aa9bb65d67e498eefd1a1d91e4afe7",
            "original_line": 94,
            "original_position": 44,
            "original_start_line": 94,
            "path": "runtime/ftplugin/help.lua",
            "position": null,
            "pull_request_review_id": 2588424463,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938359512/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-01T22:47:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938359512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938450946"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938450946"
                }
            },
            "author_association": "MEMBER",
            "body": "maybe put this in the EDITOR section? the ts part is a implementation detail.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-02T09:57:16Z",
            "diff_hunk": "@@ -379,6 +379,9 @@ TREESITTER\n   activated by passing the `on_parse` callback parameter.\n • |vim.treesitter.query.set()| can now inherit and/or extend runtime file\n   queries in addition to overriding.\n+• |gO| now works in `help`, `checkhealth`, and `markdown` buffers.\n+• Jump between sections in `help` and `checkhealth` buffers with `[[` and\n+  `]]`.",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938450946",
            "id": 1938450946,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zimoC",
            "original_commit_id": "cf6f20f108aa9bb65d67e498eefd1a1d91e4afe7",
            "original_line": 384,
            "original_position": 6,
            "original_start_line": 382,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2588512035,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938450946/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-02T09:57:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938450946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938451763"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938451763"
                }
            },
            "author_association": "MEMBER",
            "body": "shouldn't this stuff live in `vim.ui` ? ",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-02T10:02:22Z",
            "diff_hunk": "@@ -0,0 +1,162 @@\n+-- Extra functionality for rendering rich text buffers (vim help, markdown)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938451763",
            "id": 1938451763,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zim0z",
            "original_commit_id": "530d402173786eb3dd3fd06355a63b7b97b740e0",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/render.lua",
            "position": null,
            "pull_request_review_id": 2588513073,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938451763/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-02T10:06:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938451763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938451926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938451926"
                }
            },
            "author_association": "MEMBER",
            "body": "should this live in `vim.hl` ?\r\n\r\n```suggestion\r\nfunction M.hl_groups(patterns)\r\n```",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-02T10:03:11Z",
            "diff_hunk": "@@ -0,0 +1,162 @@\n+-- Extra functionality for rendering rich text buffers (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.highlight_groups(patterns)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938451926",
            "id": 1938451926,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zim3W",
            "original_commit_id": "530d402173786eb3dd3fd06355a63b7b97b740e0",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/render.lua",
            "position": null,
            "pull_request_review_id": 2588513073,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938451926/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-02T10:06:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938451926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938452487"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938452487"
                }
            },
            "author_association": "MEMBER",
            "body": "doesn't seem like `vim.render` or `vim.ui` is the place for this. ",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-02T10:06:18Z",
            "diff_hunk": "@@ -0,0 +1,162 @@\n+-- Extra functionality for rendering rich text buffers (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.highlight_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+--- todo(clason): memoize\n+local get_headings = function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then\n+    return\n+  end\n+  local parser = assert(vim.treesitter.get_parser(bufnr, lang, { error = false }))\n+  local query = vim.treesitter.query.parse(lang, heading_queries[lang])\n+  local root = parser:parse()[1]:root()\n+  local headings = {}\n+  for id, node, _, _ in query:iter_captures(root, bufnr) do\n+    local text = vim.treesitter.get_node_text(node, bufnr)\n+    local row, col = node:start()\n+    --- why can't you just be normal?!\n+    local skip ---@type boolean|integer\n+    if lang == 'vimdoc' then\n+      -- only column_headings at col 1 are headings, otherwise it's code examples\n+      skip = (id == 4 and col > 0)\n+        -- ignore tabular material\n+        or (id == 4 and (text:find('\\t') or text:find('  ')))\n+        -- ignore tag-only headings\n+        or (node:child_count() == 1 and node:child(0):type() == 'tag')\n+    end\n+    if not skip then\n+      table.insert(headings, {\n+        bufnr = bufnr,\n+        lnum = row + 1,\n+        text = text,\n+        level = id,\n+      })\n+    end\n+  end\n+  return headings\n+end\n+\n+--- Show a table of contents for the help buffer in a loclist\n+function M.show_toc()\n+  local bufnr = vim.api.nvim_get_current_buf()\n+  local headings = get_headings(bufnr)\n+  if not headings or #headings == 0 then\n+    return\n+  end\n+  -- add indentation for nicer list formatting\n+  for _, heading in pairs(headings) do\n+    if heading.level > 2 then\n+      heading.text = '  ' .. heading.text\n+    end\n+    if heading.level > 4 then\n+      heading.text = '  ' .. heading.text\n+    end\n+  end\n+  vim.fn.setloclist(0, headings, ' ')\n+  vim.fn.setloclist(0, {}, 'a', { title = 'Help TOC' })\n+  vim.cmd.lopen()\n+end\n+\n+--- Jump to section\n+--- @param opts table jump options\n+---  - count integer direction to jump (>0 forward, <0 backward)\n+---  - level integer only consider headings up to level\n+--- todo(clason): support count\n+function M.jump(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938452487",
            "id": 1938452487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zinAH",
            "original_commit_id": "530d402173786eb3dd3fd06355a63b7b97b740e0",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "runtime/lua/vim/render.lua",
            "position": null,
            "pull_request_review_id": 2588513073,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938452487/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-02T10:06:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938452487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938453361"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938453361"
                }
            },
            "author_association": "MEMBER",
            "body": "\"Highlight\" is the verb here :) So it should be `highlight_hl_groups`.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-02T10:10:53Z",
            "diff_hunk": "@@ -0,0 +1,162 @@\n+-- Extra functionality for rendering rich text buffers (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.highlight_groups(patterns)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938453361",
            "id": 1938453361,
            "in_reply_to_id": 1938451926,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zinNx",
            "original_commit_id": "530d402173786eb3dd3fd06355a63b7b97b740e0",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/render.lua",
            "position": null,
            "pull_request_review_id": 2588515158,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938453361/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-02T10:10:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938453361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938453851"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938453851"
                }
            },
            "author_association": "MEMBER",
            "body": "Again, internal utility function. Would love to have a generic `jump` or `motion` module, but that is a job for somebody else.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-02T10:14:00Z",
            "diff_hunk": "@@ -0,0 +1,162 @@\n+-- Extra functionality for rendering rich text buffers (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.highlight_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+--- todo(clason): memoize\n+local get_headings = function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then\n+    return\n+  end\n+  local parser = assert(vim.treesitter.get_parser(bufnr, lang, { error = false }))\n+  local query = vim.treesitter.query.parse(lang, heading_queries[lang])\n+  local root = parser:parse()[1]:root()\n+  local headings = {}\n+  for id, node, _, _ in query:iter_captures(root, bufnr) do\n+    local text = vim.treesitter.get_node_text(node, bufnr)\n+    local row, col = node:start()\n+    --- why can't you just be normal?!\n+    local skip ---@type boolean|integer\n+    if lang == 'vimdoc' then\n+      -- only column_headings at col 1 are headings, otherwise it's code examples\n+      skip = (id == 4 and col > 0)\n+        -- ignore tabular material\n+        or (id == 4 and (text:find('\\t') or text:find('  ')))\n+        -- ignore tag-only headings\n+        or (node:child_count() == 1 and node:child(0):type() == 'tag')\n+    end\n+    if not skip then\n+      table.insert(headings, {\n+        bufnr = bufnr,\n+        lnum = row + 1,\n+        text = text,\n+        level = id,\n+      })\n+    end\n+  end\n+  return headings\n+end\n+\n+--- Show a table of contents for the help buffer in a loclist\n+function M.show_toc()\n+  local bufnr = vim.api.nvim_get_current_buf()\n+  local headings = get_headings(bufnr)\n+  if not headings or #headings == 0 then\n+    return\n+  end\n+  -- add indentation for nicer list formatting\n+  for _, heading in pairs(headings) do\n+    if heading.level > 2 then\n+      heading.text = '  ' .. heading.text\n+    end\n+    if heading.level > 4 then\n+      heading.text = '  ' .. heading.text\n+    end\n+  end\n+  vim.fn.setloclist(0, headings, ' ')\n+  vim.fn.setloclist(0, {}, 'a', { title = 'Help TOC' })\n+  vim.cmd.lopen()\n+end\n+\n+--- Jump to section\n+--- @param opts table jump options\n+---  - count integer direction to jump (>0 forward, <0 backward)\n+---  - level integer only consider headings up to level\n+--- todo(clason): support count\n+function M.jump(opts)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938453851",
            "id": 1938453851,
            "in_reply_to_id": 1938452487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zinVb",
            "original_commit_id": "530d402173786eb3dd3fd06355a63b7b97b740e0",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "runtime/lua/vim/render.lua",
            "position": null,
            "pull_request_review_id": 2588515810,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938453851/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-02T10:14:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938453851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938753501"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938753501"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nlocal parser = assert(vim.treesitter.get_parser(nil, 'vimdoc', { error = false }))\r\n```\r\n\r\nThe default is the current buffer.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T04:24:52Z",
            "diff_hunk": "@@ -4,37 +4,45 @@ vim.treesitter.start()\n -- Add custom highlights for list in `:h highlight-groups`.\n local bufname = vim.fs.normalize(vim.api.nvim_buf_get_name(0))\n if vim.endswith(bufname, '/doc/syntax.txt') then\n-  require('vim.vimhelp').highlight_groups({\n+  require('_textutils').colorize_hl_groups({\n     { start = [[\\*group-name\\*]], stop = '^======', match = '^(%w+)\\t' },\n     { start = [[\\*highlight-groups\\*]], stop = '^======', match = '^(%w+)\\t' },\n   })\n elseif vim.endswith(bufname, '/doc/treesitter.txt') then\n-  require('vim.vimhelp').highlight_groups({\n+  require('_textutils').colorize_hl_groups({\n     {\n       start = [[\\*treesitter-highlight-groups\\*]],\n       stop = [[\\*treesitter-highlight-spell\\*]],\n       match = '^@[%w%p]+',\n     },\n   })\n elseif vim.endswith(bufname, '/doc/diagnostic.txt') then\n-  require('vim.vimhelp').highlight_groups({\n+  require('_textutils').colorize_hl_groups({\n     { start = [[\\*diagnostic-highlights\\*]], stop = '^======', match = '^(%w+)' },\n   })\n elseif vim.endswith(bufname, '/doc/lsp.txt') then\n-  require('vim.vimhelp').highlight_groups({\n+  require('_textutils').colorize_hl_groups({\n     { start = [[\\*lsp-highlight\\*]], stop = '^------', match = '^(%w+)' },\n     { start = [[\\*lsp-semantic-highlight\\*]], stop = '^======', match = '^@[%w%p]+' },\n   })\n end\n \n vim.keymap.set('n', 'gO', function()\n-  require('vim.vimhelp').show_toc()\n-end, { buffer = 0, silent = true })\n+  require('_textutils').show_toc()\n+end, { buffer = 0, silent = true, desc = 'Show table of contents for current buffer' })\n+\n+vim.keymap.set('n', ']]', function()\n+  require('_textutils').jump({ count = 1 })\n+end, { buffer = 0, silent = false, desc = 'Jump to next section' })\n+vim.keymap.set('n', '[[', function()\n+  require('_textutils').jump({ count = -1 })\n+end, { buffer = 0, silent = false, desc = 'Jump to previous section' })\n \n -- Add \"runnables\" for Lua/Vimscript code examples.\n ---@type table<integer, { lang: string, code: string }>\n local code_blocks = {}\n-local tree = vim.treesitter.get_parser():parse()[1]\n+local bufnr = vim.api.nvim_get_current_buf()\n+local parser = assert(vim.treesitter.get_parser(bufnr, 'vimdoc', { error = false }))",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938753501",
            "id": 1938753501,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zjwfd",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 45,
            "original_position": 49,
            "original_start_line": 44,
            "path": "runtime/ftplugin/help.lua",
            "position": null,
            "pull_request_review_id": 2588878769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938753501/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-03T04:33:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938753501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938756680"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938756680"
                }
            },
            "author_association": "MEMBER",
            "body": "In which case would `lang` be nil?",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T04:30:58Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+-- Utility functions for rich text ftplugins (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.colorize_hl_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+local function hash_tick(bufnr)\n+  return tostring(vim.b[bufnr].changedtick)\n+end\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+local get_headings = vim.func._memoize(hash_tick, function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938756680",
            "id": 1938756680,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM5zjxRI",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/_textutils.lua",
            "position": 77,
            "pull_request_review_id": 2588878769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938756680/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-03T04:33:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938756680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938758177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938758177"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this `print` left from debugging?",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T04:33:44Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+-- Utility functions for rich text ftplugins (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.colorize_hl_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+local function hash_tick(bufnr)\n+  return tostring(vim.b[bufnr].changedtick)\n+end\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+local get_headings = vim.func._memoize(hash_tick, function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then\n+    return\n+  end\n+  local parser = assert(vim.treesitter.get_parser(bufnr, lang, { error = false }))\n+  local query = vim.treesitter.query.parse(lang, heading_queries[lang])\n+  local root = parser:parse()[1]:root()\n+  local headings = {}\n+  for id, node, _, _ in query:iter_captures(root, bufnr) do\n+    local text = vim.treesitter.get_node_text(node, bufnr)\n+    local row, col = node:start()\n+    --- why can't you just be normal?!\n+    local skip ---@type boolean|integer\n+    if lang == 'vimdoc' then\n+      -- only column_headings at col 1 are headings, otherwise it's code examples\n+      skip = (id == 4 and col > 0)\n+        -- ignore tabular material\n+        or (id == 4 and (text:find('\\t') or text:find('  ')))\n+        -- ignore tag-only headings\n+        or (node:child_count() == 1 and node:child(0):type() == 'tag')\n+    end\n+    if not skip then\n+      table.insert(headings, {\n+        bufnr = bufnr,\n+        lnum = row + 1,\n+        text = text,\n+        level = id,\n+      })\n+    end\n+  end\n+  return headings\n+end)\n+\n+--- Show a table of contents for the help buffer in a loclist\n+function M.show_toc()\n+  local bufnr = vim.api.nvim_get_current_buf()\n+  local headings = get_headings(bufnr)\n+  if not headings or #headings == 0 then\n+    return\n+  end\n+  -- add indentation for nicer list formatting\n+  for _, heading in pairs(headings) do\n+    if heading.level > 2 then\n+      heading.text = '  ' .. heading.text\n+    end\n+    if heading.level > 4 then\n+      heading.text = '  ' .. heading.text\n+    end\n+  end\n+  vim.fn.setloclist(0, headings, ' ')\n+  vim.fn.setloclist(0, {}, 'a', { title = 'Help TOC' })\n+  vim.cmd.lopen()\n+end\n+\n+--- Jump to section\n+--- @param opts table jump options\n+---  - count integer direction to jump (>0 forward, <0 backward)\n+---  - level integer only consider headings up to level\n+--- todo(clason): support count\n+function M.jump(opts)\n+  local bufnr = vim.api.nvim_get_current_buf()\n+  local headings = get_headings(bufnr)\n+  if not headings or #headings == 0 then\n+    return\n+  end\n+\n+  local winid = vim.api.nvim_get_current_win()\n+  local curpos = vim.fn.getcurpos(winid)[2]\n+  local maxlevel = opts.level or 6\n+\n+  if opts.count > 0 then\n+    for _, heading in ipairs(headings) do\n+      if heading.lnum > curpos and heading.level <= maxlevel then\n+        vim.api.nvim_win_set_cursor(winid, { heading.lnum, 0 })\n+        return\n+      end\n+    end\n+  elseif opts.count < 0 then\n+    for i = #headings, 1, -1 do\n+      if headings[i].lnum < curpos and headings[i].level <= maxlevel then\n+        print(headings[i].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938758177",
            "id": 1938758177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zjxoh",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 156,
            "original_position": 156,
            "original_start_line": null,
            "path": "runtime/lua/_textutils.lua",
            "position": null,
            "pull_request_review_id": 2588878769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938758177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-03T04:33:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938758177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938972751"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938972751"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, thanks.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T08:31:36Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+-- Utility functions for rich text ftplugins (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.colorize_hl_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+local function hash_tick(bufnr)\n+  return tostring(vim.b[bufnr].changedtick)\n+end\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+local get_headings = vim.func._memoize(hash_tick, function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then\n+    return\n+  end\n+  local parser = assert(vim.treesitter.get_parser(bufnr, lang, { error = false }))\n+  local query = vim.treesitter.query.parse(lang, heading_queries[lang])\n+  local root = parser:parse()[1]:root()\n+  local headings = {}\n+  for id, node, _, _ in query:iter_captures(root, bufnr) do\n+    local text = vim.treesitter.get_node_text(node, bufnr)\n+    local row, col = node:start()\n+    --- why can't you just be normal?!\n+    local skip ---@type boolean|integer\n+    if lang == 'vimdoc' then\n+      -- only column_headings at col 1 are headings, otherwise it's code examples\n+      skip = (id == 4 and col > 0)\n+        -- ignore tabular material\n+        or (id == 4 and (text:find('\\t') or text:find('  ')))\n+        -- ignore tag-only headings\n+        or (node:child_count() == 1 and node:child(0):type() == 'tag')\n+    end\n+    if not skip then\n+      table.insert(headings, {\n+        bufnr = bufnr,\n+        lnum = row + 1,\n+        text = text,\n+        level = id,\n+      })\n+    end\n+  end\n+  return headings\n+end)\n+\n+--- Show a table of contents for the help buffer in a loclist\n+function M.show_toc()\n+  local bufnr = vim.api.nvim_get_current_buf()\n+  local headings = get_headings(bufnr)\n+  if not headings or #headings == 0 then\n+    return\n+  end\n+  -- add indentation for nicer list formatting\n+  for _, heading in pairs(headings) do\n+    if heading.level > 2 then\n+      heading.text = '  ' .. heading.text\n+    end\n+    if heading.level > 4 then\n+      heading.text = '  ' .. heading.text\n+    end\n+  end\n+  vim.fn.setloclist(0, headings, ' ')\n+  vim.fn.setloclist(0, {}, 'a', { title = 'Help TOC' })\n+  vim.cmd.lopen()\n+end\n+\n+--- Jump to section\n+--- @param opts table jump options\n+---  - count integer direction to jump (>0 forward, <0 backward)\n+---  - level integer only consider headings up to level\n+--- todo(clason): support count\n+function M.jump(opts)\n+  local bufnr = vim.api.nvim_get_current_buf()\n+  local headings = get_headings(bufnr)\n+  if not headings or #headings == 0 then\n+    return\n+  end\n+\n+  local winid = vim.api.nvim_get_current_win()\n+  local curpos = vim.fn.getcurpos(winid)[2]\n+  local maxlevel = opts.level or 6\n+\n+  if opts.count > 0 then\n+    for _, heading in ipairs(headings) do\n+      if heading.lnum > curpos and heading.level <= maxlevel then\n+        vim.api.nvim_win_set_cursor(winid, { heading.lnum, 0 })\n+        return\n+      end\n+    end\n+  elseif opts.count < 0 then\n+    for i = #headings, 1, -1 do\n+      if headings[i].lnum < curpos and headings[i].level <= maxlevel then\n+        print(headings[i].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938972751",
            "id": 1938972751,
            "in_reply_to_id": 1938758177,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5zkmBP",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 156,
            "original_position": 156,
            "original_start_line": null,
            "path": "runtime/lua/_textutils.lua",
            "position": null,
            "pull_request_review_id": 2589216973,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938972751/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-03T08:31:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938972751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1938972832"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938972832"
                }
            },
            "author_association": "MEMBER",
            "body": "If there's no `filetype`.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T08:31:40Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+-- Utility functions for rich text ftplugins (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.colorize_hl_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+local function hash_tick(bufnr)\n+  return tostring(vim.b[bufnr].changedtick)\n+end\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+local get_headings = vim.func._memoize(hash_tick, function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1938972832",
            "id": 1938972832,
            "in_reply_to_id": 1938756680,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM5zkmCg",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/_textutils.lua",
            "position": 77,
            "pull_request_review_id": 2589217093,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938972832/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-03T08:31:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1938972832",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1939865459"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1939865459"
                }
            },
            "author_association": "MEMBER",
            "body": "Right, I got that bit. But is that possible in a Markdown or Vimdoc file?\r\n\r\nI ask this in case that this might silently ignore an error, and maybe `assert` would be more appropriate.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T18:47:10Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+-- Utility functions for rich text ftplugins (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.colorize_hl_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+local function hash_tick(bufnr)\n+  return tostring(vim.b[bufnr].changedtick)\n+end\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+local get_headings = vim.func._memoize(hash_tick, function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1939865459",
            "id": 1939865459,
            "in_reply_to_id": 1938756680,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM5zn_9z",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/_textutils.lua",
            "position": 77,
            "pull_request_review_id": 2590737132,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1939865459/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-03T18:47:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1939865459",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32282#discussion_r1939883615"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32282"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1939883615"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, this is primarily intended to shut up luals, and short-circuiting in this case seemed the most reasonable approach.\r\n\r\nBut maybe returning an empty table is even more reasonable given the purpose here and simplifies the check later.",
            "commit_id": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
            "created_at": "2025-02-03T19:01:42Z",
            "diff_hunk": "@@ -0,0 +1,164 @@\n+-- Utility functions for rich text ftplugins (vim help, markdown)\n+\n+local M = {}\n+\n+--- Apply current colorscheme to lists of default highlight groups\n+---\n+--- Note: {patterns} is assumed to be sorted by occurrence in the file.\n+--- @param patterns {start:string,stop:string,match:string}[]\n+function M.colorize_hl_groups(patterns)\n+  local ns = vim.api.nvim_create_namespace('nvim.vimhelp')\n+  vim.api.nvim_buf_clear_namespace(0, ns, 0, -1)\n+\n+  local save_cursor = vim.fn.getcurpos()\n+\n+  for _, pat in pairs(patterns) do\n+    local start_lnum = vim.fn.search(pat.start, 'c')\n+    local end_lnum = vim.fn.search(pat.stop)\n+    if start_lnum == 0 or end_lnum == 0 then\n+      break\n+    end\n+\n+    for lnum = start_lnum, end_lnum do\n+      local word = vim.api.nvim_buf_get_lines(0, lnum - 1, lnum, true)[1]:match(pat.match)\n+      if vim.fn.hlexists(word) ~= 0 then\n+        vim.api.nvim_buf_set_extmark(0, ns, lnum - 1, 0, { end_col = #word, hl_group = word })\n+      end\n+    end\n+  end\n+\n+  vim.fn.setpos('.', save_cursor)\n+end\n+\n+local heading_queries = {\n+  vimdoc = [[\n+    (h1 (heading) @h1)\n+    (h2 (heading) @h2)\n+    (h3 (heading) @h3)\n+    (column_heading (heading) @h4)\n+  ]],\n+  markdown = [[\n+    (setext_heading\n+      heading_content: (_) @h1\n+      (setext_h1_underline))\n+    (setext_heading\n+      heading_content: (_) @h2\n+      (setext_h2_underline))\n+    (atx_heading\n+      (atx_h1_marker)\n+      heading_content: (_) @h1)\n+    (atx_heading\n+      (atx_h2_marker)\n+      heading_content: (_) @h2)\n+    (atx_heading\n+      (atx_h3_marker)\n+      heading_content: (_) @h3)\n+    (atx_heading\n+      (atx_h4_marker)\n+      heading_content: (_) @h4)\n+    (atx_heading\n+      (atx_h5_marker)\n+      heading_content: (_) @h5)\n+    (atx_heading\n+      (atx_h6_marker)\n+      heading_content: (_) @h6)\n+  ]],\n+}\n+\n+local function hash_tick(bufnr)\n+  return tostring(vim.b[bufnr].changedtick)\n+end\n+\n+--- Extract headings from buffer\n+--- @param bufnr integer buffer to extract headings from\n+--- @return table[]? headings each entry has keys `bufnr`, `lnum`, `capture`, `text`\n+local get_headings = vim.func._memoize(hash_tick, function(bufnr)\n+  local lang = vim.treesitter.language.get_lang(vim.bo[bufnr].filetype)\n+  if not lang then",
            "html_url": "https://github.com/neovim/neovim/pull/32282#discussion_r1939883615",
            "id": 1939883615,
            "in_reply_to_id": 1938756680,
            "line": 77,
            "node_id": "PRRC_kwDOAPphoM5zoEZf",
            "original_commit_id": "2f424bf4870ad5bf567e7d96603d4727cf155f2d",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/_textutils.lua",
            "position": 77,
            "pull_request_review_id": 2590766014,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1939883615/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-02-03T19:01:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1939883615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "It's not meant to be public, and these functions should stay together since they are used in the same context (and for the same reason) but they should not be part of a `ftplugin` (since they're shared across three or more). They're just common utility functions, in the end, that are factored out since they're either shared or should be loaded on-demand.\r\n\r\nIf you have a better name for this internal module, please tell me and I will use it. ",
            "created_at": "2025-02-02T10:10:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/32282#issuecomment-2629328969",
            "id": 2629328969,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
            "node_id": "IC_kwDOAPphoM6cuGBJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629328969/reactions"
            },
            "updated_at": "2025-02-02T10:12:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629328969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Don't we usually give some signal that a module is private? I.e. underscore prefix. If these can't live in `vim.ui` then perhaps `vim._ui`, I don't want \"render\" to gain traction/mindshare.\r\n\r\n`vim.ui.show_toc` could make sense as a public function but can revisit that later.",
            "created_at": "2025-02-02T10:25:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/32282#issuecomment-2629334320",
            "id": 2629334320,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
            "node_id": "IC_kwDOAPphoM6cuHUw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629334320/reactions"
            },
            "updated_at": "2025-02-02T10:25:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629334320",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sure, I'll rename it to `_textutils.lua`. I don't want this mixed into _any_ public-facing API; it's really just a set of common ftplugin utility functions.\r\n\r\n(I had the idea of integrating this with our current markdown renderer we use for LSP, and moving vimdoc rendering into Lua, but I see that this is not an acceptable direction so I will drop this idea.)",
            "created_at": "2025-02-02T10:38:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/32282#issuecomment-2629338789",
            "id": 2629338789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
            "node_id": "IC_kwDOAPphoM6cuIal",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629338789/reactions"
            },
            "updated_at": "2025-02-02T10:38:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629338789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Sure, I'll rename it to `_textutils.lua`.\r\n\r\n\r\nWe have `vim.text`, if this is truly text-related stuff that should be private, it can live in `vim._text` or underscore-prefixed functions in `vim.text`.\r\n\r\nNvim is a TUI so everything is \"text\", but the \"text\" aspects of these functions is secondary.\r\n\r\nThese functions are about highlighting, jump (navigation), and UI (show_toc). So `vim.ui` or `vim._ui` seems more appropriate.\r\n\r\n",
            "created_at": "2025-02-02T10:57:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/32282#issuecomment-2629344661",
            "id": 2629344661,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
            "node_id": "IC_kwDOAPphoM6cuJ2V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629344661/reactions"
            },
            "updated_at": "2025-02-02T10:57:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629344661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We have vim.text, if this is truly text-related stuff that should be private, it can live in vim._text or underscore-prefixed functions in vim.text.\r\n\r\nI thought about that, but those are text (string) _manipulation_ functions, so this seemed like a poor fit.\r\n\r\nIs `vim.ui._text` acceptable to get this merged? Since it's not public API, you can rename and refactor to your heart's content afterwards.\r\n\r\n(Again, they are not meant to be \"API\" in any sense; they're just internal utility functions shared by two or more ftplugins. We have yet to come up with a pattern for such. Would it be better if I moved them out of the `vim` namespace altogether?)",
            "created_at": "2025-02-02T11:02:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/32282#issuecomment-2629346300",
            "id": 2629346300,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
            "node_id": "IC_kwDOAPphoM6cuKP8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629346300/reactions"
            },
            "updated_at": "2025-02-02T11:10:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2629346300",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> they're just internal utility functions shared by two or more ftplugins. We have yet to come up with a pattern for such. Would it be better if I moved them out of the `vim` namespace altogether?)\r\n\r\nYeah, either `_shared.lua` or `_util.lua` I think conveys the fact that these are just random shared internal functions.",
            "created_at": "2025-02-03T09:26:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/32282#issuecomment-2630400666",
            "id": 2630400666,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
            "node_id": "IC_kwDOAPphoM6cyLqa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2630400666/reactions"
            },
            "updated_at": "2025-02-03T09:26:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2630400666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32282/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/32282/commits",
    "created_at": "2025-02-01T12:26:55Z",
    "diff_url": "https://github.com/neovim/neovim/pull/32282.diff",
    "draft": false,
    "head": {
        "label": "clason:render",
        "ref": "render",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/clason/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/clason/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/clason/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/clason/neovim/branches{/branch}",
            "clone_url": "https://github.com/clason/neovim.git",
            "collaborators_url": "https://api.github.com/repos/clason/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/clason/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/clason/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/clason/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/clason/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/clason/neovim/contributors",
            "created_at": "2022-06-19T14:32:07Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/clason/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/clason/neovim/downloads",
            "events_url": "https://api.github.com/repos/clason/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/clason/neovim/forks",
            "full_name": "clason/neovim",
            "git_commits_url": "https://api.github.com/repos/clason/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/clason/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/clason/neovim/git/tags{/sha}",
            "git_url": "git://github.com/clason/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/clason/neovim/hooks",
            "html_url": "https://github.com/clason/neovim",
            "id": 505133677,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/clason/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/clason/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/clason/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/clason/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/clason/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/clason/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/clason/neovim/merges",
            "milestones_url": "https://api.github.com/repos/clason/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHhu6bQ",
            "notifications_url": "https://api.github.com/repos/clason/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/clason/neovim/pulls{/number}",
            "pushed_at": "2025-02-03T19:02:08Z",
            "releases_url": "https://api.github.com/repos/clason/neovim/releases{/id}",
            "size": 301149,
            "ssh_url": "git@github.com:clason/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/clason/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/clason/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/clason/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/clason/neovim/subscription",
            "svn_url": "https://github.com/clason/neovim",
            "tags_url": "https://api.github.com/repos/clason/neovim/tags",
            "teams_url": "https://api.github.com/repos/clason/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/clason/neovim/git/trees{/sha}",
            "updated_at": "2025-02-01T09:24:55Z",
            "url": "https://api.github.com/repos/clason/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/32282",
    "id": 2310739636,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32282",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "d33e86d788c4014bc8e4d7ee1dbc9ca1e527688a",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6Juxa0",
    "number": 32282,
    "patch_url": "https://github.com/neovim/neovim/pull/32282.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
            "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
            "followers_url": "https://api.github.com/users/wookayin/followers",
            "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
            "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/wookayin",
            "id": 1009873,
            "login": "wookayin",
            "node_id": "MDQ6VXNlcjEwMDk4NzM=",
            "organizations_url": "https://api.github.com/users/wookayin/orgs",
            "received_events_url": "https://api.github.com/users/wookayin/received_events",
            "repos_url": "https://api.github.com/users/wookayin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/wookayin",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/32282/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/583ee0e8bfd922831d9e26106fb0fc6e330aa3c2",
    "title": "feat(treesitter): table of contents for checkhealth, markdown",
    "updated_at": "2025-02-03T19:02:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/32282",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
        "events_url": "https://api.github.com/users/clason/events{/privacy}",
        "followers_url": "https://api.github.com/users/clason/followers",
        "following_url": "https://api.github.com/users/clason/following{/other_user}",
        "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/clason",
        "id": 2361214,
        "login": "clason",
        "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
        "organizations_url": "https://api.github.com/users/clason/orgs",
        "received_events_url": "https://api.github.com/users/clason/received_events",
        "repos_url": "https://api.github.com/users/clason/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/clason",
        "user_view_type": "public"
    }
}