{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35360/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35360/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35360"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35360"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35360/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35360"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/06395875a02237e926278c82df1ebb2935f44f91"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6262,
            "forks_count": 6262,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1971,
            "open_issues_count": 1971,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-19T00:45:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 338530,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92074,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-19T01:56:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92074,
            "watchers_count": 92074,
            "web_commit_signoff_required": false
        },
        "sha": "f363ea8547cc9d351f4231ce601dca8dabbcf876",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Hey! Question: can we make it so that the spec passed to the load function can have extra values placed into it?\r\n\r\nIf I put extra values in my spec, they are not being provided to the load function as it is currently and that in my opinion would further increase flexibility for very little cost?\r\n\r\nThis would solve most requests for more values in the spec beyond URL schema, build steps, or luarocks stuff (which is taken care of before the load function is called) but everything else people seem to be asking for is load related.\r\n\r\nfor example, it would be nice to be able to include our own little flag for our load function to identify what is loaded when. Simplest example would be something like this\r\n\r\n```lua\r\n  vim.pack.add({\r\n      \"https://github.com/BirdeeHub/lze\",\r\n      { src = \"https://github.com/Wansmer/treesj\", opt = true },\r\n  }, {\r\n    load = function(p)\r\n      print(vim.inspect(p)) -- print for demonstration purposes to show what we are recieving, output shown below\r\n      if not p.spec.opt then -- currently this opt flag would not be included in spec\r\n        vim.cmd.packadd(p.spec.name)\r\n      end\r\n    end,\r\n    confirm = true,\r\n  })\r\n```\r\n  the above print will currently result in the following, with the opt not included (also I edited the path output and added a comment)\r\n```lua\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/lze\",\r\n  spec = {\r\n    name = \"lze\",\r\n    src = \"https://github.com/BirdeeHub/lze\"\r\n  }\r\n}\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/treesj\",\r\n  spec = {\r\n    name = \"treesj\",\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    -- opt = true -- isn't here?\r\n  }\r\n}\r\n```\r\n  \r\n  But obviously you could do a lot more than just that. You could make it so that the load function provides the spec straight to the lze.load function for example and use the full spec in the same list you provide your download specs in, or any number of other things to that effect.\r\n  \r\nCurrently I have been managing my lazy loading with lze, which you could use like this\r\n\r\n```lua  \r\n  vim.pack.add({\r\n    \"https://github.com/BirdeeHub/lze\", -- https://github.com/nvim-neorocks/lz.n also works for this purpose\r\n    \"https://github.com/Wansmer/treesj\",\r\n    { src = \"https://github.com/nvim-telescope/telescope.nvim\" },\r\n    { src = \"https://github.com/NTBBloodBatch/sweetie.nvim\", name = \"sweetie\" }\r\n}, {\r\n  -- prevent packadd! or packadd like this to allow on_require handler to load plugin spec (if you desire to use that handler, otherwise false is fine and you can remove the packadd for lze below)\r\n  load = function() end,\r\n  -- choose your preference for install confirmation\r\n  confirm = true,\r\n})\r\nvim.cmd.packadd(\"lze\")\r\n\r\nrequire(\"lze\").load {\r\n    {\r\n        \"telescope.nvim\",\r\n        cmd = \"Telescope\",\r\n        on_require = { \"telescope\" },\r\n    },\r\n    {\r\n        \"sweetie\", -- note the name change above\r\n        colorscheme = \"sweetie\",\r\n    },\r\n    {\r\n        \"treesj\",\r\n        cmd = { \"TSJToggle\" },\r\n        keys = { { \"<leader>Tt\", \":TSJToggle<CR>\", mode = { \"n\" }, desc = \"treesj split/join\" }, },\r\n        after = function(spec)\r\n            require(\"treesj\").setup({})\r\n        end,\r\n    }\r\n}\r\n```\r\n\r\nbut with just that 1 change, you would be able to move all of the lze spec into the spec for the vim.pack.add specs. and just pass the specs straight to lze.load in the load function for vim.pack.add\r\n\r\n```lua\r\nvim.pack.add({ \"https://github.com/BirdeeHub/lze\" }, { confirm = false --[[or true idk]] })\r\nvim.pack.add({\r\n  {\r\n    src = \"https://github.com/nvim-telescope/telescope.nvim\",\r\n    cmd = \"Telescope\",\r\n    on_require = { \"telescope\" },\r\n  },\r\n  {\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    cmd = { \"TSJToggle\" },\r\n    keys = { { \"<leader>Tt\", \":TSJToggle<CR>\", mode = { \"n\" }, desc = \"treesj split/join\" }, },\r\n    after = function(spec)\r\n      require('treesj').setup({})\r\n    end,\r\n  },\r\n  {\r\n    src = \"https://github.com/NTBBloodBatch/sweetie.nvim\",\r\n    colorscheme = \"sweetie\",\r\n  }\r\n}, {\r\n  load = function(p)\r\n    require('lze').load(p.spec)\r\n  end,\r\n  -- choose your preference for install confirmation\r\n  confirm = true,\r\n})\r\n```\r\n\r\nTL;DR\r\n\r\nIf all values in the spec were passed on to the load function, it would solve people's issues with managing lazy loading while using vim.pack.add for very little maintenance effort.\r\n\r\nIt would not solve build steps, but I think that was to be handled via some sort of rockspec mechanism? But that would be a separate problem, not hindered by this change.\r\n\r\n(this message is a repeat of [this comment](https://github.com/neovim/neovim/pull/35270#issuecomment-3193972166) on the last pr for vim.pack.add related to load functions)",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35360#discussion_r2280877891"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35360"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280877891"
                }
            },
            "author_association": "MEMBER",
            "body": "No need to clear at the end, this is done before every `it`.",
            "commit_id": "06395875a02237e926278c82df1ebb2935f44f91",
            "created_at": "2025-08-17T13:18:50Z",
            "diff_hunk": "@@ -311,6 +311,39 @@ describe('vim.pack', function()\n       eq(exec_lua('return #_G.event_log'), 0)\n     end)\n \n+    it('passes extra spec values through to opts.load', function()\n+      eq(true, exec_lua(function()\n+        local hasvalue = false\n+        vim.pack.add({\n+          { src = repos_src.basic, data = { test = \"value\" } },\n+        }, {\n+          confirm = false,\n+          load = function(p)\n+            if p.spec.data and p.spec.data.test == \"value\" then\n+              hasvalue = true\n+            end\n+          end,\n+        })\n+        return hasvalue\n+      end))\n+      n.clear()",
            "html_url": "https://github.com/neovim/neovim/pull/35360#discussion_r2280877891",
            "id": 2280877891,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H829D",
            "original_commit_id": "4373a7783bf8d994eef357476f7795b07bd378af",
            "original_line": 329,
            "original_position": 19,
            "original_start_line": null,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3126337545,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35360",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280877891/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T13:20:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280877891",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35360#discussion_r2280877971"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35360"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280877971"
                }
            },
            "author_association": "MEMBER",
            "body": "Put this as a `get()` test, please.",
            "commit_id": "06395875a02237e926278c82df1ebb2935f44f91",
            "created_at": "2025-08-17T13:19:05Z",
            "diff_hunk": "@@ -311,6 +311,39 @@ describe('vim.pack', function()\n       eq(exec_lua('return #_G.event_log'), 0)\n     end)\n \n+    it('passes extra spec values through to opts.load', function()\n+      eq(true, exec_lua(function()\n+        local hasvalue = false\n+        vim.pack.add({\n+          { src = repos_src.basic, data = { test = \"value\" } },\n+        }, {\n+          confirm = false,\n+          load = function(p)\n+            if p.spec.data and p.spec.data.test == \"value\" then\n+              hasvalue = true\n+            end\n+          end,\n+        })\n+        return hasvalue\n+      end))\n+      n.clear()\n+    end)\n+\n+    it('passes extra spec values through to vim.pack.get()', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35360#discussion_r2280877971",
            "id": 2280877971,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H82-T",
            "original_commit_id": "4373a7783bf8d994eef357476f7795b07bd378af",
            "original_line": 332,
            "original_position": 22,
            "original_start_line": null,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3126337545,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35360",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280877971/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T13:20:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280877971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35360#discussion_r2280879356"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35360"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280879356"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Oh duh I kinda forgot that the describe sections were by function",
            "commit_id": "06395875a02237e926278c82df1ebb2935f44f91",
            "created_at": "2025-08-17T13:22:13Z",
            "diff_hunk": "@@ -311,6 +311,39 @@ describe('vim.pack', function()\n       eq(exec_lua('return #_G.event_log'), 0)\n     end)\n \n+    it('passes extra spec values through to opts.load', function()\n+      eq(true, exec_lua(function()\n+        local hasvalue = false\n+        vim.pack.add({\n+          { src = repos_src.basic, data = { test = \"value\" } },\n+        }, {\n+          confirm = false,\n+          load = function(p)\n+            if p.spec.data and p.spec.data.test == \"value\" then\n+              hasvalue = true\n+            end\n+          end,\n+        })\n+        return hasvalue\n+      end))\n+      n.clear()\n+    end)\n+\n+    it('passes extra spec values through to vim.pack.get()', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35360#discussion_r2280879356",
            "id": 2280879356,
            "in_reply_to_id": 2280877971,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H83T8",
            "original_commit_id": "4373a7783bf8d994eef357476f7795b07bd378af",
            "original_line": 332,
            "original_position": 22,
            "original_start_line": null,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3126338470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35360",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280879356/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T13:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280879356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35360#discussion_r2280879384"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35360"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280879384"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "good to know",
            "commit_id": "06395875a02237e926278c82df1ebb2935f44f91",
            "created_at": "2025-08-17T13:22:19Z",
            "diff_hunk": "@@ -311,6 +311,39 @@ describe('vim.pack', function()\n       eq(exec_lua('return #_G.event_log'), 0)\n     end)\n \n+    it('passes extra spec values through to opts.load', function()\n+      eq(true, exec_lua(function()\n+        local hasvalue = false\n+        vim.pack.add({\n+          { src = repos_src.basic, data = { test = \"value\" } },\n+        }, {\n+          confirm = false,\n+          load = function(p)\n+            if p.spec.data and p.spec.data.test == \"value\" then\n+              hasvalue = true\n+            end\n+          end,\n+        })\n+        return hasvalue\n+      end))\n+      n.clear()",
            "html_url": "https://github.com/neovim/neovim/pull/35360#discussion_r2280879384",
            "id": 2280879384,
            "in_reply_to_id": 2280877891,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H83UY",
            "original_commit_id": "4373a7783bf8d994eef357476f7795b07bd378af",
            "original_line": 329,
            "original_position": 19,
            "original_start_line": null,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3126338499,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35360",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280879384/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T13:22:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280879384",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35360#discussion_r2280882413"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35360"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280882413"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    it('respects extra spec fields', function()\r\n```",
            "commit_id": "06395875a02237e926278c82df1ebb2935f44f91",
            "created_at": "2025-08-17T13:30:57Z",
            "diff_hunk": "@@ -1179,6 +1196,20 @@ describe('vim.pack', function()\n       }, exec_lua('return vim.pack.get()'))\n     end)\n \n+    it('vim.pack.add passes extra spec values through to vim.pack.get()', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35360#discussion_r2280882413",
            "id": 2280882413,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6H84Dt",
            "original_commit_id": "f2295aeece20c77a5156f81f661f91f3084aa3a8",
            "original_line": 1199,
            "original_position": 28,
            "original_start_line": null,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3126341613,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35360",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280882413/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-17T13:30:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2280882413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is it a `feat(pack)` commit message or something else?\r\n\r\nShould I update news if it is because the check tells me to? news currently has this\r\n\r\n• Built-in plugin manager |vim.pack|\r\n\r\nSo I don't know if adding a line saying I changed it makes sense?",
            "created_at": "2025-08-17T04:02:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194109615",
            "id": 3194109615,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-Yj6v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194109615/reactions"
            },
            "updated_at": "2025-08-17T09:26:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194109615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think allowing and explicitly preserving any fields in specification is a good idea. This blurs the line of what is handled by `vim.pack` itself and what is not. I can easily imagine a confusion after seeing `on_require` key in `vim.pack.add()` call, looking at `:h vim.pack.Spec`, and not seeing it there.\r\n\r\nThere doesn't seem to be an intentional precedence of this in core. The `vim.diagnostic` does preserve extra fields, but I don't think it is intentional. If anything, throwing an error for unknown fields is a more common design. Which seems to be more useful to guard from typos.\r\n\r\nThere are two ways to handle this:\r\n\r\n- Suggest writing wrappers around `vim.pack.add` that handle custom fields. With or without monkey-patching `vim.pack.add()` itself (it is up to user). This was the recommended route so far.\r\n- Add a dedicated `data` field to store any information users want to preserve for a plugin. This will also be preserved in `vim.pack.get()`.\r\n\r\nI am okay with both approaches. cc @justinmk and @lewis6991.",
            "created_at": "2025-08-17T08:57:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194240906",
            "id": 3194240906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZD-K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194240906/reactions"
            },
            "updated_at": "2025-08-17T08:57:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194240906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If anything, throwing an error for unknown fields is a more common design. Which seems to be more useful to guard from typos.\n\nI suggest **not** to do this. This isn't something we ever do in Lua.",
            "created_at": "2025-08-17T09:01:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194243315",
            "id": 3194243315,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZEjz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194243315/reactions"
            },
            "updated_at": "2025-08-17T09:01:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194243315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "A dedicated data field would sorta be ok, but in my opinion It leads to confusion when you put something in the spec, and then define a load function that is to receive the spec, but it doesn't have all the stuff you put in it.\r\n\r\nThis would be better IMO, its not like it being in a data field would save you anything. That being said it would make writing the type in a way the docgen can handle easier? But yeah I personally find it more confusing when the function that is meant to get the spec doesn't have all the things you put in the spec.\r\n\r\nAnd yeah throwing on unknown fields is not a lua thing.",
            "created_at": "2025-08-17T09:10:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194248224",
            "id": 3194248224,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZFwg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194248224/reactions"
            },
            "updated_at": "2025-08-17T09:13:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194248224",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It leads to confusion when you put something in the spec, and then define a load function that is to receive the spec, but it doesn't have all the stuff you put in it.\r\n\r\nYou'd be expected to put extra \"something\" inside `data` which will then have all the stuff you put in it. This is a rather common pattern, like in autocommands and in LSP spec to pass data to the server.\r\n\r\n> > If anything, throwing an error for unknown fields is a more common design. Which seems to be more useful to guard from typos.\r\n> \r\n> I suggest **not** to do this. This isn't something we ever do in Lua.\r\n\r\n@lewis6991, do you have any preference for explicitly allowing any fields in the spec? I definitely don't like it (especially since it has to be documented), but the extra `data` field seems fine.",
            "created_at": "2025-08-17T09:29:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194264054",
            "id": 3194264054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZJn2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194264054/reactions"
            },
            "updated_at": "2025-08-17T09:30:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194264054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I see so you would in the spec do `{ src = \"idk\", data = { stuff }, }`\r\n\r\nAnd then it would pass data as part of the spec to load.\r\n\r\nIDK it kinda just seems more verbose to me that way for little reason.\r\n\r\nSo, yeah more opinions will be needed to decide between .data and just allowing extra fields to be passed through",
            "created_at": "2025-08-17T09:32:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194265366",
            "id": 3194265366,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZJ8W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194265366/reactions"
            },
            "updated_at": "2025-08-17T09:32:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194265366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I suggest to just be agnostic to the input tables and only use the fields the API defines. Anything else is simply ignored. This will allow users to more easily subclass the spec class. We can use the language server to mitigate typos.",
            "created_at": "2025-08-17T09:32:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194265690",
            "id": 3194265690,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZKBa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194265690/reactions"
            },
            "updated_at": "2025-08-17T09:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194265690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> agnostic to the input tables and only use the fields the API defines. Anything else is simply ignored\r\n\r\nSo, lewis, you are in favor of them being passed as-is like I have it now rather than allowing an arbitrary data field and discarding the extra fields outside of that?\r\n\r\nor am I misunderstanding",
            "created_at": "2025-08-17T09:34:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194266419",
            "id": 3194266419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZKMz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194266419/reactions"
            },
            "updated_at": "2025-08-17T09:34:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194266419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The way I have it now (which I prefer)\r\n\r\n```lua\r\nvim.pack.add({ \"https://github.com/BirdeeHub/lze\" }, { confirm = false --[[or true idk]] })\r\nvim.pack.add({\r\n  {\r\n    src = \"https://github.com/nvim-telescope/telescope.nvim\",\r\n    cmd = \"Telescope\",\r\n    on_require = { \"telescope\" },\r\n  },\r\n  {\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    cmd = { \"TSJToggle\" },\r\n    keys = { { \"<leader>Tt\", \":TSJToggle<CR>\", mode = { \"n\" }, desc = \"treesj split/join\" }, },\r\n    after = function(spec)\r\n      require('treesj').setup({})\r\n    end,\r\n  },\r\n  {\r\n    src = \"https://github.com/NTBBloodBatch/sweetie.nvim\",\r\n    colorscheme = \"sweetie\",\r\n  }\r\n}, {\r\n  load = function(p)\r\n    require('lze').load(p.spec)\r\n  end,\r\n  -- choose your preference for install confirmation\r\n  confirm = true,\r\n})\r\n```\r\n\r\nvs a separate data field (which echasnovski prefers)\r\n\r\n```lua\r\nvim.pack.add({ \"https://github.com/BirdeeHub/lze\" }, { confirm = false --[[or true idk]] })\r\nvim.pack.add({\r\n  {\r\n    src = \"https://github.com/nvim-telescope/telescope.nvim\",\r\n    data = {\r\n      cmd = \"Telescope\",\r\n      on_require = { \"telescope\" },\r\n    }\r\n  },\r\n  {\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    data = {\r\n      cmd = { \"TSJToggle\" },\r\n      keys = { { \"<leader>Tt\", \":TSJToggle<CR>\", mode = { \"n\" }, desc = \"treesj split/join\" }, },\r\n      after = function(spec)\r\n        require('treesj').setup({})\r\n      end,\r\n    }\r\n  },\r\n  {\r\n    src = \"https://github.com/NTBBloodBatch/sweetie.nvim\",\r\n    data = {\r\n      colorscheme = \"sweetie\",\r\n    }\r\n  }\r\n}, {\r\n  load = function(p)\r\n    local spec = p.spec.data or {}\r\n    spec.name = p.spec.name\r\n    require('lze').load(spec)\r\n  end,\r\n  -- choose your preference for install confirmation\r\n  confirm = true,\r\n})\r\n```",
            "created_at": "2025-08-17T09:36:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194267381",
            "id": 3194267381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZKb1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194267381/reactions"
            },
            "updated_at": "2025-08-17T12:25:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194267381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Anything else is simply ignored.\r\n\r\nIt can't fully be simply ignored. It has to be stored and returned in `vim.pack.get()`. There is also a question of doing a copy or not: the first is a more robust behavior, but the second allows changing in place. With extra `data` there can difference.",
            "created_at": "2025-08-17T09:39:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194268836",
            "id": 3194268836,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZKyk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194268836/reactions"
            },
            "updated_at": "2025-08-17T09:39:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194268836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "currently it does a deepcopy of the whole spec table before passing to events or load and when calling get, I didn't change that, but we could idk. We could remove some of the deep copies if we want to. But that problem exists with or without the data field, regardless of how you want to include extra values?\r\n\r\nYou can either pull out just the 3 fields for scenarios where you want to avoid the deepcopy of the whole thing, or you can remove the data field and deepcopy to avoid deepcopy of the whole thing.\r\n\r\nRegardless of if it is in a separate data field or not, we could choose to store the extra values in the list returned by get or not.\r\n\r\nIt works with vim.pack.get() the way I have it currently, it currently stores and returns all the values, but we could filter out the extra fields/data field in pack_add to avoid storing\r\n\r\n```lua\r\nvim.pack.add({\r\n  \"https://github.com/BirdeeHub/lze\",\r\n  { src = \"https://github.com/Wansmer/treesj\", opt = true },\r\n}, {\r\n  load = function(p)\r\n    if not p.spec.opt then\r\n      vim.cmd.packadd(p.spec.name)\r\n    end\r\n  end,\r\n  confirm = true,\r\n})\r\n```\r\n\r\n`:lua print(vim.inspect(vim.pack.get()))`\r\n\r\n```lua\r\n{ {\r\n    active = true,\r\n    path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/lze\",\r\n    spec = {\r\n      name = \"lze\",\r\n      src = \"https://github.com/BirdeeHub/lze\",\r\n      version = \"master\"\r\n    }\r\n  }, {\r\n    active = true,\r\n    path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/treesj\",\r\n    spec = {\r\n      name = \"treesj\",\r\n      opt = true,\r\n      src = \"https://github.com/Wansmer/treesj\",\r\n      version = \"main\"\r\n    }\r\n  } }\r\n```",
            "created_at": "2025-08-17T09:42:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194270326",
            "id": 3194270326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZLJ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194270326/reactions"
            },
            "updated_at": "2025-08-17T10:19:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194270326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think it's probably a good idea for `get()` to only return what's defined in the API via a new table and copying over the appropriate fields. Avoid deepcopy if possible.",
            "created_at": "2025-08-17T10:03:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194280883",
            "id": 3194280883,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZNuz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194280883/reactions"
            },
            "updated_at": "2025-08-17T10:03:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194280883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok, so, I should edit pack_add to only store the defined fields to the internal list then probably to achieve that.\r\n\r\nThen any deepcopies are fine anyway because its just the 3 fields but the load function can still receive the whole thing\r\n\r\nAnd we can go through and remove any extra deepcopies also maybe",
            "created_at": "2025-08-17T10:05:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194282317",
            "id": 3194282317,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZOFN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194282317/reactions"
            },
            "updated_at": "2025-08-17T10:06:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194282317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think it's probably a good idea for `get()` to only return what's defined in the API via a new table ...\r\n\r\nThis doesn't make much sense to me, since this limits the usage of extra fields to only `load`. What if user/plugin wants to retrieve the data stored in `spec`? Either preserve everywhere or nowhere at all.\r\n\r\nIf allowing extra unhandled bare fields are fine (without `data`), then this PR's approach with explicit documentation should be the cleanest solution:\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/pack.lua b/runtime/lua/vim/pack.lua\r\nindex da4456d399..c114b34e64 100644\r\n--- a/runtime/lua/vim/pack.lua\r\n+++ b/runtime/lua/vim/pack.lua\r\n@@ -234,8 +234,10 @@ end\r\n --- - Output of |vim.version.range()| to install the greatest/last semver tag\r\n ---   inside the version constraint.\r\n --- @field version? string|vim.VersionRange\r\n+---\r\n+--- @field [any] any Extra fields are allowed but not used by `vim.pack` itself.\r\n \r\n---- @alias vim.pack.SpecResolved { src: string, name: string, version: nil|string|vim.VersionRange }\r\n+--- @alias vim.pack.SpecResolved { src: string, name: string, version: nil|string|vim.VersionRange, [any]: any }\r\n \r\n --- @param spec string|vim.pack.Spec\r\n --- @return vim.pack.SpecResolved\r\n@@ -244,10 +246,11 @@ local function normalize_spec(spec)\r\n   vim.validate('spec', spec, 'table')\r\n   vim.validate('spec.src', spec.src, is_nonempty_string, false, 'non-empty string')\r\n   local name = spec.name or spec.src:gsub('%.git$', '')\r\n-  name = (type(name) == 'string' and name or ''):match('[^/]+$') or ''\r\n-  vim.validate('spec.name', name, is_nonempty_string, true, 'non-empty string')\r\n+  spec.name = (type(name) == 'string' and name or ''):match('[^/]+$') or ''\r\n+  vim.validate('spec.name', spec.name, is_nonempty_string, true, 'non-empty string')\r\n   vim.validate('spec.version', spec.version, is_version, true, 'string or vim.VersionRange')\r\n-  return { src = spec.src, name = name, version = spec.version }\r\n+  --- @cast spec vim.pack.SpecResolved\r\n+  return spec\r\n end\r\n \r\n --- @class (private) vim.pack.PlugInfo\r\n```",
            "created_at": "2025-08-17T10:14:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194286899",
            "id": 3194286899,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZPMz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194286899/reactions"
            },
            "updated_at": "2025-08-17T10:15:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194286899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "```--- @field [any] any Extra fields are allowed but not used by `vim.pack` itself.```\r\n\r\nOH you can do that too. Cool. Will fix my weird alias type\r\n\r\nI can change it to `.data` still if that is the winner after more input, but for now I will do that\r\n\r\nI can also still filter out the extra values before storing in active_plugins in the pack_add function if desired if we don't want get to return the extra values\r\n\r\nWe should decide if we want it to deepcopy when passed to events and/or load, or if it should be modifiable, because currently it deepcopies",
            "created_at": "2025-08-17T10:22:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194290423",
            "id": 3194290423,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZQD3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194290423/reactions"
            },
            "updated_at": "2025-08-17T10:34:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194290423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We should decide if we want it to deepcopy when passed to events and/or load, or if it should be modifiable, because currently it deepcopies\r\n\r\nI have a very strong opinion that everything that is returned to the user should not be modifiable in place. Doing that leads to hard to debug issues only to allow usually hacky solutions. For example, it breaks already done type checks during normalization. Hence the explicit `vim.deepcopy` usages.\r\n\r\n\r\n\r\n> OH you can do that too. Cool. Will fix my weird alias type\r\n> \r\n> I can change it to `.data` still if that is the winner after more input, but for now I will do that\r\n\r\nThis would also require two extra tests: one for that `load` really accepts table with extra fields and one for `get()` actually returning those.",
            "created_at": "2025-08-17T10:33:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194295607",
            "id": 3194295607,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZRU3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194295607/reactions"
            },
            "updated_at": "2025-08-17T10:33:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194295607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This would also require two extra tests: one for that load really accepts table with extra fields and one for get() actually returning those.\r\n\r\nGreat point I should add those. It should need that for `.data` if we were to do that instead also. I should make the extra field in my test be `.data` so that I don't need to change the test if we change our mind as to if we use `.data` or extra fields. I will do those tomorrow most likely, as it is about time for me to go to bed, unless I get that done in the next 30 minutes or so.\r\n\r\nI do not particularly care if we deepcopy or not, but thats 1 vote for leaving the deepcopy when passing to event and the spec passed to load",
            "created_at": "2025-08-17T10:35:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194296560",
            "id": 3194296560,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZRjw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194296560/reactions"
            },
            "updated_at": "2025-08-17T10:43:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194296560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My only objection was specifically erroring on extra fields. \n\nThen I also said additionally that the API should only return defined fields. This will be to keep the system statically typed and the user can rely on fields not being present.",
            "created_at": "2025-08-17T10:50:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194303486",
            "id": 3194303486,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZTP-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194303486/reactions"
            },
            "updated_at": "2025-08-17T10:50:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194303486",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Then I also said additionally that the API should only return defined fields. This will be to keep the system statically typed and the user can rely on fields not being present.\r\n\r\nThis is doable, it would involve filtering out the extra fields before adding the plugin to active_plugins in pack_add\r\n\r\nThis would make it so that only the load function knows about the extra fields.\r\n\r\nechasnovski does not prefer that, however, so I am unsure what to do for now on that, the votes are split.\r\n\r\nBut it does need tests, so that should probably be the next thing I do, while we decide on `.data` vs extra fields, and whether to store and return the extra fields (or the `.data` field) or not.\r\n\r\nI will make the extra field in my tests I write be `.data` and do one for both `load` and `.get()`, so that the tests will not need to change regardless of if we decide on `.data` or new fields.\r\n\r\nIf we decide not to store the extra fields (or the `.data` field) in `active_plugins` I can remove the new test for `.get()` leaving just the one for load.",
            "created_at": "2025-08-17T10:52:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194304475",
            "id": 3194304475,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZTfb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194304475/reactions"
            },
            "updated_at": "2025-08-17T10:59:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194304475",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Then I also said additionally that the API should only return defined fields. This will be to keep the system statically typed and the user can rely on fields not being present.\r\n\r\nThis still doesn't make sense to me, as it limits the actual reason of having those extra fields. Plus would make documenting the behavior more confusing: extra fields are allowed in `vim.pack.add()`, but will not be returned by `vim.pack.get()`.\r\n\r\n> This is doable, it would involve filtering out the extra fields before adding the plugin to active_plugins in pack_add\r\n\r\nPlease don't do that. If extra behavior for `M.get()` to return only defined fields is needed, then the implementation of `M.get()` should be responsible for that. Doing it too early will have more side effects (like for autocommand triggers).\r\n\r\nThe code change would be a dedicated construction of `spec` instead of [using the already stored one directly](https://github.com/neovim/neovim/blob/35a7642647858f7b4ddc204ee869c399b678e7e8/runtime/lua/vim/pack.lua#L1017).",
            "created_at": "2025-08-17T11:00:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194308640",
            "id": 3194308640,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZUgg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194308640/reactions"
            },
            "updated_at": "2025-08-17T11:00:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194308640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hmmm...\r\n\r\nSo, `.get()` wouldn't be using a reconstruction because I would be filtering it [here where it saves it in the first place](https://github.com/BirdeeHub/neovim/blob/f314426a1ddffb48012763d1c448601a3d6d4e22/runtime/lua/vim/pack.lua#L658-L658)\r\n\r\nHowever, it would still be returning a different thing than you would be getting in the load function, so, on that front, I agree with echasnovski that we should probably store it if we are to accept it.\r\n\r\nthat still leaves the question on `.data` and lewis hasn't specified a preference there necessarily, so we need another input on that probably because I don't like it but I also don't completely hate it either.",
            "created_at": "2025-08-17T11:06:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194311850",
            "id": 3194311850,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZVSq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194311850/reactions"
            },
            "updated_at": "2025-08-17T11:12:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194311850",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Plus would make documenting the behavior more confusing: extra fields are allowed in vim.pack.add(), but will not be returned by vim.pack.get().\n\nYou don't need to document it. We just document the class and simply don't error if we get additional fields. No need to overcomplicate this. We should never error at runtime if we don't need to.",
            "created_at": "2025-08-17T11:06:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194311863",
            "id": 3194311863,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZVS3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194311863/reactions"
            },
            "updated_at": "2025-08-17T11:08:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194311863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "lewis you said your issue with it returning the extra stuff was that you wanted to keep the internals more statically typed, correct?\r\n\r\nWould having all the extra values be stored under a `.data` field instead of just extra allowed values feel more statically typed when returned from `.get()`?\r\n\r\nOr is the concern performance impact of storing the extra info beyond the 3 builtin fields rather than just passing the full thing off to load and forgetting about the extra fields?\r\n\r\nIf it is the former, we can just add a data field instead of allowing arbitrary extra fields.\r\n\r\nIf it is the latter, then the only solution that satisfies that would be not storing the extra fields, which is doable, but then that is another thing we have a sorta split decision on.",
            "created_at": "2025-08-17T11:08:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194312983",
            "id": 3194312983,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZVkX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194312983/reactions"
            },
            "updated_at": "2025-08-17T11:14:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194312983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We just document the class and simply don't error if we get additional fields. No need to overcomplicate this. We should never error at runtime if we don't need to.\r\n\r\nI do not talk about the error on unknowing fields, it was settled after your first comment.\r\n\r\nJust doing the patch from [the comment](https://github.com/neovim/neovim/pull/35360#issuecomment-3194286899) is the least complicated and consistent solution I can think of.\r\n\r\nThe question is now why `vim.pack.get()` should only use fields that are explicitly defined *but* `opts.load` in `vim.pack.add()` should use all the fields? The \"This will be to keep the system statically typed and the user can rely on fields not being present.\" can be applied to both cases.\r\n\r\nMy suggestion is whatever user specified as spec in `vim.pack.add()` should be used as close as possible. The only difference here is that `vim.pack.get()` (currently) infers the default `version` during its execution, which is for performance reasons.",
            "created_at": "2025-08-17T11:15:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194316704",
            "id": 3194316704,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZWeg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194316704/reactions"
            },
            "updated_at": "2025-08-17T11:15:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194316704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Just doing the patch from https://github.com/neovim/neovim/pull/35360#issuecomment-3194286899 is the least complicated and consistent solution I can think of.\r\n\r\nThis is what I have it as now yeah",
            "created_at": "2025-08-17T11:16:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194317726",
            "id": 3194317726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZWue",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194317726/reactions"
            },
            "updated_at": "2025-08-17T11:16:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194317726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but opts.load in vim.pack.add() should use all the fields?\n\nI never said this. We should simply just abide by the classes we define.",
            "created_at": "2025-08-17T11:17:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194317736",
            "id": 3194317736,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZWuo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194317736/reactions"
            },
            "updated_at": "2025-08-17T11:17:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194317736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I mean, `.get()` does say it returns a list of `{ spec: vim.pack.Spec, path: string, active: bool }` which would be something which includes those extra fields if they were supplied because `vim.pack.Spec` is defined as something which can have extra fields in the current implementation.\r\n\r\nSo, we are currently abiding by the defined classes.\r\n\r\nThe question echasnovski had is whether vim.pack.Spec should allow extra fields, or not allow them and allow only an arbitrary `spec.data` table.\r\n\r\nBut regardless, the type annotation returned from `.get()` would include the extra values naturally because it would be part of the type of `vim.pack.Spec`",
            "created_at": "2025-08-17T11:19:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194318972",
            "id": 3194318972,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZXB8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194318972/reactions"
            },
            "updated_at": "2025-08-17T11:24:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194318972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No. We do not define extra fields. We simply do not error if they are supplied.\n\nIf this is too hard to understand, then fine, error on extra fields.\n\nIt is these kinds of discussions are exactly why I've decided to continue to maintain my own package manager.",
            "created_at": "2025-08-17T11:24:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194321698",
            "id": 3194321698,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZXsi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194321698/reactions"
            },
            "updated_at": "2025-08-17T11:24:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194321698",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Nobody is erroring here",
            "created_at": "2025-08-17T11:26:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194322512",
            "id": 3194322512,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZX5Q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194322512/reactions"
            },
            "updated_at": "2025-08-17T11:26:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194322512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You said you did not want `.get()` to return the extra fields.\r\n\r\nbut `.get()` returns something contains the spec object. Which is of a type now that has the ability to have extra fields.\r\n\r\nSo you are suggesting I filter those out (without erroring obviously) before storing them, but still pass them to the load function defined by the user. And then to not indicate that they are accepted via the type signature and thus also not document the behavior.\r\n\r\nThis is what is currently the type of vim.pack.Spec in my PR\r\n\r\n```lua\r\n--- @class vim.pack.Spec\r\n---\r\n--- URI from which to install and pull updates. Any format supported by `git clone` is allowed.\r\n--- @field src string\r\n---\r\n--- Name of plugin. Will be used as directory name. Default: `src` repository name.\r\n--- @field name? string\r\n---\r\n--- Version to use for install and updates. Can be:\r\n--- - `nil` (no value, default) to use repository's default branch (usually `main` or `master`).\r\n--- - String to use specific branch, tag, or commit hash.\r\n--- - Output of |vim.version.range()| to install the greatest/last semver tag\r\n---   inside the version constraint.\r\n--- @field version? string|vim.VersionRange\r\n---\r\n--- @field [any] any Extra fields are allowed but not used by `vim.pack` itself.\r\n```\r\n\r\n`.get()` returns a list containing tables with a spec field, and the spec field is of that type.",
            "created_at": "2025-08-17T11:28:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194323323",
            "id": 3194323323,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZYF7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194323323/reactions"
            },
            "updated_at": "2025-08-17T11:31:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194323323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > but opts.load in vim.pack.add() should use all the fields?\r\n> \r\n> I never said this. We should simply just abide by the classes we define.\r\n\r\nThis is the whole point of the PR.\r\n\r\n> No. We do not define extra fields. We simply do not error if they are supplied.\r\n> \r\n> If this is too hard to understand, then fine, error on extra fields.\r\n\r\nIf not throwing an error is the *only* strong opinion you have here, then everything is sunny and great. It was heard *and understood* after your first comment.\r\n\r\n@BirdeeHub, let's keep the whole spec table as is for all functions. Whether to allow extra fields verbatim (without error) or dedicate a separate `data` field for extra user data (like `user_data` in `vim.diagnostic`, for example), let's wait for @justinmk input.",
            "created_at": "2025-08-17T11:31:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194324754",
            "id": 3194324754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZYcS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194324754/reactions"
            },
            "updated_at": "2025-08-17T11:31:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194324754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194267381\r\n\r\nTo reiterate, the choice between `.data` and extra fields would be the difference between the 2 examples in the linked comment above. In the examples, the whole spec provided to load (or contents of `spec.data` plus the name from spec) are being passed to lze in the load function.\r\n\r\nNo erroring would happen, fields other than `.data` would simply be filtered out if we want `.data` rather than allowing extra fields\r\n\r\nIf we want to just allow extra fields, then that is already done and it just needs tests.\r\n\r\nIf we want `.data`, that is fairly trivial as well to change to from what I have here, but it feels like kinda just an extra unnecessary table and indexing operation to me. It also means either everything without data still has an empty data table in memory, or that you have to always check if `.data` is present. For those reasons, I definitely prefer it how the PR currently is rather than using a `.data` field\r\n\r\nI will do tests hopefully tomorrow. But yeah, lets wait for more input.\r\n\r\nThe current behavior of this PR is this\r\n\r\n```lua\r\n  vim.pack.add({\r\n      \"https://github.com/BirdeeHub/lze\",\r\n      { src = \"https://github.com/Wansmer/treesj\", opt = true },\r\n  }, {\r\n    load = function(p)\r\n      print(vim.inspect(p)) -- print for demonstration purposes to show what we are recieving, output shown below\r\n      if not p.spec.opt then -- before this PR this opt flag would not be included in spec despite being passed.\r\n        vim.cmd.packadd(p.spec.name)\r\n      end\r\n    end,\r\n    confirm = true,\r\n  })\r\n```\r\n  the above print will currently result in the following\r\n```lua\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/lze\",\r\n  spec = {\r\n    name = \"lze\",\r\n    src = \"https://github.com/BirdeeHub/lze\"\r\n  }\r\n}\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/treesj\",\r\n  spec = {\r\n    name = \"treesj\",\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    opt = true -- notice the extra value passed in\r\n  }\r\n}\r\n```\r\n\r\nIt also will return the extra values in `.get()` and the types appropriately show the ability to accept/contain extra values in all cases, for both the load function and also `.get()`\r\n\r\nThe proposed change from echasnovski to use `.data` looks like\r\n\r\n```lua\r\n  vim.pack.add({\r\n      \"https://github.com/BirdeeHub/lze\",\r\n      { src = \"https://github.com/Wansmer/treesj\", data = { opt = true } }, -- fields other than data, version, src or name would be silently filtered out by normalize_spec\r\n  }, {\r\n    load = function(p)\r\n      print(vim.inspect(p)) -- print for demonstration purposes to show what we are recieving, output shown below\r\n      if not (p.spec.data or {}).opt then -- note, in this version opt is in `p.spec.data` and we had to check if it is there\r\n      -- alternatively, we could make normalize_spec add an empty data table if it was missing to avoid having to check like I did above\r\n        vim.cmd.packadd(p.spec.name)\r\n      end\r\n    end,\r\n    confirm = true,\r\n  })\r\n```\r\nwhich would result in the following\r\n```lua\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/lze\",\r\n  spec = {\r\n    name = \"lze\",\r\n    src = \"https://github.com/BirdeeHub/lze\"\r\n  }\r\n}\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/treesj\",\r\n  spec = {\r\n    name = \"treesj\",\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    data = {\r\n      opt = true -- notice the extra value passed in\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nand this second option will also return the `spec.data` in `.get()` and the types appropriately show the ability to accept/contain extra value in all cases, for both the load function and also `.get()`\r\n\r\nI prefer the 1st option, the way the PR is now, for the reasons at the top of this comment.\r\n\r\nFor lewis's concerns, In order to NOT return the extra fields from `.get()` `.get()` would actually need a custom return type for its spec field, which I don't necessarily think it should have, so I think that if `add` can accept it `get` should return it, because doing otherwise would actually be harder and lead to more type definitions and probably more confusion. And also I was never planning on throwing any extra errors.\r\n\r\n@justinmk",
            "created_at": "2025-08-17T11:34:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194326654",
            "id": 3194326654,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZY5-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194326654/reactions"
            },
            "updated_at": "2025-08-17T15:10:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194326654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ideally this change solves whatever demands for lazy loading people have without needing a wrapper for it.\r\n\r\nOne can still make a wrapper if they wish, but doing it this way feels good because you put the value in the spec and thus expect to get it in load which says it receives the spec. And then you can tag them for whatever with little effort and handle that in load, or feed to a plugin in load like I did with lze in the example.\r\n\r\nThis hopefully means now we just have to worry about what to do about build steps more complicated than a git clone, luarocks, etc. and that this will be enough for lazy loading so that you no longer have to worry about people wanting more ways to lazily load stuff.",
            "created_at": "2025-08-17T12:12:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194346218",
            "id": 3194346218,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-Zdrq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194346218/reactions"
            },
            "updated_at": "2025-08-17T14:16:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194346218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`make format` and `make formatlua` are not doing the formatting correctly to pass lint for stylua for the test file\r\n\r\nand neither is `make lint`\r\n\r\nHow do I format the lua functional test files?\r\n\r\nI ended up just copy pasting from the error on github...\r\n\r\nAlso the `test/ubuntu tsan clang functionaltest (pull_request)` check just timed out, so, just re run it I guess?",
            "created_at": "2025-08-17T13:54:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194401883",
            "id": 3194401883,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ZrRb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194401883/reactions"
            },
            "updated_at": "2025-08-17T14:30:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194401883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "We have each made our case now I think hopefully and now its up to whoever has to read through this comment chain and decide about extra fields vs `.data` and merge it :laughing:",
            "created_at": "2025-08-17T15:26:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194456625",
            "id": 3194456625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-Z4ox",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194456625/reactions"
            },
            "updated_at": "2025-08-17T15:27:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194456625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  Add a dedicated `data` field to store any information users want to preserve for a plugin\r\n\r\n+1\r\n\r\n> If we want `.data`, that is fairly trivial as well to change to from what I have here, but it feels like kinda just an extra unnecessary table\r\n\r\nWhat happens if a user has a `foo` field and we later add a `foo` field with different semantics/type? We can avoid that entire, never-ending headache by specifying that user-defined data lives in `data`. That doesn't seem \"unnecessary\".",
            "created_at": "2025-08-17T21:34:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194666857",
            "id": 3194666857,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-ar9p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194666857/reactions"
            },
            "updated_at": "2025-08-17T21:34:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194666857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "When I do this should normalize_spec add an empty data table if there wasn't one to avoid people constantly having to do `(p.spec.data or {}).field` or should I avoid doing so? Im leaning towards it being something that should be added",
            "created_at": "2025-08-17T22:50:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194703255",
            "id": 3194703255,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-a02X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194703255/reactions"
            },
            "updated_at": "2025-08-17T22:50:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194703255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> should normalize_spec add an empty data table if there wasn't one to avoid people constantly having to do `(p.spec.data or {}).field`\r\n\r\nI think we would generally lean towards not providing fields that weren't defined, because:\r\n- that is useful information sometimes\r\n- in this particular use-case, users already know if they are passing `data` or not, so `(p.spec.data or {})` would not be necessary\r\n- in other cases where plugins are extending stuff, a single `(p.spec.data or {})` is very low-cost.\r\n\r\n\r\nHowever, no objection if others are in favor.",
            "created_at": "2025-08-17T23:00:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194707905",
            "id": 3194707905,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-a1_B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194707905/reactions"
            },
            "updated_at": "2025-08-17T23:00:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194707905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> - in this particular use-case, users already know if they are passing `data` or not, so `(p.spec.data or {})` would not be necessary\r\n\r\nActually, they do not.\r\n\r\nNot everything within a call to packadd must share the same data, load is called once per plugin, which may contain values with and without extra data.\r\n\r\nSo if you want to access data at all, you always need to `or {}` or have `normalize_spec` make sure it is always there.\r\n\r\nThat's the main reason why I don't like using a `.data` to begin with (beyond just being verbose)\r\n\r\nIt necessarily comes with an extra check, or a memory usage penalty of having extra tables added to have the `.data` field.\r\n\r\nI still think including extra fields instead is better, faster, less obnoxious, and makes more sense.\r\n\r\nAnd the chances of you clobbering things that way is so slim, there isn't more than 1-2 things you would even want to add, and theyre build related. Intentionally choosing a worse API for that reason in this case feels silly.\r\n\r\nI think EVERY single person will hit this nonexistent data field edgecase at least once, and it will always be possible to hit, where the clobbering edgecase from new options would be hit at MOST once every year or so, and then never again once there are no more fields to add.\r\n\r\nIt would be incorrect to optimize for the thing that happens only hypothetically in the future and will only happen a few times, when there is something that EVERY user will hit.\r\n\r\nThere will guaranteed be more confused users and complaints about it the `.data` way than the other way.\r\n\r\nHowever I will work on a version with .data instead despite thinking of it as a bad idea, because it is still sort of better than having no way to pass through values. Maybe not today though. Again, I think .data is actively harmful. It's harmful to both users and performance, it is significantly more verbose, and in my opinion being done for a reason which doesn't hold up.",
            "created_at": "2025-08-18T01:02:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194801942",
            "id": 3194801942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-bM8W",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194801942/reactions"
            },
            "updated_at": "2025-08-18T02:51:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194801942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And the chances of you clobbering things that way is so slim,\r\n\r\nI'm speaking from experience. You'll just have to trust me.\r\n\r\n> There will guaranteed be more confused users and complaints about it the `.data` way than the other way.\r\n\r\nI predict there will be zero other users complaining about this.\r\n\r\n> harmful to both users and performance\r\n\r\nWhat performance? This event happens O(1) times per Nvim session.",
            "created_at": "2025-08-18T03:07:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3194951966",
            "id": 3194951966,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-bxke",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194951966/reactions"
            },
            "updated_at": "2025-08-18T03:09:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194951966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "it happens O(1) times per plugin but you are correct the performance claim was overrated.\r\n\r\nStill salty, but did the change.",
            "created_at": "2025-08-18T05:02:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3195106266",
            "id": 3195106266,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-cXPa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3195106266/reactions"
            },
            "updated_at": "2025-08-18T05:17:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3195106266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> However I will work on a version with .data instead despite thinking of it as a bad idea, because it is still sort of better than having no way to pass through values. Maybe not today though. Again, I think .data is actively harmful. It's harmful to both users and performance, it is significantly more verbose, and in my opinion being done for a reason which doesn't hold up.\r\n\r\nLook, everything considered, you don't *have to* do this PR if you think adding `data` field is \"actively harmful\". If it is still \"sort of better than not having it\", then great.\r\n\r\n---\r\n\r\n`data` should be a table, not `any`. And requires an extra `vim.validate()` (with extra testing in 'pack_spec.lua'; [here](https://github.com/neovim/neovim/blob/052126b77ad83b1f26da46dad8c42efacffe7568/test/functional/plugin/pack_spec.lua#L646)) that it is a table or `nil`.\r\n\r\nWhether `nil` should be replaced with explicit `{}`, I am a bit torn. On one hand I do think that inferring default values is usually better than not inferring. But on the other hand, it can't be (maybe yet) done with `version` for performance reasons and absence of `data` in user's spec might indeed be a useful information. Lets not replace `nil` with explicit `{}` for now, maybe I'll tackle it later altogether.",
            "created_at": "2025-08-18T09:31:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3195892000",
            "id": 3195892000,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-fXEg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3195892000/reactions"
            },
            "updated_at": "2025-08-18T09:31:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3195892000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Why should .data be required to be a table? It's completely within the users control what happens with the value.\n\nMaybe they want to make it a function? Enough nesting please. That's 4 deep now. We will never be adding things in .data that vim.pack cares about, that's why you made it a .data field to begin with so that we don't need to care about its contents and it can just be there. It should be whatever type the user wants it to be. If we validate that it's a table we should create it if it doesn't exist too otherwise what is the point.\n\nI do still think it's better to have some way to do this rather than having load as a function be mostly useless for much beyond preventing loading entirely unless you want to write out a list of names in the function alongside the specs you already made.\n\n`.data` is better than nothing but IMO worse than most other ways it could be done. But still far better than nothing.",
            "created_at": "2025-08-18T20:45:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/35360#issuecomment-3198363126",
            "id": 3198363126,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
            "node_id": "IC_kwDOAPphoM6-oyX2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3198363126/reactions"
            },
            "updated_at": "2025-08-18T23:08:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3198363126",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35360/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35360/commits",
    "created_at": "2025-08-17T03:58:48Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35360.diff",
    "draft": false,
    "head": {
        "label": "BirdeeHub:pack_add_spec_passthru",
        "ref": "pack_add_spec_passthru",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/BirdeeHub/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/BirdeeHub/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/BirdeeHub/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/BirdeeHub/neovim/branches{/branch}",
            "clone_url": "https://github.com/BirdeeHub/neovim.git",
            "collaborators_url": "https://api.github.com/repos/BirdeeHub/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/BirdeeHub/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/BirdeeHub/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/BirdeeHub/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/BirdeeHub/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/BirdeeHub/neovim/contributors",
            "created_at": "2025-05-11T05:49:11Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/BirdeeHub/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/BirdeeHub/neovim/downloads",
            "events_url": "https://api.github.com/repos/BirdeeHub/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/BirdeeHub/neovim/forks",
            "full_name": "BirdeeHub/neovim",
            "git_commits_url": "https://api.github.com/repos/BirdeeHub/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/BirdeeHub/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/BirdeeHub/neovim/git/tags{/sha}",
            "git_url": "git://github.com/BirdeeHub/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/BirdeeHub/neovim/hooks",
            "html_url": "https://github.com/BirdeeHub/neovim",
            "id": 981445068,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/BirdeeHub/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/BirdeeHub/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/BirdeeHub/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/BirdeeHub/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/BirdeeHub/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/BirdeeHub/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/BirdeeHub/neovim/merges",
            "milestones_url": "https://api.github.com/repos/BirdeeHub/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOOn-pzA",
            "notifications_url": "https://api.github.com/repos/BirdeeHub/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/BirdeeHub/neovim/pulls{/number}",
            "pushed_at": "2025-08-18T05:39:43Z",
            "releases_url": "https://api.github.com/repos/BirdeeHub/neovim/releases{/id}",
            "size": 327677,
            "ssh_url": "git@github.com:BirdeeHub/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/BirdeeHub/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/BirdeeHub/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/BirdeeHub/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/BirdeeHub/neovim/subscription",
            "svn_url": "https://github.com/BirdeeHub/neovim",
            "tags_url": "https://api.github.com/repos/BirdeeHub/neovim/tags",
            "teams_url": "https://api.github.com/repos/BirdeeHub/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/BirdeeHub/neovim/git/trees{/sha}",
            "updated_at": "2025-08-17T03:06:03Z",
            "url": "https://api.github.com/repos/BirdeeHub/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "06395875a02237e926278c82df1ebb2935f44f91",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
            "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
            "followers_url": "https://api.github.com/users/BirdeeHub/followers",
            "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
            "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/BirdeeHub",
            "id": 85372418,
            "login": "BirdeeHub",
            "node_id": "MDQ6VXNlcjg1MzcyNDE4",
            "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
            "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
            "repos_url": "https://api.github.com/users/BirdeeHub/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/BirdeeHub",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35360",
    "id": 2750985280,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35360",
    "labels": [
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "locked": false,
    "merge_commit_sha": "ee23cbdf090fde778f217edf9c928196e3125413",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6j-LRA",
    "number": 35360,
    "patch_url": "https://github.com/neovim/neovim/pull/35360.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35360/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/06395875a02237e926278c82df1ebb2935f44f91",
    "title": "feat(pack): allow extra values in vim.pack.add specs to be passed through to the load function in opts",
    "updated_at": "2025-08-18T23:08:34Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35360",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
        "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
        "followers_url": "https://api.github.com/users/BirdeeHub/followers",
        "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
        "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/BirdeeHub",
        "id": 85372418,
        "login": "BirdeeHub",
        "node_id": "MDQ6VXNlcjg1MzcyNDE4",
        "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
        "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
        "repos_url": "https://api.github.com/users/BirdeeHub/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/BirdeeHub",
        "user_view_type": "public"
    }
}