{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35270/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35270/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35270"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35270"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35270/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35270"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/acff86601efd3923fdb1ef4088574fff6befbe37"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6262,
            "forks_count": 6262,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1971,
            "open_issues_count": 1971,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-19T00:45:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 338530,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92074,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-19T01:56:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92074,
            "watchers_count": 92074,
            "web_commit_signoff_required": false
        },
        "sha": "e3913c0fc22f76b116de8f0c6d7a40395755f1d2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "close https://github.com/neovim/neovim/issues/35192\r\nclose https://github.com/neovim/neovim/issues/34770\r\n\r\nThis PR fixes #35192 and addresses most (if not all) ideas of #34770:\r\n- Make default `opts.load` be `false` during startup to avoid sourcing 'plugin/' twice and make it work with `--noplugin`. After startup the default value is still `true` (to work with lazy loading).\r\n- Allow `opts.load` to be a function to have full control over how plugin is loaded.\r\n- Add `opts.confirm` to allow skipping install confirmation. Although requiring confirmation is good default design, it might be not necessary for most users. Since there should have been some action that lead to the plugin installation (usually adjusting `vim.pack.add()` in the 'init.lua').\r\n\r\n---\r\n\r\nMy opinion is that the non-addressed ideas of #34770 might be a bit too much for `vim.pack.add` and hence this PR should also resolve it.\r\n\r\n> Allow skipping automated installation of not presently installed plugins in favor of doing that manually later.\r\n\r\nI like the current \"block and install\" because it allows the code after it to assume that plugin is installed and loaded.\r\n\r\n> More straightforward plugin freeze/pin/lock.\r\n\r\nThe current suggestion of specifying commit hash or tag directly as `version` works as a freeze. Maybe the only downside would be that full changelog from target branch won't be shown in confirmation buffer after each update. To counter that, there are suggested newer version tags that can be used to track new releases. Plus #34919 might introduce an alternative to freezing via manual targeted \"skip updating this plugin\".\r\n\r\n> Introduce something like `opts.convert_spec` ... a function that can be used to auto-transform plugin spec.\r\n\r\nThis can be achieved with a `vim.pack.add()` wrapper.\r\n\r\n> Add `PackLoad[Pre]` events for easier config hooks\r\n\r\nThis can be achieved with function `opts.load`. Having a separate event would allow plugins to act on when other plugins are loaded, but I currently can not think of a use case where this would be the most appropriate solution.",
    "closed_at": "2025-08-11T22:20:25Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "Hey, just wanted to mention that this commit might break some configurations. At least for me it did. I had to add `{ load = true }` to all my `vim.pack.add()` calls. I have organised my plugins in `nvim/plugin/[plugin-name]` files, e.g.: \r\n\r\n```lua\r\n-- copilot.lua\r\nvim.pack.add({\r\n\t\"https://github.com/nvim-lua/plenary.nvim\",\r\n\t\"https://github.com/zbirenbaum/copilot.lua\",\r\n\t\"https://github.com/zbirenbaum/copilot-cmp\",\r\n\t\"https://github.com/CopilotC-Nvim/CopilotChat.nvim\",\r\n}, { load = true })\r\n\r\nrequire(\"copilot\").setup({\r\n\tsuggestion = {\r\n\t\tenabled = false,\r\n\t},\r\n\tpanel = {\r\n\t\tenabled = false,\r\n\t},\r\n})\r\n\r\nrequire(\"copilot_cmp\").setup()\r\n\r\nrequire(\"CopilotChat\").setup({\r\n\t-- Uses visual selection or falls back to buffer\r\n\tselection = function(source)\r\n\t\tlocal select = require(\"CopilotChat.select\")\r\n\t\treturn select.visual(source) or select.buffer(source)\r\n\tend,\r\n})\r\n\r\nvim.keymap.set({ \"n\", \"v\" }, \"<leader>aa\", \"<cmd>CopilotChatOpen<cr>\", { desc = \"CopilotChatOpen\" })\r\nvim.keymap.set({ \"n\", \"v\" }, \"<leader>ap\", \"<cmd>CopilotChatPrompts<cr>\", { desc = \"CopilotChatPrompts\" })\r\n```",
            "created_at": "2025-08-12T15:10:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3179769361",
            "id": 3179769361,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69h24R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3179769361/reactions"
            },
            "updated_at": "2025-08-12T15:12:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3179769361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25409265?v=4",
                "events_url": "https://api.github.com/users/besserwisser/events{/privacy}",
                "followers_url": "https://api.github.com/users/besserwisser/followers",
                "following_url": "https://api.github.com/users/besserwisser/following{/other_user}",
                "gists_url": "https://api.github.com/users/besserwisser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/besserwisser",
                "id": 25409265,
                "login": "besserwisser",
                "node_id": "MDQ6VXNlcjI1NDA5MjY1",
                "organizations_url": "https://api.github.com/users/besserwisser/orgs",
                "received_events_url": "https://api.github.com/users/besserwisser/received_events",
                "repos_url": "https://api.github.com/users/besserwisser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/besserwisser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/besserwisser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/besserwisser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "0Huh, I can't see why it would break your config. What behavior change exactly?\r\n\r\nOh, I see, that's because you put them in `plugin/` directory. But AFAIK, neither Vim nor Nvim have ever recommended to put user config in `plugin` directory.",
            "created_at": "2025-08-12T15:50:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3179958368",
            "id": 3179958368,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69ilBg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 4,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3179958368/reactions"
            },
            "updated_at": "2025-08-12T16:22:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3179958368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I have organised my plugins in `nvim/plugin/[plugin-name]` files, e.g.:\r\n\r\nDo you mean '~/.config/nvim/plugin/[plugin-name].lua'?\r\n\r\nAnd what exactly broke? I assume that if adding `{ load = true }` fixed it, then 'plugin/' files of installed plugins are not loaded. This seems to be a limitation of loading process (described in `:h load-plugins`) itself: when loading 'plugin/' directories it seems to be using a \"fixed\" version of 'runtimepath' that was active at the start of loading. I.e. if those 'plugin/' directories modify 'runtimepath' itself, those new entries *will not* get their 'plugin/' directories sourced (during startup).\r\n\r\nHere is an example:\r\n\r\n- In file '~/.config/nvim/pack/bundle/opt/other-plug/plugin/other.lua' put `_G.other_loaded = true`.\r\n- In file '~/.config/nvim/plugin/myplug.lua' put `vim.cmd('packadd! other-plugin')`.\r\n\r\nNow after startup the `_G.other_loaded` is `nil`. Although the 'runtimepath' includes `~/.config/nvim/pack/bundle/opt/other-plug` *after* the currently traversed config directory. If command is changed to `packadd` (i.e. force 'plugin/' source), then it is `true`. I'll create an issue to discuss and document if this is feasible to change.\r\n\r\nBut at its worst, I guess it can be considered as a fairly low-cost known limitation to have to force `load = true` in case `vim.pack.add()` is called within 'plugin/' directories.\r\n",
            "created_at": "2025-08-12T16:07:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3180056509",
            "id": 3180056509,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69i8-9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180056509/reactions"
            },
            "updated_at": "2025-08-12T16:07:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180056509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@echasnovski , yes I mean for example ''~/.config/nvim/plugin/copilot.lua''\r\n\r\nIn my example above `Copilot` command doesn't exist (e.g. `:Copilot status`) with the error message `E464: Ambiguous use of user-defined command`. When changing it to `load = true`, it works. It is not just this file. Others broke as well.\r\n\r\nI agree that it is fine to add `load = true`. I just wanted to have it documented here, in case someone else is looking for it. Because a update to latest nightly breaks it, some might be surprised (but it is a nightly, so whatever). \r\n\r\nThe alternative would be to put all the vim.pack.add into the `init.lua` and only the configuration into `~/.config/nvim/plugin/copilot.lua`, if I understand correctly? ",
            "created_at": "2025-08-12T16:30:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3180140918",
            "id": 3180140918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69jRl2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180140918/reactions"
            },
            "updated_at": "2025-08-12T16:30:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180140918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25409265?v=4",
                "events_url": "https://api.github.com/users/besserwisser/events{/privacy}",
                "followers_url": "https://api.github.com/users/besserwisser/followers",
                "following_url": "https://api.github.com/users/besserwisser/following{/other_user}",
                "gists_url": "https://api.github.com/users/besserwisser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/besserwisser",
                "id": 25409265,
                "login": "besserwisser",
                "node_id": "MDQ6VXNlcjI1NDA5MjY1",
                "organizations_url": "https://api.github.com/users/besserwisser/orgs",
                "received_events_url": "https://api.github.com/users/besserwisser/received_events",
                "repos_url": "https://api.github.com/users/besserwisser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/besserwisser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/besserwisser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/besserwisser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I just wanted to have it documented here, in case someone else is looking for it. Because a update to latest nightly breaks it, some might be surprised (but it is a nightly, so whatever).\r\n\r\nYes, that was helpful. Thanks!\r\n\r\n> The alternative would be to put all the vim.pack.add into the `init.lua` and only the configuration into `~/.config/nvim/plugin/copilot.lua`, if I understand correctly?\r\n\r\nCorrect, that would work without `{ load = true }`.",
            "created_at": "2025-08-12T16:47:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3180187363",
            "id": 3180187363,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69jc7j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180187363/reactions"
            },
            "updated_at": "2025-08-12T16:47:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180187363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you for answering my questions and for your work",
            "created_at": "2025-08-12T16:47:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3180188631",
            "id": 3180188631,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69jdPX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180188631/reactions"
            },
            "updated_at": "2025-08-12T16:47:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3180188631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25409265?v=4",
                "events_url": "https://api.github.com/users/besserwisser/events{/privacy}",
                "followers_url": "https://api.github.com/users/besserwisser/followers",
                "following_url": "https://api.github.com/users/besserwisser/following{/other_user}",
                "gists_url": "https://api.github.com/users/besserwisser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/besserwisser",
                "id": 25409265,
                "login": "besserwisser",
                "node_id": "MDQ6VXNlcjI1NDA5MjY1",
                "organizations_url": "https://api.github.com/users/besserwisser/orgs",
                "received_events_url": "https://api.github.com/users/besserwisser/received_events",
                "repos_url": "https://api.github.com/users/besserwisser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/besserwisser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/besserwisser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/besserwisser",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Summary as far as my comments on the previous PR/issues were concerned, `load = function() end` to disable `packadd!` entirely if desired. Good enough. Thank you! I have docs to update now!",
            "created_at": "2025-08-13T10:57:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3183312904",
            "id": 3183312904,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM69vYAI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3183312904/reactions"
            },
            "updated_at": "2025-08-13T12:32:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3183312904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@echasnovski in order to opt-in to \"on-demand\" `:packadd` behavior for specific plugins, should we also let `load` be a field on the ~~opts~~ spec parameter? \r\n\r\n```lua\r\nvim.pack.add({\r\n  { src = 'https://github.com/mbbill/undotree', load = function() end},\r\n})\r\n```\r\n\r\nIt's pretty awkward for the user to have to do something like this:\r\n\r\n```lua\r\nvim.pack.add({\r\n  { src = 'https://github.com/mbbill/undotree' },\r\n  ...\r\n}, {\r\n load = function(o)\r\n   if o.spec ~= 'undotree' then\r\n     vim.cmd.packadd(o.spec.name)\r\n   end\r\n end,\r\n})\r\n```",
            "created_at": "2025-08-14T21:38:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3189939326",
            "id": 3189939326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-Ipx-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3189939326/reactions"
            },
            "updated_at": "2025-08-15T12:26:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3189939326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @echasnovski in order to opt-in to \"on-demand\" `:packadd` behavior for specific plugins, should we also let `load` be a field on the `opts` parameter?\r\n\r\nDo you mean a part of plugin specification? I'd think it is a bit too much and not quite needed. It should be pretty normal to have several `vim.pack.add()` calls. So for the case of lazy loading 'mbbill/undotree' there are at least two suggestions:\r\n\r\n- Just use `vim.pack.add` whenever you plan to have a manual `vim.cmd.packadd`. Yes, currently this means it will not be installed on clean machine until it is meant to be first loaded (which I'd consider at least a not bad behavior). And yes, currently it means that it will not be updated when `vim.pack.update()` is called without arguments (this will change after there is persistent spec storage, i.e. some kind of lockfile).\r\n- Have all \"eagerrly load\" plugins in one `vim.pack.add()` and register all \"lazy loaded\" plugins in a second call. So something like this:\r\n\r\n    ```lua\r\n    -- Eagerly load\r\n    vim.pack.add({\r\n      { src = 'https://github.com/neovim/nvim-lspconfig' },\r\n      -- ...\r\n    })\r\n\r\n    -- Lazy load\r\n    vim.pack.add({\r\n      { src = 'https://github.com/mbbill/undotree' },\r\n      -- ...\r\n    }, { load = function() end })\r\n    ```\r\n\r\nI'd personally suggest using the first variant, but the second one is also fine (as it provides some structure to the config, at least).",
            "created_at": "2025-08-15T07:55:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3190879564",
            "id": 3190879564,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-MPVM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3190879564/reactions"
            },
            "updated_at": "2025-08-15T07:55:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3190879564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Do you mean a part of plugin specification?\r\n\r\nyes\r\n\r\n> currently it means that it will not be updated when `vim.pack.update()`\r\n\r\ner... \r\n\r\n> Have all \"eagerrly load\" plugins in one `vim.pack.add()` and register all \"lazy loaded\" plugins in a second call.\r\n\r\nyeah, that's fine. but if it doesn't update when `update()` is called, it's rather pointless.",
            "created_at": "2025-08-15T12:29:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3191395529",
            "id": 3191395529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-ONTJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3191395529/reactions"
            },
            "updated_at": "2025-08-15T12:29:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3191395529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > currently it means that it will not be updated when `vim.pack.update()`\r\n> \r\n> er...\r\n> \r\n> > Have all \"eagerrly load\" plugins in one `vim.pack.add()` and register all \"lazy loaded\" plugins in a second call.\r\n> \r\n> yeah, that's fine. but if it doesn't update when `update()` is called, it's rather pointless.\r\n\r\nHere is the full quote:\r\n\r\n> ... currently it means that it will not be updated when `vim.pack.update()` is called **without arguments (this will change after there is persistent spec storage, i.e. some kind of lockfile)**.\r\n\r\nIt still can be updated if it is actually loaded later,. Or with `vim.pack.update({ 'undotree' })` if it is tracking default branch (which is usually the case). Or with `vim.pack.update(vim.tbl_map(function(x) return x.spec.name end, vim.pack.get()))`.\r\n\r\nI do have plans to start working on local plugins and lockfile support next week. Both will require discussions, though.",
            "created_at": "2025-08-15T12:35:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3191404249",
            "id": 3191404249,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-OPbZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3191404249/reactions"
            },
            "updated_at": "2025-08-15T12:37:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3191404249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Yes, currently this means it will not be installed on clean machine until it is meant to be first loaded (which I'd consider at least a not bad behavior)\r\n\r\nFor me, this is a blocker to running deferred plugin loading through vim.pack.add(). If I have a plugin I want to load on InsertEnter, I don't want it downloading on a clean install when I enter insert mode. \r\n\r\nMy current solution is to save the names/paths to a table in my load function, then manually packadd/source later.   This works, but it's not the most ergonomic and there's the (admittedly small) cost of setting up the table.\r\n\r\nSomething related to this in a broader sense is - One of the reasons I switched to vim.pack was to be able to centralize spec in one file/table. Spreading out spec into multiple files would work against what to me is a core feature.\r\n\r\nMy personal ideal solution would be to be able to call vim.pack.add([name: string], { load = [boolean}). The add function would be able to recognize if the spec is already present and perform the default load behavior (returning an error otherwise). But I can also see why advertising this as intended usage creates footguns by being vulnerable to typos or mis-understandings of how the load process works.",
            "created_at": "2025-08-15T20:18:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3192625457",
            "id": 3192625457,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-S5kx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3192625457/reactions"
            },
            "updated_at": "2025-08-15T20:18:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3192625457",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62523234?v=4",
                "events_url": "https://api.github.com/users/mikejmcguirk/events{/privacy}",
                "followers_url": "https://api.github.com/users/mikejmcguirk/followers",
                "following_url": "https://api.github.com/users/mikejmcguirk/following{/other_user}",
                "gists_url": "https://api.github.com/users/mikejmcguirk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mikejmcguirk",
                "id": 62523234,
                "login": "mikejmcguirk",
                "node_id": "MDQ6VXNlcjYyNTIzMjM0",
                "organizations_url": "https://api.github.com/users/mikejmcguirk/orgs",
                "received_events_url": "https://api.github.com/users/mikejmcguirk/received_events",
                "repos_url": "https://api.github.com/users/mikejmcguirk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mikejmcguirk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mikejmcguirk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mikejmcguirk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hey! Question: can we make it so that the spec passed to the load function can have extra values placed into it?\r\n\r\nIf I put extra values in my spec, they are not being provided to the load function as it is currently and that in my opinion would further increase flexibility for very little cost?\r\n\r\nIs there a reason why this cant be done? Or other concerns? It looks like this could be done just by editing the normalization function?\r\n\r\nThis would solve most requests for more values in the spec beyond URL schema, build steps, or luarocks stuff (which is taken care of before the load function is called) but everything else people seem to be asking for is load related.\r\n\r\nfor example, it would be nice to be able to include our own little flag for our load function to identify what is loaded when. Simplest example would be something like this\r\n\r\n```lua\r\n  vim.pack.add({\r\n      \"https://github.com/BirdeeHub/lze\",\r\n      { src = \"https://github.com/Wansmer/treesj\", opt = true },\r\n  }, {\r\n    load = function(p)\r\n      print(vim.inspect(p)) -- print for demonstration purposes to show what we are recieving, output shown below\r\n      if not p.spec.opt then -- currently this opt flag would not be included in spec\r\n        vim.cmd.packadd(p.spec.name)\r\n      end\r\n    end,\r\n    confirm = true,\r\n  })\r\n```\r\n  the above print will currently result in the following, with the opt not included (also I edited the path output and added a comment)\r\n```lua\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/lze\",\r\n  spec = {\r\n    name = \"lze\",\r\n    src = \"https://github.com/BirdeeHub/lze\"\r\n  }\r\n}\r\n{\r\n  path = \"$XDG_DATA_HOME/nvim/site/pack/core/opt/treesj\",\r\n  spec = {\r\n    name = \"treesj\",\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    -- opt = true -- isn't here?\r\n  }\r\n}\r\n```\r\n  \r\n  But obviously you could do a lot more than just that. You could make it so that the load function provides the spec straight to the lze.load function for example and use the full spec in the same list you provide your download specs in, or any number of other things to that effect.\r\n  \r\nIs this something that you would accept a PR for?\r\n  \r\nCurrently I have been managing my lazy loading with lze, which you could use like this\r\n\r\n```lua  \r\n  vim.pack.add({\r\n    \"https://github.com/BirdeeHub/lze\", -- https://github.com/nvim-neorocks/lz.n also works for this purpose\r\n    \"https://github.com/Wansmer/treesj\",\r\n    { src = \"https://github.com/nvim-telescope/telescope.nvim\" },\r\n    { src = \"https://github.com/NTBBloodBatch/sweetie.nvim\", name = \"sweetie\" }\r\n}, {\r\n  -- prevent packadd! or packadd like this to allow on_require handler to load plugin spec (if you desire to use that handler, otherwise false is fine and you can remove the packadd for lze below)\r\n  load = function() end,\r\n  -- choose your preference for install confirmation\r\n  confirm = true,\r\n})\r\nvim.cmd.packadd(\"lze\")\r\n\r\nrequire(\"lze\").load {\r\n    {\r\n        \"telescope.nvim\",\r\n        cmd = \"Telescope\",\r\n        on_require = { \"telescope\" },\r\n    },\r\n    {\r\n        \"sweetie\", -- note the name change above\r\n        colorscheme = \"sweetie\",\r\n    },\r\n    {\r\n        \"treesj\",\r\n        cmd = { \"TSJToggle\" },\r\n        keys = { { \"<leader>Tt\", \":TSJToggle<CR>\", mode = { \"n\" }, desc = \"treesj split/join\" }, },\r\n        after = function(spec)\r\n            require(\"treesj\").setup({})\r\n        end,\r\n    }\r\n}\r\n```\r\n\r\nbut with just that 1 change, you would be able to move all of the lze spec into the spec for the vim.pack.add specs. and just pass the specs straight to lze.load in the load function for vim.pack.add\r\n\r\n```lua\r\nvim.pack.add({ \"https://github.com/BirdeeHub/lze\" }, { confirm = false --[[or true idk]] })\r\nvim.pack.add({\r\n  {\r\n    src = \"https://github.com/nvim-telescope/telescope.nvim\",\r\n    cmd = \"Telescope\",\r\n    on_require = { \"telescope\" },\r\n  },\r\n  {\r\n    src = \"https://github.com/Wansmer/treesj\"\r\n    cmd = { \"TSJToggle\" },\r\n    keys = { { \"<leader>Tt\", \":TSJToggle<CR>\", mode = { \"n\" }, desc = \"treesj split/join\" }, },\r\n    after = function(spec)\r\n      require('treesj').setup({})\r\n    end,\r\n  },\r\n  {\r\n    src = \"https://github.com/NTBBloodBatch/sweetie.nvim\",\r\n    colorscheme = \"sweetie\",\r\n  }\r\n}, {\r\n  load = function(p)\r\n    require('lze').load(p.spec)\r\n  end,\r\n  -- choose your preference for install confirmation\r\n  confirm = true,\r\n})\r\n```\r\n\r\nTL;DR\r\n\r\nIf all values in the spec were passed on to the load function, it would solve people's issues with managing lazy loading while using vim.pack.add for very little maintenance effort.\r\n\r\nIt would not solve build steps, but I think that was to be handled via some sort of rockspec mechanism? But that would be a separate problem, not hindered by this change.\r\n\r\nI can work on and submit a PR for that, but I would like to know if that would be accepted first",
            "created_at": "2025-08-16T23:52:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3193972166",
            "id": 3193972166,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-YCXG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193972166/reactions"
            },
            "updated_at": "2025-08-17T03:01:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3193972166",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> with just that 1 change, you would be able to move all of the lze spec into the spec for the vim.pack.add specs.\r\n\r\nIf we can make small changes that enable big extensibility opportunities that sounds attractive. I have not carefully studied the examples given here though. `on_require` seems a bit strange, the semantics of what it means to \"require a plugin\" are not well documented.",
            "created_at": "2025-08-17T03:23:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194095842",
            "id": 3194095842,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-Ygji",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194095842/reactions"
            },
            "updated_at": "2025-08-17T03:23:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194095842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "well, that on_require thing is from lze. You can specify a top level module and if requiring any submodule of it fails, it runs the lze spec. You can check out the source for it [here](https://github.com/BirdeeHub/lze/blob/master/lua/lze/h/on_require.lua) if you want but it isnt particularly relevant to the change I was suggesting.\r\n\r\nTechnically the plugin lze doesnt relate to this change at all, theres other things you could use the change for as well. And it would also help with [lz.n](https://github.com/nvim-neorocks/lz.n) as well, which doesn't have a built in \"on_require\" handler but is similar\r\n\r\nThe small change is just, when you put extra values in the spec in add, the load function can recieve all the things you put in there rather than just the ones strictly conforming to the type.\r\n\r\nThe change would be this, not 100% sure I did the new type annotation correctly though\r\n\r\nhttps://github.com/neovim/neovim/compare/master...BirdeeHub:neovim:pack_add_spec_passthru",
            "created_at": "2025-08-17T03:25:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194096529",
            "id": 3194096529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-YguR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194096529/reactions"
            },
            "updated_at": "2025-08-17T08:28:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194096529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The small change is just, when you put extra values in the spec in add, the load function can recieve all the things you put in there rather than just the ones strictly conforming to the type.\r\n\r\nThat idea is typically very useful, similar to [what we did](https://github.com/neovim/neovim/pull/34550) with `cmd(..., config)`.",
            "created_at": "2025-08-17T18:23:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194568149",
            "id": 3194568149,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-aT3V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194568149/reactions"
            },
            "updated_at": "2025-08-17T18:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194568149",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That idea is typically very useful, similar to [what we did](https://github.com/neovim/neovim/pull/34550) with `cmd(..., config)`.\r\n\r\nI agree for a number of reasons, however echasnovski would prefer if we put all extra fields into a new `.data` field rather than just accepting extras because he feels it is clearer.\r\n\r\nI feel that is extra indirection for little gain and may have more drawbacks surrounding if the data field is present at all or not due to the extra indexing and needing to check or add it in normalization unnecessarily.\r\n\r\nWe need a deciding vote on the PR as to if it stays as the PR is now, accepting extra values, or if it is changed and only a single new field `.data` of type table is added.\r\n\r\nIf extra values is the choice, it is ready to go though.",
            "created_at": "2025-08-17T18:55:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194586276",
            "id": 3194586276,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-aYSk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194586276/reactions"
            },
            "updated_at": "2025-08-17T19:04:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194586276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> put all extra fields into a new `.data` field rather than just accepting extras because he feels it is clearer.\r\n\r\nThat is pretty much equivalent. If we don't do it that way, then any time we add a new Spec field in the future, we risk clobbering existing extensions in the wild...",
            "created_at": "2025-08-17T19:13:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194595383",
            "id": 3194595383,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-aag3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 1,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194595383/reactions"
            },
            "updated_at": "2025-08-17T19:13:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194595383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > put all extra fields into a new `.data` field rather than just accepting extras because he feels it is clearer.\r\n> \r\n> That is pretty much equivalent. If we don't do it that way, then any time we add a new Spec field in the future, we risk clobbering existing extensions in the wild...\r\n\r\nIt would be incorrect to optimize for the thing that happens only hypothetically in the future and will only happen a few times, when there is something that EVERY user will hit.\r\n\r\nEvery user will forget to check if data exists or not at least one time, and it adds a significant amount of verbosity to have to make the data table in the specs and check for its existence in load.\r\n\r\nVERY few would ever hit such a collision you mentioned, and eventually there will be no more fields to add. And no one will ever hit it again.\r\n\r\nI feel that reasoning is optimizing for the wrong thing. It adds like 10 lines or so per pack.add call, and a chance for mistake each time. In exchange for making something easier that would only happen very occasionally and then eventually stop altogether\r\n\r\nThe more I think about it the more I become convinced that `.data` is not only annoying but actually just bad.",
            "created_at": "2025-08-18T02:10:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194878924",
            "id": 3194878924,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-bfvM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194878924/reactions"
            },
            "updated_at": "2025-08-18T02:27:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194878924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the thing that happens only hypothetically in the future and will only happen a few times,\r\n\r\nIt's not hypothetical, it's something that there is copious empirical (historical) evidence for, and has very wide \"blast radius\" (affects many users) which only increases as we gain users.\r\n\r\n> Every user will forget to check if data exists or not at least one time\r\n\r\n\"Every\" user that is extending vim.pack, which is the uncommon case.\r\n\r\n> It adds like 10 lines or so per pack.add call,\r\n\r\n? Show an example of the 10 lines (not entire pages, just a very concise example), and the difference vs with/without `.data`.",
            "created_at": "2025-08-18T03:04:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3194947178",
            "id": 3194947178,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-bwZq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194947178/reactions"
            },
            "updated_at": "2025-08-18T03:04:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3194947178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > It adds like 10 lines or so per pack.add call,\n> \n> ? Show an example of the 10 lines (not entire pages, just a very concise example), and the difference vs with/without `.data`.\n\nhttps://github.com/neovim/neovim/pull/35360#issuecomment-3194267381\n\nThis one is 8 lines and it's only 3 specs. If you have 4 specs in the load call, it's 10 extra lines.",
            "created_at": "2025-08-18T04:29:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3195061445",
            "id": 3195061445,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-cMTF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3195061445/reactions"
            },
            "updated_at": "2025-08-18T04:44:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3195061445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/85372418?v=4",
                "events_url": "https://api.github.com/users/BirdeeHub/events{/privacy}",
                "followers_url": "https://api.github.com/users/BirdeeHub/followers",
                "following_url": "https://api.github.com/users/BirdeeHub/following{/other_user}",
                "gists_url": "https://api.github.com/users/BirdeeHub/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BirdeeHub",
                "id": 85372418,
                "login": "BirdeeHub",
                "node_id": "MDQ6VXNlcjg1MzcyNDE4",
                "organizations_url": "https://api.github.com/users/BirdeeHub/orgs",
                "received_events_url": "https://api.github.com/users/BirdeeHub/received_events",
                "repos_url": "https://api.github.com/users/BirdeeHub/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BirdeeHub/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BirdeeHub/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BirdeeHub",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Oh, you are talking about the `data = { ... \\n}` lines. That is just not an important thing. If you have 1 property you can do `data = { foo = bar }`. If you have >1 property then the enclosing `{ ... }` is a vanishing percentage of the total lines.",
            "created_at": "2025-08-18T15:04:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/35270#issuecomment-3197305522",
            "id": 3197305522,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
            "node_id": "IC_kwDOAPphoM6-kwKy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3197305522/reactions"
            },
            "updated_at": "2025-08-18T15:04:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3197305522",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35270/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35270/commits",
    "created_at": "2025-08-09T14:56:15Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35270.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:pack-flexible-add",
        "ref": "pack-flexible-add",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2025-08-15T13:16:06Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 329780,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2025-08-15T12:56:54Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "acff86601efd3923fdb1ef4088574fff6befbe37",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35270",
    "id": 2732718674,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35270",
    "labels": [
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "locked": false,
    "merge_commit_sha": "3c7b698d61c97c63858089e23879f1849e938769",
    "merged_at": "2025-08-11T22:20:25Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6i4fpS",
    "number": 35270,
    "patch_url": "https://github.com/neovim/neovim/pull/35270.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35270/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/acff86601efd3923fdb1ef4088574fff6befbe37",
    "title": "vim.pack: more control over \"load\" and \"install\" behavior",
    "updated_at": "2025-08-18T15:04:00Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35270",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}