{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35078/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35078/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35078"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35078"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35078/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/9de11246ca071ac3ff0921f3c5ead40079a19729"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6210,
            "forks_count": 6210,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1969,
            "open_issues_count": 1969,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-29T02:23:07Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 334730,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91452,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-29T02:23:15Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91452,
            "watchers_count": 91452,
            "web_commit_signoff_required": false
        },
        "sha": "cf9b36f3d97b6f9c66ffff008bc1b5a5dd14ca98",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\r\n- Despite [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig) claims to be a \"data-only\" plugin, in fact it still provides some user-facing commands because they haven't been upstreamed to Nvim.\r\n\r\nSolution:\r\n- Upstream some user commands from `nvim-lspconfig` as `:lsp restart`, `:lsp start`, `:lsp stop`.\r\n\r\nTODO:\r\n- [x] fix slow `:lsp start` completion\r\n- [ ] [not support multiple-clients in args](https://github.com/neovim/nvim-lspconfig/pull/3896#issuecomment-2959581087)\r\n- [ ] not support inline comments (add flag `NOTRLCOM`). Not sure if TRLBAR should be removed too\r\n- [ ] Add tests (but where?)\r\n<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233124448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233124448"
                }
            },
            "author_association": "MEMBER",
            "body": "Any reason not to call `client:stop` in this case? Users can start clients without going through lsp.config/enable and we already got the client object here.\r\n\r\nE.g. my custom `LspStop` is currently:\r\n\r\n```lua\r\n  api.nvim_create_user_command(\r\n    'LspStop',\r\n    function(kwargs)\r\n      local name = kwargs.fargs[1]\r\n      for _, client in ipairs(lsp.get_clients({ name = name })) do\r\n        client:stop()\r\n      end\r\n    end,\r\n    {\r\n      nargs = \"?\",\r\n      complete = function()\r\n        return vim.tbl_map(function(c) return c.name end, lsp.get_clients())\r\n      end\r\n    }\r\n  )\r\n```\r\n\r\n\r\n(Also raises a bit the question if `:lsp stop` is  \"stop server\" or \"stop and disable server\")",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-26T17:57:05Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]\n+    end)\n+    :totable()\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_stop(clients)\n+  -- Default to disabling all servers on current buffer\n+  if #clients == 0 then\n+    clients = get_client_names { bufnr = vim.api.nvim_get_current_buf() }\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233124448",
            "id": 2233124448,
            "line": 68,
            "node_id": "PRRC_kwDOAPphoM6FGsZg",
            "original_commit_id": "64f6101d00f67cbe9621c9117f03706fc4ac2a39",
            "original_line": 68,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": 68,
            "pull_request_review_id": 3058332870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233124448/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-26T18:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233124448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233125898"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233125898"
                }
            },
            "author_association": "MEMBER",
            "body": "Restart should imho also support the case where the client was started via `lsp.start` instead of going through lsp.config/lsp.enable, and it also needs to make sure the server is fully stopped before it is started again. Otherwise for servers which use the fs for state management it might end up corrupting it.\r\n\r\nE.g. my current custom `:LspRestart`:\r\n\r\n```lua\r\n  api.nvim_create_user_command(\r\n    \"LspRestart\",\r\n    function(kwargs)\r\n      local name = kwargs.fargs[1]\r\n      for _, client in ipairs(lsp.get_clients({ name = name })) do\r\n        local bufs = lsp.get_buffers_by_client_id(client.id)\r\n        client:stop()\r\n        vim.wait(30000, function()\r\n          return lsp.get_client_by_id(client.id) == nil\r\n        end)\r\n        local client_id = lsp.start(client.config, { attach = false })\r\n        if client_id then\r\n          for _, buf in ipairs(bufs) do\r\n            lsp.buf_attach_client(buf, client_id)\r\n          end\r\n        end\r\n      end\r\n    end,\r\n    {\r\n      nargs = \"?\",\r\n      complete = function()\r\n        return vim.tbl_map(function(c) return c.name end, lsp.get_clients())\r\n      end\r\n    }\r\n  )\r\n```\r\n",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-26T18:01:07Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]\n+    end)\n+    :totable()\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_stop(clients)\n+  -- Default to disabling all servers on current buffer\n+  if #clients == 0 then\n+    clients = get_client_names { bufnr = vim.api.nvim_get_current_buf() }\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_restart(clients)\n+  -- Default to restarting all active servers\n+  if #clients == 0 then\n+    clients = get_client_names()\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+\n+  local timer = assert(vim.uv.new_timer())\n+  timer:start(500, 0, function()\n+    for _, name in ipairs(clients) do\n+      vim.schedule_wrap(function(x)\n+        vim.lsp.enable(x)\n+      end)(name)\n+    end\n+  end)\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233125898",
            "id": 2233125898,
            "line": 98,
            "node_id": "PRRC_kwDOAPphoM6FGswK",
            "original_commit_id": "64f6101d00f67cbe9621c9117f03706fc4ac2a39",
            "original_line": 98,
            "original_position": 58,
            "original_start_line": 42,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": 98,
            "pull_request_review_id": 3058332870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233125898/reactions"
            },
            "side": "RIGHT",
            "start_line": 82,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-26T18:01:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233125898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233173360"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233173360"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> (Also raises a bit the question if :lsp stop is \"stop server\" or \"stop and disable server\")\r\n\r\nSince I just copied the logic from `nvim-lspconfig`, its description is the same as in there [\"Disable and stop the given client\"](https://github.com/neovim/nvim-lspconfig/blob/4d3b3bb8815fbe37bcaf3dbdb12a22382bc11ebe/plugin/lspconfig.lua#L178).\r\n\r\nMaybe `:lsp disable` is a better name?",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-26T18:55:39Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]\n+    end)\n+    :totable()\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_stop(clients)\n+  -- Default to disabling all servers on current buffer\n+  if #clients == 0 then\n+    clients = get_client_names { bufnr = vim.api.nvim_get_current_buf() }\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233173360",
            "id": 2233173360,
            "in_reply_to_id": 2233124448,
            "line": 68,
            "node_id": "PRRC_kwDOAPphoM6FG4Vw",
            "original_commit_id": "64f6101d00f67cbe9621c9117f03706fc4ac2a39",
            "original_line": 68,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": 68,
            "pull_request_review_id": 3058399018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233173360/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-27T00:57:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233173360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233593188"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233593188"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  local clients = { unpack(fargs, 2) }\r\n```",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-27T02:02:06Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]\n+    end)\n+    :totable()\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_stop(clients)\n+  -- Default to disabling all servers on current buffer\n+  if #clients == 0 then\n+    clients = get_client_names { bufnr = vim.api.nvim_get_current_buf() }\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_restart(clients)\n+  -- Default to restarting all active servers\n+  if #clients == 0 then\n+    clients = get_client_names()\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+\n+  local timer = assert(vim.uv.new_timer())\n+  timer:start(500, 0, function()\n+    for _, name in ipairs(clients) do\n+      vim.schedule_wrap(function(x)\n+        vim.lsp.enable(x)\n+      end)(name)\n+    end\n+  end)\n+end\n+\n+local actions = {\n+  restart = ex_lsp_restart,\n+  stop = ex_lsp_stop,\n+}\n+\n+local available_subcmds = vim.tbl_keys(actions)\n+\n+--- Use for `:lsp {subcmd} {clients}` command\n+---@param args string\n+M._ex_lsp = function(args)\n+  local fargs = vim.api.nvim_parse_cmd('lsp ' .. args, {}).args\n+  if not fargs then\n+    return\n+  end\n+  local subcmd = fargs[1]\n+  if not vim.list_contains(available_subcmds, subcmd) then\n+    vim.notify((\"Invalid subcommand '%s'\"):format(subcmd), vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  local clients = {}\n+  for i, client in ipairs(fargs) do\n+    if i > 1 then\n+      table.insert(clients, client)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233593188",
            "id": 2233593188,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FIe1k",
            "original_commit_id": "e6bafc90564814b0ea99eaa8fd34cb9b6a144525",
            "original_line": 85,
            "original_position": 85,
            "original_start_line": 80,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": null,
            "pull_request_review_id": 3058881069,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233593188/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-27T02:03:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233593188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233593920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233593920"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      return vim.lsp.config[name] ~= nil\r\n```",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-27T02:03:25Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233593920",
            "id": 2233593920,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FIfBA",
            "original_commit_id": "e6bafc90564814b0ea99eaa8fd34cb9b6a144525",
            "original_line": 14,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": null,
            "pull_request_review_id": 3058881069,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233593920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-27T02:03:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233593920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233596270"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233596270"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think I will use `table.concat` or even just `fargs[2]`, because it seems like Justin doesn't want to support many client args\r\n\r\n(I would prefer the latter `fargs[2]` (lsp name with space should be escaped) since it doesn't require changing how `nvim_parse_cmd()` should parse args)",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-27T02:11:35Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]\n+    end)\n+    :totable()\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_stop(clients)\n+  -- Default to disabling all servers on current buffer\n+  if #clients == 0 then\n+    clients = get_client_names { bufnr = vim.api.nvim_get_current_buf() }\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_restart(clients)\n+  -- Default to restarting all active servers\n+  if #clients == 0 then\n+    clients = get_client_names()\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+\n+  local timer = assert(vim.uv.new_timer())\n+  timer:start(500, 0, function()\n+    for _, name in ipairs(clients) do\n+      vim.schedule_wrap(function(x)\n+        vim.lsp.enable(x)\n+      end)(name)\n+    end\n+  end)\n+end\n+\n+local actions = {\n+  restart = ex_lsp_restart,\n+  stop = ex_lsp_stop,\n+}\n+\n+local available_subcmds = vim.tbl_keys(actions)\n+\n+--- Use for `:lsp {subcmd} {clients}` command\n+---@param args string\n+M._ex_lsp = function(args)\n+  local fargs = vim.api.nvim_parse_cmd('lsp ' .. args, {}).args\n+  if not fargs then\n+    return\n+  end\n+  local subcmd = fargs[1]\n+  if not vim.list_contains(available_subcmds, subcmd) then\n+    vim.notify((\"Invalid subcommand '%s'\"):format(subcmd), vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  local clients = {}\n+  for i, client in ipairs(fargs) do\n+    if i > 1 then\n+      table.insert(clients, client)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233596270",
            "id": 2233596270,
            "in_reply_to_id": 2233593188,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FIflu",
            "original_commit_id": "e6bafc90564814b0ea99eaa8fd34cb9b6a144525",
            "original_line": 85,
            "original_position": 85,
            "original_start_line": 80,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": null,
            "pull_request_review_id": 3058884686,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233596270/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-27T03:10:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233596270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35078#discussion_r2233597677"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35078"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233597677"
                }
            },
            "author_association": "MEMBER",
            "body": "just code optimization. logic part is in accordance with their standards. I have no idea",
            "commit_id": "9de11246ca071ac3ff0921f3c5ead40079a19729",
            "created_at": "2025-07-27T02:17:54Z",
            "diff_hunk": "@@ -0,0 +1,105 @@\n+local lsp = vim.lsp\n+\n+local M = {}\n+\n+--- @param filter? vim.lsp.get_clients.Filter\n+--- @return string[]\n+local function get_client_names(filter)\n+  return vim\n+    .iter(lsp.get_clients(filter))\n+    :map(function(client)\n+      return client.name\n+    end)\n+    :filter(function(name)\n+      return not not vim.lsp.config[name]\n+    end)\n+    :totable()\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_stop(clients)\n+  -- Default to disabling all servers on current buffer\n+  if #clients == 0 then\n+    clients = get_client_names { bufnr = vim.api.nvim_get_current_buf() }\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+end\n+\n+---@param clients string[]\n+local function ex_lsp_restart(clients)\n+  -- Default to restarting all active servers\n+  if #clients == 0 then\n+    clients = get_client_names()\n+  end\n+\n+  for _, name in ipairs(clients) do\n+    if vim.lsp.config[name] == nil then\n+      vim.notify((\"Invalid server name '%s'\"):format(name))\n+    else\n+      vim.lsp.enable(name, false)\n+    end\n+  end\n+\n+  local timer = assert(vim.uv.new_timer())\n+  timer:start(500, 0, function()\n+    for _, name in ipairs(clients) do\n+      vim.schedule_wrap(function(x)\n+        vim.lsp.enable(x)\n+      end)(name)\n+    end\n+  end)\n+end\n+\n+local actions = {\n+  restart = ex_lsp_restart,\n+  stop = ex_lsp_stop,\n+}\n+\n+local available_subcmds = vim.tbl_keys(actions)\n+\n+--- Use for `:lsp {subcmd} {clients}` command\n+---@param args string\n+M._ex_lsp = function(args)\n+  local fargs = vim.api.nvim_parse_cmd('lsp ' .. args, {}).args\n+  if not fargs then\n+    return\n+  end\n+  local subcmd = fargs[1]\n+  if not vim.list_contains(available_subcmds, subcmd) then\n+    vim.notify((\"Invalid subcommand '%s'\"):format(subcmd), vim.log.levels.ERROR)\n+    return\n+  end\n+\n+  local clients = {}\n+  for i, client in ipairs(fargs) do\n+    if i > 1 then\n+      table.insert(clients, client)\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/35078#discussion_r2233597677",
            "id": 2233597677,
            "in_reply_to_id": 2233593188,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FIf7t",
            "original_commit_id": "e6bafc90564814b0ea99eaa8fd34cb9b6a144525",
            "original_line": 85,
            "original_position": 85,
            "original_start_line": 80,
            "path": "runtime/lua/vim/lsp/_cmd.lua",
            "position": null,
            "pull_request_review_id": 3058886017,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233597677/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-27T02:17:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2233597677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Maybe the command shouldn't support trailing bar and comments as well?\r\n\r\nAnd for \"only accepting one client name\", should I use `table.concat(fargs, 2)` (any strings after restart/stop is a client name) or `fargs[2]` (client name with space should be escaped)? I prefer the latter because it allies with how `nvim_parse_cmd()` parse the command.",
            "created_at": "2025-07-27T02:36:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/35078#issuecomment-3123786491",
            "id": 3123786491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35078",
            "node_id": "IC_kwDOAPphoM66MTL7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3123786491/reactions"
            },
            "updated_at": "2025-07-27T03:14:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3123786491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Maybe the command shouldn't support trailing bar and comments as well?\r\n\r\nIs that because `|\"` might be needed for some args?\r\n \r\n> And for \"only accepting one client name\"\r\n\r\nThat constraint was to avoid over-engineering these things and keep them simple. \r\n\r\n> client name with space should be escaped)?\r\n\r\nwell the only purpose of commands is to be ergonomic, for interactive use. Though I guess completion will usually do the escaping.",
            "created_at": "2025-07-27T03:59:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/35078#issuecomment-3123852848",
            "id": 3123852848,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35078",
            "node_id": "IC_kwDOAPphoM66MjYw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3123852848/reactions"
            },
            "updated_at": "2025-07-27T03:59:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3123852848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is that because |\" might be needed for some args?\r\n\r\nCoz I am sure comment is useless in interactive usage, but just not sure about bar\r\n\r\n> That constraint was to avoid over-engineering these things and keep them simple.\r\n\r\nThe command already have to support multiple-clients in case no client-args are given, so making it support multi-client args doesn't make it any more complicated IMO. But I don't have strong opinion on either way",
            "created_at": "2025-07-27T10:52:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/35078#issuecomment-3124304990",
            "id": 3124304990,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35078",
            "node_id": "IC_kwDOAPphoM66ORxe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3124304990/reactions"
            },
            "updated_at": "2025-07-27T10:52:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3124304990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35078/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35078/commits",
    "created_at": "2025-07-26T12:28:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35078.diff",
    "draft": false,
    "head": {
        "label": "brianhuster:lsp-cmd",
        "ref": "lsp-cmd",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/brianhuster/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/brianhuster/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/brianhuster/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/brianhuster/neovim/branches{/branch}",
            "clone_url": "https://github.com/brianhuster/neovim.git",
            "collaborators_url": "https://api.github.com/repos/brianhuster/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/brianhuster/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/brianhuster/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/brianhuster/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/brianhuster/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/brianhuster/neovim/contributors",
            "created_at": "2025-02-01T09:06:09Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/brianhuster/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/brianhuster/neovim/downloads",
            "events_url": "https://api.github.com/repos/brianhuster/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/brianhuster/neovim/forks",
            "full_name": "brianhuster/neovim",
            "git_commits_url": "https://api.github.com/repos/brianhuster/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/brianhuster/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/brianhuster/neovim/git/tags{/sha}",
            "git_url": "git://github.com/brianhuster/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/brianhuster/neovim/hooks",
            "html_url": "https://github.com/brianhuster/neovim",
            "id": 925600113,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/brianhuster/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/brianhuster/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/brianhuster/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/brianhuster/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/brianhuster/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/brianhuster/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/brianhuster/neovim/merges",
            "milestones_url": "https://api.github.com/repos/brianhuster/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDONyuJcQ",
            "notifications_url": "https://api.github.com/repos/brianhuster/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
                "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
                "followers_url": "https://api.github.com/users/brianhuster/followers",
                "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
                "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brianhuster",
                "id": 111893501,
                "login": "brianhuster",
                "node_id": "U_kgDOBqtb_Q",
                "organizations_url": "https://api.github.com/users/brianhuster/orgs",
                "received_events_url": "https://api.github.com/users/brianhuster/received_events",
                "repos_url": "https://api.github.com/users/brianhuster/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brianhuster",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/brianhuster/neovim/pulls{/number}",
            "pushed_at": "2025-07-28T18:02:16Z",
            "releases_url": "https://api.github.com/repos/brianhuster/neovim/releases{/id}",
            "size": 324589,
            "ssh_url": "git@github.com:brianhuster/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/brianhuster/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/brianhuster/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/brianhuster/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/brianhuster/neovim/subscription",
            "svn_url": "https://github.com/brianhuster/neovim",
            "tags_url": "https://api.github.com/repos/brianhuster/neovim/tags",
            "teams_url": "https://api.github.com/repos/brianhuster/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/brianhuster/neovim/git/trees{/sha}",
            "updated_at": "2025-07-26T09:27:32Z",
            "url": "https://api.github.com/repos/brianhuster/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "9de11246ca071ac3ff0921f3c5ead40079a19729",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
            "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
            "followers_url": "https://api.github.com/users/brianhuster/followers",
            "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
            "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/brianhuster",
            "id": 111893501,
            "login": "brianhuster",
            "node_id": "U_kgDOBqtb_Q",
            "organizations_url": "https://api.github.com/users/brianhuster/orgs",
            "received_events_url": "https://api.github.com/users/brianhuster/received_events",
            "repos_url": "https://api.github.com/users/brianhuster/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/brianhuster",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35078",
    "id": 2696946461,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35078",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e1b2f3efc634ece0d0ef1a077083ab66bbcd9efa",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6gwCMd",
    "number": 35078,
    "patch_url": "https://github.com/neovim/neovim/pull/35078.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35078/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/9de11246ca071ac3ff0921f3c5ead40079a19729",
    "title": "feat(ex): add :lsp command",
    "updated_at": "2025-07-28T18:06:35Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35078",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/111893501?v=4",
        "events_url": "https://api.github.com/users/brianhuster/events{/privacy}",
        "followers_url": "https://api.github.com/users/brianhuster/followers",
        "following_url": "https://api.github.com/users/brianhuster/following{/other_user}",
        "gists_url": "https://api.github.com/users/brianhuster/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/brianhuster",
        "id": 111893501,
        "login": "brianhuster",
        "node_id": "U_kgDOBqtb_Q",
        "organizations_url": "https://api.github.com/users/brianhuster/orgs",
        "received_events_url": "https://api.github.com/users/brianhuster/received_events",
        "repos_url": "https://api.github.com/users/brianhuster/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/brianhuster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brianhuster/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/brianhuster",
        "user_view_type": "public"
    }
}