{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32482/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32482/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/32482"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/32482"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32482/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/f4ad4e8c2ba2530f3b6288f386b0a9be639485d6"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5893,
            "forks_count": 5893,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1874,
            "open_issues_count": 1874,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-02-25T01:17:51Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 309174,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 86583,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-02-25T02:27:01Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 86583,
            "watchers_count": 86583,
            "web_commit_signoff_required": false
        },
        "sha": "51cf84daf9612574978731e66db45a52136b8899",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This PR implements the major perf gain of #26827 without adding the incremental invalidation part of that PR. The change is thus a lot smaller, hopefully making the logic easier to understand and review. The incremental invalidation doesn't really make a difference anyway, except for very large files that also have combined injections. But this can be handled down the road in another PR",
    "closed_at": "2025-02-21T08:56:21Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963245507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963245507"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    local start_line, end_line ---@type integer, integer\r\n\r\n    if full_scan then\r\n      start_line, _, end_line = root_node:range()\r\n    else\r\n      start_line, _, end_line = Range.unpack4(range --[[@as Range]])\r\n    end\r\n```",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T09:56:54Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963245507",
            "id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51BL_D",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2629320688,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963245507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T09:57:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963245507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963745813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963745813"
                }
            },
            "author_association": "MEMBER",
            "body": "Luacheck says 👎  ... 😞 ",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T15:04:39Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963745813",
            "id": 1963745813,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51DGIV",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630163908,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963745813/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T15:04:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963745813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963770191"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963770191"
                }
            },
            "author_association": "MEMBER",
            "body": ":disappointed: ",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T15:15:26Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963770191",
            "id": 1963770191,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51DMFP",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630214359,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963770191/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T15:15:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963770191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963780690"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963780690"
                }
            },
            "author_association": "MEMBER",
            "body": "Could also suppress the check here? (Long-term, we probably want to move away from luacheck anyway.)",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T15:19:06Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963780690",
            "id": 1963780690,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51DOpS",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630232178,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963780690/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T15:19:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963780690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963783783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963783783"
                }
            },
            "author_association": "MEMBER",
            "body": "Or add `_` to as a global to  `.luacheckrc`?",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T15:20:17Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963783783",
            "id": 1963783783,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51DPZn",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630239041,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963783783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T15:20:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963783783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963789611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963789611"
                }
            },
            "author_association": "MEMBER",
            "body": "That sounds good, would you like me to do it in this PR?",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T15:23:10Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963789611",
            "id": 1963789611,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51DQ0r",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630250841,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963789611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T15:23:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963789611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963792959"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963792959"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, but maybe separate commit (before this one)?\r\n\r\n@lewis6991 any downsides to that?",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T15:24:51Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963792959",
            "id": 1963792959,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51DRo_",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630256776,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963792959/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T15:24:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963792959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963940784"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963940784"
                }
            },
            "author_association": "MEMBER",
            "body": "Sorry I don't understand the problem. What's the error we are trying to supress?",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:26:59Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963940784",
            "id": 1963940784,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D1uw",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630483048,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963940784/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:26:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963940784",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963942876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963942876"
                }
            },
            "author_association": "MEMBER",
            "body": "Luacheck complains about using \"non-standard global\" (i.e., assigning to `_`) with your suggested edit.",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:28:14Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963942876",
            "id": 1963942876,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D2Pc",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630486279,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963942876/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:28:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963942876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963944886"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963944886"
                }
            },
            "author_association": "MEMBER",
            "body": "(Since this is about performance, keeping `_` local would probably be a better approach anyway, though?)",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:29:28Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963944886",
            "id": 1963944886,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D2u2",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630489577,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963944886/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:29:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963944886",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963946131"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963946131"
                }
            },
            "author_association": "MEMBER",
            "body": "This is what I meant with luacheck getting in the way. `_` is fine to use here. Add whatever we need to `.luacheckrc`, but I vote we just remove it.",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:30:15Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963946131",
            "id": 1963946131,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D3CT",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630491635,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963946131/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:30:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963946131",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963949090"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963949090"
                }
            },
            "author_association": "MEMBER",
            "body": "Long-term I agree, but right now we'd be losing useful checks without replacement together with the annoying.",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:31:59Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963949090",
            "id": 1963949090,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D3wi",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630496423,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963949090/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:31:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963949090",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963951308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963951308"
                }
            },
            "author_association": "MEMBER",
            "body": "(Hopefully not so long-term, of course, the way you've been pushing Lua LSP tooling :))",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:33:20Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963951308",
            "id": 1963951308,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D4TM",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630500011,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963951308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:33:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963951308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1963953591"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963953591"
                }
            },
            "author_association": "MEMBER",
            "body": "This is getting off-topic, but maybe a tracking issue would be useful? With a table comparing what luacheck, stylua, luals, and emmyluals provide so we _know_ what we're talking about and can make a decision with confidence?\r\n\r\nWe could then switch to only enabling the warnings we really care about (and are not better covered by stylua and luals -- which unfortunately is much slower) instead of drinking from the firehose (i.e., use `only` instead of `ignore`).\r\n\r\n(Here's the luacheck list, for future reference: https://luacheck.readthedocs.io/en/stable/warnings.html)\r\n",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:34:41Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1963953591",
            "id": 1963953591,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51D423",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630503676,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963953591/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:40:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1963953591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1964005397"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964005397"
                }
            },
            "author_association": "MEMBER",
            "body": "FWIW I don't think Luacheck has any useful checks that aren't already done by LuaLS.",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:53:55Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1964005397",
            "id": 1964005397,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51EFgV",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630584148,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964005397/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T16:53:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964005397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1964013719"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964013719"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, but it would be good to explicitly document that. There's not too many checks; the `6xx` are clearly covered by stylua, the `0xx` are about luacheck itself; and the handful of others that we don't already ignore could be either ticked off against luals diagnostics or argued to be irrelevant for us. (At a glance, only the `5xx` are of potential interest. Empty blocks for example are luacheck-only from a brief test, for example.)\r\n\r\n(This is not about adding friction but about having something written down we can refer to when the next generation of maintainers discovers luacheck and goes \"why aren't we using that?!\")",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T16:58:31Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1964013719",
            "id": 1964013719,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51EHiX",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630596974,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964013719/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T17:00:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964013719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1964036212"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964036212"
                }
            },
            "author_association": "MEMBER",
            "body": "These are the checks I think aren't covered from LuaLS and Stylua:\r\n\r\n```\r\n111 Setting an undefined global variable. -- LuaLS only checks global variables must be uppercase, so mostly equiv\r\n541 An empty do end block. -- probably a LuaLS bug since it checks empty loop/if statements\r\n512 Loop can be executed at most once. -- not that useful\r\n314 Value of a field in a table literal is unused. -- sounds useful\r\n561 Cyclomatic complexity of a function is too high. -- huh?\r\n581 Negation of a relational operator- operator can be flipped. -- sounds useful\r\n582 Error prone negation: negation has a higher priority than equality. -- sounds useful\r\n```\r\n",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T17:13:14Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1964036212",
            "id": 1964036212,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51ENB0",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630634735,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964036212/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T17:13:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964036212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1964038156"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964038156"
                }
            },
            "author_association": "MEMBER",
            "body": "We ignore `581` since it's not true when tables are involved. (And, yes, `561` is a weird one. I don't think we even enable the ~chromatic~ cyclomatic check.)\r\n\r\nAssuming that `541` can get fixed (not a big loss in the meantime), this only leaves `582` and potentially `314`. The former sounds also prone to false positives, and the latter would be something that could be proposed to luals/emmyluals?",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T17:14:31Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1964038156",
            "id": 1964038156,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51ENgM",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630638225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964038156/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T17:19:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964038156",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/32482#discussion_r1964046594"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/32482"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964046594"
                }
            },
            "author_association": "MEMBER",
            "body": "#32536",
            "commit_id": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
            "created_at": "2025-02-20T17:20:09Z",
            "diff_hunk": "@@ -986,18 +1001,28 @@ end\n --- TODO: Allow for an offset predicate to tailor the injection range\n ---       instead of using the entire nodes range.\n --- @private\n+--- @param range Range|true\n --- @return table<string, Range6[][]>\n-function LanguageTree:_get_injections()\n+function LanguageTree:_get_injections(range)\n   if not self._injection_query or #self._injection_query.captures == 0 then\n+    self._processed_injection_range = entire_document_range\n     return {}\n   end\n \n   ---@type table<integer,vim.treesitter.languagetree.Injection>\n   local injections = {}\n \n+  local full_scan = range == true or self._injection_query.has_combined_injections\n+\n   for index, tree in pairs(self._trees) do\n     local root_node = tree:root()\n-    local start_line, _, end_line, _ = root_node:range()\n+    local start_line, end_line, _ ---@type integer, integer, integer\n+\n+    if full_scan then\n+      start_line, _, end_line, _ = root_node:range()\n+    else\n+      start_line, _, end_line, _ = Range.unpack4(range --[[@as Range]])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/32482#discussion_r1964046594",
            "id": 1964046594,
            "in_reply_to_id": 1963245507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM51EPkC",
            "original_commit_id": "b83d6c2a3321862836df1d5e1fa2006e0ad835e9",
            "original_line": 1024,
            "original_position": 108,
            "original_start_line": 1019,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2630652871,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964046594/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-02-20T17:20:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1964046594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/32482/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/32482/commits",
    "created_at": "2025-02-16T17:27:45Z",
    "diff_url": "https://github.com/neovim/neovim/pull/32482.diff",
    "draft": false,
    "head": {
        "label": "ribru17:inj_query_perf",
        "ref": "inj_query_perf",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ribru17/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ribru17/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ribru17/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ribru17/neovim/branches{/branch}",
            "clone_url": "https://github.com/ribru17/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ribru17/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ribru17/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ribru17/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ribru17/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ribru17/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ribru17/neovim/contributors",
            "created_at": "2023-12-31T05:02:30Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ribru17/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ribru17/neovim/downloads",
            "events_url": "https://api.github.com/repos/ribru17/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ribru17/neovim/forks",
            "full_name": "ribru17/neovim",
            "git_commits_url": "https://api.github.com/repos/ribru17/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ribru17/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ribru17/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ribru17/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ribru17/neovim/hooks",
            "html_url": "https://github.com/ribru17/neovim",
            "id": 737455179,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ribru17/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ribru17/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ribru17/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ribru17/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ribru17/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ribru17/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ribru17/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ribru17/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK_SsSw",
            "notifications_url": "https://api.github.com/repos/ribru17/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ribru17/neovim/pulls{/number}",
            "pushed_at": "2025-02-24T23:36:41Z",
            "releases_url": "https://api.github.com/repos/ribru17/neovim/releases{/id}",
            "size": 301387,
            "ssh_url": "git@github.com:ribru17/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ribru17/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ribru17/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ribru17/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ribru17/neovim/subscription",
            "svn_url": "https://github.com/ribru17/neovim",
            "tags_url": "https://api.github.com/repos/ribru17/neovim/tags",
            "teams_url": "https://api.github.com/repos/ribru17/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ribru17/neovim/git/trees{/sha}",
            "updated_at": "2025-02-24T23:36:46Z",
            "url": "https://api.github.com/repos/ribru17/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/32482",
    "id": 2338326976,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/32482",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "562056c87573a532a0e670952d23d77026eeae28",
    "merged_at": "2025-02-21T08:56:21Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6LYAnA",
    "number": 32482,
    "patch_url": "https://github.com/neovim/neovim/pull/32482.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/32482/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/f4ad4e8c2ba2530f3b6288f386b0a9be639485d6",
    "title": "perf(treesitter): only search for injections within the parse range",
    "updated_at": "2025-02-21T08:56:35Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/32482",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17",
        "user_view_type": "public"
    }
}