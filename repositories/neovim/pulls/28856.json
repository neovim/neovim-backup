{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28856/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28856/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28856"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28856"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28856/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28856"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/d5ea89cf300fdcd13bc0868cc7202ca168731241"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5823,
            "forks_count": 5823,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1843,
            "open_issues_count": 1843,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-01-21T00:10:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 304457,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85427,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-01-21T01:35:11Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85427,
            "watchers_count": 85427,
            "web_commit_signoff_required": false
        },
        "sha": "a5b1b83a2693ffa7a5a0a22b3693d36ea60051be",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "**Problem**: The current `inccommand` implementation works by forcing a redraw right after applying changes and immediately restoring everything without a subsequent redraw, thereby relying on ephemeral screen state (the \"preview\" visible to the user does not represent the actual state of buffers/windows). This requires disabling redraws while command preview is active (#9777, #9783), which suppresses unrelated UI updates (#20463, #27950), complicates/prevents redrawing floating windows (#28510), and causes rendering issues for GUIs (#24802). In cases where a redraw is forced (e.g. editor resize), the command preview is cleared. Similarly, `<C-g>` and `<C-t>` during `:substitute` clear the preview.\r\n\r\n**Solution**: Remove reliance on temporary screen state in command preview, actually keep the buffer changes after applying them. Only restore state when needed (e.g. before re-updating the preview, when leaving cmdline, ...). Allow redrawing during preview, and refresh command preview when the editor is resized or a scroll occurs.\r\n\r\n---\r\n\r\n> Helpful background: #28510. Notably, it highlights why refreshing command preview is required when scrolls/resizes occur (even when the preview state is persistent). In brief, commands may choose to apply previews only within the visible viewport, so when more lines are revealed the preview may need to be executed again. (If this weren't the case, the editor would basically brick on each keypress after `:%substitue/` for a sufficiently large file).\r\n\r\n<details><summary><b>NOTE</b> about commit history</summary>\r\n\r\nThe commit history is kind of wonky, I tried to organize changes in a way that would make the implementation changes easier to follow (incrementally/chronologically) at the expense of a clean/logical commit sequence in its own right. When this PR gets closer to being ready and others have taken a look at it, I'd like to squash and rearrange some of these changes.\r\n\r\n</details>\r\n\r\n---\r\n\r\n# Implementation\r\n\r\n> **NOTE**: In this section, I often use the term \"preview callback\" or something similar, by which I mean the \"per-command\" previewing function. So for user-commands thats the `preview = ...` field in the `opts` arg of `nvim_create_user_command` (`:help :command-preview`), and for builtin functions that's `CommandDefinition.cmd_preview_func` (currently only exists for `:substitute`).\r\n\r\nThe changes in this PR can be roughly organized in 4 steps/categories, which loosely follow the commits chronologically:\r\n\r\n1. Refactor the existing cmdpreview logic to ease the new implementation, without yet changing observable behaviour (i.e. still use the `apply + redraw + teardown/restore + disable redrawing` approach). The original approach only ever executes the command preview routines entirely and atomically, all in one go. The new approach requires executing different parts of this routine independently. Additionally, the preview state now needs to be kept alive across calls to update functions and may also be called externally (like, not within the \"regular\" command line event handling functions). This requires hoisting the state object to a global.\r\n\r\n<details>\r\n\r\n- split `cmdpreview_prepare()` in two: `cmdpreview_save()` and `cmdpreview_prepare()`. `save()` handles saving buffer information (undo, changedtick, ...), while `prepare()` sets things up only needed for the duration of the next preview execution (ensures undolevels are such that we can subsequently rollback changes, temporarily disable cursorline and incsearch, ...). Reason: later, we'll often want to only call `prepare()` without saving again.\r\n- split `cmdpreview_restore_state()` in two, moving out memory deallocations to `cmdpreview_destroy()`. We'll eventually want to keep saved information around, but we still need to restore buffers before re-executing preview changes, so need to split restoration and deallocation.\r\n- Use a global `CpInfo` object instead of one local to `cmdpreview_may_show()`. Move some of the local variables in that function to fields in `CpInfo` if we'll eventually need to keep track of them.\r\n- extract part of the initial logic from `cmdpreview_may_show` to `cmdpreview_may_init`/`cmdpreview_check_cmdline`, which handle checking if the command is previewable and, if applicable, preparation for showing preview.\r\n- reorganize where/when autocommands are blocked and messages are disabled. Before this wasn't a concern because all the subroutines where only ever called by `cmdpreview_may_show()`, so that function could simply block autocmds at the beginning and unblock them at the end. Eventually, we'll be calling some of those functions individually but still want to block events and error reporting.\r\n\r\n</details>\r\n\r\nAt this point, the high level logic is the same: `cmdpreview_may_show()` handles the full init->show->destroy cycle at once.\r\n\r\n2. Don't immediately tear down preview state. Now, `cmdpreview_may_show()` no longer unconditionally completes the full preview cycle. On preview success, the buffer changes are no longer reverted immediately. The `CpInfo` object is not destroyed and thus still holds the saved buffer information. On the next call, the buffer information doesn't need to be saved: instead, the buffers are just restored using the existing saved information before re-applying the preview changes.\r\n\r\n<details>\r\n\r\n- add `cmdpreview_transition_begin`/`_end` functions. These handle maintaining invariants that I found hard to keep track of manually. When entering the preview handling functions, we may or may not be already previewing, and when exiting the cmdpreview handling functions, we may or may not need to restore buffers, free memory, and/or close windows (for example, depending on whether the preview callback succeeded). The transition functions handle a lot these things.\r\n- we previously didn't always call `cmdpreview_may_show` when the command line changes, this no longer works because the preview may still be active; skipping the cmdpreview updates would then keep those changes active. So, if the cmdline was updated but cmdpreview shouldn't be shown (e.g. when not interactive or input chars are available), call `cmdpreview_did_not_show` which handles cleanup, if applicable.\r\n\r\n</details>\r\n\r\n3. Handle buffer and window changes/invalidations between preview updates. Now that the changes are kept around, re-executing preview routines when preview is already active isn't as simple: buffers and windows may have been closed, so some of the saved buffer/window information may no longer be valid, and there may be new windows/buffers that now need to be saved.\r\n\r\n<details>\r\n\r\n- Use `bufref_T` instead of bufs for saved buffer information, so that we can check if the information refers to a invalid buffer. Free invalid buffer information without restoring them in these cases\r\n- Store saved information in hashmaps instead of vecs: when preparing for updates, we want to go through open windows/buffers and check if we've already saved them. See commit message of 7d54e8b\r\n    - **NOTE**: this is possibly less efficient in general unless you have a lot of buffers/windows open, but I'm going with naive/\"obvious\" solutions for the time being\r\n\r\n</details>\r\n\r\n4. Finally, allow redrawing while command preview is active. Also update cmdpreview when a resize or scroll occurs, if needed (see note above and/or #28510 for why the latter is required)\r\n\r\n---\r\n\r\n# Considerations/open questions\r\n\r\nNow that preview changes are persistent, a lot more bookkeeping is required. Specifically, buffer and window information can arbitrarily change in between preview updates, and I'm not sure how to handle all such changes.\r\nI have a few specific concerns/questions that I'll add in the comments when I get around to properly wording them.\r\n\r\nHere's a rough, quick, likely non-exhaustive list of these concerns:\r\n\r\n- What exactly is a preview function allowed to do? I think this should be documented, both for users' and devs' sake.\r\n\r\n- In the spirit of playing nice with external UIs, I think there needs to be a way to mark windows as ignored by command preview (if there isn't already), or maybe just have a class of window/buffer option combinations that should be ignored by command preview (e.g. `nomodifiable`+`bufhidden=hide`+`buftype=nofile`+is a floating window+...)?\r\n    - For now, nothing is ignored, but to allow UI widget modifications while cmdpreview is active, the following best effort \"heuristic\" approach is used (see https://github.com/neovim/neovim/pull/28856/commits/d5ea89cf300fdcd13bc0868cc7202ca168731241):\r\n        - after the preview callback, mark all unchanged buffers (reason: we may \"assume\" that buffers not modified by the preview callback are more likely to be UI widget-ish)\r\n        - on the next preview update, if a marked buffer has changed, don't attempt to restore it (reason: ui widgets may have been modified in the meantime, restoring them makes no sense and would break e.g. externalized cmdlines during preview)\r\n\r\n- What/how do we handle the \"in between preview updates\" part? Preview changes are actually persistent now, and things can potentially be \"messed up\" in between consecutive calls to a preview callback (e.g. autocommands called after cmdline changed right before cmdpreview is executed, or a timer callback, ...). Specifically:\r\n    - what if a buffer was changed during this time (possibly *after* being modified by cmdpreview, but *before* those changes were reverted)?",
    "closed_at": null,
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Ah I remember now the changed viewport thing(scroll/resize), is this mainly for that?\r\n\r\nyes that's precisely why I added `cmdpreview_may_refresh()` (for anyone else looking at this discussion, see this comment https://github.com/neovim/neovim/issues/28510#issuecomment-2080289950). otherwise it wouldn't be needed.\r\n\r\n> Could you add a docstring to cmdpreview_may_refresh() that explains why it is needed?\r\n\r\ndefinitely worthy of a docstring. mybad if things aren't properly documented yet, still a WIP but I'll add it to the todo list in the pr description\r\n",
            "created_at": "2024-05-22T13:50:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/28856#issuecomment-2124851140",
            "id": 2124851140,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28856",
            "node_id": "IC_kwDOAPphoM5-pqfE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2124851140/reactions"
            },
            "updated_at": "2024-05-22T13:50:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2124851140",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28856/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28856/commits",
    "created_at": "2024-05-20T03:10:10Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28856.diff",
    "draft": true,
    "head": {
        "label": "theofabilous:cmdpreview-redraw",
        "ref": "cmdpreview-redraw",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/theofabilous/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/theofabilous/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/theofabilous/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/theofabilous/neovim/branches{/branch}",
            "clone_url": "https://github.com/theofabilous/neovim.git",
            "collaborators_url": "https://api.github.com/repos/theofabilous/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/theofabilous/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/theofabilous/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/theofabilous/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/theofabilous/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/theofabilous/neovim/contributors",
            "created_at": "2024-04-08T02:19:57Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/theofabilous/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/theofabilous/neovim/downloads",
            "events_url": "https://api.github.com/repos/theofabilous/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/theofabilous/neovim/forks",
            "full_name": "theofabilous/neovim",
            "git_commits_url": "https://api.github.com/repos/theofabilous/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/theofabilous/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/theofabilous/neovim/git/tags{/sha}",
            "git_url": "git://github.com/theofabilous/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/theofabilous/neovim/hooks",
            "html_url": "https://github.com/theofabilous/neovim",
            "id": 783495642,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/theofabilous/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/theofabilous/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/theofabilous/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/theofabilous/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/theofabilous/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/theofabilous/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/theofabilous/neovim/merges",
            "milestones_url": "https://api.github.com/repos/theofabilous/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOLrMx2g",
            "notifications_url": "https://api.github.com/repos/theofabilous/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
                "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
                "followers_url": "https://api.github.com/users/theofabilous/followers",
                "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
                "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/theofabilous",
                "id": 92238946,
                "login": "theofabilous",
                "node_id": "U_kgDOBX90Yg",
                "organizations_url": "https://api.github.com/users/theofabilous/orgs",
                "received_events_url": "https://api.github.com/users/theofabilous/received_events",
                "repos_url": "https://api.github.com/users/theofabilous/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/theofabilous",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/theofabilous/neovim/pulls{/number}",
            "pushed_at": "2025-01-18T21:17:30Z",
            "releases_url": "https://api.github.com/repos/theofabilous/neovim/releases{/id}",
            "size": 295870,
            "ssh_url": "git@github.com:theofabilous/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/theofabilous/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/theofabilous/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/theofabilous/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/theofabilous/neovim/subscription",
            "svn_url": "https://github.com/theofabilous/neovim",
            "tags_url": "https://api.github.com/repos/theofabilous/neovim/tags",
            "teams_url": "https://api.github.com/repos/theofabilous/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/theofabilous/neovim/git/trees{/sha}",
            "updated_at": "2024-04-08T02:19:57Z",
            "url": "https://api.github.com/repos/theofabilous/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d5ea89cf300fdcd13bc0868cc7202ca168731241",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
            "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
            "followers_url": "https://api.github.com/users/theofabilous/followers",
            "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
            "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/theofabilous",
            "id": 92238946,
            "login": "theofabilous",
            "node_id": "U_kgDOBX90Yg",
            "organizations_url": "https://api.github.com/users/theofabilous/orgs",
            "received_events_url": "https://api.github.com/users/theofabilous/received_events",
            "repos_url": "https://api.github.com/users/theofabilous/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/theofabilous",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28856",
    "id": 1877462164,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28856",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "command line, also cmdwin",
            "id": 5826989442,
            "name": "cmdline-mode",
            "node_id": "LA_kwDOAPphoM8AAAABW1DNgg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/cmdline-mode"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 7015104868,
            "name": "inccommand",
            "node_id": "LA_kwDOAPphoM8AAAABoiIBZA",
            "url": "https://api.github.com/repos/neovim/neovim/labels/inccommand"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5v58yU",
    "number": 28856,
    "patch_url": "https://github.com/neovim/neovim/pull/28856.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28856/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/d5ea89cf300fdcd13bc0868cc7202ca168731241",
    "title": "feat(inccommand): allow redrawing during cmdpreview",
    "updated_at": "2025-01-19T01:01:39Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28856",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/92238946?v=4",
        "events_url": "https://api.github.com/users/theofabilous/events{/privacy}",
        "followers_url": "https://api.github.com/users/theofabilous/followers",
        "following_url": "https://api.github.com/users/theofabilous/following{/other_user}",
        "gists_url": "https://api.github.com/users/theofabilous/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/theofabilous",
        "id": 92238946,
        "login": "theofabilous",
        "node_id": "U_kgDOBX90Yg",
        "organizations_url": "https://api.github.com/users/theofabilous/orgs",
        "received_events_url": "https://api.github.com/users/theofabilous/received_events",
        "repos_url": "https://api.github.com/users/theofabilous/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/theofabilous/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theofabilous/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/theofabilous",
        "user_view_type": "public"
    }
}