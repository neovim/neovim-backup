{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34140/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34140/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34140"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34140"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34140/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8e229a0659f649ce22263519ef92c559f565729d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6168,
            "forks_count": 6168,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1965,
            "open_issues_count": 1965,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-08T01:56:22Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332418,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90922,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-08T02:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90922,
            "watchers_count": 90922,
            "web_commit_signoff_required": false
        },
        "sha": "cbfc3d1cdc199ce65368a2f40dc4b1ddc4331714",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This PR introduces `vim.net.request()` as a new minimal Lua API for fetching content from network URLs and integrates directly into Neovim `:e` command for remote file opening. Closes #23232 .\r\n\r\n# Implementation details\r\n- Defines `vim.net.request(url, opts, on_response?)` in `runtime/lua/vim/net.lua.`\r\n- Uses `vim.system()` to invoke curl with:\r\n    - `--silent`, `--show-error`, `--fail`\r\n    - `--location` (follow redirects)\r\n    - `--retry` <n> (default 3)\r\n- Supports an `opts.outpath` path to stream directly to a file\r\n- Runs asynchronously and always calls `on_response(err, response)`.  \r\n- When`opts.outpath` is set, the value passed as the `response` body to `on_response` callback is a boolean `true`\r\n\r\n# Proposed API Usage\r\n1. Asynchronous request\r\n```lua\r\nvim.net.request(\"https://httpbingo.org/get\", { retry = 2 }, function(err, response)\r\n  if err then\r\n    print(\"Fetch failed:\", err)\r\n  else\r\n    print(\"Got body of length:\", #response.body)\r\n  end\r\nend)\r\n```\r\n2. Download to file\r\n```lua\r\nvim.net.request(\"https://httpbingo.org/get\", { outpath = \"out_async.txt\" }, function(err)\r\n  if err then print(\"Error:\", err) end\r\nend)\r\n```\r\n3. Remote :e integration (in runtime/plugin/net.lua) fetches into buffer\r\n```vim\r\n:e https://httpbingo.org/get\r\n```\r\n\r\n# Next steps\r\n- Add support for custom headers\r\n- Consider a tiny `vim.net.download()` convenience wrapper if users need it\r\n- Return a request handle which can be operated on (see [comment](https://github.com/neovim/neovim/pull/34140#discussion_r2173754322))\r\n- Expose more `curl` flags through `opts`\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2150362273"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150362273"
                }
            },
            "author_association": "MEMBER",
            "body": "Even though the API is separate functions, I would pull out the common code between the two into a local function.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-16T16:01:18Z",
            "diff_hunk": "@@ -0,0 +1,128 @@\n+local M = {}\n+\n+--- Downloads a file from the given URL to a specified location.\n+---\n+--- @param url string The URL to download from.\n+--- @param download_location string The file path where the content should be saved.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return boolean|nil, string? True on success (sync); false/nil and error message on failure.\n+function M.download(url, download_location, opts, on_exit)\n+  vim.validate({\n+    url = { url, 'string' },\n+    download_location = { download_location, 'string' },\n+    opts = { opts, 'table', true },\n+    on_exit = { on_exit, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  local args = { 'curl' }\n+\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+\n+  vim.list_extend(args, {\n+    '--retry',\n+    tostring(retry),\n+    '--location',\n+    '--output',\n+    download_location,\n+    url,\n+  })\n+\n+  if on_exit then\n+    vim.system(args, { text = true }, function(res)\n+      if res.code ~= 0 or res.stderr ~= '' then\n+        on_exit(res.stderr ~= '' and res.stderr or 'Download failed')\n+      else\n+        on_exit(nil)\n+      end\n+    end)\n+  else\n+    local job = vim.system(args, { text = true })\n+    local result = job:wait()\n+\n+    if result.code ~= 0 then\n+      local err = result.stderr\n+      if err == '' then\n+        err = string.format('Download failed (exit code %d)', result.code)\n+      else\n+        err = string.format('%s (exit code %d)', err, result.code)\n+      end\n+      return false, err\n+    end\n+\n+    return true\n+  end\n+end\n+\n+--- Makes an HTTP GET request to the given URL and returns the response body.\n+---\n+--- This is a barebones implemenation intended for internal use.\n+---\n+--- @param url string The URL to download from.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string, content?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return string|nil, string? On success (sync): content; On failure (sync) nil and error message.\n+function M.request(url, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2150362273",
            "id": 2150362273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AK-yh",
            "original_commit_id": "ad1f0dd2af99032f999fc0d65375c42ccd10bbf4",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2932708873,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150362273/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-16T16:01:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2150362273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2154683967"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154683967"
                }
            },
            "author_association": "MEMBER",
            "body": "👍 this seems like a good way to incrementally do stuff",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-18T13:56:39Z",
            "diff_hunk": "@@ -38,7 +38,7 @@ augroup END\n augroup Network\n     au!\n     au BufReadCmd file://* call netrw#FileUrlEdit(expand(\"<amatch>\"))\n-    au BufReadCmd ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://* exe \"sil doau BufReadPre \".fnameescape(expand(\"<amatch>\"))|call netrw#Nread(2,expand(\"<amatch>\"))|exe \"sil doau BufReadPost \".fnameescape(expand(\"<amatch>\"))\n+    au BufReadCmd ftp://*,rcp://*,scp://*,dav://*,davs://*,rsync://*,sftp://* exe \"sil doau BufReadPre \".fnameescape(expand(\"<amatch>\"))|call netrw#Nread(2,expand(\"<amatch>\"))|exe \"sil doau BufReadPost \".fnameescape(expand(\"<amatch>\"))",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2154683967",
            "id": 2154683967,
            "line": 41,
            "node_id": "PRRC_kwDOAPphoM6Abd4_",
            "original_commit_id": "ad1f0dd2af99032f999fc0d65375c42ccd10bbf4",
            "original_line": 41,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/pack/dist/opt/netrw/plugin/netrwPlugin.vim",
            "position": 5,
            "pull_request_review_id": 2939354736,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154683967/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T13:56:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154683967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2154690817"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154690817"
                }
            },
            "author_association": "MEMBER",
            "body": "why are they separate? the interfaces are nearly the same",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-18T13:59:25Z",
            "diff_hunk": "@@ -0,0 +1,128 @@\n+local M = {}\n+\n+--- Downloads a file from the given URL to a specified location.\n+---\n+--- @param url string The URL to download from.\n+--- @param download_location string The file path where the content should be saved.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return boolean|nil, string? True on success (sync); false/nil and error message on failure.\n+function M.download(url, download_location, opts, on_exit)\n+  vim.validate({\n+    url = { url, 'string' },\n+    download_location = { download_location, 'string' },\n+    opts = { opts, 'table', true },\n+    on_exit = { on_exit, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  local args = { 'curl' }\n+\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+\n+  vim.list_extend(args, {\n+    '--retry',\n+    tostring(retry),\n+    '--location',\n+    '--output',\n+    download_location,\n+    url,\n+  })\n+\n+  if on_exit then\n+    vim.system(args, { text = true }, function(res)\n+      if res.code ~= 0 or res.stderr ~= '' then\n+        on_exit(res.stderr ~= '' and res.stderr or 'Download failed')\n+      else\n+        on_exit(nil)\n+      end\n+    end)\n+  else\n+    local job = vim.system(args, { text = true })\n+    local result = job:wait()\n+\n+    if result.code ~= 0 then\n+      local err = result.stderr\n+      if err == '' then\n+        err = string.format('Download failed (exit code %d)', result.code)\n+      else\n+        err = string.format('%s (exit code %d)', err, result.code)\n+      end\n+      return false, err\n+    end\n+\n+    return true\n+  end\n+end\n+\n+--- Makes an HTTP GET request to the given URL and returns the response body.\n+---\n+--- This is a barebones implemenation intended for internal use.\n+---\n+--- @param url string The URL to download from.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string, content?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return string|nil, string? On success (sync): content; On failure (sync) nil and error message.\n+function M.request(url, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2154690817",
            "id": 2154690817,
            "in_reply_to_id": 2150362273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AbfkB",
            "original_commit_id": "ad1f0dd2af99032f999fc0d65375c42ccd10bbf4",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2939365957,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154690817/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T13:59:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154690817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2154868456"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154868456"
                }
            },
            "author_association": "MEMBER",
            "body": "Return types are different. We can have some overloading to handle this but we shouldn't (and can't) differentiate functions based on a field of a passed argument.\n\nI'd rather have a stdlib with strong typing than one which focuses on minimizing the number of functions.\n\nIn this case the implementation can be shared so I wouldn't lose sleep over having two similar functions.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-18T15:08:31Z",
            "diff_hunk": "@@ -0,0 +1,128 @@\n+local M = {}\n+\n+--- Downloads a file from the given URL to a specified location.\n+---\n+--- @param url string The URL to download from.\n+--- @param download_location string The file path where the content should be saved.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return boolean|nil, string? True on success (sync); false/nil and error message on failure.\n+function M.download(url, download_location, opts, on_exit)\n+  vim.validate({\n+    url = { url, 'string' },\n+    download_location = { download_location, 'string' },\n+    opts = { opts, 'table', true },\n+    on_exit = { on_exit, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  local args = { 'curl' }\n+\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+\n+  vim.list_extend(args, {\n+    '--retry',\n+    tostring(retry),\n+    '--location',\n+    '--output',\n+    download_location,\n+    url,\n+  })\n+\n+  if on_exit then\n+    vim.system(args, { text = true }, function(res)\n+      if res.code ~= 0 or res.stderr ~= '' then\n+        on_exit(res.stderr ~= '' and res.stderr or 'Download failed')\n+      else\n+        on_exit(nil)\n+      end\n+    end)\n+  else\n+    local job = vim.system(args, { text = true })\n+    local result = job:wait()\n+\n+    if result.code ~= 0 then\n+      local err = result.stderr\n+      if err == '' then\n+        err = string.format('Download failed (exit code %d)', result.code)\n+      else\n+        err = string.format('%s (exit code %d)', err, result.code)\n+      end\n+      return false, err\n+    end\n+\n+    return true\n+  end\n+end\n+\n+--- Makes an HTTP GET request to the given URL and returns the response body.\n+---\n+--- This is a barebones implemenation intended for internal use.\n+---\n+--- @param url string The URL to download from.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string, content?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return string|nil, string? On success (sync): content; On failure (sync) nil and error message.\n+function M.request(url, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2154868456",
            "id": 2154868456,
            "in_reply_to_id": 2150362273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AcK7o",
            "original_commit_id": "ad1f0dd2af99032f999fc0d65375c42ccd10bbf4",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2939654561,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154868456/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T15:08:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154868456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2155140383"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2155140383"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't see why the return types should be different.\r\n\r\nNot trying to be stubborn and I agree it's not a hill to die on. :)\r\n\r\nMy suggestion is to start with a basic implementation of `vim.net.fetch()` and see if we actually need a `vim.net.download()`. If \"collect the streamed content and save it to a file\" is too cumbersome, then yeah maybe a different function is needed. But that can be a later step.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-18T17:23:24Z",
            "diff_hunk": "@@ -0,0 +1,128 @@\n+local M = {}\n+\n+--- Downloads a file from the given URL to a specified location.\n+---\n+--- @param url string The URL to download from.\n+--- @param download_location string The file path where the content should be saved.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return boolean|nil, string? True on success (sync); false/nil and error message on failure.\n+function M.download(url, download_location, opts, on_exit)\n+  vim.validate({\n+    url = { url, 'string' },\n+    download_location = { download_location, 'string' },\n+    opts = { opts, 'table', true },\n+    on_exit = { on_exit, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  local args = { 'curl' }\n+\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+\n+  vim.list_extend(args, {\n+    '--retry',\n+    tostring(retry),\n+    '--location',\n+    '--output',\n+    download_location,\n+    url,\n+  })\n+\n+  if on_exit then\n+    vim.system(args, { text = true }, function(res)\n+      if res.code ~= 0 or res.stderr ~= '' then\n+        on_exit(res.stderr ~= '' and res.stderr or 'Download failed')\n+      else\n+        on_exit(nil)\n+      end\n+    end)\n+  else\n+    local job = vim.system(args, { text = true })\n+    local result = job:wait()\n+\n+    if result.code ~= 0 then\n+      local err = result.stderr\n+      if err == '' then\n+        err = string.format('Download failed (exit code %d)', result.code)\n+      else\n+        err = string.format('%s (exit code %d)', err, result.code)\n+      end\n+      return false, err\n+    end\n+\n+    return true\n+  end\n+end\n+\n+--- Makes an HTTP GET request to the given URL and returns the response body.\n+---\n+--- This is a barebones implemenation intended for internal use.\n+---\n+--- @param url string The URL to download from.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables verbose curl output.\n+---   - retry (integer|nil): Number of times to retry on transient failures (default: 3).\n+--- @param on_exit? fun(err?: string, content?: string) Optional callback. If omitted, runs synchronously.\n+---\n+--- @return string|nil, string? On success (sync): content; On failure (sync) nil and error message.\n+function M.request(url, opts, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2155140383",
            "id": 2155140383,
            "in_reply_to_id": 2150362273,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AdNUf",
            "original_commit_id": "ad1f0dd2af99032f999fc0d65375c42ccd10bbf4",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2940105762,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2155140383/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T17:23:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2155140383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2163418518"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163418518"
                }
            },
            "author_association": "MEMBER",
            "body": "Don't need that guard -- we _know_ `vim.net` is available because we put it there.\r\n\r\nThe correct guard would be having `curl` available -- but be careful about `executable` having performance issues on Windows.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-24T09:17:14Z",
            "diff_hunk": "@@ -0,0 +1,45 @@\n+if vim.g.loaded_remote_file_loader then\n+  return\n+end\n+vim.g.loaded_remote_file_loader = true\n+\n+if not vim.net or type(vim.net.request) ~= 'function' then",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2163418518",
            "id": 2163418518,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6A8yWW",
            "original_commit_id": "ab3021a373c5c3c55f1a0efdb12465cdf301b732",
            "original_line": 6,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2952922248,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163418518/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-24T09:17:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163418518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2163425634"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163425634"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we want to make this an error or a warning? What's the official stance -- is `curl` now a _required_ runtime dependency?",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-24T09:19:29Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })\n+    local curl_version = vim.fn.matchstr(curl_out, [[^curl[^\\n]*]])\n+\n+    if vim.v.shell_error == 0 then\n+      local lines = {}\n+      table.insert(lines, string.format('%s (%s)', curl_version, curl_path))\n+\n+      for line in vim.gsplit(curl_out, '\\n', { plain = true }) do\n+        if line ~= '' and not line:match('^curl') then\n+          table.insert(lines, line)\n+        end\n+      end\n+\n+      -- Add subtitle only if any env var is present\n+      local added_env_header = false\n+      for _, var in ipairs({\n+        'curl_ca_bundle',\n+        'curl_home',\n+        'curl_ssl_backend',\n+        'ssl_cert_dir',\n+        'ssl_cert_file',\n+        'https_proxy',\n+        'http_proxy',\n+        'all_proxy',\n+        'no_proxy',\n+      }) do\n+        ---@type string?\n+        local val = vim.env[var] or vim.env[var:upper()]\n+        if val then\n+          if not added_env_header then\n+            table.insert(lines, 'curl-related environment variables:')\n+            added_env_header = true\n+          end\n+          local shown_var = vim.env[var] and var or var:upper()\n+          table.insert(lines, string.format('  %s=%s', shown_var, val))\n+        end\n+      end\n+\n+      health.ok(table.concat(lines, '\\n'))\n+    else\n+      health.warn('curl is installed but failed to run `curl --version`', { curl_out })\n+    end\n+  else\n+    health.error('curl not found', {",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2163425634",
            "id": 2163425634,
            "line": 492,
            "node_id": "PRRC_kwDOAPphoM6A80Fi",
            "original_commit_id": "ab3021a373c5c3c55f1a0efdb12465cdf301b732",
            "original_line": 492,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": 65,
            "pull_request_review_id": 2952933602,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163425634/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-24T09:19:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163425634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2163454334"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163454334"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe move this into the autocommand? \r\n\r\nPull out the callback as a local function; return `true` if `curl` is not found, which will delete the autocommand. This way only people actually using the `:e https://` will pay the cost of the check.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-24T09:33:02Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+vim.g.loaded_remote_file_loader = true\n+\n+-- Only load if curl is on the path\n+if vim.fn.executable('curl') ~= 1 then",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2163454334",
            "id": 2163454334,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6A87F-",
            "original_commit_id": "bea9ed613f77972710ae20d53860a4ede687abfe",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2952978839,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163454334/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-24T09:33:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163454334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2163457725"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163457725"
                }
            },
            "author_association": "MEMBER",
            "body": "`clear = true` is the default, so you can just put `group = vim.api.nvim_create_augroup('NetRemoteFile', {})` in the `create_autocmd` call. (You only need to bind it if you want to reuse it multiple times.)",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-24T09:34:45Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+vim.g.loaded_remote_file_loader = true\n+\n+-- Only load if curl is on the path\n+if vim.fn.executable('curl') ~= 1 then\n+  vim.api.nvim_echo({\n+    { 'Warning: `curl` not found; remote file loading disabled.', 'WarningMsg' },\n+  }, true, {})\n+  return\n+end\n+\n+-- Autocmd group for remote URLs\n+local aug = vim.api.nvim_create_augroup('NetRemoteFile', { clear = true })",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2163457725",
            "id": 2163457725,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6A8769",
            "original_commit_id": "bea9ed613f77972710ae20d53860a4ede687abfe",
            "original_line": 12,
            "original_position": 12,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2952984104,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163457725/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-24T09:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2163457725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171492343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171492343"
                }
            },
            "author_association": "MEMBER",
            "body": "use `vim.system():wait()`. that avoids fragile things like `vim.v.shell_error` :)",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:08:08Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171492343",
            "id": 2171492343,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bblf3",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 411,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": null,
            "pull_request_review_id": 2965804328,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171492343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:08:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171492343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171494138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171494138"
                }
            },
            "author_association": "MEMBER",
            "body": "is there a minimum version we want to check for? can use `vim.version` to parse it",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:08:48Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })\n+    local curl_version = vim.fn.matchstr(curl_out, [[^curl[^\\n]*]])\n+\n+    if vim.v.shell_error == 0 then\n+      local lines = {}\n+      table.insert(lines, string.format('%s (%s)', curl_version, curl_path))",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171494138",
            "id": 2171494138,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bbl76",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 416,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": null,
            "pull_request_review_id": 2965807241,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171494138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:08:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171494138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171496894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171496894"
                }
            },
            "author_association": "MEMBER",
            "body": "great idea, this kind of visibility is important",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:09:52Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })\n+    local curl_version = vim.fn.matchstr(curl_out, [[^curl[^\\n]*]])\n+\n+    if vim.v.shell_error == 0 then\n+      local lines = {}\n+      table.insert(lines, string.format('%s (%s)', curl_version, curl_path))\n+\n+      for line in vim.gsplit(curl_out, '\\n', { plain = true }) do\n+        if line ~= '' and not line:match('^curl') then\n+          table.insert(lines, line)\n+        end\n+      end\n+\n+      -- Add subtitle only if any env var is present\n+      local added_env_header = false\n+      for _, var in ipairs({\n+        'curl_ca_bundle',\n+        'curl_home',\n+        'curl_ssl_backend',\n+        'ssl_cert_dir',\n+        'ssl_cert_file',\n+        'https_proxy',\n+        'http_proxy',\n+        'all_proxy',\n+        'no_proxy',\n+      }) do\n+        ---@type string?\n+        local val = vim.env[var] or vim.env[var:upper()]\n+        if val then\n+          if not added_env_header then\n+            table.insert(lines, 'curl-related environment variables:')",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171496894",
            "id": 2171496894,
            "line": 479,
            "node_id": "PRRC_kwDOAPphoM6Bbmm-",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 479,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": 52,
            "pull_request_review_id": 2965811506,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171496894/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:09:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171496894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171506770"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171506770"
                }
            },
            "author_association": "MEMBER",
            "body": "it has been \"required\" since the beginning for e.g. spell and netrw. \r\n\r\nif we actually get reports from people that dont have curl and are bothered by the error, we can change to a warning.\r\n\r\nmeanwhile, I think error is probably the right designation because it's definitely something that needs attention from the user.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:13:17Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })\n+    local curl_version = vim.fn.matchstr(curl_out, [[^curl[^\\n]*]])\n+\n+    if vim.v.shell_error == 0 then\n+      local lines = {}\n+      table.insert(lines, string.format('%s (%s)', curl_version, curl_path))\n+\n+      for line in vim.gsplit(curl_out, '\\n', { plain = true }) do\n+        if line ~= '' and not line:match('^curl') then\n+          table.insert(lines, line)\n+        end\n+      end\n+\n+      -- Add subtitle only if any env var is present\n+      local added_env_header = false\n+      for _, var in ipairs({\n+        'curl_ca_bundle',\n+        'curl_home',\n+        'curl_ssl_backend',\n+        'ssl_cert_dir',\n+        'ssl_cert_file',\n+        'https_proxy',\n+        'http_proxy',\n+        'all_proxy',\n+        'no_proxy',\n+      }) do\n+        ---@type string?\n+        local val = vim.env[var] or vim.env[var:upper()]\n+        if val then\n+          if not added_env_header then\n+            table.insert(lines, 'curl-related environment variables:')\n+            added_env_header = true\n+          end\n+          local shown_var = vim.env[var] and var or var:upper()\n+          table.insert(lines, string.format('  %s=%s', shown_var, val))\n+        end\n+      end\n+\n+      health.ok(table.concat(lines, '\\n'))\n+    else\n+      health.warn('curl is installed but failed to run `curl --version`', { curl_out })\n+    end\n+  else\n+    health.error('curl not found', {",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171506770",
            "id": 2171506770,
            "in_reply_to_id": 2163425634,
            "line": 492,
            "node_id": "PRRC_kwDOAPphoM6BbpBS",
            "original_commit_id": "ab3021a373c5c3c55f1a0efdb12465cdf301b732",
            "original_line": 492,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": 65,
            "pull_request_review_id": 2965826636,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171506770/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:13:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171506770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171513335"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171513335"
                }
            },
            "author_association": "MEMBER",
            "body": "need a `@return` tag. maybe helpful to look at `vim.system` example https://github.com/neovim/neovim/blob/e518666f1db110abcfc899e1227da949998cdd82/runtime/lua/vim/_editor.lua#L130",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:15:21Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+--- Can either return the body or save it to a file.\n+---\n+--- @param url string The URL to fetch.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables curl verbose output.\n+---   - retry   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - output  (string|nil): If set, path to save response body instead of returning it.\n+--- @param on_exit? fun(err?: string, content?: string)\n+---   - Async mode if provided: always called as\n+---       - on_exit(err)           on failure\n+---       - on_exit(nil, content)  on success; if `opts.output` is set, `content` is nil\n+---   - Sync mode if omitted: returns\n+---       - (nil, err)             on failure\n+---       - (true, nil)            on success when `opts.output` is set\n+---       - (content, nil)         on success when returning the body",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171513335",
            "id": 2171513335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bbqn3",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 18,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2965836444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171513335/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:15:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171513335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171519674"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171519674"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: for sync mode would it make sense for the logic to define a `on_exit` and then pass it to `vim.system` ? that lets us have 1 codepath",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:17:29Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+--- Can either return the body or save it to a file.\n+---\n+--- @param url string The URL to fetch.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables curl verbose output.\n+---   - retry   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - output  (string|nil): If set, path to save response body instead of returning it.\n+--- @param on_exit? fun(err?: string, content?: string)\n+---   - Async mode if provided: always called as\n+---       - on_exit(err)           on failure\n+---       - on_exit(nil, content)  on success; if `opts.output` is set, `content` is nil\n+---   - Sync mode if omitted: returns\n+---       - (nil, err)             on failure\n+---       - (true, nil)            on success when `opts.output` is set\n+---       - (content, nil)         on success when returning the body\n+function M.request(url, opts, on_exit)\n+  vim.validate({\n+    url = { url, 'string' },\n+    opts = { opts, 'table', true },\n+    on_exit = { on_exit, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  -- Build curl command\n+  local args = { 'curl' }\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+  table.insert(args, '--location')\n+  table.insert(args, '--retry')\n+  table.insert(args, tostring(retry))\n+\n+  if opts.output then\n+    table.insert(args, '--output')\n+    table.insert(args, opts.output)\n+  end\n+\n+  table.insert(args, url)\n+\n+  -- Async mode\n+  if on_exit then\n+    vim.system(args, { text = true }, function(res)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171519674",
            "id": 2171519674,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BbsK6",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 52,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2965845927,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171519674/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:17:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171519674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171524168"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171524168"
                }
            },
            "author_association": "MEMBER",
            "body": "move to `runtime/plugin/nvim/net.lua`\r\n\r\nall builtin plugins should live in a \"nvim\" namespace. we shouldn't occupy a top-level name every time we add a builtin plugin. ",
            "commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "created_at": "2025-06-27T10:18:55Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171524168",
            "id": 2171524168,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6BbtRI",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": 1,
            "pull_request_review_id": 2965852677,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171524168/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-06-27T10:19:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171524168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171530125"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171530125"
                }
            },
            "author_association": "MEMBER",
            "body": "this isn't a legacy name (from netrw), right? see `:help dev-namespace-name`\r\n```suggestion\r\n  group = vim.api.nvim_create_augroup('nvim.net.remotefile', {}),\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:20:38Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+vim.g.loaded_remote_file_loader = true\n+\n+--- Callback for BufReadCmd on remote URLs.\n+--- @param args { buf: integer }\n+local function on_remote_read(args)\n+  if vim.fn.executable('curl') ~= 1 then\n+    vim.api.nvim_echo({\n+      { 'Warning: `curl` not found; remote URL loading disabled.', 'WarningMsg' },\n+    }, true, {})\n+    return true\n+  end\n+\n+  local bufnr = args.buf\n+  local url = vim.api.nvim_buf_get_name(bufnr)\n+  local view = vim.fn.winsaveview()\n+\n+  vim.api.nvim_echo({ { 'Fetching ' .. url .. ' …', 'MoreMsg' } }, true, {})\n+\n+  vim.net.request(\n+    url,\n+    { retry = 3 },\n+    vim.schedule_wrap(function(err, content)\n+      if err then\n+        vim.notify('Failed to fetch ' .. url .. ': ' .. tostring(err), vim.log.levels.ERROR)\n+        vim.fn.winrestview(view)\n+        return\n+      end\n+\n+      local lines = vim.split(content, '\\n', { plain = true })\n+      vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, lines)\n+\n+      vim.fn.winrestview(view)\n+      vim.api.nvim_echo({ { 'Loaded ' .. url, 'Normal' } }, true, {})\n+    end)\n+  )\n+end\n+\n+vim.api.nvim_create_autocmd('BufReadCmd', {\n+  group = vim.api.nvim_create_augroup('NetRemoteFile', {}),",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171530125",
            "id": 2171530125,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BbuuN",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2965861453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171530125/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:20:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171530125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171534262"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171534262"
                }
            },
            "author_association": "MEMBER",
            "body": "no need to mention implementation details here\r\n```suggestion\r\n  desc = 'Edit remote files (:edit https://example.com)',\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T10:21:42Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+vim.g.loaded_remote_file_loader = true\n+\n+--- Callback for BufReadCmd on remote URLs.\n+--- @param args { buf: integer }\n+local function on_remote_read(args)\n+  if vim.fn.executable('curl') ~= 1 then\n+    vim.api.nvim_echo({\n+      { 'Warning: `curl` not found; remote URL loading disabled.', 'WarningMsg' },\n+    }, true, {})\n+    return true\n+  end\n+\n+  local bufnr = args.buf\n+  local url = vim.api.nvim_buf_get_name(bufnr)\n+  local view = vim.fn.winsaveview()\n+\n+  vim.api.nvim_echo({ { 'Fetching ' .. url .. ' …', 'MoreMsg' } }, true, {})\n+\n+  vim.net.request(\n+    url,\n+    { retry = 3 },\n+    vim.schedule_wrap(function(err, content)\n+      if err then\n+        vim.notify('Failed to fetch ' .. url .. ': ' .. tostring(err), vim.log.levels.ERROR)\n+        vim.fn.winrestview(view)\n+        return\n+      end\n+\n+      local lines = vim.split(content, '\\n', { plain = true })\n+      vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, lines)\n+\n+      vim.fn.winrestview(view)\n+      vim.api.nvim_echo({ { 'Loaded ' .. url, 'Normal' } }, true, {})\n+    end)\n+  )\n+end\n+\n+vim.api.nvim_create_autocmd('BufReadCmd', {\n+  group = vim.api.nvim_create_augroup('NetRemoteFile', {}),\n+  pattern = { 'http://*', 'https://*' },\n+  desc = 'Load remote files via vim.net.request()',",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171534262",
            "id": 2171534262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bbvu2",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 41,
            "original_position": 41,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": null,
            "pull_request_review_id": 2965867840,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171534262/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T10:21:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171534262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171536990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171536990"
                }
            },
            "author_association": "MEMBER",
            "body": "But we already own the top-level namespace here: `$VIMRUNTIME`?\r\n\r\nThese files are different from `lua/` files (where namespace matters since they all share the global `package.path`) since they are not (meant to be) accessible directly but unconditionally run at startup. This is _not_ meant to be a \"bundled plugin\" but part of the setup for the builtin stdlib!",
            "commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "created_at": "2025-06-27T10:22:36Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171536990",
            "id": 2171536990,
            "in_reply_to_id": 2171524168,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6BbwZe",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": 1,
            "pull_request_review_id": 2965871971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171536990/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-06-27T10:26:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171536990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2171552443"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171552443"
                }
            },
            "author_association": "MEMBER",
            "body": "`$VIMRUNTIME/plugin` is merged with all other plugins discovered on 'runtimepath', so if there is a \"net\" plugin in the wild (for example), that conflicts with this \"net\" plugin.\r\n\r\nThis matters for e.g. vimscript `net#Foo()` vs `nvim#net#Foo()`. (and other things, even if the response is \"but vimscript who cares\")",
            "commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "created_at": "2025-06-27T10:26:48Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2171552443",
            "id": 2171552443,
            "in_reply_to_id": 2171524168,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6Bb0K7",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": 1,
            "pull_request_review_id": 2965896032,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171552443/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-06-27T10:28:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2171552443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2172098892"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2172098892"
                }
            },
            "author_association": "MEMBER",
            "body": "does `on_response` make sense as the name for this? \"exit\" is an implementation detail.  the fact that curl is used internally isn't relevant and shouldn't be surfaced in the request() interface (for now).",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-27T13:54:06Z",
            "diff_hunk": "@@ -4656,4 +4656,30 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_exit})                  *vim.net.request()*\n+    Makes an HTTP GET request to the given URL. Can either return the body or\n+    save it to a file.\n+\n+    Parameters: ~\n+      • {url}      (`string`) The URL to fetch.\n+      • {opts}     (`table?`) Optional parameters:\n+                   • verbose (boolean|nil): Enables curl verbose output.\n+                   • retry (integer|nil): Number of retries on transient\n+                     failures (default: 3).\n+                   • output (string|nil): If set, path to save response body\n+                     instead of returning it.\n+      • {on_exit}  (`fun(err?: string, content?: string)?`)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2172098892",
            "id": 2172098892,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bd5lM",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 4674,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2966678940,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2172098892/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T13:54:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2172098892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2172102343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2172102343"
                }
            },
            "author_association": "MEMBER",
            "body": "> This matters for e.g. vimscript net#Foo() vs nvim#net#Foo(). \r\n\r\nBut this is only relevant for `/autoload` (and `/lua`), _not_ `/plugin`.\r\n\r\nAnd the `runtimepath` will always have the full paths, so `$VIMRUNTIME/plugin/net.lua` and `.../net/plugin/<whatever>.lua` remain distinguishable (and both on `rtp`, no matter the subfolder we introduce).",
            "commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "created_at": "2025-06-27T13:55:59Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2172102343",
            "id": 2172102343,
            "in_reply_to_id": 2171524168,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6Bd6bH",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": 1,
            "pull_request_review_id": 2966685624,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2172102343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-06-27T13:58:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2172102343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173541914"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173541914"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Agree!",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-28T22:28:24Z",
            "diff_hunk": "@@ -4656,4 +4656,30 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_exit})                  *vim.net.request()*\n+    Makes an HTTP GET request to the given URL. Can either return the body or\n+    save it to a file.\n+\n+    Parameters: ~\n+      • {url}      (`string`) The URL to fetch.\n+      • {opts}     (`table?`) Optional parameters:\n+                   • verbose (boolean|nil): Enables curl verbose output.\n+                   • retry (integer|nil): Number of retries on transient\n+                     failures (default: 3).\n+                   • output (string|nil): If set, path to save response body\n+                     instead of returning it.\n+      • {on_exit}  (`fun(err?: string, content?: string)?`)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173541914",
            "id": 2173541914,
            "in_reply_to_id": 2172098892,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BjZ4a",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 4674,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2969017914,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173541914/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-28T22:28:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173541914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173542047"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173542047"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thank you for the suggestion!",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-28T22:29:18Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173542047",
            "id": 2173542047,
            "in_reply_to_id": 2171492343,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BjZ6f",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 411,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": null,
            "pull_request_review_id": 2969018064,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173542047/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-28T22:29:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173542047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173548373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173548373"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thank you!",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-28T23:04:35Z",
            "diff_hunk": "@@ -0,0 +1,78 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+--- Can either return the body or save it to a file.\n+---\n+--- @param url string The URL to fetch.\n+--- @param opts? table Optional parameters:\n+---   - verbose (boolean|nil): Enables curl verbose output.\n+---   - retry   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - output  (string|nil): If set, path to save response body instead of returning it.\n+--- @param on_exit? fun(err?: string, content?: string)\n+---   - Async mode if provided: always called as\n+---       - on_exit(err)           on failure\n+---       - on_exit(nil, content)  on success; if `opts.output` is set, `content` is nil\n+---   - Sync mode if omitted: returns\n+---       - (nil, err)             on failure\n+---       - (true, nil)            on success when `opts.output` is set\n+---       - (content, nil)         on success when returning the body\n+function M.request(url, opts, on_exit)\n+  vim.validate({\n+    url = { url, 'string' },\n+    opts = { opts, 'table', true },\n+    on_exit = { on_exit, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  -- Build curl command\n+  local args = { 'curl' }\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+  table.insert(args, '--location')\n+  table.insert(args, '--retry')\n+  table.insert(args, tostring(retry))\n+\n+  if opts.output then\n+    table.insert(args, '--output')\n+    table.insert(args, opts.output)\n+  end\n+\n+  table.insert(args, url)\n+\n+  -- Async mode\n+  if on_exit then\n+    vim.system(args, { text = true }, function(res)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173548373",
            "id": 2173548373,
            "in_reply_to_id": 2171519674,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BjbdV",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 52,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2969030129,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173548373/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-28T23:04:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173548373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173642403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173642403"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Here are the curl versions for every command we use in the implementation ([1](https://curl.se/docs/optionsall.html)):\r\n | command | version | year of release\r\n | ----------- | ----------- |----------- |\r\n|--silent (-s) | 4.0 | ~1998\r\n--fail (-f) | 4.0 | ~1998\r\n--output (-o) | 4.0 | ~1998\r\n--location (-L) | 4.9 | ~1998\r\n--show-error (-S) | 5.9 | ~1999\r\n--retry | 7.12 .3 | ~2004\r\n\r\nWe should be safe enforcing `7.12.3` as a minimum version for curl.\r\n\r\n(1): [https://curl.se/docs/optionsall.html](https://curl.se/docs/optionsall.html)",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-29T08:13:25Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })\n+    local curl_version = vim.fn.matchstr(curl_out, [[^curl[^\\n]*]])\n+\n+    if vim.v.shell_error == 0 then\n+      local lines = {}\n+      table.insert(lines, string.format('%s (%s)', curl_version, curl_path))",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173642403",
            "id": 2173642403,
            "in_reply_to_id": 2171494138,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bjyaj",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 416,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": null,
            "pull_request_review_id": 2969129544,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173642403/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-29T08:25:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173642403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173754322"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173754322"
                }
            },
            "author_association": "MEMBER",
            "body": "One door that needs to remain open is being able to cancel requests in the future. That means the async call will need to return some handle which can be operated on.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-29T13:09:37Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173754322",
            "id": 2173754322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BkNvS",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4668,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2969251542,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173754322/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-29T13:09:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173754322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173771046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173771046"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "How about returning the underlying `vim.system()` job from the async call, that way callers can use the full `vim.SystemObj` API e.g `:kill()` to cancel requests?",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-29T14:01:34Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173771046",
            "id": 2173771046,
            "in_reply_to_id": 2173754322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BkR0m",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4668,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2969268860,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173771046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-29T14:01:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173771046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173779776"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173779776"
                }
            },
            "author_association": "MEMBER",
            "body": "I think that's too much exposure. The fact this uses vim.system is an implementation detail, it could equally use libcurl.\n\nNot a concern for now, just need to keep the door open.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-29T14:31:07Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173779776",
            "id": 2173779776,
            "in_reply_to_id": 2173754322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BkT9A",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4668,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2969278435,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173779776/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-29T14:31:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173779776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173783539"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173783539"
                }
            },
            "author_association": "MEMBER",
            "body": "sure let's check for 7.12.3, for explicitness. and in case we need to bump it someday.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-29T14:43:54Z",
            "diff_hunk": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })\n+    local curl_version = vim.fn.matchstr(curl_out, [[^curl[^\\n]*]])\n+\n+    if vim.v.shell_error == 0 then\n+      local lines = {}\n+      table.insert(lines, string.format('%s (%s)', curl_version, curl_path))",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173783539",
            "id": 2173783539,
            "in_reply_to_id": 2171494138,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BkU3z",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 416,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/health/health.lua",
            "position": null,
            "pull_request_review_id": 2969282614,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173783539/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-29T14:43:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173783539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2173787588"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173787588"
                }
            },
            "author_association": "MEMBER",
            "body": "It's relevant for plugin/ autoload/, etc, because there is no other way to reason about which files \"belong\" to a plugin namespace. https://github.com/neovim/neovim/issues/34704\r\n\r\nIf `plugin/net.x` exists, the plugin \"name\" is \"net\". If `plugin/nvim/net.x` exists, the plugin \"name\" is \"nvim\". ",
            "commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "created_at": "2025-06-29T14:58:07Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2173787588",
            "id": 2173787588,
            "in_reply_to_id": 2171524168,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6BkV3E",
            "original_commit_id": "433d7cc78e21174ab181035e7e2dc19df76aabf4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/plugin/net.lua",
            "position": 1,
            "pull_request_review_id": 2969286523,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173787588/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-06-29T14:58:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2173787588",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174756300"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174756300"
                }
            },
            "author_association": "MEMBER",
            "body": "probably `file` is a more conventional name. \r\n```suggestion\r\n---   - `file`  (string|nil): File path to save the response body to. If set, the success value will be `true` instead of the response body.\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:31:22Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174756300",
            "id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoCXM",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970724437,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174756300/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:31:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174756300",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174764535"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174764535"
                }
            },
            "author_association": "MEMBER",
            "body": "This appears to match the convention of `:help lsp-handler` and luv (`vim.uv`) callbacks 👍 ",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:36:18Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: string|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174764535",
            "id": 2174764535,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoEX3",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 17,
            "original_position": 17,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970737242,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174764535/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:36:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174764535",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174766897"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174766897"
                }
            },
            "author_association": "MEMBER",
            "body": "the wording is kind of confusing, is this rewording correct?\r\n```suggestion\r\n--- @return string|boolean|nil Response body (sync) or `true` (async) on success; `nil` on failure\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:37:44Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: string|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.\n+--- @return string|boolean|nil In sync mode, returns the response body or `true` on success; otherwise `nil`",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174766897",
            "id": 2174766897,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoE8x",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 18,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970741019,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174766897/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:38:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174766897",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174768940"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174768940"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `output` or `output_path` is more conventional for CLI tools.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:39:06Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174768940",
            "id": 2174768940,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoFcs",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970744414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174768940/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:39:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174768940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174770055"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174770055"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- @return string|nil Error message on failure, or nil on success. (Always nil for async invocation.)\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:39:42Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: string|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.\n+--- @return string|boolean|nil In sync mode, returns the response body or `true` on success; otherwise `nil`\n+--- @return string|nil In sync mode, returns an error message on failure.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174770055",
            "id": 2174770055,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoFuH",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 19,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970746256,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174770055/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:39:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174770055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174772470"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174772470"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: list_extend ?",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:41:10Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: string|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.\n+--- @return string|boolean|nil In sync mode, returns the response body or `true` on success; otherwise `nil`\n+--- @return string|nil In sync mode, returns an error message on failure.\n+function M.request(url, opts, on_response)\n+  vim.validate({\n+    url = { url, 'string' },\n+    opts = { opts, 'table', true },\n+    on_response = { on_response, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  -- Build curl command\n+  local args = { 'curl' }\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+  table.insert(args, '--location')\n+  table.insert(args, '--retry')\n+  table.insert(args, tostring(retry))",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174772470",
            "id": 2174772470,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoGT2",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": 37,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970749945,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174772470/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-30T10:41:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174772470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174775216"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174775216"
                }
            },
            "author_association": "MEMBER",
            "body": "(not a blocker) Maybe this should be controlled by the 'verbose' option. Else we will need `verbose` flags on many functions. \r\n",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:42:59Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174775216",
            "id": 2174775216,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoG-w",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970754609,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174775216/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:43:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174775216",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174775549"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174775549"
                }
            },
            "author_association": "MEMBER",
            "body": "\r\n```suggestion\r\n---   - `verbose` (boolean|nil): Enables verbose output.\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:43:12Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174775549",
            "id": 2174775549,
            "in_reply_to_id": 2174775216,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoHD9",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970755183,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174775549/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:43:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174775549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174793336"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174793336"
                }
            },
            "author_association": "MEMBER",
            "body": "seems obvious that we will need a response object, not just the response text. so we should do that now. as we enhance request(), users will want to inspect other fields like headers, http code, etc. So let's do that now, even if currently we only have a `.text` field on it.\r\n```suggestion\r\n      • {on_response}  (`fun(err?: string, content?: table|boolean)?`)\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:54:02Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns\n+      immediately and invokes the callback with the result later.\n+\n+    Parameters: ~\n+      • {url}          (`string`) The URL for the request.\n+      • {opts}         (`table?`) Optional parameters:\n+                       • `verbose` (boolean|nil): Enables curl verbose output.\n+                       • `retry` (integer|nil): Number of retries on transient\n+                         failures (default: 3).\n+                       • `output` (string|nil): A file path to save the\n+                         response body to. If set, the success value will be\n+                         `true` instead of the response body.\n+      • {on_response}  (`fun(err?: string, content?: string|boolean)?`)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174793336",
            "id": 2174793336,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoLZ4",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4680,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2970784838,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174793336/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:54:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174793336",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174794660"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174794660"
                }
            },
            "author_association": "MEMBER",
            "body": "see https://github.com/neovim/neovim/pull/34140/files#r2174793336 , should return a `{ text: string }` object rather than `string`.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:54:47Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns\n+      immediately and invokes the callback with the result later.\n+\n+    Parameters: ~\n+      • {url}          (`string`) The URL for the request.\n+      • {opts}         (`table?`) Optional parameters:\n+                       • `verbose` (boolean|nil): Enables curl verbose output.\n+                       • `retry` (integer|nil): Number of retries on transient\n+                         failures (default: 3).\n+                       • `output` (string|nil): A file path to save the\n+                         response body to. If set, the success value will be\n+                         `true` instead of the response body.\n+      • {on_response}  (`fun(err?: string, content?: string|boolean)?`)\n+                       Optional callback for async execution. It is invoked\n+                       with `(err, nil)` on failure or `(nil, content)` on\n+                       success.\n+\n+    Return (multiple): ~\n+        (`string|boolean?`) In sync mode, returns the response body or `true`",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174794660",
            "id": 2174794660,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoLuk",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4686,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2970786921,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174794660/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:54:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174794660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174799330"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174799330"
                }
            },
            "author_association": "MEMBER",
            "body": "Honestly, it's probably wise to take inspiration from https://requests.readthedocs.io/en/latest/ (or similar) for a lot of these API decisions.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T10:57:25Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns\n+      immediately and invokes the callback with the result later.\n+\n+    Parameters: ~\n+      • {url}          (`string`) The URL for the request.\n+      • {opts}         (`table?`) Optional parameters:\n+                       • `verbose` (boolean|nil): Enables curl verbose output.\n+                       • `retry` (integer|nil): Number of retries on transient\n+                         failures (default: 3).\n+                       • `output` (string|nil): A file path to save the\n+                         response body to. If set, the success value will be\n+                         `true` instead of the response body.\n+      • {on_response}  (`fun(err?: string, content?: string|boolean)?`)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174799330",
            "id": 2174799330,
            "in_reply_to_id": 2174793336,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoM3i",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4680,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2970794410,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174799330/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T10:57:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174799330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174805348"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174805348"
                }
            },
            "author_association": "MEMBER",
            "body": "yes, I've been referencing Go and nodejs fetch(), but sure that's good too.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T11:00:59Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns\n+      immediately and invokes the callback with the result later.\n+\n+    Parameters: ~\n+      • {url}          (`string`) The URL for the request.\n+      • {opts}         (`table?`) Optional parameters:\n+                       • `verbose` (boolean|nil): Enables curl verbose output.\n+                       • `retry` (integer|nil): Number of retries on transient\n+                         failures (default: 3).\n+                       • `output` (string|nil): A file path to save the\n+                         response body to. If set, the success value will be\n+                         `true` instead of the response body.\n+      • {on_response}  (`fun(err?: string, content?: string|boolean)?`)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174805348",
            "id": 2174805348,
            "in_reply_to_id": 2174793336,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoOVk",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4680,
            "original_position": 25,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2970804318,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174805348/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T11:00:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174805348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174868087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174868087"
                }
            },
            "author_association": "MEMBER",
            "body": "This isn't a cli tool (curl is an implementation detail). `file` is the conventional name in Nvim.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T11:37:55Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174868087",
            "id": 2174868087,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bodp3",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2970903314,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174868087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T11:38:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174868087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174948565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174948565"
                }
            },
            "author_association": "MEMBER",
            "body": "CLI tools and API's don't have a reason to name things differently, both are called in scripts.\r\n\r\n`file` in this context is ambiguous as it can be either an input or an output, particularly in this context of net requests as a payload could come from a file, e.g. with `vim.net.upload`. `file` can also refer to a file handle as opposed to a string.\r\n\r\n> `file` is the conventional name in Nvim.\r\n\r\nFrom I short skim, it seems we use `file` and `path` inconsistently. With the standout being:\r\n\r\n```\r\nvim.fs.basename({file})                                    *vim.fs.basename()*\r\n    Return the basename of the given path\r\n\r\n    Parameters: ~\r\n      • {file}  (`string?`) Path\r\n```\r\n\r\nWhere `file` is documented as `path`. Would be more concise to just have:\r\n\r\n```\r\n      • {path}  (`string?`)\r\n```\r\n\r\n- `io.open` uses `filename` which is an improvement over `file`, especially as there are functions/methods for `file` handles.\r\n\r\n- `vimfn.txt` uses all of `file`, `path`, `filename`, `fname`, and probably more.\r\n\r\n- `luv` uses `path` for full paths, and `filename` for basenames, which makes sense.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T12:22:56Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174948565",
            "id": 2174948565,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BoxTV",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2971026683,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174948565/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T12:26:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174948565",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174975202"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174975202"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok how about `outfile` or `outfilepath`? If we potentially need `infile` in the future.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T12:37:50Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174975202",
            "id": 2174975202,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bo3zi",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2971069909,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174975202/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T12:38:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174975202",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2174989088"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174989088"
                }
            },
            "author_association": "MEMBER",
            "body": "Both are improvements over `file`. I still prefer `output_path` (or maybe `outpath`) using `path`, as `filepath` isn't a term I'm used to, or one we even use(?), it reads to me the same as `textstring`. Maybe go with `outfile`.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T12:45:06Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2174989088",
            "id": 2174989088,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Bo7Mg",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2971091907,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174989088/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T12:45:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2174989088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2175028918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2175028918"
                }
            },
            "author_association": "MEMBER",
            "body": "either `outpath` or `outfile` SGTM",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-06-30T13:05:28Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2175028918",
            "id": 2175028918,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BpE62",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2971156369,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2175028918/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-30T13:05:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2175028918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178600139"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178600139"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I went with `outpath`!",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T21:51:15Z",
            "diff_hunk": "@@ -0,0 +1,71 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables curl verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `output`  (string|nil): A file path to save the response body to. If set, the success value will be `true` instead of the response body.",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178600139",
            "id": 2178600139,
            "in_reply_to_id": 2174756300,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6B2szL",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 15,
            "original_position": 15,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2977059590,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178600139/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T21:51:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178600139",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178608363"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178608363"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I left an explicit return path and a comment to implement this later. Do you think returning a small wrapper around `job:kill()` would work?\r\ne.g \r\n```lua\r\n{\r\n    cancel = function() job:kill('sigint') end\r\n}\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T21:59:01Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178608363",
            "id": 2178608363,
            "in_reply_to_id": 2173754322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6B2uzr",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4668,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2977071079,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178608363/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T21:59:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178608363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178619418"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178619418"
                }
            },
            "author_association": "MEMBER",
            "body": "I suppose this can be a followup, but mentioning before I forget:\r\n\r\nwe will need to define new `NVIM_TEST_INTEG` env var and document it here: https://github.com/neovim/neovim/blob/f731766474901e5e345e0ca630315ef69122e556/test/README.md?plain=1#L436\r\n\r\nIt should be disabled by default. When enabled, it enables these tests which make network calls. Can use `t.skip()` to guard these tests, or define something like `skip_integ` similar to :  https://github.com/neovim/neovim/blob/f731766474901e5e345e0ca630315ef69122e556/test/testutil.lua#L837",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T22:10:32Z",
            "diff_hunk": "@@ -0,0 +1,80 @@\n+local n = require('test.functional.testnvim')()\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()\n+    local content = exec_lua([[\n+      local done = false\n+      local result\n+      local M = require('vim.net')\n+\n+      M.request(\"https://httpbingo.org/anything\", { retry = 3 }, function(err, body)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178619418",
            "id": 2178619418,
            "line": 26,
            "node_id": "PRRC_kwDOAPphoM6B2xga",
            "original_commit_id": "f274f55eecb4d5bee5117e05cbb5d7beef688b15",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "test/functional/lua/net_spec.lua",
            "position": 26,
            "pull_request_review_id": 2977086308,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178619418/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T22:11:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178619418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178621286"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178621286"
                }
            },
            "author_association": "MEMBER",
            "body": "list_extend",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T22:12:23Z",
            "diff_hunk": "@@ -0,0 +1,82 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `outpath`  (string|nil): File path to save the response body to. If set, the `text` value in the Response Object will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: table|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.\n+--- @return table|boolean|nil Response Object { text: `string` | `boolean` } and `nil` on failure (sync).\n+--- (Always `true` for async invocation)\n+--- @return string|nil Error message on failure, or `nil` on success. (Always `nil` for async\n+--- invocation)\n+function M.request(url, opts, on_response)\n+  vim.validate({\n+    url = { url, 'string' },\n+    opts = { opts, 'table', true },\n+    on_response = { on_response, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  -- Build curl command\n+  local args = { 'curl' }\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+  vim.list_extend(args, { '--location', '--retry', tostring(retry) })\n+\n+  if opts.outpath then\n+    table.insert(args, '--output')\n+    table.insert(args, opts.outpath)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178621286",
            "id": 2178621286,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6B2x9m",
            "original_commit_id": "f274f55eecb4d5bee5117e05cbb5d7beef688b15",
            "original_line": 43,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2977089125,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178621286/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T22:12:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178621286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178627718"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178627718"
                }
            },
            "author_association": "MEMBER",
            "body": "Perfect.",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T22:17:40Z",
            "diff_hunk": "@@ -4656,4 +4656,36 @@ tohtml.tohtml({winid}, {opt})                         *tohtml.tohtml.tohtml()*\n         (`string[]`)\n \n \n+==============================================================================\n+Lua module: vim.net                                                  *vim.net*\n+\n+vim.net.request({url}, {opts}, {on_response})              *vim.net.request()*\n+    Makes an HTTP GET request to the given URL.\n+\n+    This function operates in two modes:\n+    • Synchronous (blocking): If `on_response` is omitted, it waits for the\n+      request to complete and returns the result.\n+    • Asynchronous (non-blocking): If `on_response` is provided, it returns",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178627718",
            "id": 2178627718,
            "in_reply_to_id": 2173754322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6B2ziG",
            "original_commit_id": "075969f4689ae751df1c45a4e9371e1be82fdfae",
            "original_line": 4668,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2977100635,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178627718/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T22:17:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178627718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178629351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178629351"
                }
            },
            "author_association": "MEMBER",
            "body": "Is `text=true` always valid? What happens if a `.jpg` url is requested ?\r\n\r\nMaybe we should drop `text=true` here, and return `{body: string}` and let the caller decide how to treat `body` for now. (Note: Lua strings can have binary data.)",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T22:19:29Z",
            "diff_hunk": "@@ -0,0 +1,81 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `outpath`  (string|nil): File path to save the response body to. If set, the `text` value in the Response Object will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: table|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.\n+--- @return table|boolean|nil Response Object { text: `string` | `boolean` } and `nil` on failure (sync).\n+--- (Always `true` for async invocation)\n+--- @return string|nil Error message on failure, or `nil` on success. (Always `nil` for async\n+--- invocation)\n+function M.request(url, opts, on_response)\n+  vim.validate({\n+    url = { url, 'string' },\n+    opts = { opts, 'table', true },\n+    on_response = { on_response, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  -- Build curl command\n+  local args = { 'curl' }\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+  vim.list_extend(args, { '--location', '--retry', tostring(retry) })\n+\n+  if opts.outpath then\n+    vim.list_extend(args, { '--output', opts.outpath })\n+  end\n+\n+  table.insert(args, url)\n+\n+  local job_result = {}\n+\n+  local function on_exit(res)\n+    local err_msg = nil\n+    local response_obj = nil\n+\n+    if res.code ~= 0 then\n+      err_msg = (res.stderr ~= '' and res.stderr)\n+        or string.format('Request failed with exit code %d', res.code)\n+    else\n+      response_obj = {\n+        text = opts.outpath and true or res.stdout,\n+      }\n+    end\n+\n+    job_result.err = err_msg\n+    job_result.response = response_obj\n+\n+    if on_response then\n+      on_response(job_result.err, job_result.response)\n+    end\n+  end\n+\n+  local job = vim.system(args, { text = true }, on_exit)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178629351",
            "id": 2178629351,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6B2z7n",
            "original_commit_id": "fd3dda52a9d13837bc30d642623fc4727cfd0a5a",
            "original_line": 70,
            "original_position": 70,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2977102617,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178629351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T22:19:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178629351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2178632378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178632378"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    local response = nil\r\n```",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-01T22:22:17Z",
            "diff_hunk": "@@ -0,0 +1,81 @@\n+local M = {}\n+\n+--- Makes an HTTP GET request to the given URL.\n+---\n+--- This function operates in two modes:\n+---   - Synchronous (blocking): If `on_response` is omitted, it waits for the\n+---   request to complete and returns the result.\n+---   - Asynchronous (non-blocking): If `on_response` is provided, it returns\n+---   immediately and invokes the callback with the result later.\n+---\n+--- @param url string The URL for the request.\n+--- @param opts? table Optional parameters:\n+---   - `verbose` (boolean|nil): Enables verbose output.\n+---   - `retry`   (integer|nil): Number of retries on transient failures (default: 3).\n+---   - `outpath`  (string|nil): File path to save the response body to. If set, the `text` value in the Response Object will be `true` instead of the response body.\n+--- @param on_response? fun(err?: string, content?: table|boolean) Optional callback for async execution.\n+---   It is invoked with `(err, nil)` on failure or `(nil, content)` on success.\n+--- @return table|boolean|nil Response Object { text: `string` | `boolean` } and `nil` on failure (sync).\n+--- (Always `true` for async invocation)\n+--- @return string|nil Error message on failure, or `nil` on success. (Always `nil` for async\n+--- invocation)\n+function M.request(url, opts, on_response)\n+  vim.validate({\n+    url = { url, 'string' },\n+    opts = { opts, 'table', true },\n+    on_response = { on_response, 'function', true },\n+  })\n+\n+  opts = opts or {}\n+  local retry = opts.retry or 3\n+\n+  -- Build curl command\n+  local args = { 'curl' }\n+  if opts.verbose then\n+    table.insert(args, '--verbose')\n+  else\n+    vim.list_extend(args, { '--silent', '--show-error', '--fail' })\n+  end\n+  vim.list_extend(args, { '--location', '--retry', tostring(retry) })\n+\n+  if opts.outpath then\n+    vim.list_extend(args, { '--output', opts.outpath })\n+  end\n+\n+  table.insert(args, url)\n+\n+  local job_result = {}\n+\n+  local function on_exit(res)\n+    local err_msg = nil\n+    local response_obj = nil",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2178632378",
            "id": 2178632378,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6B20q6",
            "original_commit_id": "fd3dda52a9d13837bc30d642623fc4727cfd0a5a",
            "original_line": 51,
            "original_position": 51,
            "original_start_line": null,
            "path": "runtime/lua/vim/net.lua",
            "position": null,
            "pull_request_review_id": 2977107345,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178632378/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-01T22:22:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2178632378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34140#discussion_r2179436083"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34140"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2179436083"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Noted!",
            "commit_id": "8e229a0659f649ce22263519ef92c559f565729d",
            "created_at": "2025-07-02T08:21:37Z",
            "diff_hunk": "@@ -0,0 +1,80 @@\n+local n = require('test.functional.testnvim')()\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()\n+    local content = exec_lua([[\n+      local done = false\n+      local result\n+      local M = require('vim.net')\n+\n+      M.request(\"https://httpbingo.org/anything\", { retry = 3 }, function(err, body)",
            "html_url": "https://github.com/neovim/neovim/pull/34140#discussion_r2179436083",
            "id": 2179436083,
            "in_reply_to_id": 2178619418,
            "line": 26,
            "node_id": "PRRC_kwDOAPphoM6B544z",
            "original_commit_id": "f274f55eecb4d5bee5117e05cbb5d7beef688b15",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "test/functional/lua/net_spec.lua",
            "position": 26,
            "pull_request_review_id": 2978211632,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2179436083/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-02T08:21:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2179436083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Let's please keep simple download and full requests separate. I'd prefer to finish the former before tackling the latter unless it's absolutely necessary to implement them together (which I don't see).",
            "created_at": "2025-05-23T09:48:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2903891415",
            "id": 2903891415,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6tFd3X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2903891415/reactions"
            },
            "updated_at": "2025-05-23T09:48:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2903891415",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Let's please keep simple download and full requests separate. I'd prefer to finish the former before tackling the latter unless it's absolutely necessary to implement them together (which I don't see).\r\n\r\nThat's my intention exactly! As we discussed in the minimal PR for `vim.net.download()` #33964 I'm fully aligned that we need to keep these efforts separate.  I opened this PR as a draft specifically so we can align the `vim.net.request()` scope and implementation, this way I can address early feedback. As soon as the `vim.net.download()` PR is merged I will rebase this branch as to remove the noise and ensure its a clean focused PR.\r\n\r\nI completely agree with the Bell System-style strategy (mentioned in parent issue #32280) for this initiative and understand that previous efforts struggled due to complexity, so I'm really trying to avoid that for future development.",
            "created_at": "2025-05-23T09:54:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2903910370",
            "id": 2903910370,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6tFifi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2903910370/reactions"
            },
            "updated_at": "2025-05-23T10:00:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2903910370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "FYI Core functionality is implemented but functional tests for new API function is in progress. \r\nIn the meantime can I have some feedback on why this tests might be failing? Locally it doesn't fail. @lewis6991 \r\n\r\n```\r\nruntime/lua/vim/_extui/messages.lua:229:13 [Warning] Can not infer type. (no-unknown)\r\n          local end_col = #mid + col\r\n                ^^^^^^^\r\nruntime/lua/vim/_extui/messages.lua:235:15 [Warning] Can not infer type. (no-unknown)\r\n            local ecol = math.min(end_col, start_line and #start_line or -1)\r\n                  ^^^^\r\nruntime/lua/vim/_extui/messages.lua:254:13 [Warning] Can not infer type. (no-unknown)\r\n          head, col = '', end_col\r\n                ^^^\r\n```",
            "created_at": "2025-05-25T10:29:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2907743194",
            "id": 2907743194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6tUKPa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2907743194/reactions"
            },
            "updated_at": "2025-05-25T10:29:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2907743194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@tampueroc you may just need to add explicit `@type` annotations for the lint failures.",
            "created_at": "2025-06-16T15:59:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2977195118",
            "id": 2977195118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6xdGRu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2977195118/reactions"
            },
            "updated_at": "2025-06-16T15:59:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2977195118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Let's please keep simple download and full requests separate.\r\n\r\nWhy are they separate? What is `vim.net.download()` doing that requires it to be separate from `fetch()` ?",
            "created_at": "2025-06-18T13:53:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2984316759",
            "id": 2984316759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6x4Q9X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984316759/reactions"
            },
            "updated_at": "2025-06-18T13:53:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984316759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why are they separate? What is vim.net.download() doing that requires it to be separate from fetch() ?\r\n\r\nNothing. `fetch == download` (PR you just closed), as opposed to full `GET`/`POST` requests needed for _editing_ over the network (this PR).",
            "created_at": "2025-06-18T14:46:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2984520105",
            "id": 2984520105,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6x5Cmp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984520105/reactions"
            },
            "updated_at": "2025-06-18T14:47:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984520105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Nothing. `fetch == download` (PR you just closed), as opposed to full `GET`/`POST` requests needed for _editing_ over the network (this PR).\r\n\r\nI am asking why we need anything more than fetch() aka request() aka download(). If we need more than just one (what I call fetch()), show a code example of how the interface would be very different.\r\n\r\nThe `Proposed API Usage` here and in https://github.com/neovim/neovim/pull/33964 looks basically the same.\r\n\r\nAsynchronous vs synchronous is not a reason to have two separate interfaces, nor is saving to a file.",
            "created_at": "2025-06-18T14:50:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2984530180",
            "id": 2984530180,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6x5FEE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984530180/reactions"
            },
            "updated_at": "2025-06-18T14:52:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984530180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  fetch() aka request() aka download()\r\n\r\nBecause these are **not** \"aka\". Requests are _much_ more general (`POST`!) than a simple `fetch`/`download`, and not having to wrangle request parameters for simply downloading a spell file is worth a (simple) convenience function. \r\n\r\n(The \"proposed API\" here is a bit sparse -- the big differentiator to `vim.net.fetch()` is hidden in the `get` at the end of the URL; other requests will need to be supported to allow _writing_ over the network.)",
            "created_at": "2025-06-18T15:03:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2984585452",
            "id": 2984585452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6x5Sjs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984585452/reactions"
            },
            "updated_at": "2025-06-18T15:05:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984585452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> not having to wrangle request parameters for simply downloading a spell file is worth a (simple) convenience function.\r\n\r\nBut it doesn't need to be a separate function. And the nearly-identical interfaces in both of these PRs confirm that.",
            "created_at": "2025-06-18T15:06:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2984613453",
            "id": 2984613453,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6x5ZZN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984613453/reactions"
            },
            "updated_at": "2025-06-18T15:06:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2984613453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "What is the final resolution regarding the separate functions for the `net` module? @clason @justinmk \r\nI'm happy to close the other pull request for `vim.net.download()` (#33964), incorporate the explicit download behaviour under `vim.net.request()` and extend the functions behaviour in future PRs if and only if is neccesary.",
            "created_at": "2025-06-20T13:35:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2991681942",
            "id": 2991681942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6yUXGW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2991681942/reactions"
            },
            "updated_at": "2025-06-20T13:35:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2991681942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@tampueroc to unblock you, my suggestion is\r\n\r\n- Continue with 1 PR for the low-level `request()`, and let's see what it actually looks like.\r\n- Do not attempt to support tons of curl features, just support the bare minimum that is needed to download a file. \r\n    - But keep the door open to add *more* curl features in the future.\r\n\r\nIf using this new function to download a file feels cumbersome, *then* we can either add a parameter to it that activates \"download to file\" mode, or add a simple `download()` function that *wraps* `request()`.",
            "created_at": "2025-06-20T14:00:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2991751692",
            "id": 2991751692,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6yUoIM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2991751692/reactions"
            },
            "updated_at": "2025-06-20T14:00:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2991751692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Note: I consolidated the logic from the already closed `vim.net.download()` PR (#33964) under the new `vim.net.request()` API so please shift any related discussion/feedback here.\r\n\r\nI'm opening this PR for review as it passes all the checks on my local machine but I'm having CI issues with an unrelated module when running a linting check:\r\n```\r\nruntime/lua/vim/treesitter/_fold.lua:172:11 [Warning] Can not infer type. (no-unknown)\r\n      adjusted = level0 - leave_line\r\n```\r\n\r\nI haven't touched that file, any pointers on why the build is tripping over `_fold.lua`?",
            "created_at": "2025-06-24T09:15:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2999498039",
            "id": 2999498039,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6yyLU3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2999498039/reactions"
            },
            "updated_at": "2025-06-24T09:15:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2999498039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is just luals's type inference being flaky. Ignore it for now.",
            "created_at": "2025-06-24T09:16:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-2999501806",
            "id": 2999501806,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6yyMPu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2999501806/reactions"
            },
            "updated_at": "2025-06-24T09:16:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2999501806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "After comments are resolved this LGTM, we can merge it and keep improving it.",
            "created_at": "2025-06-30T11:01:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-3018719656",
            "id": 3018719656,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM6z7gGo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018719656/reactions"
            },
            "updated_at": "2025-06-30T11:01:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018719656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hello, please let me know if we are all aligned with the return values for both `async` and `sync` modes. Might be a nitpick but I think the return behaviour when using the `outpath` option could be clearer.",
            "created_at": "2025-07-01T22:02:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-3025661366",
            "id": 3025661366,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM60V-22",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3025661366/reactions"
            },
            "updated_at": "2025-07-01T22:02:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3025661366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> let me know if we are all aligned with the return values for both `async` and `sync` modes. Might be a nitpick but I think the return behaviour when using the `outpath` option could be clearer.\r\n\r\nI kind of think we should drop the \"sync\" variant for now. Nvim 0.12 will have a `vim.async` module, and meanwhile users can use `vim.wait()`. So we only need async for now. Can revisit as a followup, but avoids noise in this PR.",
            "created_at": "2025-07-01T22:24:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/34140#issuecomment-3025701200",
            "id": 3025701200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
            "node_id": "IC_kwDOAPphoM60WIlQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3025701200/reactions"
            },
            "updated_at": "2025-07-01T22:24:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3025701200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34140/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34140/commits",
    "created_at": "2025-05-23T09:39:56Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34140.diff",
    "draft": false,
    "head": {
        "label": "tampueroc:net-request",
        "ref": "net-request",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/tampueroc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/tampueroc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/tampueroc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/tampueroc/neovim/branches{/branch}",
            "clone_url": "https://github.com/tampueroc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/tampueroc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/tampueroc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/tampueroc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/tampueroc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/tampueroc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/tampueroc/neovim/contributors",
            "created_at": "2025-05-01T16:36:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/tampueroc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/tampueroc/neovim/downloads",
            "events_url": "https://api.github.com/repos/tampueroc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/tampueroc/neovim/forks",
            "full_name": "tampueroc/neovim",
            "git_commits_url": "https://api.github.com/repos/tampueroc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/tampueroc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/tampueroc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/tampueroc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/tampueroc/neovim/hooks",
            "html_url": "https://github.com/tampueroc/neovim",
            "id": 976180439,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/tampueroc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/tampueroc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/tampueroc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/tampueroc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/tampueroc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/tampueroc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/tampueroc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/tampueroc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOOi9U1w",
            "notifications_url": "https://api.github.com/repos/tampueroc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/tampueroc/neovim/pulls{/number}",
            "pushed_at": "2025-07-04T14:21:19Z",
            "releases_url": "https://api.github.com/repos/tampueroc/neovim/releases{/id}",
            "size": 321272,
            "ssh_url": "git@github.com:tampueroc/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/tampueroc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/tampueroc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/tampueroc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/tampueroc/neovim/subscription",
            "svn_url": "https://github.com/tampueroc/neovim",
            "tags_url": "https://api.github.com/repos/tampueroc/neovim/tags",
            "teams_url": "https://api.github.com/repos/tampueroc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/tampueroc/neovim/git/trees{/sha}",
            "updated_at": "2025-07-04T14:19:19Z",
            "url": "https://api.github.com/repos/tampueroc/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8e229a0659f649ce22263519ef92c559f565729d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
            "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
            "followers_url": "https://api.github.com/users/tampueroc/followers",
            "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
            "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/tampueroc",
            "id": 46233260,
            "login": "tampueroc",
            "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
            "organizations_url": "https://api.github.com/users/tampueroc/orgs",
            "received_events_url": "https://api.github.com/users/tampueroc/received_events",
            "repos_url": "https://api.github.com/users/tampueroc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/tampueroc",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34140",
    "id": 2539358980,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34140",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "978b620e39457a34c06655525f093664d7f2ae83",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6XW4sE",
    "number": 34140,
    "patch_url": "https://github.com/neovim/neovim/pull/34140.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34140/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8e229a0659f649ce22263519ef92c559f565729d",
    "title": "feat(net): add vim.net.request() and :e integration",
    "updated_at": "2025-07-06T20:31:39Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34140",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
        "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
        "followers_url": "https://api.github.com/users/tampueroc/followers",
        "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
        "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tampueroc",
        "id": 46233260,
        "login": "tampueroc",
        "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
        "organizations_url": "https://api.github.com/users/tampueroc/orgs",
        "received_events_url": "https://api.github.com/users/tampueroc/received_events",
        "repos_url": "https://api.github.com/users/tampueroc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tampueroc",
        "user_view_type": "public"
    }
}