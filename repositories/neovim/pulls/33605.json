{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33605/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33605/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33605"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33605"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33605/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/eab5c54a6319da2b961fa902353f12f0a79a14c8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6102,
            "forks_count": 6102,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1963,
            "open_issues_count": 1963,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-05-27T01:16:46Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 324248,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89828,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-05-27T01:20:04Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89828,
            "watchers_count": 89828,
            "web_commit_signoff_required": false
        },
        "sha": "7077c5929529b3ab8e64eb7f59244699e090f70b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This is the glob implementation mentioned in [Discussion #33570](https://github.com/neovim/neovim/discussions/33570). It’s intended to replace `vim.glob.to_lpeg`, while still using LPeg internally.\r\n\r\nThe implementation aims to adhere closely to the LSP 3.17.0 specification, providing a stricter and more intuitive interpretation where the spec allows for it. This enhances consistency, correctness, and performance, without adversely affecting common usage patterns.\r\n\r\n## Key Behavior Interpretations and Clarifications (LSP 3.17):\r\n\r\nThe following points detail how this implementation interprets specific glob patterns, addressing previous test case discrepancies. These interpretations aim for greater predictability and robustness, remaining within or clarifying the scope of the LSP 3.17 spec:\r\n\r\n- [x] **`match('*', '')` results in `true`**\r\n    *   **LSP 3.17 Spec:** States `*` matches \"one or more characters in a path segment.\"\r\n    *   **Resolution & Clarification:** While the literal spec text says \"one or more,\" this has been identified as a discrepancy with common glob behavior and VS Code's own implementation. This implementation aligns with the clarified understanding (see [LSP PR #2132](https://github.com/microsoft/language-server-protocol/pull/2132)) that `*` matches **zero or more characters**. The test has been updated accordingly.\r\n\r\n- [x] **`match('a**', 'abc')` results in `false`**\r\n    *   **LSP 3.17 Spec:** States `**` matches \"any number of path segments, including none.\"\r\n    *   **Interpretation:** This implementation adopts a stricter interpretation focusing on `**`'s role in matching *complete path segments*. Patterns like `a**` (where `**` is not clearly delineating path segments, i.e., not separated by slashes and adjacent to other characters within the same potential segment) are considered an ill-formed use of `**` by this parser. While the spec allows `**` to match \"none\" (zero segments), this implementation prioritizes well-defined segment boundaries for `**` usage to maintain a clear distinction from `*` (in-segment wildcard) and avoid ambiguity.\r\n\r\n- [x] **`match('**/', '/a/b/c')` results in `false`**\r\n    *   **LSP 3.17 Spec:** Defines `**` to match \"any number of path segments, including none.\" It does not explicitly detail the interaction of a trailing `/` in the pattern with inputs not ending in `/`.\r\n    *   **Interpretation:** The pattern `**/` is interpreted to require the input to also end with a path separator for a match, as the pattern explicitly includes it. Since the input `/a/b/c` ends with a character (`c`), it does not match. This behavior aligns with a direct reading of the pattern and is consistent with @stevearc's comment: \"I agree that if we look purely at the spec, I would _not_ expect these to match.\"\r\n\r\n- [x] **`match('{}', '')` and `match('{a}', 'a')` are not treated as valid glob alternations**\r\n    *   **LSP 3.17 Spec:** States `{}` is \"to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files).\" The example provided uses a comma. The spec does not explicitly define behavior for `{}` or `{a}` (without commas) as alternation mechanisms.\r\n    *   **Interpretation:** For braces `{}` to signify alternation, this implementation requires them to contain **at least one comma** (e.g., `{a,b}`, `{,a}`). This aligns with common brace expansion definitions (e.g., Rosetta Code) and ensures the \"group conditions\" feature for alternation is unambiguous. Patterns like `{}` or `{a}` (without a comma) are not considered valid glob alternation syntax by this parser. (@stevearc acknowledged the spec doesn't enforce contents for `{}`, viewing it as an edge case). This stricter approach enhances predictability.\r\n\r\n- [x] **`match('{a,{b,c}}', 'c')` results in `true`**\r\n    *   **LSP 3.17 Spec:** States `{}` is \"to group conditions.\" It does not explicitly mention or prohibit nesting of these groups.\r\n    *   **Interpretation:** Nested braces are supported as a natural extension of \"grouping conditions.\" This is a common and intuitive behavior for brace expansion. As @stevearc commented, \"The spec doesn't explicitly mention nesting, but I agree with the interpretation that this pattern _should_ match.\" Supporting nesting enhances the utility of brace grouping.\r\n\r\n---\r\n\r\nThese interpretations aim to make glob patterns more robust and easier to reason about, while staying consistent with the LSP 3.17 specification's intent and addressing areas where it is underspecified or has known discrepancies. The tests previously commented out have been updated to reflect these behaviors.\r\n\r\nThis new implementation also demonstrates significant improvements in correctness and performance compared to the previous `vim.glob.to_lpeg`, as shown by extensive testing (see discussion for detailed test results).\r\n\r\nPS: The heatmaps for correctness of glob matching proves that Peglob is great at accuracy and precision against glob test suite from Bun.js. (fig 5 in paper)\r\n![img](https://github.com/user-attachments/assets/d0263d49-1378-49e1-ab33-b9d396dff24f)\r\n\r\nRelevant documentation, code formatting, and test adjustments have been made based on review feedback.",
    "closed_at": "2025-05-22T07:24:50Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2059895244"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2059895244"
                }
            },
            "author_association": "MEMBER",
            "body": "Note that we target PUC Lua, not LuaJIT, so `bit` is not always available. Luckily, _we_ bundle `bit` so you can -- and should -- put `local bit = require('bit')` at the top of this file.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T09:29:57Z",
            "diff_hunk": "@@ -1,93 +1,363 @@\n-local lpeg = vim.lpeg\n-local P, S, V, R, B = lpeg.P, lpeg.S, lpeg.V, lpeg.R, lpeg.B\n-local C, Cc, Ct, Cf, Cmt = lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cf, lpeg.Cmt\n+--[[\n+Glob-to-LPeg Converter (Peglob)\n+This module converts glob patterns to LPeg patterns according to the LSP 3.17 specification:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\n+\n+Glob grammar overview:\n+- `*` to match one or more characters in a path segment\n+- `?` to match on one character in a path segment\n+- `**` to match any number of path segments, including none\n+- `{}` to group conditions (e.g. `*.{ts,js}` matches TypeScript and JavaScript files)\n+- `[]` to declare a range of characters to match in a path segment\n+  (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n+- `[!...]` to negate a range of characters to match in a path segment\n+  (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n+\n+Additional constraints:\n+- A Glob pattern must match an entire path, with partial matches\n+  considered failures.\n+- The pattern only determines success or failure, without specifying\n+  which parts correspond to which characters.\n+- A **path segment** is the portion of a path between two adjacent path\n+  separators (`/`), or between the start/end of the path and the nearest\n+  separator.\n+- The `**` (**globstar**) pattern matches zero or more path segments,\n+  including intervening separators (`/`). Within pattern strings, `**`\n+  must be delimited by path separators (`/`) or pattern boundaries and\n+  cannot be adjacent to any characters other than `/`. If `**` is not\n+  the final element, it must be followed by `/`.\n+- `{}` (**braced conditions**) contains valid Glob patterns as branches,\n+  separated by commas. Commas are exclusively used for separating\n+  branches and cannot appear within a branch for any other purpose.\n+  Nested `{}` structures are allowed, but `{}` must contain at least two\n+  branches—zero or one branch is not permitted.\n+- In `[]` or `[!...]`, a **character range** consists of character\n+  intervals (e.g., `a-z`) or individual characters (e.g., `w`). A range\n+  including `/` won’t match that character.\n+]]\n+\n+local m = vim.lpeg\n+local mt = getmetatable(m.P(0))\n+local re = vim.re\n \n local M = {}\n \n-local pathsep = P('/')\n+-- Basic patterns for matching glob components\n+local letter = m.P(1) - m.S(',*?[]{}/\\\\') -- Any character except special glob characters\n+local slash = m.P '/' * m.Cc(m.P '/') -- Path separator with capture\n+local notslash = m.P(1) - m.P '/' -- Any character except path separator\n+local notcomma = m.P(1) - m.S(',\\\\') -- Any character except comma and backslash\n+-- Handle EOF, considering whether we're in a segment or not\n+local eof = -1\n+  * m.Cb('inseg')\n+  / function(flag)\n+    if flag then\n+      return #m.P '/'\n+    else\n+      return m.P(-1)\n+    end\n+  end\n \n---- Parses a raw glob into an |lua-lpeg| pattern.\n----\n---- This uses glob semantics from LSP 3.17.0: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\n----\n---- Glob patterns can have the following syntax:\n---- - `*` to match one or more characters in a path segment\n---- - `?` to match on one character in a path segment\n---- - `**` to match any number of path segments, including none\n---- - `{}` to group conditions (e.g. `*.{ts,js}` matches TypeScript and JavaScript files)\n---- - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n---- - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n+--- @param p table Initial segment pattern data\n+--- @return table Segment structure with start pattern\n+local function start_seg(p)\n+  return { s = p[2], e = true, n = 0 }\n+end\n+\n+--- @param t table Segment structure\n+--- @param p any Pattern to look for\n+--- @return table Updated segment structure\n+local function lookfor(t, p)\n+  t.n = t.n + 1\n+  t[t.n] = p\n+  return t\n+end\n+\n+--- @param t table Segment structure\n+--- @return table Segment structure with end pattern\n+local function to_seg_end(t)\n+  t.e = notslash ^ 0\n+  return t\n+end\n+\n+--- Constructs a segment matching pattern from collected components\n ---\n----@param pattern string The raw glob pattern\n----@return vim.lpeg.Pattern pattern An |lua-lpeg| representation of the pattern\n-function M.to_lpeg(pattern)\n-  local function class(inv, ranges)\n-    local patt = R(unpack(vim.tbl_map(table.concat, ranges)))\n-    if inv == '!' then\n-      patt = P(1) - patt\n+--- @param t table Segment structure with patterns\n+--- @return vim.lpeg.Pattern Complete segment match pattern\n+local function end_seg(t)\n+  local seg_grammar = { 's' }\n+  if t.n > 0 then\n+    seg_grammar.s = t.s\n+    for i = 1, t.n do\n+      local rname = t[i][1]\n+      if not seg_grammar[rname] then\n+        -- Optimize search when deterministic first character is available\n+        if t[i].F then\n+          seg_grammar[rname] = t[i][2] + notslash * (notslash - m.P(t[i].F)) ^ 0 * m.V(rname)\n+        else\n+          seg_grammar[rname] = t[i][2] + notslash * m.V(rname)\n+        end\n+      end\n+      seg_grammar.s = seg_grammar.s * m.V(rname)\n+    end\n+    if t.e then\n+      seg_grammar.s = seg_grammar.s * t.e\n     end\n-    return patt\n+    return m.P(seg_grammar)\n+  else\n+    seg_grammar.s = t.s\n+    if t.e then\n+      seg_grammar.s = seg_grammar.s * t.e\n+    end\n+    return seg_grammar.s\n   end\n+end\n \n-  local function condlist(conds, after)\n-    return vim.iter(conds):fold(P(false), function(acc, cond)\n-      return acc + cond * after\n-    end)\n+---@param p vim.lpeg.Pattern Pattern directly after `**/`\n+---@return vim.lpeg.Pattern LPeg pattern for `**/p`\n+local function dseg(p)\n+  return m.P { p + notslash ^ 0 * m.P '/' * m.V(1) }\n+end\n+\n+local g = nil\n+\n+--- Multiplies conditions for braced expansion (Cartesian product)\n+---\n+--- @param a string|table First part\n+--- @param b string|table Second part\n+--- @return string|table Cartesian product of values\n+local function mul_cond(a, b)\n+  if type(a) == 'string' then\n+    if type(b) == 'string' then\n+      return a .. b\n+    elseif type(b) == 'table' then\n+      for i = 1, #b do\n+        b[i] = a .. b[i]\n+      end\n+      return b\n+    else\n+      return a\n+    end\n+  elseif type(a) == 'table' then\n+    if type(b) == 'string' then\n+      for i = 1, #a do\n+        a[i] = a[i] .. b\n+      end\n+      return a\n+    elseif type(b) == 'table' then\n+      local res = {}\n+      local idx = 0\n+      for i = 1, #a do\n+        for j = 1, #b do\n+          idx = idx + 1\n+          res[idx] = a[i] .. b[j]\n+        end\n+      end\n+      return res\n+    else\n+      return a\n+    end\n+  else\n+    return b\n   end\n+end\n \n-  local function mul(acc, m)\n-    return acc * m\n+--- Combines alternatives in braced patterns\n+---\n+--- @param a string|table First part\n+--- @param b string|table Second part\n+--- @return table Combined alternatives\n+local function add_cond(a, b)\n+  if type(a) == 'string' then\n+    if type(b) == 'string' then\n+      return { a, b }\n+    elseif type(b) == 'table' then\n+      table.insert(b, 1, a)\n+      return b\n+    end\n+  elseif type(a) == 'table' then\n+    if type(b) == 'string' then\n+      table.insert(a, b)\n+      return a\n+    elseif type(b) == 'table' then\n+      for i = 1, #b do\n+        table.insert(a, b[i])\n+        return a\n+      end\n+    end\n   end\n+end\n \n-  local function star(stars, after)\n-    return (-after * (P(1) - pathsep)) ^ #stars * after\n+--- Expands patterns handling segment boundaries\n+--- `#` prefix is added for sub-grammar to detect in-segment flag\n+---\n+---@param a table Array of patterns\n+---@param b string Tail string\n+---@param inseg boolean Whether inside a path segment\n+---@return vim.lpeg.Pattern Expanded pattern\n+local function expand(a, b, inseg)\n+  for i = 1, #a do\n+    if inseg then\n+      a[i] = '#' .. a[i]\n+    end\n+    a[i] = g:match(a[i] .. b)\n   end\n+  local res = a[1]\n+  for i = 2, #a do\n+    res = res + a[i]\n+  end\n+  return res\n+end\n+\n+--- Converts a UTF-8 character to its Unicode codepoint\n+---\n+---@param utf8_str string UTF-8 character\n+---@return number Codepoint value\n+local function codepoint(utf8_str)\n+  local codepoint = 0\n+  local byte_count = 0\n+\n+  for i = 1, #utf8_str do\n+    local byte = utf8_str:byte(i)\n+\n+    if byte_count ~= 0 then\n+      codepoint = bit.bor(bit.lshift(codepoint, 6), bit.band(byte, 0x3F))",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2059895244",
            "id": 2059895244,
            "line": 234,
            "node_id": "PRRC_kwDOAPphoM56x4HM",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 234,
            "original_position": 255,
            "original_start_line": null,
            "path": "runtime/lua/vim/glob.lua",
            "position": 270,
            "pull_request_review_id": 2793543811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2059895244/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T09:29:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2059895244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060117633"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060117633"
                }
            },
            "author_association": "MEMBER",
            "body": "`--- @brief`\r\n\r\n(And the text needs to be commented linewise for the docgen to work, I believe.)",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:05:24Z",
            "diff_hunk": "@@ -1,93 +1,363 @@\n-local lpeg = vim.lpeg\n-local P, S, V, R, B = lpeg.P, lpeg.S, lpeg.V, lpeg.R, lpeg.B\n-local C, Cc, Ct, Cf, Cmt = lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cf, lpeg.Cmt\n+--[[",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060117633",
            "id": 2060117633,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56yuaB",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 1,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/glob.lua",
            "position": null,
            "pull_request_review_id": 2793907870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060117633/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:05:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060117633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060139818"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060139818"
                }
            },
            "author_association": "MEMBER",
            "body": "this shouldn't be necessary. tests should cleanup after themselves. tests can use `finally()` (see existing examples) or `after()` / `after_each()`.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:20:09Z",
            "diff_hunk": "@@ -83,3 +83,4 @@ tags\n /contrib/result-*\n \n CMakeUserPresets.json\n+Xtest[_-]*",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060139818",
            "id": 2060139818,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56yz0q",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 88,
            "original_position": 4,
            "original_start_line": null,
            "path": ".gitignore",
            "position": null,
            "pull_request_review_id": 2793948920,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060139818/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:20:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060139818",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060141197"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060141197"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- Glob-to-LPeg Converter (Peglob)\r\n--- This module converts glob patterns to LPeg patterns according to the LSP 3.17 specification:\r\n--- https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\r\n```\r\n\r\nand so on",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:21:11Z",
            "diff_hunk": "@@ -1,93 +1,363 @@\n-local lpeg = vim.lpeg\n-local P, S, V, R, B = lpeg.P, lpeg.S, lpeg.V, lpeg.R, lpeg.B\n-local C, Cc, Ct, Cf, Cmt = lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cf, lpeg.Cmt\n+--[[\n+Glob-to-LPeg Converter (Peglob)\n+This module converts glob patterns to LPeg patterns according to the LSP 3.17 specification:\n+https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060141197",
            "id": 2060141197,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y0KN",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 4,
            "original_position": 7,
            "original_start_line": 2,
            "path": "runtime/lua/vim/glob.lua",
            "position": null,
            "pull_request_review_id": 2793951286,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060141197/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-25T12:21:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060141197",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060141916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060141916"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm about to work on it. The `@brief` annotation seems not a LuaCATS defined annotation. It's better this be documented. ",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:21:42Z",
            "diff_hunk": "@@ -1,93 +1,363 @@\n-local lpeg = vim.lpeg\n-local P, S, V, R, B = lpeg.P, lpeg.S, lpeg.V, lpeg.R, lpeg.B\n-local C, Cc, Ct, Cf, Cmt = lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cf, lpeg.Cmt\n+--[[",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060141916",
            "id": 2060141916,
            "in_reply_to_id": 2060117633,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y0Vc",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 1,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/glob.lua",
            "position": null,
            "pull_request_review_id": 2793952484,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060141916/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:27:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060141916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060143259"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060143259"
                }
            },
            "author_association": "MEMBER",
            "body": "why comment these instead of changing the assertion?",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:22:39Z",
            "diff_hunk": "@@ -134,28 +134,28 @@ describe('glob', function()\n     end)\n \n     it('should match {} groups', function()\n-      eq(true, match('{}', ''))\n-      eq(false, match('{}', 'a'))\n-      eq(true, match('a{}', 'a'))\n-      eq(true, match('{}a', 'a'))\n+      -- eq(true, match('{}', ''))",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060143259",
            "id": 2060143259,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y0qb",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 137,
            "original_position": 49,
            "original_start_line": null,
            "path": "test/functional/lua/glob_spec.lua",
            "position": null,
            "pull_request_review_id": 2793954565,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060143259/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:22:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060143259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060144751"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060144751"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Is that because I only ran the functional test? When I tried to commit, I saw Xtest files, so I added them to gitignore.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:23:45Z",
            "diff_hunk": "@@ -83,3 +83,4 @@ tags\n /contrib/result-*\n \n CMakeUserPresets.json\n+Xtest[_-]*",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060144751",
            "id": 2060144751,
            "in_reply_to_id": 2060139818,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y1Bv",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 88,
            "original_position": 4,
            "original_start_line": null,
            "path": ".gitignore",
            "position": null,
            "pull_request_review_id": 2793956962,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060144751/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:23:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060144751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060148637"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060148637"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Actually I was commenting to let you check what tests failed, and the behaviors could be discussed. When finalized, All these should be changed to correct results.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:26:23Z",
            "diff_hunk": "@@ -134,28 +134,28 @@ describe('glob', function()\n     end)\n \n     it('should match {} groups', function()\n-      eq(true, match('{}', ''))\n-      eq(false, match('{}', 'a'))\n-      eq(true, match('a{}', 'a'))\n-      eq(true, match('{}a', 'a'))\n+      -- eq(true, match('{}', ''))",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060148637",
            "id": 2060148637,
            "in_reply_to_id": 2060143259,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y1-d",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 137,
            "original_position": 49,
            "original_start_line": null,
            "path": "test/functional/lua/glob_spec.lua",
            "position": null,
            "pull_request_review_id": 2793962955,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060148637/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:26:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060148637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2060164226"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060164226"
                }
            },
            "author_association": "MEMBER",
            "body": "that could mean that some test didn't cleanup properly. that test should be fixed. this would just hide that problem.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-04-25T12:37:38Z",
            "diff_hunk": "@@ -83,3 +83,4 @@ tags\n /contrib/result-*\n \n CMakeUserPresets.json\n+Xtest[_-]*",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2060164226",
            "id": 2060164226,
            "in_reply_to_id": 2060139818,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM56y5yC",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 88,
            "original_position": 4,
            "original_start_line": null,
            "path": ".gitignore",
            "position": null,
            "pull_request_review_id": 2793989231,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060164226/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-04-25T12:37:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2060164226",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2099829253"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2099829253"
                }
            },
            "author_association": "MEMBER",
            "body": "^",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-05-21T09:33:25Z",
            "diff_hunk": "@@ -83,3 +83,4 @@ tags\n /contrib/result-*\n \n CMakeUserPresets.json\n+Xtest[_-]*",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2099829253",
            "id": 2099829253,
            "in_reply_to_id": 2060139818,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM59KNoF",
            "original_commit_id": "79809e2d3f65f7ccad3cc52ca5bc0d5c2fde19cd",
            "original_line": 88,
            "original_position": 4,
            "original_start_line": null,
            "path": ".gitignore",
            "position": null,
            "pull_request_review_id": 2857006885,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2099829253/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-21T09:33:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2099829253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2099838712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2099838712"
                }
            },
            "author_association": "MEMBER",
            "body": "was this renamed from `Elem` in the old impl? will that break any consumers? \r\n\r\nsame for any other cases. avoiding renaming stuff, even if it's not exactly the same behavior.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-05-21T09:38:32Z",
            "diff_hunk": "@@ -1,93 +1,375 @@\n-local lpeg = vim.lpeg\n-local P, S, V, R, B = lpeg.P, lpeg.S, lpeg.V, lpeg.R, lpeg.B\n-local C, Cc, Ct, Cf, Cmt = lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cf, lpeg.Cmt\n-\n-local M = {}\n-\n-local pathsep = P('/')\n-\n---- Parses a raw glob into an |lua-lpeg| pattern.\n+--- @brief Glob-to-LPeg Converter (Peglob)\n+--- This module converts glob patterns to LPeg patterns according to the LSP 3.17 specification:\n+--- https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\n ---\n---- This uses glob semantics from LSP 3.17.0: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\n----\n---- Glob patterns can have the following syntax:\n+--- Glob grammar overview:\n --- - `*` to match one or more characters in a path segment\n --- - `?` to match on one character in a path segment\n --- - `**` to match any number of path segments, including none\n --- - `{}` to group conditions (e.g. `*.{ts,js}` matches TypeScript and JavaScript files)\n---- - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n---- - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n+--- - `[]` to declare a range of characters to match in a path segment\n+---   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n+--- - `[!...]` to negate a range of characters to match in a path segment\n+---   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n ---\n----@param pattern string The raw glob pattern\n----@return vim.lpeg.Pattern pattern An |lua-lpeg| representation of the pattern\n-function M.to_lpeg(pattern)\n-  local function class(inv, ranges)\n-    local patt = R(unpack(vim.tbl_map(table.concat, ranges)))\n-    if inv == '!' then\n-      patt = P(1) - patt\n+--- Additional constraints:\n+--- - A Glob pattern must match an entire path, with partial matches\n+---   considered failures.\n+--- - The pattern only determines success or failure, without specifying\n+---   which parts correspond to which characters.\n+--- - A *path segment* is the portion of a path between two adjacent path\n+---   separators (`/`), or between the start/end of the path and the nearest\n+---   separator.\n+--- - The `**` (*globstar*) pattern matches zero or more path segments,\n+---   including intervening separators (`/`). Within pattern strings, `**`\n+---   must be delimited by path separators (`/`) or pattern boundaries and\n+---   cannot be adjacent to any characters other than `/`. If `**` is not\n+---   the final element, it must be followed by `/`.\n+--- - `{}` (*braced conditions*) contains valid Glob patterns as branches,\n+---   separated by commas. Commas are exclusively used for separating\n+---   branches and cannot appear within a branch for any other purpose.\n+---   Nested `{}` structures are allowed, but `{}` must contain at least two\n+---   branches—zero or one branch is not permitted.\n+--- - In `[]` or `[!...]`, a *character range* consists of character\n+---   intervals (e.g., `a-z`) or individual characters (e.g., `w`). A range\n+---   including `/` won’t match that character.\n+\n+--- @diagnostic disable: missing-fields\n+\n+local m = vim.lpeg\n+local mt = getmetatable(m.P(0))\n+local re = vim.re\n+local bit = require('bit')\n+\n+local M = {}\n+\n+-- Basic patterns for matching glob components\n+local letter = m.P(1) - m.S(',*?[]{}/\\\\') -- Any character except special glob characters\n+local slash = m.P '/' * m.Cc(m.P '/') -- Path separator with capture\n+local notslash = m.P(1) - m.P '/' -- Any character except path separator\n+local notcomma = m.P(1) - m.S(',\\\\') -- Any character except comma and backslash\n+\n+--- Handle EOF, considering whether we're in a segment or not\n+--- @type vim.lpeg.Pattern\n+local eof = -1\n+  * m.Cb('inseg')\n+  / function(flag)\n+    if flag then\n+      return #m.P '/'\n+    else\n+      return m.P(-1)\n     end\n-    return patt\n   end\n \n-  local function condlist(conds, after)\n-    return vim.iter(conds):fold(P(false), function(acc, cond)\n-      return acc + cond * after\n-    end)\n+---@alias pat_table { F: string?, [1]: string, [2]: vim.lpeg.Pattern }\n+---@alias seg_part { [string]: any, [integer]: pat_table }\n+\n+--- @param p pat_table Initial segment pattern data\n+--- @return seg_part Segment structure with start pattern\n+local function start_seg(p)\n+  return { s = p[2], e = true, n = 0 }\n+end\n+\n+--- @param t seg_part Segment structure\n+--- @param p pat_table Pattern to look for\n+--- @return table Updated segment structure\n+local function lookfor(t, p)\n+  t.n = t.n + 1\n+  t[t.n] = p\n+  return t\n+end\n+\n+--- @param t seg_part Segment structure\n+--- @return table Segment structure with end pattern\n+local function to_seg_end(t)\n+  t.e = notslash ^ 0\n+  return t\n+end\n+\n+--- Constructs a segment matching pattern from collected components\n+---\n+--- @param t seg_part Segment structure with patterns\n+--- @return vim.lpeg.Pattern Complete segment match pattern\n+local function end_seg(t)\n+  --- @type table<any,any>\n+  local seg_grammar = { 's' }\n+  if t.n > 0 then\n+    seg_grammar.s = t.s\n+    for i = 1, t.n do\n+      local rname = t[i][1]\n+      if not seg_grammar[rname] then\n+        -- Optimize search when deterministic first character is available\n+        if t[i].F then\n+          seg_grammar[rname] = t[i][2] + notslash * (notslash - m.P(t[i].F)) ^ 0 * m.V(rname)\n+        else\n+          seg_grammar[rname] = t[i][2] + notslash * m.V(rname)\n+        end\n+      end\n+      seg_grammar.s = seg_grammar.s * m.V(rname)\n+    end\n+    if t.e then\n+      seg_grammar.s = seg_grammar.s * t.e\n+    end\n+    return m.P(seg_grammar)\n+  else\n+    seg_grammar.s = t.s\n+    if t.e then\n+      seg_grammar.s = seg_grammar.s * t.e\n+    end\n+    return seg_grammar.s\n   end\n+end\n \n-  local function mul(acc, m)\n-    return acc * m\n+--- @param p vim.lpeg.Pattern Pattern directly after `**/`\n+--- @return vim.lpeg.Pattern LPeg pattern for `**/p`\n+local function dseg(p)\n+  return m.P { p + notslash ^ 0 * m.P '/' * m.V(1) }\n+end\n+\n+--- @type (vim.lpeg.Pattern|table)\n+local g = nil\n+\n+--- Multiplies conditions for braced expansion (Cartesian product)\n+---\n+--- @param a string|string[] First part\n+--- @param b string|string[] Second part\n+--- @return string|string[] Cartesian product of values\n+local function mul_cond(a, b)\n+  if type(a) == 'string' then\n+    if type(b) == 'string' then\n+      return a .. b\n+    elseif type(b) == 'table' then\n+      for i = 1, #b do\n+        b[i] = a .. b[i]\n+      end\n+      return b\n+    else\n+      return a\n+    end\n+  elseif type(a) == 'table' then\n+    if type(b) == 'string' then\n+      for i = 1, #a do\n+        a[i] = a[i] .. b\n+      end\n+      return a\n+    elseif type(b) == 'table' then\n+      --- @type string[]\n+      local res = {}\n+      local idx = 0\n+      for i = 1, #a do\n+        for j = 1, #b do\n+          idx = idx + 1\n+          res[idx] = a[i] .. b[j]\n+        end\n+      end\n+      return res\n+    else\n+      return a\n+    end\n+  else\n+    return b\n   end\n+end\n \n-  local function star(stars, after)\n-    return (-after * (P(1) - pathsep)) ^ #stars * after\n+--- Combines alternatives in braced patterns\n+---\n+--- @param a string|table First part\n+--- @param b string|table Second part\n+--- @return table #Combined alternatives\n+local function add_cond(a, b)\n+  if type(a) == 'string' then\n+    if type(b) == 'string' then\n+      return { a, b }\n+    elseif type(b) == 'table' then\n+      table.insert(b, 1, a)\n+      return b\n+    end\n+  elseif type(a) == 'table' then\n+    if type(b) == 'string' then\n+      table.insert(a, b)\n+      return a\n+    elseif type(b) == 'table' then\n+      for i = 1, #b do\n+        table.insert(a, b[i])\n+      end\n+      return a\n+    end\n+    --- @diagnostic disable-next-line: missing-return\n   end\n+end\n \n-  local function dstar(after)\n-    return (-after * P(1)) ^ 0 * after\n+--- Expands patterns handling segment boundaries\n+--- `#` prefix is added for sub-grammar to detect in-segment flag\n+---\n+---@param a (any[]|vim.lpeg.Pattern[]) Array of patterns\n+---@param b string Tail string\n+---@param inseg boolean Whether inside a path segment\n+---@return vim.lpeg.Pattern #Expanded pattern\n+local function expand(a, b, inseg)\n+  for i = 1, #a do\n+    if inseg then\n+      a[i] = '#' .. a[i]\n+    end\n+    a[i] = g:match(a[i] .. b)\n+  end\n+  local res = a[1]\n+  for i = 2, #a do\n+    res = res + a[i]\n   end\n+  return res\n+end\n+\n+--- Converts a UTF-8 character to its Unicode codepoint\n+---\n+--- @param utf8_str string UTF-8 character\n+--- @return number #Codepoint value\n+local function to_codepoint(utf8_str)\n+  local codepoint = 0\n+  local byte_count = 0\n+\n+  for i = 1, #utf8_str do\n+    local byte = utf8_str:byte(i)\n \n-  -- luacheck: push ignore s\n-  local function cut(_s, idx, match)\n-    return idx, match\n+    if byte_count ~= 0 then\n+      codepoint = bit.bor(bit.lshift(codepoint, 6), bit.band(byte, 0x3F))\n+      byte_count = byte_count - 1\n+    else\n+      if byte < 0x80 then\n+        codepoint = byte\n+      elseif byte < 0xE0 then\n+        byte_count = 1\n+        codepoint = bit.band(byte, 0x1F)\n+      elseif byte < 0xF0 then\n+        byte_count = 2\n+        codepoint = bit.band(byte, 0x0F)\n+      else\n+        byte_count = 3\n+        codepoint = bit.band(byte, 0x07)\n+      end\n+    end\n+\n+    if byte_count == 0 then\n+      break\n+    end\n   end\n-  -- luacheck: pop\n-\n-  --- @diagnostic disable-next-line: missing-fields\n-  local p = P({\n-    'Pattern',\n-    Pattern = V('Elem') ^ -1 * V('End'),\n-    Elem = Cmt(\n-      Cf(\n-        (V('DStar') + V('Star') + V('Ques') + V('Class') + V('CondList') + V('Literal'))\n-          * (V('Elem') + V('End')),\n-        mul\n-      ),\n-      cut\n-    ),\n-    DStar = (B(pathsep) + -B(P(1)))\n-      * P('**')\n-      * (pathsep * (V('Elem') + V('End')) + V('End'))\n-      / dstar,\n-    Star = C(P('*') ^ 1) * (V('Elem') + V('End')) / star,\n-    Ques = P('?') * Cc(P(1) - pathsep),\n-    Class = P('[')\n-      * C(P('!') ^ -1)\n-      * Ct(Ct(C(P(1)) * P('-') * C(P(1) - P(']'))) ^ 1 * P(']'))\n-      / class,\n-    CondList = P('{') * Ct(V('Cond') * (P(',') * V('Cond')) ^ 0) * P('}') * V('Pattern') / condlist,\n-    -- TODO: '*' inside a {} condition is interpreted literally but should probably have the same\n-    -- wildcard semantics it usually has.\n-    -- Fixing this is non-trivial because '*' should match non-greedily up to \"the rest of the\n-    -- pattern\" which in all other cases is the entire succeeding part of the pattern, but at the end of a {}\n-    -- condition means \"everything after the {}\" where several other options separated by ',' may\n-    -- exist in between that should not be matched by '*'.\n-    Cond = Cmt(Cf((V('Ques') + V('Class') + V('Literal') - S(',}')) ^ 1, mul), cut) + Cc(P(0)),\n-    Literal = P(1) / P,\n-    End = P(-1) * Cc(P(-1)),\n-  })\n-\n-  local lpeg_pattern = p:match(pattern) --[[@as vim.lpeg.Pattern?]]\n+\n+  return codepoint\n+end\n+\n+--- Pattern for matching UTF-8 characters\n+local cont = m.R('\\128\\191')\n+local any_utf8 = m.R('\\0\\127')\n+  + m.R('\\194\\223') * cont\n+  + m.R('\\224\\239') * cont * cont\n+  + m.R('\\240\\244') * cont * cont * cont\n+\n+--- Creates a character class pattern for glob ranges\n+--- @param inv string Inversion flag ('!' or '')\n+--- @param ranges (string|string[])[] Character ranges\n+--- @return vim.lpeg.Pattern #Character class pattern\n+local function class(inv, ranges)\n+  local patt = m.P(false)\n+  if #ranges == 0 then\n+    if inv == '!' then\n+      return m.P '[!]'\n+    else\n+      return m.P '[]'\n+    end\n+  end\n+  for _, v in ipairs(ranges) do\n+    patt = patt + (type(v) == 'table' and m.utfR(to_codepoint(v[1]), to_codepoint(v[2])) or m.P(v))\n+  end\n+  if inv == '!' then\n+    patt = m.P(1) - patt --[[@as vim.lpeg.Pattern]]\n+  end\n+  return patt - m.P '/'\n+end\n+\n+-- Parse constraints for optimizing braced conditions\n+local noopt_condlist = re.compile [[\n+  s <- '/' / '**' / . [^/*]* s\n+]]\n+\n+local opt_tail = re.compile [[\n+  s <- (!'**' [^{/])* &'/'\n+]]\n+\n+-- stylua: ignore start\n+--- @nodoc\n+--- @diagnostic disable\n+--- Main grammar for glob pattern matching\n+g = {\n+  'Glob',\n+  Glob     = (m.P'#' * m.Cg(m.Cc(true), 'inseg') + m.Cg(m.Cc(false), 'inseg')) *\n+             m.Cf(m.V'Element'^-1 * (slash * m.V'Element')^0 * (slash^-1 * eof), mt.__mul),\n+  -- Elements handle segments, globstar patterns\n+  Element  = m.V'DSeg' + m.V'DSEnd' + m.Cf(m.V'Segment' * (slash * m.V'Segment')^0 * (slash * eof + eof^-1), mt.__mul),",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2099838712",
            "id": 2099838712,
            "line": 306,
            "node_id": "PRRC_kwDOAPphoM59KP74",
            "original_commit_id": "26727db167f907ca8a2a8d9eee06b1a17da1f6cb",
            "original_line": 306,
            "original_position": 378,
            "original_start_line": null,
            "path": "runtime/lua/vim/glob.lua",
            "position": 379,
            "pull_request_review_id": 2857022637,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2099838712/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-21T09:38:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2099838712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33605#discussion_r2101565229"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33605"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2101565229"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did indeed reference some rule names from the old implementation. I hope this will help Neovim maintainers understand the new implementation more easily.\r\n\r\n> will that break any consumers?\r\n\r\nOf course not. Using `vim.glob.to_lpeg()` externally doesn't involve directly using the internal rules of the lpeg grammar; it uses the compiled pattern result from lpeg.\r\n\r\nI understand your concern. Because LPeg is not just a PEG implementation, but also functions as a parser combinator. In some libraries written with LPeg, there are indeed cases where lpeg is used to create reusable patterns that are combined to generate other patterns. Just like in my code:\r\n\r\n```lua\r\nlocal cont = m.R('\\128\\191')\r\nlocal any_utf8 = m.R('\\0\\127')\r\n  + m.R('\\194\\223') * cont\r\n  + m.R('\\224\\239') * cont * cont\r\n  + m.R('\\240\\244') * cont * cont * cont\r\n```\r\n\r\nHowever, I'm very certain that names like `Element`, `Class`, `CondList`, etc., will not be reused, because they are used directly in the `lpeg.P(<table>)` usage to create a grammar, and the rule names inside the grammar are not visible to the outside. I hope this explanation can address your concerns.",
            "commit_id": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
            "created_at": "2025-05-22T03:49:21Z",
            "diff_hunk": "@@ -1,93 +1,375 @@\n-local lpeg = vim.lpeg\n-local P, S, V, R, B = lpeg.P, lpeg.S, lpeg.V, lpeg.R, lpeg.B\n-local C, Cc, Ct, Cf, Cmt = lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cf, lpeg.Cmt\n-\n-local M = {}\n-\n-local pathsep = P('/')\n-\n---- Parses a raw glob into an |lua-lpeg| pattern.\n+--- @brief Glob-to-LPeg Converter (Peglob)\n+--- This module converts glob patterns to LPeg patterns according to the LSP 3.17 specification:\n+--- https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\n ---\n---- This uses glob semantics from LSP 3.17.0: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\n----\n---- Glob patterns can have the following syntax:\n+--- Glob grammar overview:\n --- - `*` to match one or more characters in a path segment\n --- - `?` to match on one character in a path segment\n --- - `**` to match any number of path segments, including none\n --- - `{}` to group conditions (e.g. `*.{ts,js}` matches TypeScript and JavaScript files)\n---- - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n---- - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n+--- - `[]` to declare a range of characters to match in a path segment\n+---   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n+--- - `[!...]` to negate a range of characters to match in a path segment\n+---   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n ---\n----@param pattern string The raw glob pattern\n----@return vim.lpeg.Pattern pattern An |lua-lpeg| representation of the pattern\n-function M.to_lpeg(pattern)\n-  local function class(inv, ranges)\n-    local patt = R(unpack(vim.tbl_map(table.concat, ranges)))\n-    if inv == '!' then\n-      patt = P(1) - patt\n+--- Additional constraints:\n+--- - A Glob pattern must match an entire path, with partial matches\n+---   considered failures.\n+--- - The pattern only determines success or failure, without specifying\n+---   which parts correspond to which characters.\n+--- - A *path segment* is the portion of a path between two adjacent path\n+---   separators (`/`), or between the start/end of the path and the nearest\n+---   separator.\n+--- - The `**` (*globstar*) pattern matches zero or more path segments,\n+---   including intervening separators (`/`). Within pattern strings, `**`\n+---   must be delimited by path separators (`/`) or pattern boundaries and\n+---   cannot be adjacent to any characters other than `/`. If `**` is not\n+---   the final element, it must be followed by `/`.\n+--- - `{}` (*braced conditions*) contains valid Glob patterns as branches,\n+---   separated by commas. Commas are exclusively used for separating\n+---   branches and cannot appear within a branch for any other purpose.\n+---   Nested `{}` structures are allowed, but `{}` must contain at least two\n+---   branches—zero or one branch is not permitted.\n+--- - In `[]` or `[!...]`, a *character range* consists of character\n+---   intervals (e.g., `a-z`) or individual characters (e.g., `w`). A range\n+---   including `/` won’t match that character.\n+\n+--- @diagnostic disable: missing-fields\n+\n+local m = vim.lpeg\n+local mt = getmetatable(m.P(0))\n+local re = vim.re\n+local bit = require('bit')\n+\n+local M = {}\n+\n+-- Basic patterns for matching glob components\n+local letter = m.P(1) - m.S(',*?[]{}/\\\\') -- Any character except special glob characters\n+local slash = m.P '/' * m.Cc(m.P '/') -- Path separator with capture\n+local notslash = m.P(1) - m.P '/' -- Any character except path separator\n+local notcomma = m.P(1) - m.S(',\\\\') -- Any character except comma and backslash\n+\n+--- Handle EOF, considering whether we're in a segment or not\n+--- @type vim.lpeg.Pattern\n+local eof = -1\n+  * m.Cb('inseg')\n+  / function(flag)\n+    if flag then\n+      return #m.P '/'\n+    else\n+      return m.P(-1)\n     end\n-    return patt\n   end\n \n-  local function condlist(conds, after)\n-    return vim.iter(conds):fold(P(false), function(acc, cond)\n-      return acc + cond * after\n-    end)\n+---@alias pat_table { F: string?, [1]: string, [2]: vim.lpeg.Pattern }\n+---@alias seg_part { [string]: any, [integer]: pat_table }\n+\n+--- @param p pat_table Initial segment pattern data\n+--- @return seg_part Segment structure with start pattern\n+local function start_seg(p)\n+  return { s = p[2], e = true, n = 0 }\n+end\n+\n+--- @param t seg_part Segment structure\n+--- @param p pat_table Pattern to look for\n+--- @return table Updated segment structure\n+local function lookfor(t, p)\n+  t.n = t.n + 1\n+  t[t.n] = p\n+  return t\n+end\n+\n+--- @param t seg_part Segment structure\n+--- @return table Segment structure with end pattern\n+local function to_seg_end(t)\n+  t.e = notslash ^ 0\n+  return t\n+end\n+\n+--- Constructs a segment matching pattern from collected components\n+---\n+--- @param t seg_part Segment structure with patterns\n+--- @return vim.lpeg.Pattern Complete segment match pattern\n+local function end_seg(t)\n+  --- @type table<any,any>\n+  local seg_grammar = { 's' }\n+  if t.n > 0 then\n+    seg_grammar.s = t.s\n+    for i = 1, t.n do\n+      local rname = t[i][1]\n+      if not seg_grammar[rname] then\n+        -- Optimize search when deterministic first character is available\n+        if t[i].F then\n+          seg_grammar[rname] = t[i][2] + notslash * (notslash - m.P(t[i].F)) ^ 0 * m.V(rname)\n+        else\n+          seg_grammar[rname] = t[i][2] + notslash * m.V(rname)\n+        end\n+      end\n+      seg_grammar.s = seg_grammar.s * m.V(rname)\n+    end\n+    if t.e then\n+      seg_grammar.s = seg_grammar.s * t.e\n+    end\n+    return m.P(seg_grammar)\n+  else\n+    seg_grammar.s = t.s\n+    if t.e then\n+      seg_grammar.s = seg_grammar.s * t.e\n+    end\n+    return seg_grammar.s\n   end\n+end\n \n-  local function mul(acc, m)\n-    return acc * m\n+--- @param p vim.lpeg.Pattern Pattern directly after `**/`\n+--- @return vim.lpeg.Pattern LPeg pattern for `**/p`\n+local function dseg(p)\n+  return m.P { p + notslash ^ 0 * m.P '/' * m.V(1) }\n+end\n+\n+--- @type (vim.lpeg.Pattern|table)\n+local g = nil\n+\n+--- Multiplies conditions for braced expansion (Cartesian product)\n+---\n+--- @param a string|string[] First part\n+--- @param b string|string[] Second part\n+--- @return string|string[] Cartesian product of values\n+local function mul_cond(a, b)\n+  if type(a) == 'string' then\n+    if type(b) == 'string' then\n+      return a .. b\n+    elseif type(b) == 'table' then\n+      for i = 1, #b do\n+        b[i] = a .. b[i]\n+      end\n+      return b\n+    else\n+      return a\n+    end\n+  elseif type(a) == 'table' then\n+    if type(b) == 'string' then\n+      for i = 1, #a do\n+        a[i] = a[i] .. b\n+      end\n+      return a\n+    elseif type(b) == 'table' then\n+      --- @type string[]\n+      local res = {}\n+      local idx = 0\n+      for i = 1, #a do\n+        for j = 1, #b do\n+          idx = idx + 1\n+          res[idx] = a[i] .. b[j]\n+        end\n+      end\n+      return res\n+    else\n+      return a\n+    end\n+  else\n+    return b\n   end\n+end\n \n-  local function star(stars, after)\n-    return (-after * (P(1) - pathsep)) ^ #stars * after\n+--- Combines alternatives in braced patterns\n+---\n+--- @param a string|table First part\n+--- @param b string|table Second part\n+--- @return table #Combined alternatives\n+local function add_cond(a, b)\n+  if type(a) == 'string' then\n+    if type(b) == 'string' then\n+      return { a, b }\n+    elseif type(b) == 'table' then\n+      table.insert(b, 1, a)\n+      return b\n+    end\n+  elseif type(a) == 'table' then\n+    if type(b) == 'string' then\n+      table.insert(a, b)\n+      return a\n+    elseif type(b) == 'table' then\n+      for i = 1, #b do\n+        table.insert(a, b[i])\n+      end\n+      return a\n+    end\n+    --- @diagnostic disable-next-line: missing-return\n   end\n+end\n \n-  local function dstar(after)\n-    return (-after * P(1)) ^ 0 * after\n+--- Expands patterns handling segment boundaries\n+--- `#` prefix is added for sub-grammar to detect in-segment flag\n+---\n+---@param a (any[]|vim.lpeg.Pattern[]) Array of patterns\n+---@param b string Tail string\n+---@param inseg boolean Whether inside a path segment\n+---@return vim.lpeg.Pattern #Expanded pattern\n+local function expand(a, b, inseg)\n+  for i = 1, #a do\n+    if inseg then\n+      a[i] = '#' .. a[i]\n+    end\n+    a[i] = g:match(a[i] .. b)\n+  end\n+  local res = a[1]\n+  for i = 2, #a do\n+    res = res + a[i]\n   end\n+  return res\n+end\n+\n+--- Converts a UTF-8 character to its Unicode codepoint\n+---\n+--- @param utf8_str string UTF-8 character\n+--- @return number #Codepoint value\n+local function to_codepoint(utf8_str)\n+  local codepoint = 0\n+  local byte_count = 0\n+\n+  for i = 1, #utf8_str do\n+    local byte = utf8_str:byte(i)\n \n-  -- luacheck: push ignore s\n-  local function cut(_s, idx, match)\n-    return idx, match\n+    if byte_count ~= 0 then\n+      codepoint = bit.bor(bit.lshift(codepoint, 6), bit.band(byte, 0x3F))\n+      byte_count = byte_count - 1\n+    else\n+      if byte < 0x80 then\n+        codepoint = byte\n+      elseif byte < 0xE0 then\n+        byte_count = 1\n+        codepoint = bit.band(byte, 0x1F)\n+      elseif byte < 0xF0 then\n+        byte_count = 2\n+        codepoint = bit.band(byte, 0x0F)\n+      else\n+        byte_count = 3\n+        codepoint = bit.band(byte, 0x07)\n+      end\n+    end\n+\n+    if byte_count == 0 then\n+      break\n+    end\n   end\n-  -- luacheck: pop\n-\n-  --- @diagnostic disable-next-line: missing-fields\n-  local p = P({\n-    'Pattern',\n-    Pattern = V('Elem') ^ -1 * V('End'),\n-    Elem = Cmt(\n-      Cf(\n-        (V('DStar') + V('Star') + V('Ques') + V('Class') + V('CondList') + V('Literal'))\n-          * (V('Elem') + V('End')),\n-        mul\n-      ),\n-      cut\n-    ),\n-    DStar = (B(pathsep) + -B(P(1)))\n-      * P('**')\n-      * (pathsep * (V('Elem') + V('End')) + V('End'))\n-      / dstar,\n-    Star = C(P('*') ^ 1) * (V('Elem') + V('End')) / star,\n-    Ques = P('?') * Cc(P(1) - pathsep),\n-    Class = P('[')\n-      * C(P('!') ^ -1)\n-      * Ct(Ct(C(P(1)) * P('-') * C(P(1) - P(']'))) ^ 1 * P(']'))\n-      / class,\n-    CondList = P('{') * Ct(V('Cond') * (P(',') * V('Cond')) ^ 0) * P('}') * V('Pattern') / condlist,\n-    -- TODO: '*' inside a {} condition is interpreted literally but should probably have the same\n-    -- wildcard semantics it usually has.\n-    -- Fixing this is non-trivial because '*' should match non-greedily up to \"the rest of the\n-    -- pattern\" which in all other cases is the entire succeeding part of the pattern, but at the end of a {}\n-    -- condition means \"everything after the {}\" where several other options separated by ',' may\n-    -- exist in between that should not be matched by '*'.\n-    Cond = Cmt(Cf((V('Ques') + V('Class') + V('Literal') - S(',}')) ^ 1, mul), cut) + Cc(P(0)),\n-    Literal = P(1) / P,\n-    End = P(-1) * Cc(P(-1)),\n-  })\n-\n-  local lpeg_pattern = p:match(pattern) --[[@as vim.lpeg.Pattern?]]\n+\n+  return codepoint\n+end\n+\n+--- Pattern for matching UTF-8 characters\n+local cont = m.R('\\128\\191')\n+local any_utf8 = m.R('\\0\\127')\n+  + m.R('\\194\\223') * cont\n+  + m.R('\\224\\239') * cont * cont\n+  + m.R('\\240\\244') * cont * cont * cont\n+\n+--- Creates a character class pattern for glob ranges\n+--- @param inv string Inversion flag ('!' or '')\n+--- @param ranges (string|string[])[] Character ranges\n+--- @return vim.lpeg.Pattern #Character class pattern\n+local function class(inv, ranges)\n+  local patt = m.P(false)\n+  if #ranges == 0 then\n+    if inv == '!' then\n+      return m.P '[!]'\n+    else\n+      return m.P '[]'\n+    end\n+  end\n+  for _, v in ipairs(ranges) do\n+    patt = patt + (type(v) == 'table' and m.utfR(to_codepoint(v[1]), to_codepoint(v[2])) or m.P(v))\n+  end\n+  if inv == '!' then\n+    patt = m.P(1) - patt --[[@as vim.lpeg.Pattern]]\n+  end\n+  return patt - m.P '/'\n+end\n+\n+-- Parse constraints for optimizing braced conditions\n+local noopt_condlist = re.compile [[\n+  s <- '/' / '**' / . [^/*]* s\n+]]\n+\n+local opt_tail = re.compile [[\n+  s <- (!'**' [^{/])* &'/'\n+]]\n+\n+-- stylua: ignore start\n+--- @nodoc\n+--- @diagnostic disable\n+--- Main grammar for glob pattern matching\n+g = {\n+  'Glob',\n+  Glob     = (m.P'#' * m.Cg(m.Cc(true), 'inseg') + m.Cg(m.Cc(false), 'inseg')) *\n+             m.Cf(m.V'Element'^-1 * (slash * m.V'Element')^0 * (slash^-1 * eof), mt.__mul),\n+  -- Elements handle segments, globstar patterns\n+  Element  = m.V'DSeg' + m.V'DSEnd' + m.Cf(m.V'Segment' * (slash * m.V'Segment')^0 * (slash * eof + eof^-1), mt.__mul),",
            "html_url": "https://github.com/neovim/neovim/pull/33605#discussion_r2101565229",
            "id": 2101565229,
            "in_reply_to_id": 2099838712,
            "line": 306,
            "node_id": "PRRC_kwDOAPphoM59Q1ct",
            "original_commit_id": "26727db167f907ca8a2a8d9eee06b1a17da1f6cb",
            "original_line": 306,
            "original_position": 378,
            "original_start_line": null,
            "path": "runtime/lua/vim/glob.lua",
            "position": 379,
            "pull_request_review_id": 2859684752,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2101565229/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-22T03:49:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2101565229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> 1. `eq(false, match('*', ''))`:\r\n>    `*` should match zero or more characters, including an empty string—so it's unclear why `false` is expected here.\r\n\r\nagreed. @stevearc ?\r\n\r\n\r\n\r\n> 3\\. `eq(true, match('**/', '/a/b/c'))`:\r\n>     The pattern ends with a slash, while the input ends with a character (`c`). It’s unclear why this is expected to match.\r\n\r\nI would expect it to match if `c` is a directory.\r\n\r\nThe other changes seem fine to me. If these don't match \"glob semantics from LSP 3.17.0\", then we can document the differences. Most of these changes seem like improvements.",
            "created_at": "2025-04-24T13:37:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2827666358",
            "id": 2827666358,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6oisO2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2827666358/reactions"
            },
            "updated_at": "2025-04-24T13:37:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2827666358",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Unfortunately, I think that we _do_ need the behavior to be standardized to \"glob semantics from LSP 3.17.0\". The main use case for `vim.glob` right now is interaction with LSP, both in Neovim core and in external plugins. It's being used to power LSP features. If the semantics differ from VS Code, then that _will_ get reported by end users as a bug (e.g. #28931). I don't see much value in a glob implementation that is different, because that that point we may as well just use `glob2regpat()` and have less code to maintain. ",
            "created_at": "2025-04-24T15:31:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2828060297",
            "id": 2828060297,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6okMaJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828060297/reactions"
            },
            "updated_at": "2025-04-24T15:31:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828060297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/506791?v=4",
                "events_url": "https://api.github.com/users/stevearc/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevearc/followers",
                "following_url": "https://api.github.com/users/stevearc/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevearc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevearc",
                "id": 506791,
                "login": "stevearc",
                "node_id": "MDQ6VXNlcjUwNjc5MQ==",
                "organizations_url": "https://api.github.com/users/stevearc/orgs",
                "received_events_url": "https://api.github.com/users/stevearc/received_events",
                "repos_url": "https://api.github.com/users/stevearc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevearc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevearc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevearc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The main use case for `vim.glob` right now is interaction with LSP\r\n\r\nYes. Are all of the cases listed above, specified by LSP? Many of these cases are likely confusing. For example does LSP require `eq(false, match('*', ''))` ?\r\n\r\nAnd another example, https://github.com/neovim/neovim/pull/29236 lost a feature but LSP spec doesn't actually specify it one way or another.",
            "created_at": "2025-04-24T15:56:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2828129583",
            "id": 2828129583,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6okdUv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828129583/reactions"
            },
            "updated_at": "2025-04-24T15:56:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828129583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The spec is here: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern\r\n```\r\nThe glob pattern to watch relative to the base path. Glob patterns can have\r\nthe following syntax:\r\n- `*` to match one or more characters in a path segment\r\n- `?` to match on one character in a path segment\r\n- `**` to match any number of path segments, including none\r\n- `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript\r\n  and JavaScript files)\r\n- `[]` to declare a range of characters to match in a path segment\r\n  (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\r\n- `[!...]` to negate a range of characters to match in a path segment\r\n  (e.g., `example.[!0-9]` to match on `example.a`, `example.b`,\r\n  but not `example.0`)\r\n```\r\n\r\n1. `eq(false, match('*', ''))`:\r\nThis appears to match the spec, because `*` should match \"one or more characters in a path segment\"\r\n\r\n2. `eq(true, match('a**', 'abc'))`:\r\nSame, because we expect `**` to match \"any number of path segments, including none\"\r\n\r\n3. `eq(true, match('**/', '/a/b/c'))`:\r\nI agree that if we look purely at the spec, I would _not_ expect these to match. Curious if that clashes with VS Code's behavior.\r\n\r\n4. `eq(true, match('{}', '')) and eq(true, match('{a}', 'a'))`:\r\nThe spec doesn't enforce that `{}` has any contents. I agree that it's a weird edge case, and if it's difficult to support I could see an argument for skipping it for now in the hope that users will never encounter it. However, we should be prepared to add support for it in the future if it turns out that users _do_ encounter this pattern in practice.\r\n\r\n5. `eq(false, match('{a,{b,c}}', 'c'))`:\r\nThe spec doesn't explicitly mention nesting, but I agree with the interpretation that this pattern _should_ match.\r\n\r\n\r\nCertainly the LSP definition of a glob is _still_ underspecified. My stance is that we should stick to their spec as much as possible, and when there is ambiguity try to match what VS Code does because that is what most LSP server authors are testing against. If there are any cases where the VS Code behavior does _not_ match their spec, I'm fully supportive of sticking to the spec and filing bug reports on VS Code.",
            "created_at": "2025-04-24T16:33:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2828223022",
            "id": 2828223022,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6ok0Iu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828223022/reactions"
            },
            "updated_at": "2025-04-24T16:33:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828223022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/506791?v=4",
                "events_url": "https://api.github.com/users/stevearc/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevearc/followers",
                "following_url": "https://api.github.com/users/stevearc/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevearc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevearc",
                "id": 506791,
                "login": "stevearc",
                "node_id": "MDQ6VXNlcjUwNjc5MQ==",
                "organizations_url": "https://api.github.com/users/stevearc/orgs",
                "received_events_url": "https://api.github.com/users/stevearc/received_events",
                "repos_url": "https://api.github.com/users/stevearc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevearc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevearc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevearc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Certainly the LSP definition of a glob is still underspecified. My stance is that we should stick to their spec as much as possible, and when there is ambiguity try to match what VS Code does because that is what most LSP server authors are testing against.\r\n\r\nNo, that is _not_ our policy -- that is and always has been to stick to the spec, _period_, exactly in order to force them to improve their spec where it's underspecified. \"VS Cute does this\" is very explicitly _not_ a valid argument for any Neovim behavior.",
            "created_at": "2025-04-24T16:36:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2828233123",
            "id": 2828233123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6ok2mj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828233123/reactions"
            },
            "updated_at": "2025-04-24T16:36:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2828233123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The new glob to lpeg converter is implemented with LSP 3.17 in mind as it was a motivation for me to be helpful to Neovim. Another consideration is that what's common practice of using glob. \r\n\r\nThe globstar `**` pattern is commonly used and I think it's worth setting a clear boundary between it and star `*` pattern. Barely from the LSP 3.17 spec, of course, zero segments are allowing globstars to be mixed with other in-segment patterns, but it at least is not good practice and is uncommon. In my opinion, this could be solved by clarifying in the spec, enforcing '**/' combinations on specific situations, which is also beneficial for optimizations.\r\n\r\nI'll also clarify in the next version of my paper:\r\n![img](https://github.com/user-attachments/assets/59435046-f7bc-4600-aeab-6bc2885ab2ac)\r\n",
            "created_at": "2025-04-24T23:42:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2829077797",
            "id": 2829077797,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6ooE0l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829077797/reactions"
            },
            "updated_at": "2025-04-25T01:36:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829077797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The original test result for correctness of current `vim.glob.to_lpeg` could be an reason for migrating to new implementation:\r\n\r\n```bash\r\n$ luajit testvimglob.lua \r\n  Assertion failed for pattern '*' matching '': expected true, got nil\r\n  Assertion failed for pattern 'a*' matching 'a': expected true, got nil\r\n  Assertion failed for pattern '*a' matching 'a': expected true, got nil\r\n  Assertion failed for pattern 'a\\*b' matching 'a*b': expected true, got nil\r\n  Assertion failed for pattern '[abc]' matching 'a': expected true, got nil\r\n  Assertion failed for pattern '[abc]' matching 'b': expected true, got nil\r\n  Assertion failed for pattern '[abc]' matching 'c': expected true, got nil\r\n  Assertion failed for pattern 'x[abc]x' matching 'xax': expected true, got nil\r\n  Assertion failed for pattern 'x[abc]x' matching 'xbx': expected true, got nil\r\n  Assertion failed for pattern 'x[abc]x' matching 'xcx': expected true, got nil\r\n  Assertion failed for pattern '[?]' matching '?': expected true, got nil\r\n  Assertion failed for pattern '[*]' matching '*': expected true, got nil\r\n  Assertion failed for pattern '[a-cx]' matching 'a': expected true, got nil\r\n  Assertion failed for pattern '[a-cx]' matching 'b': expected true, got nil\r\n  Assertion failed for pattern '[a-cx]' matching 'c': expected true, got nil\r\n  Assertion failed for pattern '[a-cx]' matching 'x': expected true, got nil\r\n  Assertion failed for pattern '[!abc]' matching 'd': expected true, got nil\r\n  Assertion failed for pattern '[\\!]' matching '!': expected true, got nil\r\nBasic pattern tests complete\r\nTest Summary: 35/53 tests passed\r\nAccuracy: 66.04%\r\nPrecision: 48.57%\r\n\r\n  Assertion failed for pattern '*' matching '': expected true, got nil\r\n  Assertion failed for pattern '*.ts' matching '.ts': expected true, got nil\r\n  Assertion failed for pattern 'a*b*c*d*e*' matching 'axbxcxdxe': expected true, got nil\r\n  Assertion failed for pattern 'a*b*[cy]*d*e*' matching 'axbxcxdxexxx': expected true, got nil\r\n  Assertion failed for pattern 'a*b*[cy]*d*e*' matching 'axbxyxdxexxx': expected true, got nil\r\n  Assertion failed for pattern 'a*b*[cy]*d*e*' matching 'axbxxxyxdxexxx': expected true, got nil\r\n  Assertion failed for pattern 'z*.js' matching 'z.js': expected true, got nil\r\n  Assertion failed for pattern '*/z*.js' matching 'a/z.js': expected true, got nil\r\n  Assertion failed for pattern 'a/z*.js' matching 'a/z.js': expected true, got nil\r\n  Assertion failed for pattern '*/*' matching '/ab': expected true, got nil\r\n  Assertion failed for pattern '*/*z*/*/*i' matching 'ab/zzz/ejkl/hi': expected true, got nil\r\n  Assertion failed for pattern 'a*.txt' matching 'a.txt': expected true, got nil\r\n  Assertion failed for pattern 'a/**/b' matching 'a/a/bb': expected false, got 7\r\n  Assertion failed for pattern 'a/**/b' matching 'a/bb': expected false, got 5\r\n  Assertion failed for pattern '**/' matching 'foo/bar': expected false, got 8\r\n  Assertion failed for pattern '**/' matching 'a/a': expected false, got 4\r\n  Assertion failed for pattern '**/' matching 'a/a': expected false, got 4\r\nStar tests complete\r\nTest Summary: 202/219 tests passed\r\nAccuracy: 92.24%\r\nPrecision: 89.29%\r\n\r\n  Assertion failed for pattern 'a/**/b' matching 'a/bb': expected false, got 5\r\n  Assertion failed for pattern 'a/**/' matching 'a/b': expected false, got 4\r\n  Assertion failed for pattern 'a/**/' matching 'a/b/c/d': expected false, got 8\r\n  Assertion failed for pattern 'a/**/' matching 'a/bb': expected false, got 5\r\n  Assertion failed for pattern 'a/**/' matching 'a/cb': expected false, got 5\r\n  Assertion failed for pattern '**/' matching 'a': expected false, got 2\r\n  Assertion failed for pattern '**/' matching 'a/b': expected false, got 4\r\n  Assertion failed for pattern '**/' matching 'a/b/c': expected false, got 6\r\n  Assertion failed for pattern '**/' matching 'a/b/c/d': expected false, got 8\r\nGlobstar tests complete\r\nTest Summary: 186/195 tests passed\r\nAccuracy: 95.38%\r\nPrecision: 100.00%\r\n\r\n  Assertion failed for pattern 'foo[{a,b}]baz' matching 'foo{baz': expected true, got nil\r\n  Assertion failed for pattern 'a{a,b/}*.txt' matching 'aa.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{a,b/}*.txt' matching 'ab/.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{,/}*.txt' matching 'a.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{,.*{foo,db},\\(bar\\)}.txt' matching 'a.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{,.*{foo,db},\\(bar\\)}.txt' matching 'a.db.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{,*.{foo,db},\\(bar\\)}.txt' matching 'a.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{,*.{foo,db},\\(bar\\)}.txt' matching 'a.db.txt': expected true, got nil\r\n  Assertion failed for pattern 'a{,.*{foo,db},\\(bar\\)}' matching 'a.db': expected true, got nil\r\n  Assertion failed for pattern 'a{,*.{foo,db},\\(bar\\)}' matching 'a.db': expected true, got nil\r\n  Assertion failed for pattern '{,.*{foo,db},\\(bar\\)}' matching '.db': expected true, got nil\r\n  Assertion failed for pattern '{*,*.{foo,db},\\(bar\\)}' matching 'a': expected true, got nil\r\n  Assertion failed for pattern '{,*.{foo,db},\\(bar\\)}' matching 'a.db': expected true, got nil\r\n  Assertion failed for pattern '*{*a,b}' matching 'xba': expected true, got nil\r\n  Assertion failed for pattern 'test.{j*g,p*g}' matching 'test.jpg': expected true, got nil\r\n  Assertion failed for pattern 'test.{j*g,p*g}' matching 'test.jpxxxg': expected true, got nil\r\n  Assertion failed for pattern 'test.{j*g,p*g}' matching 'test.jxg': expected true, got nil\r\n  Assertion failed for pattern 'test.{j*g,j*c}' matching 'test.jnc': expected true, got nil\r\n  Assertion failed for pattern 'test.{jpg,p*g}' matching 'test.png': expected true, got nil\r\n  Assertion failed for pattern 'test.{jpg,p*g}' matching 'test.pxg': expected true, got nil\r\n  Assertion failed for pattern 'test.{jp\\,g,png}' matching 'test.jp,g': expected true, got nil\r\n  Assertion failed for pattern 'test/{foo*,bar*}/baz' matching 'test/foooooo/baz': expected true, got nil\r\n  Assertion failed for pattern 'test/{foo*,bar*}/baz' matching 'test/barrrrr/baz': expected true, got nil\r\n  Assertion failed for pattern 'test/{*foo,*bar}/baz' matching 'test/xxxxfoo/baz': expected true, got nil\r\n  Assertion failed for pattern 'test/{*foo,*bar}/baz' matching 'test/xxxxbar/baz': expected true, got nil\r\n  Assertion failed for pattern 'a/{a{a,b},b}' matching 'a/aa': expected true, got nil\r\n  Assertion failed for pattern 'a/{a{a,b},b}' matching 'a/ab': expected true, got nil\r\n  Assertion failed for pattern 'a/{a{a,b},b}' matching 'a/b': expected true, got nil\r\n  Assertion failed for pattern 'a/{b,c[}]*}' matching 'a/b': expected true, got nil\r\n  Assertion failed for pattern 'a/{b,c[}]*}' matching 'a/c}xx': expected true, got nil\r\nBrace expansion tests complete\r\nTest Summary: 71/101 tests passed\r\nAccuracy: 70.30%\r\nPrecision: 58.33%\r\n\r\n  Assertion failed for pattern 'F[ë£a]' matching 'Fë': expected true, got nil\r\n  Assertion failed for pattern 'F[ë£a]' matching 'F£': expected true, got nil\r\n  Assertion failed for pattern 'F[ë£a]' matching 'Fa': expected true, got nil\r\nUnicode pattern tests complete\r\nTest Summary: 8/11 tests passed\r\nAccuracy: 72.73%\r\nPrecision: 70.00%\r\n\r\n  Assertion failed for pattern '**-**.**-**' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern '**-b**c-**' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern '**-b.c-**' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern '**.**-**' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern '**.**-d' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern '**.c-**' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern 'a-**.**-d' matching 'a-b.c-d': expected true, got nil\r\n  Assertion failed for pattern '**.**' matching 'a.b': expected true, got nil\r\n  Assertion failed for pattern '**.b' matching 'a.b': expected true, got nil\r\n  Assertion failed for pattern 'a.**' matching 'a.b': expected true, got nil\r\n  Assertion failed for pattern 'a/**b' matching 'a/b': expected true, got nil\r\n  Assertion failed for pattern 'a/**b**/c' matching 'a/aba/c': expected true, got nil\r\n  Assertion failed for pattern 'a/**b**/c' matching 'a/b/c': expected true, got nil\r\n  Assertion failed for pattern 'a/b/c**/*.js' matching 'a/b/c/d.js': expected true, got nil\r\nExtension tests complete\r\nTest Summary: 10/24 tests passed\r\nAccuracy: 41.67%\r\nPrecision: 17.65%\r\n```\r\n\r\nAnd here's my Peglob's result:\r\n\r\n```bash\r\n$ luajit testpeglob.lua \r\nBasic pattern tests complete\r\nTest Summary: 53/53 tests passed\r\nAccuracy: 100.00%\r\nPrecision: 100.00%\r\n\r\nStar tests complete\r\nTest Summary: 219/219 tests passed\r\nAccuracy: 100.00%\r\nPrecision: 100.00%\r\n\r\n  Assertion failed for pattern 'a/**/*' matching 'a/': expected false, got 3\r\n  Assertion failed for pattern 'a/**/**/*' matching 'a/': expected false, got 3\r\n  Assertion failed for pattern 'a/**/**/**/*' matching 'a/': expected false, got 3\r\nGlobstar tests complete\r\nTest Summary: 192/195 tests passed\r\nAccuracy: 98.46%\r\nPrecision: 100.00%\r\n\r\n  Invalid grammar for pattern 'a/{b,c[}]*}' matching 'a/b'\r\n  Invalid grammar for pattern 'a/{b,c[}]*}' matching 'a/c}xx'\r\nBrace expansion tests complete\r\nTest Summary: 99/101 tests passed\r\nAccuracy: 98.02%\r\nPrecision: 97.22%\r\n\r\nUnicode pattern tests complete\r\nTest Summary: 11/11 tests passed\r\nAccuracy: 100.00%\r\nPrecision: 100.00%\r\n\r\n  Invalid grammar for pattern '**-bc-**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**-**.**-**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**-b**c-**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**-b.c-**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**.**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**.**-**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**.**-d' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**.c-**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**b.**d' matching 'a-b.c-d'\r\n  Invalid grammar for pattern 'a**.c**' matching 'a-b.c-d'\r\n  Invalid grammar for pattern 'a-**.**-d' matching 'a-b.c-d'\r\n  Invalid grammar for pattern '**.**' matching 'a.b'\r\n  Invalid grammar for pattern '**.b' matching 'a.b'\r\n  Invalid grammar for pattern 'a.**' matching 'a.b'\r\n  Invalid grammar for pattern '**c' matching 'a/b/c'\r\n  Invalid grammar for pattern 'a/**b' matching 'a/b'\r\n  Invalid grammar for pattern 'a/**c' matching 'a/b/c'\r\n  Invalid grammar for pattern 'a/**z' matching 'a/b/c'\r\n  Invalid grammar for pattern 'a/**b**/c' matching 'a/b/c/b/c'\r\n  Invalid grammar for pattern 'a/**b**/c' matching 'a/aba/c'\r\n  Invalid grammar for pattern 'a/**b**/c' matching 'a/b/c'\r\n  Invalid grammar for pattern 'a/b/c**/*.js' matching 'a/b/c/d.js'\r\n  Invalid grammar for pattern 'a/b/c**/*.js' matching 'a/b/c/d/e.js'\r\n  Invalid grammar for pattern 'foo**bar' matching 'foo/baz/bar'\r\nExtension tests complete\r\nTest Summary: 0/24 tests passed\r\nAccuracy: 0.00%\r\nPrecision: 0.00%\r\n```\r\n\r\nAnd the performance could be boosted a lot for complex patterns. (The data isn't covered in the paper because less than half the tests match as expected)\r\n\r\n```bash\r\nPeglob\r\n{src,extensions}/**/test/**/{fixtures,browser,common}/**/*.{ts,js} time: 2.68 ms\r\n{extensions,src}/**/{media,images,icons}/**/*.{svg,png,gif,jpg} time: 2.36 ms\r\n{.github,build,test}/**/{workflows,azure-pipelines,integration,smoke}/**/*.{yml,yaml,json} time: 1.00 ms\r\nsrc/vs/{base,editor,platform,workbench}/test/{browser,common,node}/**/[a-z]*[tT]est.ts time: 1.27 ms\r\nsrc/vs/workbench/{contrib,services}/**/*{Editor,Workspace,Terminal}*.ts time: 2.89 ms\r\n{extensions,src}/**/{markdown,json,javascript,typescript}/**/*.{ts,json} time: 2.70 ms\r\n**/{electron-sandbox,electron-main,browser,node}/**/{*[sS]ervice*,*[cC]ontroller*}.ts time: 4.86 ms\r\n{src,extensions}/**/{common,browser,electron-sandbox}/**/*{[cC]ontribution,[sS]ervice}.ts time: 4.31 ms\r\nsrc/vs/{base,platform,workbench}/**/{test,browser}/**/*{[mM]odel,[cC]ontroller}*.ts time: 3.08 ms\r\nextensions/**/{browser,common,node}/{**/*[sS]ervice*,**/*[pP]rovider*}.ts time: 1.53 ms\r\n---\r\nNeoVim Glob\r\n{src,extensions}/**/test/**/{fixtures,browser,common}/**/*.{ts,js} (743 matched), expected 726\r\n{extensions,src}/**/{media,images,icons}/**/*.{svg,png,gif,jpg} time: 4.30 ms\r\n{.github,build,test}/**/{workflows,azure-pipelines,integration,smoke}/**/*.{yml,yaml,json} time: 1.29 ms\r\nsrc/vs/{base,editor,platform,workbench}/test/{browser,common,node}/**/[a-z]*[tT]est.ts (0 matched), expected 224\r\nsrc/vs/workbench/{contrib,services}/**/*{Editor,Workspace,Terminal}*.ts (126 matched), expected 155\r\n{extensions,src}/**/{markdown,json,javascript,typescript}/**/*.{ts,json} time: 4.08 ms\r\n**/{electron-sandbox,electron-main,browser,node}/**/{*[sS]ervice*,*[cC]ontroller*}.ts (0 matched), expected 419\r\n{src,extensions}/**/{common,browser,electron-sandbox}/**/*{[cC]ontribution,[sS]ervice}.ts (0 matched), expected 586\r\nsrc/vs/{base,platform,workbench}/**/{test,browser}/**/*{[mM]odel,[cC]ontroller}*.ts (0 matched), expected 95\r\nextensions/**/{browser,common,node}/{**/*Service*,**/*Provider*}.ts (0 matched), expected 3\r\n```",
            "created_at": "2025-04-25T03:26:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2829291379",
            "id": 2829291379,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6oo49z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829291379/reactions"
            },
            "updated_at": "2025-04-25T03:38:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829291379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You need to `make formatlua` and `make doc`.\r\n\r\n(And my point was not to argue for or against a specific choice, just saying that getting the specs clarified is the urgent first step here. If that codifies VS Code's behavior, so be it. It's just important to enforce the point that the _only_ source of truth is the specification, not VS Code.)",
            "created_at": "2025-04-25T08:06:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2829675599",
            "id": 2829675599,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6oqWxP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829675599/reactions"
            },
            "updated_at": "2025-04-25T08:06:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829675599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You can (and should) put the \"boilerplate\" doc text in the docstring for the module; see other e.g. LSP modules for the format. \r\n\r\n(And please squash your commits when you're done; we expect a commit message of the form `feat(lpeg): ...`. Consider adding details from your PR description as well (since the commit log will survive even if Github burns down. But that can wait until the PR is ready to be merged.)",
            "created_at": "2025-04-25T09:25:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2829874494",
            "id": 2829874494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6orHU-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829874494/reactions"
            },
            "updated_at": "2025-04-25T09:28:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2829874494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Now lint errors in source code has been solved. Still not sure whether my proposed glob spec has been accepted. The last 2 tasks for me are changing the tests and squashing the commits.\r\n\r\nWhen solving lint issues, I found LuaLS is tricky, `table<any,any>` isn't equivalent with `table`, and it's forcing me to write type like `string[]` than `table`. Even throwing error cannot suppress the `missing return` check. And I cannot understand why `m.P(1) - patt` cannot infer type.",
            "created_at": "2025-04-26T08:15:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2831953406",
            "id": 2831953406,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6ozC3-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2831953406/reactions"
            },
            "updated_at": "2025-04-26T08:37:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2831953406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm in favor of trying this out on `master`, that's the purpose of the \"development branch\" :)\r\n\r\nIf there are some high-risk changes that could be dropped/postponed, that would be helpful. In particular, I expect changing the behavior of `match('a**', 'abc'))` will cause a lot of bug reports, so if we can delay that change to a followup PR, that would greatly reduce the risk of this one.\r\n\r\n\r\n\r\n> I cannot understand why `m.P(1) - patt` cannot infer type.\r\n\r\nYou can use `--[[@as ...]]` or `--[[@type ...]]` to force a type. Many such examples in the codebase.",
            "created_at": "2025-04-26T13:23:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2832176494",
            "id": 2832176494,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6oz5Vu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2832176494/reactions"
            },
            "updated_at": "2025-04-26T13:23:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2832176494",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk @stevearc \r\n\r\nI looked into the behavior of `*` in VS Code’s glob implementation and found that it actually matches **zero** or more characters in a path segment—not one or more as LSP 3.17 states. Specifically:\r\n\r\n- In the VS Code source ([glob.ts](https://github.com/microsoft/vscode/blob/main/src/vs/base/common/glob.ts#L520)), the comment reads “`*` to match zero or more characters in a path segment.”  \r\n- The [“Glob Patterns” documentation on code.visualstudio.com](https://code.visualstudio.com/docs/editor/glob-patterns) also says “zero or more.”  \r\n- Inspecting the implementation:\r\n\r\n  ```ts\r\n  function starsToRegExp(starCount: number, isLastPattern?: boolean): string {\r\n    switch (starCount) {\r\n      case 0:\r\n        return '';\r\n      case 1:\r\n        // 1 star: match any number of characters except path separators (/ and \\), non-greedy\r\n        return `${NO_PATH_REGEX}*?`;\r\n      default:\r\n        // handler for **\r\n    }\r\n  }\r\n  ```\r\n\r\n  In regex syntax, `*` means “zero or more” of the preceding pattern, and the `?` makes it non-greedy.\r\n\r\nSo it looks like LSP 3.17’s description of `*` is simply a typo.",
            "created_at": "2025-04-27T01:10:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2832848981",
            "id": 2832848981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6o2dhV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2832848981/reactions"
            },
            "updated_at": "2025-04-27T01:10:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2832848981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So it looks like LSP 3.17’s description of * is simply a typo.\r\n\r\nNevertheless, it is the spec. And, again, we follow the spec and not VS Code. If you think the spec is in error, please raise an issue there.\r\n\r\nI'm setting this to draft until these issues are resolved. While this refactor looks like something we want in general, we do **not** want an implementation that diverges from the spec. That is non-negotiable.",
            "created_at": "2025-04-27T08:29:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2833323049",
            "id": 2833323049,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6o4RQp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833323049/reactions"
            },
            "updated_at": "2025-04-27T08:29:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833323049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If you think the spec is in error, please raise an issue there.\r\n\r\nTo unblock this, link to the issue from the lsp issue-tracker here. Then we can decide how to proceed. If they say \"the spec is wrong\" in the issue, that's good enough. We don't need to wait on them to update the spec.",
            "created_at": "2025-04-27T11:38:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2833412938",
            "id": 2833412938,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6o4nNK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833412938/reactions"
            },
            "updated_at": "2025-04-27T11:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2833412938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> To unblock this, link to the issue from the lsp issue-tracker here. Then we can decide how to proceed. If they say \"the spec is wrong\" in the issue, that's good enough. We don't need to wait on them to update the spec.\r\n\r\nThe typo in LSP 3.17 could be tracked at https://github.com/microsoft/language-server-protocol/pull/2132 . I'm hoping we could proceed soon.",
            "created_at": "2025-04-29T07:33:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2837799833",
            "id": 2837799833,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6pJWOZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2837799833/reactions"
            },
            "updated_at": "2025-04-29T07:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2837799833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Update from https://github.com/microsoft/language-server-protocol/pull/2132 shows that `*` means zero or more characters and maybe this draft could be reviewed.",
            "created_at": "2025-05-13T14:39:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2876796185",
            "id": 2876796185,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6reG0Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2876796185/reactions"
            },
            "updated_at": "2025-05-13T14:39:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2876796185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Since long comment chains quickly get hidden to the point of being useless, could you please edit your PR on the state of the \"five key cases\" (which I consider a list of blockers to be resolved, one way or another)? Checkmarked list could be helpful.",
            "created_at": "2025-05-13T14:41:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2876812939",
            "id": 2876812939,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6reK6L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2876812939/reactions"
            },
            "updated_at": "2025-05-13T14:41:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2876812939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Since long comment chains quickly get hidden to the point of being useless, could you please edit your PR on the state of the \"five key cases\" (which I consider a list of blockers to be resolved, one way or another)? Checkmarked list could be helpful.\r\n\r\n@clason Thanks for the nudge! I’ve updated the PR description to include the current state of the five key cases. Please let me know if anything needs further adjustment",
            "created_at": "2025-05-14T02:18:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2878439311",
            "id": 2878439311,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6rkX-P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2878439311/reactions"
            },
            "updated_at": "2025-05-14T02:18:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2878439311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Please add a news.txt description, either under PERFORMANCE or perhaps LUA. If this improves performance, give a hint about the most notable cases: `vim.glob performance for common patterns like \"foo\" improved by 5x\"`\r\n\r\n@justinmk Done adding a news.txt description. I also squashed my commits into a single commit.",
            "created_at": "2025-05-22T03:54:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/33605#issuecomment-2899823309",
            "id": 2899823309,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
            "node_id": "IC_kwDOAPphoM6s18rN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899823309/reactions"
            },
            "updated_at": "2025-05-22T03:54:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2899823309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33605/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33605/commits",
    "created_at": "2025-04-24T09:05:42Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33605.diff",
    "draft": false,
    "head": {
        "label": "brynne8:glob-opt",
        "ref": "glob-opt",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/brynne8/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/brynne8/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/brynne8/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/brynne8/neovim/branches{/branch}",
            "clone_url": "https://github.com/brynne8/neovim.git",
            "collaborators_url": "https://api.github.com/repos/brynne8/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/brynne8/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/brynne8/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/brynne8/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/brynne8/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/brynne8/neovim/contributors",
            "created_at": "2025-04-24T07:21:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/brynne8/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/brynne8/neovim/downloads",
            "events_url": "https://api.github.com/repos/brynne8/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/brynne8/neovim/forks",
            "full_name": "brynne8/neovim",
            "git_commits_url": "https://api.github.com/repos/brynne8/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/brynne8/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/brynne8/neovim/git/tags{/sha}",
            "git_url": "git://github.com/brynne8/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/brynne8/neovim/hooks",
            "html_url": "https://github.com/brynne8/neovim",
            "id": 971870446,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/brynne8/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/brynne8/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/brynne8/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/brynne8/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/brynne8/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/brynne8/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/brynne8/neovim/merges",
            "milestones_url": "https://api.github.com/repos/brynne8/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOOe2Q7g",
            "notifications_url": "https://api.github.com/repos/brynne8/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
                "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
                "followers_url": "https://api.github.com/users/brynne8/followers",
                "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
                "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/brynne8",
                "id": 7542439,
                "login": "brynne8",
                "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
                "organizations_url": "https://api.github.com/users/brynne8/orgs",
                "received_events_url": "https://api.github.com/users/brynne8/received_events",
                "repos_url": "https://api.github.com/users/brynne8/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/brynne8",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/brynne8/neovim/pulls{/number}",
            "pushed_at": "2025-05-25T09:09:42Z",
            "releases_url": "https://api.github.com/repos/brynne8/neovim/releases{/id}",
            "size": 314733,
            "ssh_url": "git@github.com:brynne8/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/brynne8/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/brynne8/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/brynne8/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/brynne8/neovim/subscription",
            "svn_url": "https://github.com/brynne8/neovim",
            "tags_url": "https://api.github.com/repos/brynne8/neovim/tags",
            "teams_url": "https://api.github.com/repos/brynne8/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/brynne8/neovim/git/trees{/sha}",
            "updated_at": "2025-04-24T07:21:20Z",
            "url": "https://api.github.com/repos/brynne8/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "eab5c54a6319da2b961fa902353f12f0a79a14c8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
            "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
            "followers_url": "https://api.github.com/users/brynne8/followers",
            "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
            "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/brynne8",
            "id": 7542439,
            "login": "brynne8",
            "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
            "organizations_url": "https://api.github.com/users/brynne8/orgs",
            "received_events_url": "https://api.github.com/users/brynne8/received_events",
            "repos_url": "https://api.github.com/users/brynne8/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/brynne8",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33605",
    "id": 2478491380,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33605",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "322a6d305d088420b23071c227af07b7c1beb41a",
    "merged_at": "2025-05-22T07:24:50Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6Tusb0",
    "number": 33605,
    "patch_url": "https://github.com/neovim/neovim/pull/33605.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33605/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/eab5c54a6319da2b961fa902353f12f0a79a14c8",
    "title": "feat(glob): New Glob Implementation Based on Peglob",
    "updated_at": "2025-05-22T07:25:02Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33605",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7542439?v=4",
        "events_url": "https://api.github.com/users/brynne8/events{/privacy}",
        "followers_url": "https://api.github.com/users/brynne8/followers",
        "following_url": "https://api.github.com/users/brynne8/following{/other_user}",
        "gists_url": "https://api.github.com/users/brynne8/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/brynne8",
        "id": 7542439,
        "login": "brynne8",
        "node_id": "MDQ6VXNlcjc1NDI0Mzk=",
        "organizations_url": "https://api.github.com/users/brynne8/orgs",
        "received_events_url": "https://api.github.com/users/brynne8/received_events",
        "repos_url": "https://api.github.com/users/brynne8/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/brynne8/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brynne8/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/brynne8",
        "user_view_type": "public"
    }
}