{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31207/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31207/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31207"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31207"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31207/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/5eb6c744f293105db2f814264cad6e0170e5b952"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6062,
            "forks_count": 6062,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1916,
            "open_issues_count": 1916,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-05-06T02:05:16Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 321796,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89216,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-05-06T02:05:21Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89216,
            "watchers_count": 89216,
            "web_commit_signoff_required": false
        },
        "sha": "081beb3659bd6d8efc3e977a160b1e72becbd8a2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Deprecated:\n- `client.request()` -> `client:request()`\n- `client.request_sync()` -> `client:request_sync()`\n- `client.notify()` -> `client:notify()`\n- `client.cancel_request()` -> `client:cancel_request()`\n- `client.stop()` -> `client:stop()`\n- `client.is_stopped()` `client:is_stopped()`\n- `client.supports_method()` -> `client:supports_method()`\n- `client.on_attach()` -> `client:on_attach()`\n\nFixed docgen to link class fields to the full function doc.\n",
    "closed_at": "2024-11-20T08:51:45Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843155406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843155406"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        (`boolean`) status indicates whether the request was successful. If it\r\n```\r\n```suggestion\r\n        (`boolean`) status inidcates whether the request was successful. If it\r\n```",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-15T03:56:03Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843155406",
            "id": 1843155406,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5t3FHO",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1183,
            "original_position": 134,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843155406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843155406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156199"
                }
            },
            "author_association": "MEMBER",
            "body": "Out of curiosity, is a zero-timeout allowed?",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-15T03:57:41Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156199",
            "id": 1843156199,
            "line": 1200,
            "node_id": "PRRC_kwDOAPphoM5t3FTn",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1200,
            "original_position": 151,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 151,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156694"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156694"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: For consistency I think it would be nice to have a separate `vim.lsp.ClientSupportsMethodOpts` type for this.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-15T03:58:49Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843156694",
            "id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5t3FbW",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156694/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843156694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1843158168"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843158168"
                }
            },
            "author_association": "MEMBER",
            "body": "I would also mention that it defaults to the current buffer.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-15T04:01:41Z",
            "diff_hunk": "@@ -650,15 +614,14 @@ end\n --- @param method string LSP method name.\n --- @param params? table LSP request params.\n --- @param handler? lsp.Handler Response |lsp-handler| for this method.\n---- @param bufnr integer Buffer handle (0 for current).\n---- @return boolean status, integer? request_id {status} is a bool indicating\n---- whether the request was successful. If it is `false`, then it will\n---- always be `false` (the client has shutdown). If it was\n---- successful, then it will return {request_id} as the\n---- second result. You can use this with `client.cancel_request(request_id)`\n+--- @param bufnr? integer Buffer handle (0 for current).",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1843158168",
            "id": 1843158168,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5t3FyY",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 638,
            "original_position": 190,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": null,
            "pull_request_review_id": 2437605176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843158168/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-15T04:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1843158168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1846984573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846984573"
                }
            },
            "author_association": "MEMBER",
            "body": "Would have to check what `vim.wait` does.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-18T17:25:13Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1846984573",
            "id": 1846984573,
            "in_reply_to_id": 1843156199,
            "line": 1200,
            "node_id": "PRRC_kwDOAPphoM5uFr99",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1200,
            "original_position": 151,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 151,
            "pull_request_review_id": 2443265856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846984573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T17:25:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846984573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1846990453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846990453"
                }
            },
            "author_association": "MEMBER",
            "body": "Turned this into a `bufnr` param instead. Can always be reverted to opts if a new option is needed.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-18T17:29:28Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1846990453",
            "id": 1846990453,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uFtZ1",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2443274709,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846990453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-18T17:29:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1846990453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1847627585"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1847627585"
                }
            },
            "author_association": "MEMBER",
            "body": "I would prefer keeping the `opts` parameter to avoid having breaking changes and/or deprecations later.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-19T04:35:42Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1847627585",
            "id": 1847627585,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uII9B",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2444263851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1847627585/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-19T04:35:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1847627585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1847823215"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1847823215"
                }
            },
            "author_association": "MEMBER",
            "body": "It can be done with an overload without breaking changes. There's no guarantee new opts will be added.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-19T07:52:20Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1847823215",
            "id": 1847823215,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uI4tv",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2444590232,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1847823215/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-19T07:52:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1847823215",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1848458197"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848458197"
                }
            },
            "author_association": "MEMBER",
            "body": "Okay I won’t die on that hill but I still would prefer us sticking to the more flexible API from the start.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-19T14:23:05Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1848458197",
            "id": 1848458197,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uLTvV",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2445629337,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848458197/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-19T14:23:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848458197",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1848490800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848490800"
                }
            },
            "author_association": "MEMBER",
            "body": "> I still would prefer us sticking to the more flexible API from the start.\r\n\r\nIf you take this to its logical conclusion, then every function should strictly take a single table field and be called as `foo { arg1, arg2, opt1=val1, opt2=val2 }` since that allows you to indefinitely add positional and named arguments. Some people might like that, but that's not the approach we've taken here (with the intentional exception of `vim.cmd`). Flexibility is important, but it doesn't trump everything; ergonomics and simplicity also matter.\r\n\r\nDespite that, tables are still supported, so it is no less flexible. The only difference is that the typical (and currently only) path is now simpler.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-19T14:40:56Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1848490800",
            "id": 1848490800,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uLbsw",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2445685098,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848490800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-19T14:40:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848490800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31207#discussion_r1848701411"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848701411"
                }
            },
            "author_association": "MEMBER",
            "body": "As I said, I don't feel strongly enough to block this PR. It was just a suggestion, but I trust your judgement.",
            "commit_id": "5eb6c744f293105db2f814264cad6e0170e5b952",
            "created_at": "2024-11-19T16:41:12Z",
            "diff_hunk": "@@ -1155,6 +1137,95 @@ Client:exec_cmd({command}, {context}, {handler})           *Client:exec_cmd()*\n       • {context}  (`{bufnr?: integer}?`)\n       • {handler}  (`lsp.Handler?`) only called if a server command\n \n+Client:is_stopped()                                      *Client:is_stopped()*\n+    Checks whether a client is stopped.\n+\n+    Return: ~\n+        (`boolean`) true if client is stopped or in the process of being\n+        stopped; false otherwise\n+\n+Client:notify({method}, {params})                            *Client:notify()*\n+    Sends a notification to an LSP server.\n+\n+    Parameters: ~\n+      • {method}  (`string`) LSP method name.\n+      • {params}  (`table?`) LSP request params.\n+\n+    Return: ~\n+        (`boolean`) status indicating if the notification was successful. If\n+        it is false, then the client has shutdown.\n+\n+Client:on_attach({bufnr})                                 *Client:on_attach()*\n+    Runs the on_attach function from the client's config if it was defined.\n+    Useful for buffer-local setup.\n+\n+    Parameters: ~\n+      • {bufnr}  (`integer`) Buffer number\n+\n+                                                            *Client:request()*\n+Client:request({method}, {params}, {handler}, {bufnr})\n+    Sends a request to the server.\n+\n+    This is a thin wrapper around {client.rpc.request} with some additional\n+    checks for capabilities and handler availability.\n+\n+    Parameters: ~\n+      • {method}   (`string`) LSP method name.\n+      • {params}   (`table?`) LSP request params.\n+      • {handler}  (`lsp.Handler?`) Response |lsp-handler| for this method.\n+      • {bufnr}    (`integer?`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`boolean`) status inidcates whether the request was successful. If it\n+        is `false`, then it will always be `false` (the client has shutdown).\n+        (`integer?`) request_id Can be used with |Client:cancel_request()|.\n+        `nil` is request failed.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_all()|\n+\n+                                                       *Client:request_sync()*\n+Client:request_sync({method}, {params}, {timeout_ms}, {bufnr})\n+    Sends a request to the server and synchronously waits for the response.\n+\n+    This is a wrapper around |Client:request()|\n+\n+    Parameters: ~\n+      • {method}      (`string`) LSP method name.\n+      • {params}      (`table`) LSP request params.\n+      • {timeout_ms}  (`integer?`) Maximum time in milliseconds to wait for a\n+                      result. Defaults to 1000\n+      • {bufnr}       (`integer`) Buffer handle (0 for current).\n+\n+    Return (multiple): ~\n+        (`{err: lsp.ResponseError?, result:any}?`) `result` and `err` from the\n+        |lsp-handler|. `nil` is the request was unsuccessful\n+        (`string?`) err On timeout, cancel or error, where `err` is a string\n+        describing the failure reason.\n+\n+    See also: ~\n+      • |vim.lsp.buf_request_sync()|\n+\n+Client:stop({force})                                           *Client:stop()*\n+    Stops a client, optionally with force.\n+\n+    By default, it will just request the server to shutdown without force. If\n+    you request to stop a client which has previously been requested to\n+    shutdown, it will automatically escalate and force shutdown.\n+\n+    Parameters: ~\n+      • {force}  (`boolean?`)\n+\n+Client:supports_method({method}, {opts})            *Client:supports_method()*\n+    Checks if a client supports a given method. Always returns true for\n+    unknown off-spec methods.\n+\n+    Note: Some language server capabilities can be file specific.\n+\n+    Parameters: ~\n+      • {method}  (`string`)\n+      • {opts}    (`{bufnr: integer?}?`)",
            "html_url": "https://github.com/neovim/neovim/pull/31207#discussion_r1848701411",
            "id": 1848701411,
            "in_reply_to_id": 1843156694,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5uMPHj",
            "original_commit_id": "bab2cd2538de204ecb23dbdf1978251b77dbb7d0",
            "original_line": 1231,
            "original_position": 182,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 2446030598,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848701411/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-19T16:41:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1848701411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "@mfussenegger did you want to give any feedback on this. I admit it's a big piece of churn, but something I've wanted to do for a long time.",
            "created_at": "2024-11-19T14:43:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2485910804",
            "id": 2485910804,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6UK_0U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2485910804/reactions"
            },
            "updated_at": "2024-11-19T14:43:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2485910804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, both work. The worst thing is all the LuaLS errors every plugin/config will now get.\r\n\r\nEDIT:\r\n\r\n> The methods already worked in 0.10\r\n\r\nOh wait, no. The methods in 0.10 were all prefixed with `_`. This change removes the underscore and adds some logic to automagically insert `self`.\r\n\r\nIf plugins want to remain compatible then they need to continue to use the `.` method and accept the LuaLS errors.",
            "created_at": "2024-11-19T16:56:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2486254155",
            "id": 2486254155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6UMTpL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486254155/reactions"
            },
            "updated_at": "2024-11-19T16:58:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486254155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If plugins want to remain compatible then they need to continue to use the . method and accept the LuaLS errors.\r\n\r\nBut it would also cause deprecation warnings, right?\r\nCould we maybe delay the deprecation to 0.12, so we've 0.11 where both options work so plugins have a good upgrade path? Otherwise we're kinda forcing them to add bwc logic that we'd already have",
            "created_at": "2024-11-19T17:03:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2486271864",
            "id": 2486271864,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6UMX94",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486271864/reactions"
            },
            "updated_at": "2024-11-19T17:03:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486271864",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But it would also cause deprecation warnings, right?\r\n\r\nNo deprecation warnings (I don't think) since I set the version to 0.12. We can set that higher. I don't care how long we maintain these for since it's only 24 LOC.\r\n\r\nEDIT: updated it to 0.13.",
            "created_at": "2024-11-19T17:05:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2486276817",
            "id": 2486276817,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6UMZLR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486276817/reactions"
            },
            "updated_at": "2024-11-19T17:07:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486276817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I might be missing something, but\r\n\r\n> The methods already worked in 0.10, so plugins can switch to method calls without breaking 0.10?\r\n\r\nThis doesn't seem to be the case, specifically in 0.11:\r\n\r\n```\r\nvim.lsp.get_clients()[1]:request_sync('textDocument/hover', vim.lsp.util.make_position_params(0, 'utf-16'), 1000, 0)\r\n```\r\n\r\nworks fine, but in 0.10 produces:\r\n\r\n```\r\nE5108: Error executing lua ...eovim@0.10/0.10.4/share/nvim/runtime/lua/vim/lsp/rpc.lua:291: Cannot serialise function: type not supported                                                                                                                                                   \r\nstack traceback:                                                                                                                                                                                                                                                                            \r\n        [C]: in function 'encode'                                                                                                                                                                                                                                                           \r\n        ...eovim@0.10/0.10.4/share/nvim/runtime/lua/vim/lsp/rpc.lua:291: in function 'encode_and_send'                                                                                                                                                                                      \r\n        ...eovim@0.10/0.10.4/share/nvim/runtime/lua/vim/lsp/rpc.lua:338: in function 'request'                                                                                                                                                                                              \r\n        ...im@0.10/0.10.4/share/nvim/runtime/lua/vim/lsp/client.lua:679: in function '_request'                                                                                                                                                                                             \r\n        ...im@0.10/0.10.4/share/nvim/runtime/lua/vim/lsp/client.lua:753: in function 'request_sync'                                                                                                                                                                                         \r\n        [string \":lua\"]:1: in main chunk\r\n```\r\n\r\nLet me know if an issue is welcome.",
            "created_at": "2025-03-29T16:02:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2763595641",
            "id": 2763595641,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6kuR95",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763595641/reactions"
            },
            "updated_at": "2025-03-29T16:02:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763595641",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/329822?v=4",
                "events_url": "https://api.github.com/users/Julian/events{/privacy}",
                "followers_url": "https://api.github.com/users/Julian/followers",
                "following_url": "https://api.github.com/users/Julian/following{/other_user}",
                "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Julian",
                "id": 329822,
                "login": "Julian",
                "node_id": "MDQ6VXNlcjMyOTgyMg==",
                "organizations_url": "https://api.github.com/users/Julian/orgs",
                "received_events_url": "https://api.github.com/users/Julian/received_events",
                "repos_url": "https://api.github.com/users/Julian/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Julian/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Julian",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "See https://github.com/neovim/neovim/pull/31207#issuecomment-2486254155\n\n`:request_sync()` isn't available in 0.10, but `:_request_sync()` is.",
            "created_at": "2025-03-29T16:11:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2763616154",
            "id": 2763616154,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6kuW-a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763616154/reactions"
            },
            "updated_at": "2025-03-29T16:11:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763616154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Oh I'm bad at reading the edit... Thanks.",
            "created_at": "2025-03-29T16:25:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/31207#issuecomment-2763642465",
            "id": 2763642465,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
            "node_id": "IC_kwDOAPphoM6kudZh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763642465/reactions"
            },
            "updated_at": "2025-03-29T16:25:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763642465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/329822?v=4",
                "events_url": "https://api.github.com/users/Julian/events{/privacy}",
                "followers_url": "https://api.github.com/users/Julian/followers",
                "following_url": "https://api.github.com/users/Julian/following{/other_user}",
                "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Julian",
                "id": 329822,
                "login": "Julian",
                "node_id": "MDQ6VXNlcjMyOTgyMg==",
                "organizations_url": "https://api.github.com/users/Julian/orgs",
                "received_events_url": "https://api.github.com/users/Julian/received_events",
                "repos_url": "https://api.github.com/users/Julian/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Julian/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Julian",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31207/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31207/commits",
    "created_at": "2024-11-14T11:56:17Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31207.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/lspmethoddep",
        "ref": "feat/lspmethoddep",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2025-05-01T09:57:31Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 312941,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2025-01-29T11:45:46Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "5eb6c744f293105db2f814264cad6e0170e5b952",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31207",
    "id": 2179552134,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31207",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "454ae672aad172a299dcff7c33c5e61a3b631c90",
    "merged_at": "2024-11-20T08:51:45Z",
    "milestone": {
        "closed_at": "2025-03-26T14:28:55Z",
        "closed_issues": 280,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2025-03-30T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 0,
        "state": "closed",
        "title": "0.11",
        "updated_at": "2025-05-04T15:09:40Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "PR_kwDOAPphoM6B6VOG",
    "number": 31207,
    "patch_url": "https://github.com/neovim/neovim/pull/31207.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31207/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/5eb6c744f293105db2f814264cad6e0170e5b952",
    "title": "feat(lsp): deprecate non-method client functions",
    "updated_at": "2025-05-04T15:09:40Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31207",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}