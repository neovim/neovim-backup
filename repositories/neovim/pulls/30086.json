{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30086/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30086/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30086"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30086"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30086/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8050734fd55e80b69a835c8138386753b201f1ee"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6310,
            "forks_count": 6310,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1996,
            "open_issues_count": 1996,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-09-09T01:58:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 341252,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 92608,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-09-09T02:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 92608,
            "watchers_count": 92608,
            "web_commit_signoff_required": false
        },
        "sha": "bc15b35cf626d25603f180a156e70b1bbcec903d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This PR introduces a rather concise implementation-wise `fast` option to `vim.filetype.match()`. If `true`, it makes detection skip pattern and content matching (two slowest steps, as they are not table lookups). As pattern matching covers (by default) rather niche set of cases, this should provide plenty of coverage for actually detected filetypes.\r\n\r\n------\r\n\r\nThe `vim.filetype.match()` function can be used in contexts where performance is very critical. For example, computing filetype based solely on the file name to later get an icon/option/table value. Currently after some refactor to improve performance (#29596, #29632, #29660) the speed is already decent enough for `vim.filetype.match()` to be called synchronously about 1000 times without very noticeable delay (about 40 ms based on profiling in the latest from mentioned PRs).\r\n\r\nBased on the profiling, the biggest bottleneck is the sheer amount of pattern matches needed to be done before reaching the target (fast) state: extension matching (via table lookup) or not matching at all. #29660 makes things better, but maybe not enough for some cases.\r\n\r\n------\r\n\r\nHere is the result of benchmarking:\r\n\r\nFilename | fast=false | fast=true |\r\n--------------|-----------|--------------|\r\ninit.lua | 0.030ms  | 0.0051ms |\r\nno-match | 0.039ms | 0.0051ms |\r\n/home/user/.config/hello/world/no-match | 0.063ms | 0.0048ms |\r\n\r\nThe improvement is from 6x to 10x times in speed at the cost of not matching handful of filetype patterns. Whether this trade is worth it is up to `vim.filetype.match()` users.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30086#discussion_r1821989692"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1821989692"
                }
            },
            "author_association": "MEMBER",
            "body": "\"fewer\" instead of \"less\" for countable things (I think, @clason confirm pls)",
            "commit_id": "8050734fd55e80b69a835c8138386753b201f1ee",
            "created_at": "2024-10-30T07:00:17Z",
            "diff_hunk": "@@ -2848,6 +2848,10 @@ vim.filetype.match({args})                              *vim.filetype.match()*\n                 • {contents}? (`string[]`) An array of lines representing file\n                   contents to use for matching. Can be used with {filename}.\n                   Mutually exclusive with {buf}.\n+                • {fast}? (`boolean`) Whether to skip time consuming detection\n+                  steps, like pattern and content matching. Makes detection\n+                  significantly faster at the cost of slightly less filetypes",
            "html_url": "https://github.com/neovim/neovim/pull/30086#discussion_r1821989692",
            "id": 1821989692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5smVs8",
            "original_commit_id": "9abb9086eaedd87a4e7f5b24b5c8e1400a8256dc",
            "original_line": 2853,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1,
            "pull_request_review_id": 2403790326,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1821989692/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-30T07:00:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1821989692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30086#discussion_r1822284185"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822284185"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, basically: https://www.merriam-webster.com/grammar/fewer-vs-less.",
            "commit_id": "8050734fd55e80b69a835c8138386753b201f1ee",
            "created_at": "2024-10-30T10:10:46Z",
            "diff_hunk": "@@ -2848,6 +2848,10 @@ vim.filetype.match({args})                              *vim.filetype.match()*\n                 • {contents}? (`string[]`) An array of lines representing file\n                   contents to use for matching. Can be used with {filename}.\n                   Mutually exclusive with {buf}.\n+                • {fast}? (`boolean`) Whether to skip time consuming detection\n+                  steps, like pattern and content matching. Makes detection\n+                  significantly faster at the cost of slightly less filetypes",
            "html_url": "https://github.com/neovim/neovim/pull/30086#discussion_r1822284185",
            "id": 1822284185,
            "in_reply_to_id": 1821989692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sndmZ",
            "original_commit_id": "9abb9086eaedd87a4e7f5b24b5c8e1400a8256dc",
            "original_line": 2853,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1,
            "pull_request_review_id": 2404277271,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822284185/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-30T10:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822284185",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62958?v=4",
                "events_url": "https://api.github.com/users/telemachus/events{/privacy}",
                "followers_url": "https://api.github.com/users/telemachus/followers",
                "following_url": "https://api.github.com/users/telemachus/following{/other_user}",
                "gists_url": "https://api.github.com/users/telemachus/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/telemachus",
                "id": 62958,
                "login": "telemachus",
                "node_id": "MDQ6VXNlcjYyOTU4",
                "organizations_url": "https://api.github.com/users/telemachus/orgs",
                "received_events_url": "https://api.github.com/users/telemachus/received_events",
                "repos_url": "https://api.github.com/users/telemachus/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/telemachus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/telemachus/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/telemachus",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30086#discussion_r1822303742"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822303742"
                }
            },
            "author_association": "MEMBER",
            "body": "I trust clason more than the dictionary ",
            "commit_id": "8050734fd55e80b69a835c8138386753b201f1ee",
            "created_at": "2024-10-30T10:21:56Z",
            "diff_hunk": "@@ -2848,6 +2848,10 @@ vim.filetype.match({args})                              *vim.filetype.match()*\n                 • {contents}? (`string[]`) An array of lines representing file\n                   contents to use for matching. Can be used with {filename}.\n                   Mutually exclusive with {buf}.\n+                • {fast}? (`boolean`) Whether to skip time consuming detection\n+                  steps, like pattern and content matching. Makes detection\n+                  significantly faster at the cost of slightly less filetypes",
            "html_url": "https://github.com/neovim/neovim/pull/30086#discussion_r1822303742",
            "id": 1822303742,
            "in_reply_to_id": 1821989692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sniX-",
            "original_commit_id": "9abb9086eaedd87a4e7f5b24b5c8e1400a8256dc",
            "original_line": 2853,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1,
            "pull_request_review_id": 2404312829,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822303742/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-30T10:21:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822303742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30086#discussion_r1822348733"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822348733"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> I trust clason more than the dictionary\r\n\r\nSure. My point was that your instinct was right. The link explains that in general you should use *fewer* for things you can count (e.g., filetypes) and *less* for things you measure (e.g., time), but that for *less* for *fewer* \"does occur frequently in speech\" (hence the common mistake). It also explains that there are several exceptions to the general rule, which is a pain (like many things in English). (Yes, I've just nerd-sniped myself.)",
            "commit_id": "8050734fd55e80b69a835c8138386753b201f1ee",
            "created_at": "2024-10-30T10:44:25Z",
            "diff_hunk": "@@ -2848,6 +2848,10 @@ vim.filetype.match({args})                              *vim.filetype.match()*\n                 • {contents}? (`string[]`) An array of lines representing file\n                   contents to use for matching. Can be used with {filename}.\n                   Mutually exclusive with {buf}.\n+                • {fast}? (`boolean`) Whether to skip time consuming detection\n+                  steps, like pattern and content matching. Makes detection\n+                  significantly faster at the cost of slightly less filetypes",
            "html_url": "https://github.com/neovim/neovim/pull/30086#discussion_r1822348733",
            "id": 1822348733,
            "in_reply_to_id": 1821989692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sntW9",
            "original_commit_id": "9abb9086eaedd87a4e7f5b24b5c8e1400a8256dc",
            "original_line": 2853,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1,
            "pull_request_review_id": 2404385941,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822348733/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-30T11:17:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822348733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62958?v=4",
                "events_url": "https://api.github.com/users/telemachus/events{/privacy}",
                "followers_url": "https://api.github.com/users/telemachus/followers",
                "following_url": "https://api.github.com/users/telemachus/following{/other_user}",
                "gists_url": "https://api.github.com/users/telemachus/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/telemachus",
                "id": 62958,
                "login": "telemachus",
                "node_id": "MDQ6VXNlcjYyOTU4",
                "organizations_url": "https://api.github.com/users/telemachus/orgs",
                "received_events_url": "https://api.github.com/users/telemachus/received_events",
                "repos_url": "https://api.github.com/users/telemachus/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/telemachus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/telemachus/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/telemachus",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30086#discussion_r1822382045"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822382045"
                }
            },
            "author_association": "MEMBER",
            "body": "Dictionary is right, though :)",
            "commit_id": "8050734fd55e80b69a835c8138386753b201f1ee",
            "created_at": "2024-10-30T11:02:29Z",
            "diff_hunk": "@@ -2848,6 +2848,10 @@ vim.filetype.match({args})                              *vim.filetype.match()*\n                 • {contents}? (`string[]`) An array of lines representing file\n                   contents to use for matching. Can be used with {filename}.\n                   Mutually exclusive with {buf}.\n+                • {fast}? (`boolean`) Whether to skip time consuming detection\n+                  steps, like pattern and content matching. Makes detection\n+                  significantly faster at the cost of slightly less filetypes",
            "html_url": "https://github.com/neovim/neovim/pull/30086#discussion_r1822382045",
            "id": 1822382045,
            "in_reply_to_id": 1821989692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sn1fd",
            "original_commit_id": "9abb9086eaedd87a4e7f5b24b5c8e1400a8256dc",
            "original_line": 2853,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1,
            "pull_request_review_id": 2404452297,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822382045/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-30T11:02:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1822382045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30086#discussion_r1824059324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30086"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1824059324"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks! Updated the wording.",
            "commit_id": "8050734fd55e80b69a835c8138386753b201f1ee",
            "created_at": "2024-10-31T08:21:58Z",
            "diff_hunk": "@@ -2848,6 +2848,10 @@ vim.filetype.match({args})                              *vim.filetype.match()*\n                 • {contents}? (`string[]`) An array of lines representing file\n                   contents to use for matching. Can be used with {filename}.\n                   Mutually exclusive with {buf}.\n+                • {fast}? (`boolean`) Whether to skip time consuming detection\n+                  steps, like pattern and content matching. Makes detection\n+                  significantly faster at the cost of slightly less filetypes",
            "html_url": "https://github.com/neovim/neovim/pull/30086#discussion_r1824059324",
            "id": 1824059324,
            "in_reply_to_id": 1821989692,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5suO-8",
            "original_commit_id": "9abb9086eaedd87a4e7f5b24b5c8e1400a8256dc",
            "original_line": 2853,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1,
            "pull_request_review_id": 2407334943,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1824059324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-31T08:21:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1824059324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "This needs a problem-solution statement. Performance for the sake of performance doesn't justify API when it's in the realm of tiny fractions of a millisecond.\n\nThe fact you need to do so many filetype matches in such a small space of time is a bit of a dubious requirement. Good plugins should be utilising the event loop as much as possible.",
            "created_at": "2024-08-19T15:01:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2296795474",
            "id": 2296795474,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I5lFS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296795474/reactions"
            },
            "updated_at": "2024-08-19T15:05:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296795474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This needs a problem-solution statement. Performance for the sake of performance doesn't justify API when it's in the realm of small fractions of a millisecond.\r\n\r\nIt is described in the initial comment:\r\n\r\n> Currently after some refactor to improve performance (https://github.com/neovim/neovim/pull/29596, https://github.com/neovim/neovim/pull/29632, https://github.com/neovim/neovim/pull/29660) the speed is already decent enough for vim.filetype.match() to be called synchronously about 1000 times without very noticeable delay (about 40 ms based on profiling in the latest from mentioned PRs).\r\n> ...\r\n> https://github.com/neovim/neovim/pull/29660 makes things better, but maybe not enough for some cases.\r\n\r\nTogether with the \"realm of small fractions of a millisceond\", the effect of this PR can also be described as \"10 times improvement in speed\".\r\n\r\nIf you want strictly the \"problem-solution\" statement:\r\n- **Problem**: there is no way to call `vim.filetype.match()` in a very performant critical scenario (like 10000 times synchronously) without visible delay.\r\n- **Solution**: introduce `fast` option to trade significant speed improvement on common cases for not detecting relatively smaller set of filetypes.",
            "created_at": "2024-08-19T15:09:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2296814616",
            "id": 2296814616,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I5pwY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296814616/reactions"
            },
            "updated_at": "2024-08-19T15:09:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296814616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> like 10000 times synchronously\r\n\r\nBut is that a _realistic_ scenario we should consider seriously? I fully accept that `vim.filetype.match` is not performant enough for some use cases (e.g. telescope previews), but I am _not_ (yet) convinced this change will make all difference (nor that \"10000 times synchronously\" is an _actual_ requirement anywhere -- and if it is, that sounds like a downstream design issue, first and foremost).",
            "created_at": "2024-08-19T15:12:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2296820618",
            "id": 2296820618,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I5rOK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296820618/reactions"
            },
            "updated_at": "2024-08-19T15:14:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296820618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If we add `fast` (or some other way for callers to selectively choose matching strategies), there should be no need to explode things like [case-insenstivity into hardcoded keys](https://github.com/neovim/neovim/pull/29800#discussion_r1713790810). If the caller wants \"fast\", then they shouldn't expect case-insenstivity, we shouldn't have to hardcode `SRc` and related variants as key names. ",
            "created_at": "2024-08-19T15:23:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2296844743",
            "id": 2296844743,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I5xHH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296844743/reactions"
            },
            "updated_at": "2024-08-19T15:24:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296844743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The fact you need to do so many filetype matches in such a small space of time is a bit of a dubious requirement. Good plugins should be utilising the event loop as much as possible.\r\n\r\n\"Utilizing the event loop\" even in the best plugin from the best of the best authors can only make things non-blocking. Waiting until all things are processed will still require the same (longer) time frame than it can be with `fast = true`.\r\n\r\n> But is that a _realistic_ scenario we should consider seriously?\r\n\r\nYes, very much so. My main use case is ['mini.icons'](https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-icons.md) which uses `vim.filetype.match()` as a fallback to take advantage of built-in filetype detection rules. This allows keeping track of icon data mostly for filetypes without the need to do the same for various file names and extensions.\r\n\r\nIcons are usually computed based on file system paths with most common cases being file explorers and file pickers. Having more than 10000 items, for example, inside a single directory (in first or all child levels) is not *that* uncommon. Although it possible to compute icons (and thus call `vim.filetype.match()`) as efficiently as possible (non-blocking and possibly only for subset of actually visible entries), there *are* cases when having to wait for all entries to be assigned an icon is unavoidable:\r\n- Manipulation of all (even not shown) entries in file explorers. For example, ['mini.files'](https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-files.md). As user can not only look but also manipulate file system entries (as regular text in case of 'mini.files'), their line representation should be \"finalized\" before allowing user to manipulate the text inside the buffer. Which also (usually) means computing icons for all entries.\r\n- The case of ['ibhagwan/fzf-lua'](https://github.com/ibhagwan/fzf-lua/issues/1319) where most \"traditional\" optimization approaches [don't quite work](https://github.com/ibhagwan/fzf-lua/issues/1319#issuecomment-2243973353) and entries need to be computed with their icon before being suggested to the user as a picker entry.\r\n\r\nAlso, to take full advantage of `vim.filetype.match()`, filetype detection during icons computation is better be done for full paths, which also makes things slower (due slower `string.match()` for longer string). Using `fast=true` makes this not an issue.",
            "created_at": "2024-08-19T16:17:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2296951983",
            "id": 2296951983,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I6LSv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296951983/reactions"
            },
            "updated_at": "2024-08-19T16:17:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296951983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry, I don't understand a situation where a user needs to wait for 10000 filetype matches. For searchers and previewers, the user can see max 200 things on a screen at a time. Anything off screen doesn't need to be computed.\n\nWhat am I missing?\n\n> their line representation should be \"finalized\" before allowing user to manipulate the text inside the buffer. Which also (usually) means computing icons for all entries.\n\nSurely icons can be non-editable decorations in the buffer. I would consider it a bad user experience otherwise.\n\n> entries need to be computed with their icon before being suggested to the user as a picker entry\n\nThis sounds like a design problem.",
            "created_at": "2024-08-19T16:51:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297012789",
            "id": 2297012789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I6aI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297012789/reactions"
            },
            "updated_at": "2024-08-19T17:13:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297012789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > their line representation should be \"finalized\" before allowing user to manipulate the text inside the buffer. Which also (usually) means computing icons for all entries.\r\n> \r\n> Surely icons can be non-editable decorations in the buffer. I would consider it a bad user experience otherwise.\r\n\r\nI am glad I've got to read your opinion on this topic. Thanks for sharing!\r\n\r\n> > entries need to be computed with their icon before being suggested to the user as a picker entry\r\n> \r\n> This sounds like a design problem.\r\n\r\nAs far as I understand, this is indeed the *consequence* of the main decision about doing all the work in the separate process. Doesn't mean it is not worth taking into account.\r\n\r\n------\r\n\r\nWhat *is* a design problem, is the presence of non-avoidable slow-ish step of string pattern matching during filetype detection. Removing it completely is not possible as it it is needed for compatibility with Vim detection. Hence the suggestion for this option in a function that was exported specifically for user convenience. As it:\r\n- Trivially and transparently affects code only in 3 `if` statements;\r\n- Has proved *significant* effect on speed;\r\n- Has test coverage;\r\n- Has demand;\r\n- *Needs* to be done in core;\r\n\r\n... I am somewhat baffled to receive such a pushback.",
            "created_at": "2024-08-19T17:52:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297118046",
            "id": 2297118046,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I6z1e",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297118046/reactions"
            },
            "updated_at": "2024-08-19T17:52:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297118046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The reason I'm lukewarm (not opposed!) to this change -- as to previous related changes -- is that I'm kinda missing the endgame here. So I worry about a \"boiled frog\" scenario, where it'll constantly be \"this relatively minor change gives a single-digit speedup so `<slightly larger number of icons>` can be painted\" without an end in sight, meaning these small changes may accumulate to something messy we don't want.\r\n\r\nSo, again, what _is_ the final goal here? What kind of (objective!) performance will be acceptable and mark the \"done state\"? Is this actually attainable given the primary goal of replacing Vim filetype detection?\r\n\r\n(On a personal note, I don't consider icons a compelling feature that is worth adding much complexity _by itself_. So one reason I keep pushing for rationale is the hope of hearing about _more general_ capabilities this would unlock.)",
            "created_at": "2024-08-19T18:07:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297143411",
            "id": 2297143411,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I66Bz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297143411/reactions"
            },
            "updated_at": "2024-08-19T19:18:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297143411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The reason I'm lukewarm (not opposed!) to this change -- as to previous related changes -- is that I'm kinda missing the endgame here. So I worry about a \"boiled frog\" scenario, where it'll constantly be \"this relatively minor change gives a single-digit speedup so can be painted\" without an end in sight, meaning these small changes may accumulate to something messy we don't want.\r\n> \r\n> So, again, what _is_ the final goal here? What kind of (objective!) performance will be acceptable and mark the \"done state\"? Is this actually attainable given the primary goal of replacing Vim filetype detection?\r\n\r\nMy personal goal when I started this was to get a generic `vim.filetype.match({ filename = 'hello.lua' })` (around 0.15 ms on 0.10 version for me) to have as close performance to [`require('nvim-web-devicons').get_icon('hello.lua')`](https://github.com/nvim-tree/nvim-web-devicons) (around 0.001 ms for me) as reasonable. The latter (and ['plenary.filetype'](https://github.com/nvim-lua/plenary.nvim/blob/master/lua/plenary/filetype.lua) for that matter) mostly uses table lookups with usually a single `string.match`, that's why it is so fast.\r\n\r\nInitial `vim.filetype.match()` profiling and strict requirement for compatibility with Vim showed the goal of 100x improvement to be not quite reachable. In the end I decided to attempt to go as close as I can while preserving backward compatibility. With all refactors resulting in about 5x improvement (which is already visibly good), I see it as a win-win both for plugin authors and core.\r\n\r\nAt the moment I can not see a reasonable way to improve this any further (at least without spending too much time on needlessly complex data structures and algorithms) while preserving the backward compatibility. Hence this option suggestion that opt-in breaks compatibility which I hope to be the last step in this performance journey.\r\n\r\n*If* this PR gets merged, I also plan to try and fix some inconsistency in how `vim.filetype.match()` uses its arguments (for example, see [this](https://github.com/ibhagwan/fzf-lua/issues/1360#issuecomment-2254533596)) and then try to move on with hopefully smile on my face.\r\n\r\n> (On a personal note, I don't consider icons a compelling feature that is worth adding much complexity _by itself_. So one reason I keep pushing for rationale is the hope of hearing about _more general_ capabilities this would unlock.)\r\n\r\nI am not sure what else I can say here. The _more general_ capability this would unlock is for `vim.filetype.match()` users to decide if they want to \"10x more vroom-vroom\" with some known limitations. Use cases I currently know/care about all involve computing filetype based *solely* on the filename.",
            "created_at": "2024-08-19T19:16:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297267314",
            "id": 2297267314,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7YRy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297267314/reactions"
            },
            "updated_at": "2024-08-19T19:16:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297267314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Use cases I currently know/care about all involve computing filetype based solely on the filename.\n\nI would be warmer to providing some API that doesn't touch the filesystem. IO is horribly slow, relative to non-IO code, and touching the file system in hot loops should generally be avoided. That would at least give a `fast` option a much more objective and simpler definition.\n\nThat doesn't mean the use cases described here can't be avoided by approaching the problems differently.\n\n> - Trivially and transparently affects code only in 3 if statements;\n\nThe concerns here aren't about implementation. It's not difficult to add a whole heap of niche flags to functions without incurring much implementation cost. The issue is that these flags are very niche, and haven't been well justified.\n\n> - Has proved significant effect on speed;\n\nAgain, performance for the sake of performance, and at the cost of correctness.\n\n> - Has test coverage;\n\nTests need to be maintained like anything else.\n\n> - Has demand;\n\nThat's not how this works. Just having demand isn't enough. And the actual requirement is dubious and a bit XY.\n\n> - Needs to be done in core;\n\nArguably doesn't need to be done at all.",
            "created_at": "2024-08-19T19:25:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297284491",
            "id": 2297284491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7ceL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297284491/reactions"
            },
            "updated_at": "2024-08-19T19:34:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297284491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I merely offered this personal note as context to calibrate my comment against. \n\nOf course, fixing the current shortcoming with `match` (not all combinations are supported) would be very welcome, no questions asked.\n\nAnd similarly, a principled way of opting out of some match paths would be reasonable -- I forgot to add to my previous comment my other misgiving: the wooly description of the \"fast\" option. I would be much more open to allowing current options to be set to `false` to skip the corresponding check entirely even if applicable. (Fewer options means fewer interactions to account for.)",
            "created_at": "2024-08-19T19:28:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297288312",
            "id": 2297288312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7dZ4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297288312/reactions"
            },
            "updated_at": "2024-08-19T19:28:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297288312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Initial vim.filetype.match() profiling and strict requirement for compatibility with Vim showed the goal of 100x improvement to be not quite reachable\n\nAnd that's my point, in a nutshell: If all that work doesn't achieve the goal, we end up simply paying for nothing. (Well, not technically nothing, but performance is not its own reward -- especially if we're talking about milliseconds for something that usually happens only once.)",
            "created_at": "2024-08-19T19:32:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297295080",
            "id": 2297295080,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7fDo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297295080/reactions"
            },
            "updated_at": "2024-08-19T19:32:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297295080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And similarly, a principled way of opting out of some match paths would be reasonable -- I forgot to add to my previous comment my other misgiving: the wooly description of the \"fast\" option. I would be much more open to allowing current options to be set to `false` to skip the corresponding check entirely even if applicable. (Fewer options means fewer interactions to account for.)\r\n\r\nI am not sure I understand. I did think about providing more granular option to skipping certain steps (something like `opts.skip = { pattern = true, content = true }`) but I was (and am) 99% sure that it would be met with even more pushback than a single boolean `fast` that does exactly what is described. One thing about `skip` table approach is that actual type of matching is more of an implementation detail.\r\n\r\nIf you mean allowing `buf = false` and `contents = false`, then they don't really make sense, since users can just omit them. I don't see a way of tweaking current three options to result in skipping string pattern matching (which is the main bottleneck).\r\n\r\nIf the actual concern is about an API that allows skipping string pattern matching, then that is of course something that can be fixed.\r\n\r\n> > Initial vim.filetype.match() profiling and strict requirement for compatibility with Vim showed the goal of 100x improvement to be not quite reachable\r\n> \r\n> And that's my point, in a nutshell: If all that work doesn't achieve the goal, we end up simply paying for nothing. (Well, not technically nothing, but performance is not its own reward -- especially if we're talking about milliseconds for something that usually happens only once.)\r\n\r\nIt *does* achieve the goal fairly closely with `fast = true`, as it would be about 25x-50x speed improvement (depending on the case) mostly preserving coverage.",
            "created_at": "2024-08-19T19:49:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297324644",
            "id": 2297324644,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7mRk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297324644/reactions"
            },
            "updated_at": "2024-08-19T19:49:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297324644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Use cases I currently know/care about all involve computing filetype based solely on the filename.\r\n> \r\n> I would be warmer to providing some API that doesn't touch the filesystem. IO is horribly slow, relative to non-IO code, and touching the file system in hot loops should generally be avoided. That would at least give a `fast` option a much more objective and simpler definition.\r\n\r\nThere is no part of `vim.filetype.match()` that touches file system.\r\n\r\nYet, there are obviously slow parts which don't contribute much to the average usage.",
            "created_at": "2024-08-19T19:52:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297330635",
            "id": 2297330635,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7nvL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297330635/reactions"
            },
            "updated_at": "2024-08-19T19:52:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297330635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, that would be a more compelling rationale (\"with this change, X is possible\" instead of \"improve performance by X\"). \n\nAnd, yes, the primary concern is API (always), since those introduce the most friction down the line. \n\nAnd omitting something is not the same -- consider passing a filename that exists on the file system. (And if that makes little difference, then _that_ is the baseline you need to argue against, not full content matching.)\n\n> There is no part of vim.filetype.match() that touches file system.\n\nExcept the part that looks at file contents, which is a big part of what you're proposing to skip. ",
            "created_at": "2024-08-19T19:57:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2297339332",
            "id": 2297339332,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I7p3E",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297339332/reactions"
            },
            "updated_at": "2024-08-19T20:00:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2297339332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Well, that would be a more compelling rationale (\"with this change, X is possible\" instead of \"improve performance by X\").\r\n\r\nAre you saying that motivation like \"with this change, `vim.fieltype.match()` can have performance reasonably close to `require('nvim-web-devicons').get_icon()`\" would be more compelling than \"If `true`, it makes detection skip pattern and content matching (two slowest steps, as they are not table lookups). ... . The improvement is from 6x to 10x times in speed ...\"? My thought was that comparing performance to some (not directly equivalent) plugin would instantly get \"Core decisions should not be decided based on the comparison to random plugins. What are the actual numbers?\".\r\n\r\n> And omitting something is not the same -- consider passing a filename that exists on the file system. (And if that makes little difference, then _that_ is the baseline you need to argue against, not full content matching.)\r\n\r\nWhether filename exists on the file system does not matter. This never matters during `vim.filetype.match()` and is a great thing. Omitting both `contents` and `buf` [*does* make content matching skip entirely](https://github.com/neovim/neovim/blob/a8fbe1d409e08c68b05bc26b096486020ae3162b/runtime/lua/vim/filetype.lua#L2812). All the code that is executed before that also doesn't depend on the file actually existing on the disk.\r\n\r\n> > There is no part of vim.filetype.match() that touches file system.\r\n> \r\n> Except the part that looks at file contents, which is a big part of what you're proposing to skip.\r\n\r\nExcept that it [does not touch the file system](https://github.com/neovim/neovim/blob/a8fbe1d409e08c68b05bc26b096486020ae3162b/runtime/lua/vim/filetype.lua#L2813-L2822) but reads buffer lines. As far as I understand, reading lines from a buffer does not require reading from disk.",
            "created_at": "2024-08-20T07:45:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2298190036",
            "id": 2298190036,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I-5jU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2298190036/reactions"
            },
            "updated_at": "2024-08-20T07:45:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2298190036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, only in the sense that you need to read the buffer from disk first.\r\n\r\n> Are you saying that motivation like \"with this change, vim.fieltype.match() can have performance reasonably close to require('nvim-web-devicons').get_icon()\" would be more compelling than \"If true, it makes detection skip pattern and content matching (two slowest steps, as they are not table lookups). ... . The improvement is from 6x to 10x times in speed ...\"? My thought was that comparing performance to some (not directly equivalent) plugin would instantly get \"Core decisions should not be decided based on the comparison to random plugins. What are the actual numbers?\".\r\n\r\nNo. What I'm saying is that I'd like to see something of the sort \"I want to do X. I can't do that currently because Y. Doing Z fixes that so I can do X\". (_Adding_ numbers is good, of course, but \"numbers go down\" _in itself_ is not a valid value of X.) This allows us to decide whether Z-for-X is a good tradeoff _for Neovim_.",
            "created_at": "2024-08-20T08:16:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2298252345",
            "id": 2298252345,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I_Iw5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2298252345/reactions"
            },
            "updated_at": "2024-08-20T08:16:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2298252345",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Well, only in the sense that you need to read the buffer from disk first.\r\n\r\nThis has nothing to do with `vim.filetype.match()` and is done prior to it.\r\n\r\n> No. What I'm saying is that I'd like to see something of the sort \"I want to do X. I can't do that currently because Y. Doing Z fixes that so I can do X\". (_Adding_ numbers is good, of course, but \"numbers go down\" _in itself_ is not a valid value of X.) This allows us to decide whether Z-for-X is a good tradeoff _for Neovim_.\r\n\r\n*I want to do* \"be able to use `vim.fieltype.match()` with comparable performance of similar solutions ('nvim-web-devicons', 'plenary.filetype')\".\r\n*I can't do that currently because* \"there are many unskippable string pattern matching which might be ok for users to skip\".\r\n*Doing* \"adding `fast` option that skips slow steps\" *fixes that so I can do* \"be able to use `vim.fieltype.match()` with comparable performance of similar solutions ('nvim-web-devicons', 'plenary.filetype')\".\r\n\r\nI was hoping that \"adding `fast` option that skips slow steps\" *- for -* \"be able to use `vim.fieltype.match()` with comparable performance of similar solutions ('nvim-web-devicons', 'plenary.filetype')\" *is a good tradeoff _for Neovim_* because with small footprint it allows its users to leverage most of built-in filetype detection rules while not loosing much performance.",
            "created_at": "2024-08-20T08:32:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2298287099",
            "id": 2298287099,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6I_RP7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2298287099/reactions"
            },
            "updated_at": "2024-08-20T08:32:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2298287099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Adding my 2 cents here too because most of the discussion resolved around the cost/benefit aspect and I would like to highlight a different point: From a user perspective it's not quite clear what the `fast` parameter really entails.\r\n\r\nThe docs says:\r\n\r\n>  Whether to skip time consuming detection steps, like pattern and content matching. Makes detection significantly faster at the cost of less filetypes detected.\r\n\r\nWhich sounds a bit like \"go figure\". You pretty much have to take a look at the implementation to learn if the filetypes you care about depend on pattern or content matching or not.\r\n\r\nClaiming that these are \"known limitations\" is imho a bit of an expert blind-spot. For anyone not having spent much time with the current implementation these are not known limitations.\r\n\r\n\r\nDid the tree-decoding approach that was previously mentioned not work out/bring the expected benefit?\r\n\r\nI think from an API consumer perspective any new option that makes a trade-off between what is matched or not is going to be confusing.",
            "created_at": "2024-08-20T15:51:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2299186354",
            "id": 2299186354,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6JCsyy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299186354/reactions"
            },
            "updated_at": "2024-08-20T15:51:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299186354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Adding my 2 cents here too because most of the discussion resolved around the cost/benefit aspect and I would like to highlight a different point: From a user perspective it's not quite clear what the `fast` parameter really entails.\r\n> \r\n> The docs says:\r\n> \r\n> > Whether to skip time consuming detection steps, like pattern and content matching. Makes detection significantly faster at the cost of less filetypes detected.\r\n> \r\n> Which sounds a bit like \"go figure\". You pretty much have to take a look at the implementation to learn if the filetypes you care about depend on pattern or content matching or not.\r\n\r\nThe description was deliberately concise and assumed that there is [a description of how pattern matching is done](https://github.com/neovim/neovim/blob/fe5ae88b20f570b904ba8ca77dd8895e0d3627e4/runtime/doc/lua.txt#L2628-L2649) (maybe together with [`vim.filetype.match()` documentation itself](https://github.com/neovim/neovim/blob/fe5ae88b20f570b904ba8ca77dd8895e0d3627e4/runtime/doc/lua.txt#L2739-L2748)). So saying \"this skip this and this documented steps, as they are slow\" felt justified. Of course any suggestions about how better describe the option are welcome. I ended up with deliberately vague `fast` and not something like `skip_slow` for possibly better forward compatibility.\r\n\r\nAlso, looking at implementation won't really help because filetype detection based on pattern matching can be added by the user. So saying \"skip this step\" seems to be the best (and on point) description.\r\n\r\n> Claiming that these are \"known limitations\" is imho a bit of an expert blind-spot. For anyone not having spent much time with the current implementation these are not known limitations.\r\n\r\nI am not sure if this is a general question about PR or about documentation.\r\n\r\nIf the first, then I linked #29660 which has data and explanation of why two steps involving string pattern matching are the main bottleneck here (section \"Motivation on why optimizing pattern matching is the bottleneck\" at the bottom of first comment).\r\n\r\nIf the second, then by \"known limitations\" [here](https://github.com/neovim/neovim/pull/30086#issuecomment-2297267314) I meant the \"... at the cost of less filetypes detected\" in option's documentation. Probably better wording would have been \"known upfront drawbacks\".\r\n\r\n> Did the tree-decoding approach that was previously mentioned not work out/bring the expected benefit?\r\n\r\nIt did bring significant and actually visible benefit of about 4x speedup on common cases. As [described here](https://github.com/neovim/neovim/pull/30086#issuecomment-2297267314) this did not increase the speed to the level I hoped to achieve. And as I believe this is impossible to do with preserving backwards compatibility, hence the option to go faster while skipping it for small subset of cases.\r\n\r\n> I think from an API consumer perspective any new option that makes a trade-off between what is matched or not is going to be confusing.\r\n\r\nI'd say many options/things in Neovim can be deemed confusing if assumed only reading its description in isolation. Maybe linking to `vim.filetype.add()` description can make things appropriately less confusing.",
            "created_at": "2024-08-20T16:22:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2299257829",
            "id": 2299257829,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6JC-Pl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299257829/reactions"
            },
            "updated_at": "2024-08-20T16:22:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299257829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'd say many options/things in Neovim can be deemed confusing if assumed only reading its description in isolation\r\n\r\nSure. But I don't see how that's relevant when evaluating if a new thing is confusing and if it should be added despite that. \r\n\r\n> Maybe linking to vim.filetype.add() description can make things appropriately less confusing\r\n\r\n> The description was deliberately concise and assumed that there is [a description of how pattern matching is done](https://github.com/neovim/neovim/blob/fe5ae88b20f570b904ba8ca77dd8895e0d3627e4/runtime/doc/lua.txt#L2628-L2649) (maybe together with [vim.filetype.match() documentation itself](https://github.com/neovim/neovim/blob/fe5ae88b20f570b904ba8ca77dd8895e0d3627e4/runtime/doc/lua.txt#L2739-L2748)). So saying \"this skip this and this documented steps, as they are slow\" felt justified. Of course any suggestions about how better describe the option are welcome. I ended up with deliberately vague fast and not something like skip_slow for possibly better forward compatibility.\r\n\r\nDon't get me wrong. I think technically the documentation is accurate and in a way good, but it's also not all that helpful and I don't think that's due to the wording but innate to the proposed solution of adding a different kind of file matching whose semantics depends on how patterns are defined - which is partly internal and external - making it an unknown variable. \r\n\r\nWhat I wanted to highlight is that this isn't just about introducing maintenance overhead due to having a fast version, but that this introduces a second way to match filetypes which users will encounter and likely get confused by (\"Why does opening the file detect the correct filetype but when using ... \")\r\nAnd any plugin author has no good way to reason or predict the behaviour and difference between the two versions ",
            "created_at": "2024-08-20T16:44:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2299301644",
            "id": 2299301644,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6JDI8M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299301644/reactions"
            },
            "updated_at": "2024-08-20T16:44:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299301644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What I wanted to highlight is that this isn't just about introducing maintenance overhead due to having a fast version, but that this introduces a second way to match filetypes which users will encounter and likely get confused by (\"Why does opening the file detect the correct filetype but when using ... \")\r\n> And any plugin author has no good way to reason or predict the behaviour and difference between the two versions\r\n\r\nI don't think this type of user confusion is a big risk, because I see the main use case for `vim.filetype.match({ ..., fast = true })` to be used as an intermediate helper for doing something else based on the filetype. And for plugin authors the way to reason is quite straightforward: use `fast` if want speed with less coverage.\r\n\r\nWhich *exactly* filetypes will not be covered is indeed unknown in advance, but it is *exactly* the same situation when using `{ filename = 'aaa' }` and `{ filename = 'aaa', contents = { 'bbb' } }`: there is no way without looking at implementation to know which filetypes *need* content to be detected and which don't.\r\n\r\n------\r\n\r\nWhat important for me to note is that `vim.filetype.match({ ..., fast = true})` even with skipped steps *still* provides more case coverage than tracked manually in 'nvim-web-devicons' and 'plenary.filetype'. So even fast version is a better alternative for plugin authors which might end up using those for fast filetype-like data computations.",
            "created_at": "2024-08-20T17:12:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2299352310",
            "id": 2299352310,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6JDVT2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299352310/reactions"
            },
            "updated_at": "2024-08-20T17:12:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2299352310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have a usecase for a lot calls to vim.filetype.match, in short, I need to match each telescope’s entry filename, and give that line a ts-parser, to highlight not only the preview window, but also the result list window. I perf with 0.10, each call to vim.filetype.match costs 0.4ms of a relative path(surprisingly), I suppose some works have been done in 0.11 that have improved performance for 70%, but it is still not ideal, this means for 250 items, each key stroke still requires 30ms for matching, this pr would be useful.\r\n\r\nsome details in https://github.com/fdschmidt93/telescope-egrepify.nvim/pull/50#issuecomment-2407758971",
            "created_at": "2024-10-12T05:09:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408393700",
            "id": 2408393700,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6PjSvk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408393700/reactions"
            },
            "updated_at": "2024-10-12T05:09:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408393700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/97848247?v=4",
                "events_url": "https://api.github.com/users/xzbdmw/events{/privacy}",
                "followers_url": "https://api.github.com/users/xzbdmw/followers",
                "following_url": "https://api.github.com/users/xzbdmw/following{/other_user}",
                "gists_url": "https://api.github.com/users/xzbdmw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xzbdmw",
                "id": 97848247,
                "login": "xzbdmw",
                "node_id": "U_kgDOBdULtw",
                "organizations_url": "https://api.github.com/users/xzbdmw/orgs",
                "received_events_url": "https://api.github.com/users/xzbdmw/received_events",
                "repos_url": "https://api.github.com/users/xzbdmw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xzbdmw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xzbdmw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xzbdmw",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I need to match each telescope’s entry filename, and give that line a ts-parser, to highlight not only the preview window, but also the result list window. \n\nIs there no way this can't be done for only rendered entrys? There's no point getting a ts-parser if that entry never appears on screen.\n\nAs these plugins become more complex, you will hit other perf bottlenecks for similar reasons. In Neovim (and most good plugins), things are specifically designed so you only pay for what you see.",
            "created_at": "2024-10-12T07:41:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408443148",
            "id": 2408443148,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Pje0M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408443148/reactions"
            },
            "updated_at": "2024-10-12T07:41:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408443148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is there no way this can't be done for only rendered entrys? There's no point getting a ts-parser if that entry never appears on screen.\r\n\r\nyeah, unfortunately, telescope doesn't have \"view point change\" callback, we can use plenary.filetype for now though, while the parsers are very cheap.",
            "created_at": "2024-10-12T07:50:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408445562",
            "id": 2408445562,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6PjfZ6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408445562/reactions"
            },
            "updated_at": "2024-10-12T07:50:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408445562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/97848247?v=4",
                "events_url": "https://api.github.com/users/xzbdmw/events{/privacy}",
                "followers_url": "https://api.github.com/users/xzbdmw/followers",
                "following_url": "https://api.github.com/users/xzbdmw/following{/other_user}",
                "gists_url": "https://api.github.com/users/xzbdmw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xzbdmw",
                "id": 97848247,
                "login": "xzbdmw",
                "node_id": "U_kgDOBdULtw",
                "organizations_url": "https://api.github.com/users/xzbdmw/orgs",
                "received_events_url": "https://api.github.com/users/xzbdmw/received_events",
                "repos_url": "https://api.github.com/users/xzbdmw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xzbdmw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xzbdmw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xzbdmw",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> telescope doesn't have \"view point change\" callback\r\n\r\nI feel like _that_ would be worth addressing then, rather than bending Neovim into shape...",
            "created_at": "2024-10-12T07:58:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408447776",
            "id": 2408447776,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Pjf8g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408447776/reactions"
            },
            "updated_at": "2024-10-12T07:58:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408447776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > telescope doesn't have \"view point change\" callback\r\n> \r\n> I feel like _that_ would be worth addressing then, rather than bending Neovim into shape...\r\n\r\nI feel like _this_ would be a reasonable take if the issue can be worked around or the suggested change is outrageously bad. This PR is neither. Adding special option for a more performant behavior in extreme situations is not something that was never done before (see #26858 for an example).",
            "created_at": "2024-10-12T08:17:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408453932",
            "id": 2408453932,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Pjhcs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408453932/reactions"
            },
            "updated_at": "2024-10-12T08:18:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408453932",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I feel like this would be a reasonable take if the issue can be worked around or the suggested change is outrageously bad. This PR is neither.\n\nRespectfully, me and other maintainers disagree.\n\n> Adding special option for a more performant behavior in extreme situations is not something that was never done before (see #26858 for an example).\n\nNot a good comparison. That change did not regress behaviour, it instead provided an alternative method of copying that is just as valid. It ironically bypasses an optimisation to improve performance. And there was no other possible solution. The change stemmed from _your_ request for `vim.diagnostic.get()` to return a copy instead of returning a reference (#25010)",
            "created_at": "2024-10-12T08:43:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408461330",
            "id": 2408461330,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6PjjQS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408461330/reactions"
            },
            "updated_at": "2024-10-12T08:44:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408461330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And there was no other possible solution.\r\n\r\nSame issue here - there is no other solution to improve performance without this change.\r\n\r\n> The change stemmed from _your_ request for `vim.diagnostic.get()` to return a copy instead of returning a reference (#25010)\r\n\r\nThis is a :thinking: take: claiming to provide an improvement for the case which was already properly solved at the moment (#26807) and not giving a proper benchmarking in the solution itself (resorting instead to a completely fictional scenarios for more scary numbers).",
            "created_at": "2024-10-12T08:52:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408463835",
            "id": 2408463835,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Pjj3b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408463835/reactions"
            },
            "updated_at": "2024-10-12T08:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408463835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Same issue here - there is no other solution to improve performance without this change.\n\nYes there is. Rework the application code to call the function as many times as _needed_, instead of thrashing calls to it unnecessarily. We're not going to add any special case flags that regress behaviour if we know there is a much more scalable solution, that addresses the problem more generally.\n\n>  (resorting instead to a completely fictional scenarios for more scary numbers).\n\nThe benchmark provided results for two extremes: small tables and large tables. The scenario that is most representative of real code in this codebase is the scenario with only unique tables.\n\n`vim.diagnostic.get()` can return a very large structure, contains only unique tables, and is called by many plugins (not just for status line), and the change didn't regress behaviour in any way.",
            "created_at": "2024-10-12T09:15:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408470948",
            "id": 2408470948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Pjlmk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408470948/reactions"
            },
            "updated_at": "2024-10-12T09:15:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408470948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `vim.diagnostic.get()` can return a very large structure, contains only unique tables, and is called by many plugins (not just for status line), and the change didn't regress behaviour in any way.\r\n\r\nWell, this justification deserves the same (almost word for word) treatment then. So...\r\n\r\n*Surely* accounting for `vim.diagnostic.get()` returning a very large structure is a bit of a dubious requirement. Good utility function should be utilising the event loop as much as possible. You would consider it a bad user experience otherwise, right? So this sounds like a design problem. You know, that it's not difficult to add a whole heap of niche flags to functions without incurring much implementation cost. The issue is that these flags are very niche. Performance for the sake of performance is not enough for this kind of change to be merged.\r\n\r\nTo me the whole previous paragraph sounds very stretched, yet it is the similar treatment of this PR.",
            "created_at": "2024-10-12T11:22:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2408528312",
            "id": 2408528312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Pjzm4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408528312/reactions"
            },
            "updated_at": "2024-10-12T11:22:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2408528312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Another finding:\r\nnvim_tree calls [vim.filetype.match](https://github.com/nvim-tree/nvim-tree.lua/blob/610a1c189bdb2b9b936169b2ea9d1838f971fa2b/lua/nvim-tree/explorer/sorters.lua#L142) on every reloading, for every node, and nodes count can become very large, that slow down the editor a lot.\r\n\r\n<img width=\"998\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8c4d699b-693e-4481-b859-c10ba39c8c5b\">\r\n\r\nall the deep green area is file matching, and because this is intended for sort, all the nodes needs to inevitably be considered.\r\n",
            "created_at": "2024-11-06T18:20:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2460476019",
            "id": 2460476019,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Sp-Jz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2460476019/reactions"
            },
            "updated_at": "2024-11-06T18:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2460476019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/97848247?v=4",
                "events_url": "https://api.github.com/users/xzbdmw/events{/privacy}",
                "followers_url": "https://api.github.com/users/xzbdmw/followers",
                "following_url": "https://api.github.com/users/xzbdmw/following{/other_user}",
                "gists_url": "https://api.github.com/users/xzbdmw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xzbdmw",
                "id": 97848247,
                "login": "xzbdmw",
                "node_id": "U_kgDOBdULtw",
                "organizations_url": "https://api.github.com/users/xzbdmw/orgs",
                "received_events_url": "https://api.github.com/users/xzbdmw/received_events",
                "repos_url": "https://api.github.com/users/xzbdmw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xzbdmw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xzbdmw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xzbdmw",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "nvim_tree most definitely shouldn't be calling vim.filetype.match on every node. It just needs to do it on the visible ones. I doubt it requires sorting by filetype; that doesn't sound useful. You would sort by node type (directory or file), alphabetically, filesize, time etc, which most would require an fs_stat anyway.",
            "created_at": "2024-11-06T20:24:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2460707715",
            "id": 2460707715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Sq2uD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2460707715/reactions"
            },
            "updated_at": "2024-11-06T20:24:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2460707715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I guess they just added the info so user has more choice to decide how to sort, but did not expect it to be the bottleneck.",
            "created_at": "2024-11-06T20:27:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/30086#issuecomment-2460713697",
            "id": 2460713697,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
            "node_id": "IC_kwDOAPphoM6Sq4Lh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2460713697/reactions"
            },
            "updated_at": "2024-11-06T20:37:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2460713697",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/97848247?v=4",
                "events_url": "https://api.github.com/users/xzbdmw/events{/privacy}",
                "followers_url": "https://api.github.com/users/xzbdmw/followers",
                "following_url": "https://api.github.com/users/xzbdmw/following{/other_user}",
                "gists_url": "https://api.github.com/users/xzbdmw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/xzbdmw",
                "id": 97848247,
                "login": "xzbdmw",
                "node_id": "U_kgDOBdULtw",
                "organizations_url": "https://api.github.com/users/xzbdmw/orgs",
                "received_events_url": "https://api.github.com/users/xzbdmw/received_events",
                "repos_url": "https://api.github.com/users/xzbdmw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/xzbdmw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/xzbdmw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/xzbdmw",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30086/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30086/commits",
    "created_at": "2024-08-18T17:05:58Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30086.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:filetype-fast-opt",
        "ref": "filetype-fast-opt",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2025-09-07T10:51:03Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 331633,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2025-09-06T11:45:30Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8050734fd55e80b69a835c8138386753b201f1ee",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30086",
    "id": 2024462221,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30086",
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua, ftplugins",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e56ea9dac7cb2ab4f707ee542697ee8f046f22d7",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM54qteN",
    "number": 30086,
    "patch_url": "https://github.com/neovim/neovim/pull/30086.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30086/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8050734fd55e80b69a835c8138386753b201f1ee",
    "title": "Add `fast` option to `vim.filetype.match()`",
    "updated_at": "2025-09-06T11:46:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30086",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}