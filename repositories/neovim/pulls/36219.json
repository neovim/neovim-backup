{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/36219/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/36219/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/36219"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/36219"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/36219/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/adf5b0554c316196ce5e6907f46cd9d5209f9ebe"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6362,
            "forks_count": 6362,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 2032,
            "open_issues_count": 2032,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-10-20T22:45:38Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 348094,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 93601,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-10-21T02:13:22Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 93601,
            "watchers_count": 93601,
            "web_commit_signoff_required": false
        },
        "sha": "a04c73ca071fdc2461365a8a10a314bd0d1d806d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Closes #36181.\r\n\r\nProvides a `vim.lsp.inlay_hint.apply_text_edits()` function that can be used to create keymaps for inserting [`inlayHints`](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHint) that comes with text edits. \r\n\r\nThis is a subset of https://github.com/Davidyz/inlayhint-filler.nvim because the original plugin provides extended features that, in principle, do not adhere to the LSP specs.\r\n\r\nExample `minimal.lua` using [basedpyright](https://docs.basedpyright.com/latest/):\r\n```lua\r\nvim.lsp.config(\r\n  'basedpyright',\r\n  ---@type vim.lsp.Config\r\n  {\r\n    cmd = { 'basedpyright-langserver', '--stdio' },\r\n    filetypes = { 'python' },\r\n    settings = {\r\n      basedpyright = {\r\n        analysis = {\r\n          inlayHints = {\r\n            callArgumentNames = 'all',\r\n            functionReturnTypes = true,\r\n            variableTypes = true,\r\n            genericTypes = true,\r\n            useTypingExtensions = true,\r\n            callArgumentNamesMatching = true,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    capabilities = vim.lsp.protocol.make_client_capabilities(),\r\n  }\r\n)\r\n\r\nvim.lsp.enable('basedpyright', true)\r\nvim.lsp.inlay_hint.enable(true)\r\n\r\nfor _, mode in ipairs({ 'n', 'v' }) do\r\n  vim.keymap.set(mode, 'gI', vim.lsp.inlay_hint.apply_text_edits)\r\nend\r\n```",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440203509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440203509"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n      util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n```\n",
            "commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "created_at": "2025-10-17T14:21:32Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      vim.lsp.util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440203509",
            "id": 2440203509,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rcoz1",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 517,
            "original_position": 90,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350601238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440203509/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440203509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440205352"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440205352"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n    local start_pos = fn.getpos('v')\n    local end_pos = fn.getpos('.')\n```\n",
            "commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "created_at": "2025-10-17T14:22:11Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440205352",
            "id": 2440205352,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RcpQo",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 490,
            "original_position": 63,
            "original_start_line": 489,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350601238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440205352/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-10-17T14:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440205352",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440206452"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440206452"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n```\n\nthis was for debugging im guessing?\n",
            "commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "created_at": "2025-10-17T14:22:35Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440206452",
            "id": 2440206452,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rcph0",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 501,
            "original_position": 74,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350601238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440206452/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440206452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440218000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440218000"
                }
            },
            "author_association": "MEMBER",
            "body": "Wouldn't this be handled by the one who creates a keybind for this func?",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-17T14:26:34Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440218000",
            "id": 2440218000,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RcsWQ",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 470,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350601238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440218000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440218000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440224450"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440224450"
                }
            },
            "author_association": "MEMBER",
            "body": "Why refetch over reading bufstate.client_hints?",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-17T14:28:52Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      vim.lsp.util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n+\n+    client:request(\n+      'textDocument/inlayHint',",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440224450",
            "id": 2440224450,
            "line": 527,
            "node_id": "PRRC_kwDOAPphoM6Rct7C",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 520,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 100,
            "pull_request_review_id": 3350601238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440224450/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440224450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440241587"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440241587"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah yes sorry about that. ",
            "commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "created_at": "2025-10-17T14:34:55Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440241587",
            "id": 2440241587,
            "in_reply_to_id": 2440206452,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RcyGz",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 501,
            "original_position": 74,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350649912,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440241587/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440241587",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440253777"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440253777"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "because bufstate.client_hints uses the default handlers, which can be overridden by UI decorations, etc.\r\n\r\nhttps://github.com/neovim/neovim/issues/36181#issuecomment-3404616670",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-17T14:39:22Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      vim.lsp.util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n+\n+    client:request(\n+      'textDocument/inlayHint',",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440253777",
            "id": 2440253777,
            "in_reply_to_id": 2440224450,
            "line": 527,
            "node_id": "PRRC_kwDOAPphoM6Rc1FR",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 520,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 100,
            "pull_request_review_id": 3350664917,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440253777/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:39:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440253777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440264180"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440264180"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "When you follow the docstring to configure dot-repeat using `operatorfunc`, the argument will be a string that contains motion info. Maybe we could work around this by creating a wrapper function that is dedicated to dot-repeat? ",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-17T14:42:49Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440264180",
            "id": 2440264180,
            "in_reply_to_id": 2440218000,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rc3n0",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 470,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350679816,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440264180/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:42:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440264180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2440267324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440267324"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Idk why but some tests failed after this change. I'll figure them out and push the cleanup altogether.",
            "commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "created_at": "2025-10-17T14:43:50Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      vim.lsp.util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2440267324",
            "id": 2440267324,
            "in_reply_to_id": 2440203509,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rc4Y8",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 517,
            "original_position": 90,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3350683911,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440267324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T14:43:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2440267324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441442466"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441442466"
                }
            },
            "author_association": "MEMBER",
            "body": "Looks like `_comment.lua` has a good example",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-17T23:29:17Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441442466",
            "id": 2441442466,
            "in_reply_to_id": 2440218000,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RhXSi",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 470,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 1,
            "pull_request_review_id": 3352374825,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441442466/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T23:29:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441442466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441445702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441445702"
                }
            },
            "author_association": "MEMBER",
            "body": "We should probably skip calling `resolve` if the hint has already set the text edits field? Not sure if this adds too much complexity.",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-17T23:33:56Z",
            "diff_hunk": "@@ -561,22 +586,41 @@ function M.apply_text_edits(opts)\n                 return true\n               end\n             )\n-            :map(\n-              ---@param hint lsp.InlayHint\n-              function(hint)\n-                return hint.textEdits\n-              end\n-            )\n-            :flatten(1)\n             :totable()\n-          if #text_edits > 0 then\n-            return vim.schedule(function()\n-              util.apply_text_edits(text_edits, bufnr, client.offset_encoding)\n-            end)\n+          if #hints > 0 then\n+            if not support_resolve then\n+              if apply_edits(client, hints) == 0 then\n+                -- no edits applied. proceed with the iteration.\n+                return do_insert(next(clients, idx))\n+              else\n+                -- we're done with the edits.\n+                return\n+              end\n+            elseif support_resolve then\n+              ---@type integer\n+              local num_processed = 0\n+\n+              for i, h in ipairs(hints) do\n+                client:request('inlayHint/resolve', h, function(_, _result, _, _)",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441445702",
            "id": 2441445702,
            "line": 582,
            "node_id": "PRRC_kwDOAPphoM6RhYFG",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 604,
            "original_position": 95,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 155,
            "pull_request_review_id": 3352380089,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441445702/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-17T23:34:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441445702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441549530"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441549530"
                }
            },
            "author_association": "MEMBER",
            "body": "Why should we make this an option? Intuitively I would expect this to only resolve the inlay hints under the cursor.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T03:24:02Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441549530",
            "id": 2441549530,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rhxba",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2182,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352506470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441549530/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441549530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441549853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441549853"
                }
            },
            "author_association": "MEMBER",
            "body": "This feels a bit niche. I would leave it out of the docs.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T03:24:51Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441549853",
            "id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rhxgd",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352506470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441549853/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441549853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441550004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441550004"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, { desc = \"Apply inlay hint edits\" })\n```",
            "commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "created_at": "2025-10-18T03:25:19Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441550004",
            "id": 2441550004,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rhxi0",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2195,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352506470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441550004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441550004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441552305"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441552305"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm I agree with @ribru17 here. Triggering another inlay hint request here feels strange considering that users will usually apply the edits from the currently displayed hints.",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-18T03:32:00Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      vim.lsp.util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n+\n+    client:request(\n+      'textDocument/inlayHint',",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441552305",
            "id": 2441552305,
            "in_reply_to_id": 2440224450,
            "line": 527,
            "node_id": "PRRC_kwDOAPphoM6RhyGx",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 520,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 100,
            "pull_request_review_id": 3352506470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441552305/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441552305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441552796"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441552796"
                }
            },
            "author_association": "MEMBER",
            "body": "I doubt that multiple clients will be providing inlay hints for the same range. And even if it does happen, I think people would like to apply the edits from a single client. Perhaps we should add a client filter option?",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-18T03:33:45Z",
            "diff_hunk": "@@ -435,4 +436,197 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = fn.getpos('v')\n+    local end_pos = fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  --- returns the number of edits applied.\n+  ---@param client vim.lsp.Client\n+  ---@param hints lsp.InlayHint\n+  ---@return integer\n+  local function apply_edits(client, hints)\n+    ---@type lsp.TextEdit[]\n+    local text_edits = vim\n+      .iter(hints)\n+      :filter(\n+        ---@param hint lsp.InlayHint\n+        function(hint)\n+          -- only keep those that have text edits.\n+          return hint ~= nil and hint.textEdits ~= nil and not vim.tbl_isempty(hint.textEdits)\n+        end\n+      )\n+      :map(\n+        ---@param hint lsp.InlayHint\n+        function(hint)\n+          return hint.textEdits\n+        end\n+      )\n+      :flatten(1)\n+      :totable()\n+    if #text_edits > 0 then\n+      vim.schedule(function()\n+        util.apply_text_edits(text_edits, bufnr, client.offset_encoding)\n+      end)\n+    end\n+    return #text_edits\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n+    local support_resolve = client:supports_method('inlayHint/resolve', bufnr)\n+\n+    client:request(\n+      'textDocument/inlayHint',\n+      params,\n+      ---@param result lsp.InlayHint[]?\n+      function(_, result, _, _)\n+        if result ~= nil then\n+          ---@type lsp.InlayHint[]\n+          local hints = vim\n+            .iter(result)\n+            :filter(\n+              ---@param hint lsp.InlayHint\n+              function(hint)\n+                if opts.post_filtering then\n+                  local hint_pos = hint.position\n+                  if\n+                    hint_pos.line < params.range.start.line\n+                    or hint_pos.line > params.range['end'].line\n+                  then\n+                    -- outside of line range\n+                    return false\n+                  end\n+\n+                  if hint_pos.line == params.range.start.line then\n+                    -- pos is in the same line as range.start\n+                    if hint_pos.line == params.range['end'].line then\n+                      -- range.start in the same line as range.end\n+                      return params.range.start.character <= hint_pos.character\n+                        and hint_pos.character <= params.range['end'].character\n+                    end\n+                    return hint_pos.character >= params.range.start.character\n+                  end\n+\n+                  if hint_pos.line == params.range['end'].line then\n+                    return hint_pos.character <= params.range['end'].character\n+                  end\n+                end\n+                return true\n+              end\n+            )\n+            :totable()\n+          if #hints > 0 then\n+            if not support_resolve then\n+              if apply_edits(client, hints) == 0 then\n+                -- no edits applied. proceed with the iteration.\n+                return do_insert(next(clients, idx))\n+              else\n+                -- we're done with the edits.\n+                return\n+              end\n+            elseif support_resolve then\n+              ---@type integer\n+              local num_processed = 0\n+\n+              for i, h in ipairs(hints) do\n+                client:request('inlayHint/resolve', h, function(_, _result, _, _)\n+                  if _result ~= nil then\n+                    hints[i] = _result\n+                  end\n+                  num_processed = num_processed + 1\n+\n+                  if num_processed == #hints then\n+                    apply_edits(client, hints)\n+                  end\n+                end, bufnr)\n+              end\n+            end\n+          else\n+            -- no hints in the given range.\n+            return do_insert(next(clients, idx))\n+          end\n+        else\n+          -- result is nil. Proceed to next client.",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441552796",
            "id": 2441552796,
            "line": 613,
            "node_id": "PRRC_kwDOAPphoM6RhyOc",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 621,
            "original_position": 194,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 186,
            "pull_request_review_id": 3352506470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441552796/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:33:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441552796",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441553446"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441553446"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> I would expect this to only resolve the inlay hints under the cursor.\r\n\r\nI thought so too, but when experimenting with basedpyright, I found that it always resolves the whole line, not just under the cursor.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T03:36:23Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441553446",
            "id": 2441553446,
            "in_reply_to_id": 2441549530,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RhyYm",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2182,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352511318,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441553446/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:36:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441553446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441555905"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441555905"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@ribru17 what do you think about this? if we're dropping this section from the doc, I might as well just drop [this `if` block here](https://github.com/Davidyz/neovim/blob/52fb934668c922c13a579367024cc01bf7885197/runtime/lua/vim/lsp/inlay_hint.lua#L469).",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T03:41:43Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441555905",
            "id": 2441555905,
            "in_reply_to_id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rhy_B",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352514098,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441555905/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:41:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441555905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441556268"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441556268"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "it does only insert from a single client. The `do_insert(next(...))` thing only proceed if the previous client doesn't provide any edit. If `apply_edits` inserted at least 1 edit, the iteration stops.",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-18T03:43:08Z",
            "diff_hunk": "@@ -435,4 +436,197 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = fn.getpos('v')\n+    local end_pos = fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  --- returns the number of edits applied.\n+  ---@param client vim.lsp.Client\n+  ---@param hints lsp.InlayHint\n+  ---@return integer\n+  local function apply_edits(client, hints)\n+    ---@type lsp.TextEdit[]\n+    local text_edits = vim\n+      .iter(hints)\n+      :filter(\n+        ---@param hint lsp.InlayHint\n+        function(hint)\n+          -- only keep those that have text edits.\n+          return hint ~= nil and hint.textEdits ~= nil and not vim.tbl_isempty(hint.textEdits)\n+        end\n+      )\n+      :map(\n+        ---@param hint lsp.InlayHint\n+        function(hint)\n+          return hint.textEdits\n+        end\n+      )\n+      :flatten(1)\n+      :totable()\n+    if #text_edits > 0 then\n+      vim.schedule(function()\n+        util.apply_text_edits(text_edits, bufnr, client.offset_encoding)\n+      end)\n+    end\n+    return #text_edits\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n+    local support_resolve = client:supports_method('inlayHint/resolve', bufnr)\n+\n+    client:request(\n+      'textDocument/inlayHint',\n+      params,\n+      ---@param result lsp.InlayHint[]?\n+      function(_, result, _, _)\n+        if result ~= nil then\n+          ---@type lsp.InlayHint[]\n+          local hints = vim\n+            .iter(result)\n+            :filter(\n+              ---@param hint lsp.InlayHint\n+              function(hint)\n+                if opts.post_filtering then\n+                  local hint_pos = hint.position\n+                  if\n+                    hint_pos.line < params.range.start.line\n+                    or hint_pos.line > params.range['end'].line\n+                  then\n+                    -- outside of line range\n+                    return false\n+                  end\n+\n+                  if hint_pos.line == params.range.start.line then\n+                    -- pos is in the same line as range.start\n+                    if hint_pos.line == params.range['end'].line then\n+                      -- range.start in the same line as range.end\n+                      return params.range.start.character <= hint_pos.character\n+                        and hint_pos.character <= params.range['end'].character\n+                    end\n+                    return hint_pos.character >= params.range.start.character\n+                  end\n+\n+                  if hint_pos.line == params.range['end'].line then\n+                    return hint_pos.character <= params.range['end'].character\n+                  end\n+                end\n+                return true\n+              end\n+            )\n+            :totable()\n+          if #hints > 0 then\n+            if not support_resolve then\n+              if apply_edits(client, hints) == 0 then\n+                -- no edits applied. proceed with the iteration.\n+                return do_insert(next(clients, idx))\n+              else\n+                -- we're done with the edits.\n+                return\n+              end\n+            elseif support_resolve then\n+              ---@type integer\n+              local num_processed = 0\n+\n+              for i, h in ipairs(hints) do\n+                client:request('inlayHint/resolve', h, function(_, _result, _, _)\n+                  if _result ~= nil then\n+                    hints[i] = _result\n+                  end\n+                  num_processed = num_processed + 1\n+\n+                  if num_processed == #hints then\n+                    apply_edits(client, hints)\n+                  end\n+                end, bufnr)\n+              end\n+            end\n+          else\n+            -- no hints in the given range.\n+            return do_insert(next(clients, idx))\n+          end\n+        else\n+          -- result is nil. Proceed to next client.",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441556268",
            "id": 2441556268,
            "in_reply_to_id": 2441552796,
            "line": 613,
            "node_id": "PRRC_kwDOAPphoM6RhzEs",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 621,
            "original_position": 194,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 186,
            "pull_request_review_id": 3352514537,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441556268/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T03:43:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441556268",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441564243"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441564243"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "But reading from `bufstate.client_hints` means that the `vim.lsp.inlay_hint.apply_text_edits` function will break if the default inlay hint handler (`vim.lsp.handlers['textDocument/inlayHint']`) is overwritten by users/plugins. I've had a user reporting this exact problem when working with https://github.com/Davidyz/inlayhint-filler.nvim (the issue wasn't filed on GitHub). That's the reason I decided to drop `vim.lsp.inlay_hint.get` and write my own requests.\r\n\r\nAfter all, the cached hints in `bufstate` are mostly used for UI (virtual texts, etc.), and it's not uncommon for users to want to customise that. `textEdits` is a different story. Just like completions, you usually just want to apply whatever the LSP server provides. I think it's not a good experience if a user overwrites the default handler for UI customisation and discovers that the text edits break.\r\n\r\n> users will usually apply the edits from the currently displayed hints.\r\n\r\nPlugins/user configs like https://github.com/chrisgrieser/nvim-lsp-endhints will modify the displayed position of the hints and prevent updating `bufstate`. This makes the hints from bufstate unreliable for text edits.",
            "commit_id": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
            "created_at": "2025-10-18T04:12:48Z",
            "diff_hunk": "@@ -435,4 +436,154 @@ function M.enable(enable, filter)\n   end\n end\n \n+--- @class vim.lsp.inlay_hint.apply_text_edits.Opts\n+--- Whether to filter the inlay hints to strictly include the ones in the range.\n+--- @field post_filtering boolean?\n+\n+--- For supported LSP servers, apply the `textEdit`s in the inlay hint to the buffer.\n+---\n+--- - In |Normal-mode|, this function inserts inlay hints that are adjacent to the cursor.\n+--- - In |Visual-mode|, this function inserts inlay hints that are in the visually selected range.\n+---\n+--- Example usage:\n+--- ```lua\n+--- vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+--- ```\n+---\n+--- For dot-repeat, you can set up the keymap like the following:\n+--- ```lua\n+--- vim.keymap.set(\n+---   \"n\",\n+---   \"gI\",\n+---   function()\n+---     vim.o.operatorfunc = \"v:lua.vim.lsp.inlay_hint.apply_text_edits\"\n+---     return vim.api.nvim_input(\"g@ \")\n+---   end,\n+---   {}\n+--- )\n+--- ```\n+---\n+---\n+--- @param opts? vim.lsp.inlay_hint.apply_text_edits.Opts|string\n+function M.apply_text_edits(opts)\n+  if type(opts) ~= 'table' then\n+    -- TODO: how to handle dot-repeat special arg?\n+    opts = {}\n+  end\n+  opts = vim.tbl_deep_extend('force', { post_filtering = true }, opts or {})\n+  local bufnr = api.nvim_get_current_buf()\n+  local winid = fn.bufwinid(bufnr)\n+  local clients = vim.lsp.get_clients({ bufnr = bufnr, method = 'textDocument/inlayHint' })\n+\n+  local mode = fn.mode()\n+\n+  -- mark position, (1, 0) indexed, end-inclusive\n+  ---@type {start: [integer, integer], end: [integer, integer]}\n+  local range = {}\n+\n+  if mode == 'n' then\n+    local cursor = api.nvim_win_get_cursor(winid)\n+    range.start = cursor\n+    range['end'] = cursor\n+  else\n+    local start_pos = vim.fn.getpos('v')\n+    local end_pos = vim.fn.getpos('.')\n+    if start_pos[2] > end_pos[2] or (start_pos[2] == end_pos[2] and start_pos[3] > end_pos[3]) then\n+      ---@type [integer, integer, integer, integer]\n+      start_pos, end_pos = end_pos, start_pos\n+    end\n+\n+    range = {\n+      start = { start_pos[2], start_pos[3] - 1 },\n+      ['end'] = { end_pos[2], end_pos[3] - 2 },\n+    }\n+\n+    vim.schedule_wrap(vim.notify)(vim.inspect(range))\n+    if mode == 'V' or mode == 'Vs' then\n+      range.start[2] = 0\n+      range['end'][1] = range['end'][1] + 1\n+      range['end'][2] = 0\n+    end\n+  end\n+\n+  ---@param idx? integer\n+  ---@param client vim.lsp.Client\n+  local function do_insert(idx, client)\n+    if idx == nil then\n+      return\n+    end\n+\n+    local params =\n+      vim.lsp.util.make_given_range_params(range.start, range['end'], bufnr, client.offset_encoding)\n+\n+    client:request(\n+      'textDocument/inlayHint',",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441564243",
            "id": 2441564243,
            "in_reply_to_id": 2440224450,
            "line": 527,
            "node_id": "PRRC_kwDOAPphoM6Rh1BT",
            "original_commit_id": "ff21f996bfee9da03843f2bde61b2e6f47ab9040",
            "original_line": 520,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/inlay_hint.lua",
            "position": 100,
            "pull_request_review_id": 3352525209,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441564243/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T04:12:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441564243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441566051"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441566051"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah we should defer to the opinion of @MariaSolOs here. Tbh I don't fully get the need for dot repeat here- dot repeat is meant for operations that act over a motion, but it looks like this one doesn't (in normal mode, it just works on adjacent inlay hints). ",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T04:18:51Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441566051",
            "id": 2441566051,
            "in_reply_to_id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rh1dj",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352528989,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441566051/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T04:18:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441566051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441567313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441567313"
                }
            },
            "author_association": "MEMBER",
            "body": "Or at least if it seems that useful, is there a way for the public function itself to set the operatorfunc to some inner function which does the actual logic? So users can just set that function to a keybind and have dot repeat just workTM? (unsure if this is possible, just curious)",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T04:23:18Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441567313",
            "id": 2441567313,
            "in_reply_to_id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rh1xR",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352530230,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441567313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T04:23:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441567313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441585966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441585966"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> is there a way for the public function itself to set the operatorfunc to some inner function which does the actual logic?\r\n\r\nIt is possible, and that's actually how it's done in my plugin: https://github.com/Davidyz/inlayhint-filler.nvim/blob/832456c81586653a6892d983e6709337558f944c/lua/inlayhint-filler.lua#L208\r\n\r\nI wanted to keep things contained in one single function, but I guess it just makes things more complicated than needed.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T05:30:17Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441585966",
            "id": 2441585966,
            "in_reply_to_id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Rh6Uu",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352558477,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441585966/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T05:30:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441585966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2441760827"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441760827"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think I'll just drop built-in dot-repeat, because it's tricky (and maybe too complicated) to get it to play nicely with `opts`. Users can always create a wrapper for the `apply_text_edits` function with the preferred options and use the wrapper with `operatorfunc`.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T08:04:06Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2441760827",
            "id": 2441760827,
            "in_reply_to_id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RilA7",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3352753592,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441760827/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T08:04:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2441760827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2442460375"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442460375"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe then the option should be removed, and the additional filtering always performed",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-18T15:13:42Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2442460375",
            "id": 2442460375,
            "in_reply_to_id": 2441549530,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RlPzX",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2182,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3353626518,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442460375/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-18T15:13:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442460375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2442702504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442702504"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, I say we should just remove this option and keep the current logic of applying the edits under the cursor when in normal mode and then allowing for a more controlled application of the edits with visual mode.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-19T00:51:17Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2442702504",
            "id": 2442702504,
            "in_reply_to_id": 2441549530,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RmK6o",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2182,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3353905245,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442702504/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-19T00:51:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442702504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/36219#discussion_r2442703446"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/36219"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442703446"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah dot-repeat isn't something that we should worry about in the initial implementation of LSP features.",
            "commit_id": "e7ec0b2033e86ba7f33bd9ef9157584ab7f25509",
            "created_at": "2025-10-19T00:54:51Z",
            "diff_hunk": "@@ -2176,6 +2176,40 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n ==============================================================================\n Lua module: vim.lsp.inlay_hint                                *lsp-inlay_hint*\n \n+*vim.lsp.inlay_hint.apply_text_edits.Opts*\n+\n+    Fields: ~\n+      • {post_filtering}  (`boolean?`) Whether to filter the inlay hints to\n+                          strictly include the ones in the range.\n+\n+\n+apply_text_edits({opts})               *vim.lsp.inlay_hint.apply_text_edits()*\n+    For supported LSP servers, apply the `textEdit`s in the inlay hint to the\n+    buffer.\n+    • In |Normal-mode|, this function inserts inlay hints that are adjacent to\n+      the cursor.\n+    • In |Visual-mode|, this function inserts inlay hints that are in the\n+      visually selected range.\n+\n+    Example usage: >lua\n+        vim.keymap.set(\"n\", \"gI\", vim.lsp.inlay_hint.apply_text_edits, {})\n+<\n+\n+    For dot-repeat, you can set up the keymap like the following: >lua",
            "html_url": "https://github.com/neovim/neovim/pull/36219#discussion_r2442703446",
            "id": 2442703446,
            "in_reply_to_id": 2441549853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6RmLJW",
            "original_commit_id": "52fb934668c922c13a579367024cc01bf7885197",
            "original_line": 2198,
            "original_position": 34,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 1,
            "pull_request_review_id": 3353905904,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442703446/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-10-19T00:54:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2442703446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "BTW: this PR doesn't set up any default keymaps because not a lot of LSP servers implement `textEdits` in the inlay hint responses. Defining a default keymap for this would be useless for those who don't use a compatible LSP server and might be polluting the \"namespace of keymaps\".",
            "created_at": "2025-10-17T11:07:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/36219#issuecomment-3415027714",
            "id": 3415027714,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36219",
            "node_id": "IC_kwDOAPphoM7LjTAC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3415027714/reactions"
            },
            "updated_at": "2025-10-17T11:07:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3415027714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> We should also handle cases where we need to resolve inlay hints\r\n\r\nthis'll take a bit longer because there'd need to be parallel async requests to resolve (each resolve only handles one inlay hint). I'll try.",
            "created_at": "2025-10-17T15:41:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/36219#issuecomment-3416097438",
            "id": 3416097438,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36219",
            "node_id": "IC_kwDOAPphoM7LnYKe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3416097438/reactions"
            },
            "updated_at": "2025-10-17T15:41:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3416097438",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> BTW: this PR doesn't set up any default keymaps because not a lot of LSP servers implement `textEdits` in the inlay hint responses. Defining a default keymap for this would be useless for those who don't use a compatible LSP server and might be polluting the \"namespace of keymaps\".\r\n\r\nWe also don't enable inlay hints by default.",
            "created_at": "2025-10-18T03:22:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/36219#issuecomment-3417756312",
            "id": 3417756312,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36219",
            "node_id": "IC_kwDOAPphoM7LttKY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3417756312/reactions"
            },
            "updated_at": "2025-10-18T03:22:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3417756312",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@Davidyz sorry to do this. I really appreciate the thought and effort put into this PR and I hope you'll stick with us in coming up with a great implementation of this feature, but I do feel the need to take a step back and re-assess the problem that we're trying to solve here.\r\n\r\nThis PR advertises closing https://github.com/neovim/neovim/issues/36181, where I asked why [`vim.lsp.inlay_hint.get()`](https://neovim.io/doc/user/lsp.html#vim.lsp.inlay_hint.get()) isn't enough to accomplish that functionality. [Your response was that it was incompatible with a particular plugin](https://github.com/neovim/neovim/issues/36181#issuecomment-3404616670), which IMO (happy to let others disagree with me here) isn't a strong enough reason to change the LSP API provided by core. Instead of adding different API entrypoints we should try to make the existing functions more ergonomic for plugins to hook into (or better document how to modify these methods from a plugin in a legal way).\r\n\r\nWhile reviewing this PR I realize that in the future we will also want to be able to apply commands provided by [inlay hint label parts](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#inlayHintLabelPart). I don't want us to have to have to cook up code similar to the one proposed here to have that functionality when [`vim.lsp.inlay_hint.get()`](https://neovim.io/doc/user/lsp.html#vim.lsp.inlay_hint.get()) allows that and more. If it doesn't does that today then let's make it more powerful instead of starting from scratch with a different approach :) ",
            "created_at": "2025-10-19T01:11:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/36219#issuecomment-3419114076",
            "id": 3419114076,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36219",
            "node_id": "IC_kwDOAPphoM7Ly4pc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419114076/reactions"
            },
            "updated_at": "2025-10-19T01:11:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419114076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> [Your response was that it was incompatible with a particular plugin](https://github.com/neovim/neovim/issues/36181#issuecomment-3404616670), which IMO (happy to let others disagree with me here) isn't a strong enough reason to change the LSP API provided by core.\r\n\r\nPerhaps I didn't make it clear enough. It's not really about that particular plugin, but rather the fact that overwriting handlers will break the `apply_text_edits` functionality, and the users would have to write the broken functionalities from scratch if they want them back (for example, in my original plugin implementation, I had to refactor everything from `vim.lsp.inlay_hint.get` to `client:request` so that my plugin can continue to function). _I guess this stem from the fact that a inlay hint response object carries fields for completely different purposes (UI, text edits, commands/label\r\nparts, etc.), and since they're used differently, it makes some sense to dispatch them to different handling mechanism?_\r\n\r\nAnyways, if you're intending to closing this PR in favor of a new one that adhere to the nvim API design better, feel free to do so. If that's the case, I'd probably just keep maintaining my implementation in https://github.com/Davidyz/inlayhint-filler.nvim.",
            "created_at": "2025-10-19T02:19:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/36219#issuecomment-3419148138",
            "id": 3419148138,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36219",
            "node_id": "IC_kwDOAPphoM7LzA9q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419148138/reactions"
            },
            "updated_at": "2025-10-19T02:19:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3419148138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/36219/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/36219/commits",
    "created_at": "2025-10-17T02:23:51Z",
    "diff_url": "https://github.com/neovim/neovim/pull/36219.diff",
    "draft": false,
    "head": {
        "label": "Davidyz:feat/inlayhint_textedits",
        "ref": "feat/inlayhint_textedits",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/Davidyz/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/Davidyz/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/Davidyz/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/Davidyz/neovim/branches{/branch}",
            "clone_url": "https://github.com/Davidyz/neovim.git",
            "collaborators_url": "https://api.github.com/repos/Davidyz/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/Davidyz/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/Davidyz/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/Davidyz/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/Davidyz/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/Davidyz/neovim/contributors",
            "created_at": "2025-08-30T03:15:24Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/Davidyz/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/Davidyz/neovim/downloads",
            "events_url": "https://api.github.com/repos/Davidyz/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/Davidyz/neovim/forks",
            "full_name": "Davidyz/neovim",
            "git_commits_url": "https://api.github.com/repos/Davidyz/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/Davidyz/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/Davidyz/neovim/git/tags{/sha}",
            "git_url": "git://github.com/Davidyz/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/Davidyz/neovim/hooks",
            "html_url": "https://github.com/Davidyz/neovim",
            "id": 1047259080,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/Davidyz/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/Davidyz/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/Davidyz/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/Davidyz/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/Davidyz/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/Davidyz/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/Davidyz/neovim/merges",
            "milestones_url": "https://api.github.com/repos/Davidyz/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOPmvnyA",
            "notifications_url": "https://api.github.com/repos/Davidyz/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
                "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
                "followers_url": "https://api.github.com/users/Davidyz/followers",
                "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Davidyz",
                "id": 30951234,
                "login": "Davidyz",
                "node_id": "MDQ6VXNlcjMwOTUxMjM0",
                "organizations_url": "https://api.github.com/users/Davidyz/orgs",
                "received_events_url": "https://api.github.com/users/Davidyz/received_events",
                "repos_url": "https://api.github.com/users/Davidyz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Davidyz",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/Davidyz/neovim/pulls{/number}",
            "pushed_at": "2025-10-20T05:26:45Z",
            "releases_url": "https://api.github.com/repos/Davidyz/neovim/releases{/id}",
            "size": 336607,
            "ssh_url": "git@github.com:Davidyz/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/Davidyz/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/Davidyz/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/Davidyz/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/Davidyz/neovim/subscription",
            "svn_url": "https://github.com/Davidyz/neovim",
            "tags_url": "https://api.github.com/repos/Davidyz/neovim/tags",
            "teams_url": "https://api.github.com/repos/Davidyz/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/Davidyz/neovim/git/trees{/sha}",
            "updated_at": "2025-10-12T13:00:25Z",
            "url": "https://api.github.com/repos/Davidyz/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
            "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
            "followers_url": "https://api.github.com/users/Davidyz/followers",
            "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
            "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Davidyz",
            "id": 30951234,
            "login": "Davidyz",
            "node_id": "MDQ6VXNlcjMwOTUxMjM0",
            "organizations_url": "https://api.github.com/users/Davidyz/orgs",
            "received_events_url": "https://api.github.com/users/Davidyz/received_events",
            "repos_url": "https://api.github.com/users/Davidyz/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Davidyz",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/36219",
    "id": 2922712450,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/36219",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "499a56d600ad18fd88b22c2b87a330c5026d9dc0",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6uNQ2C",
    "number": 36219,
    "patch_url": "https://github.com/neovim/neovim/pull/36219.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/36219/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/adf5b0554c316196ce5e6907f46cd9d5209f9ebe",
    "title": "feat(lsp): add `vim.lsp.inlay_hint.apply_text_edits()`",
    "updated_at": "2025-10-19T03:26:16Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/36219",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/30951234?v=4",
        "events_url": "https://api.github.com/users/Davidyz/events{/privacy}",
        "followers_url": "https://api.github.com/users/Davidyz/followers",
        "following_url": "https://api.github.com/users/Davidyz/following{/other_user}",
        "gists_url": "https://api.github.com/users/Davidyz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Davidyz",
        "id": 30951234,
        "login": "Davidyz",
        "node_id": "MDQ6VXNlcjMwOTUxMjM0",
        "organizations_url": "https://api.github.com/users/Davidyz/orgs",
        "received_events_url": "https://api.github.com/users/Davidyz/received_events",
        "repos_url": "https://api.github.com/users/Davidyz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Davidyz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Davidyz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Davidyz",
        "user_view_type": "public"
    }
}