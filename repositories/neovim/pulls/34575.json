{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34575/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34575/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34575"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34575"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34575/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34575"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6140,
            "forks_count": 6140,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1958,
            "open_issues_count": 1958,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-23T23:51:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 329345,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90542,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-24T01:55:09Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90542,
            "watchers_count": 90542,
            "web_commit_signoff_required": false
        },
        "sha": "487112d6749d4b7a2b82a60fb30cfb9e21c78394",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "# What does this do ?\r\n\r\nThis is a proposal to add a simple new parameter to the `vim.diagnostic.Opts.VirtualText` table called `as_inlay`. This parameter allows the `virtual_text` of any given diagnostics to be set at the 'correct' location in a line, and visually displayed as an inlay hint. This parameter can be `true`, `false` or `nil` (default).\r\n\r\nIf `false`/`nil`, the previously implemented behaviour is enabled: all diagnostics for a line are bunched up at the 0-th column and displayed using an extmark placed at that column.\r\n\r\nIf `true`, it groups the diagnostics on each line based on the column where they appear, and later produces text chunks based on the diagnostic messages. These chunks are produced using the same logic as before.\r\n\r\n# Why ?\r\n\r\nPreviously, all diagnostics for a line would be grouped together at the user-defined position (based on the `virt_text_pos` parameter) and this would result in all diagnostics being bunched up on the start/end of the line, which is (in my opinion) not desired. If I enable `virtual_text`, I expect my issues to be reported where they happen -- or at least have the option to. This is also supported by the fact the `underline` handler actually highlights the right region.\r\n\r\n## Minimal example for the current behaviour\r\n\r\nGiven the following `minimal.lua` file (this expects the `lua_ls` LSP server to be installed):\r\n\r\n```lua\r\nfor name, url in pairs {\r\n  ['nvim-lspconfig'] = 'https://github.com/neovim/nvim-lspconfig',\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim-issue-diagnostics/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\n-- LSP setup:\r\nlocal M = {}\r\nM.settings = {\r\n\tLua = {\r\n\t\truntime = { version = 'LuaJIT', builtin = 'Disabled', },\r\n\t\tdiagnostics = { enable = true, globals = {}, },\r\n\t\tworkspace = { library = {}, checkThirdParty = 'Disabled', },\r\n\t\ttelemetry = { enable = false, }\r\n\t},\r\n}\r\nM.filetypes = { 'lua' }\r\nM.root_markers = { \".luarc.json\", \".luarc.jsonc\", \".luacheckrc\", \".stylua.toml\", \"stylua.toml\", \"selene.toml\", \"selene.yml\", \".git\", \"init.lua\" }\r\n\r\nvim.lsp.config('lua_ls', M)\r\nvim.lsp.enable('lua_ls')\r\n\r\nvim.diagnostic.config({\r\n\tvirtual_text = {\r\n                -- as_inlay = true, -- To add later for the new behaviour!\r\n\t\tspacing = 1,\r\n\t\tvirt_text_pos = 'inline',\r\n\t\thl_mode = 'replace',\r\n\t},\r\n\tfloat = { border = \"rounded\" },\r\n\tseverity_sort = true,\r\n\tupdate_in_insert = false,\r\n})\r\n```\r\n\r\nand the following `error.lua` file (notice the single space in line 3):\r\n\r\n```lua\r\nlocal foo = { 'hello' }\r\n-- The following line consists of a single space:\r\n \r\nlocal bar = { foo = fo }\r\n```\r\n\r\nThe diagnostics returned by the `lua_ls` server would all be bunched up at the start of the line. See the following screenshot:\r\n![neovim-diagnostic-inlay-previous](https://github.com/user-attachments/assets/6d247772-3e15-4a91-adc7-8c416a0b61a8)\r\n\r\n\r\n## Minimal example for the new behaviour\r\n\r\nTake the same `error.lua` file, and add `as_inlay = true,` to the `minimal.lua` file inside the `virtual_text` table, and the diagnostics now look like the following:\r\n![neovim-diagnostic-inlay-next](https://github.com/user-attachments/assets/c81ca93f-d110-47ad-a294-96582eedc232)\r\n\r\n# What's next ?\r\n\r\nI'm looking for feedback! As this change only concerns the rendering of extmarks, I did not see the need to write new tests (and I also did not see what I could test against!). The changes are fairly minimal, and should not dramatically affect runtime performance.\r\n\r\nAll tests related to diagnostics pass on my end. I have updated the documentation for the new parameter.\r\n\r\n<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34575#discussion_r2156658726"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34575"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156658726"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      local col = diag.end_col or diag.col\r\n      group_diags[col] = group_diags[col] or {}\r\n      table.insert(group_diags[col], diag)\r\n```",
            "commit_id": "d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc",
            "created_at": "2025-06-19T10:18:39Z",
            "diff_hunk": "@@ -1643,6 +1657,42 @@ M.handlers.underline = {\n   end,\n }\n \n+--- Returns the text to show for the given diagnostics, grouped by columns.\n+---\n+--- If `opts.as_inlay` is false or nil (default) then all diagnostics are\n+--- grouped on the 0-th column, as was previously done.\n+---\n+--- @param line_diagnostics vim.Diagnostic[]\n+--- @param opts vim.diagnostic.Opts.VirtualText\n+--- @return table<integer, string[]> chunks_per_column\n+local function get_virtual_text_chunks_per_column(line_diagnostics, opts)\n+  local group_diags = {} --- @type table<integer, vim.Diagnostic[]>\n+\n+  if opts.as_inlay then\n+    --- Gather diagnostics per-column:\n+    for _, diag in ipairs(line_diagnostics) do\n+      local col = diag.end_col or diag.col\n+      local col_diags = group_diags[col]\n+      if col_diags == nil then\n+        col_diags = {}\n+        group_diags[col] = col_diags\n+      end\n+      table.insert(col_diags, diag)",
            "html_url": "https://github.com/neovim/neovim/pull/34575#discussion_r2156658726",
            "id": 2156658726,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AjAAm",
            "original_commit_id": "1634d3fedcea13445e8673f41994504c34031daf",
            "original_line": 1680,
            "original_position": 67,
            "original_start_line": 1674,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2942411012,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34575",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156658726/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-19T10:18:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156658726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34575#discussion_r2156670730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34575"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156670730"
                }
            },
            "author_association": "NONE",
            "body": "Ah, I was following the style of `diagnostic_lines()` [as seen here](https://github.com/neovim/neovim/blob/487112d6749d4b7a2b82a60fb30cfb9e21c78394/runtime/lua/vim/diagnostic.lua#L654).\r\n\r\nWill change it and push once all tests are finished.",
            "commit_id": "d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc",
            "created_at": "2025-06-19T10:25:24Z",
            "diff_hunk": "@@ -1643,6 +1657,42 @@ M.handlers.underline = {\n   end,\n }\n \n+--- Returns the text to show for the given diagnostics, grouped by columns.\n+---\n+--- If `opts.as_inlay` is false or nil (default) then all diagnostics are\n+--- grouped on the 0-th column, as was previously done.\n+---\n+--- @param line_diagnostics vim.Diagnostic[]\n+--- @param opts vim.diagnostic.Opts.VirtualText\n+--- @return table<integer, string[]> chunks_per_column\n+local function get_virtual_text_chunks_per_column(line_diagnostics, opts)\n+  local group_diags = {} --- @type table<integer, vim.Diagnostic[]>\n+\n+  if opts.as_inlay then\n+    --- Gather diagnostics per-column:\n+    for _, diag in ipairs(line_diagnostics) do\n+      local col = diag.end_col or diag.col\n+      local col_diags = group_diags[col]\n+      if col_diags == nil then\n+        col_diags = {}\n+        group_diags[col] = col_diags\n+      end\n+      table.insert(col_diags, diag)",
            "html_url": "https://github.com/neovim/neovim/pull/34575#discussion_r2156670730",
            "id": 2156670730,
            "in_reply_to_id": 2156658726,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AjC8K",
            "original_commit_id": "1634d3fedcea13445e8673f41994504c34031daf",
            "original_line": 1680,
            "original_position": 67,
            "original_start_line": 1674,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2942430146,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34575",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156670730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-19T10:25:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156670730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
                "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
                "followers_url": "https://api.github.com/users/Thibaulltt/followers",
                "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
                "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Thibaulltt",
                "id": 25150288,
                "login": "Thibaulltt",
                "node_id": "MDQ6VXNlcjI1MTUwMjg4",
                "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
                "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
                "repos_url": "https://api.github.com/users/Thibaulltt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Thibaulltt",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34575#discussion_r2156678257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34575"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156678257"
                }
            },
            "author_association": "NONE",
            "body": "Fixed in [d326e21](https://github.com/neovim/neovim/pull/34575/commits/d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc)",
            "commit_id": "d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc",
            "created_at": "2025-06-19T10:28:55Z",
            "diff_hunk": "@@ -1643,6 +1657,42 @@ M.handlers.underline = {\n   end,\n }\n \n+--- Returns the text to show for the given diagnostics, grouped by columns.\n+---\n+--- If `opts.as_inlay` is false or nil (default) then all diagnostics are\n+--- grouped on the 0-th column, as was previously done.\n+---\n+--- @param line_diagnostics vim.Diagnostic[]\n+--- @param opts vim.diagnostic.Opts.VirtualText\n+--- @return table<integer, string[]> chunks_per_column\n+local function get_virtual_text_chunks_per_column(line_diagnostics, opts)\n+  local group_diags = {} --- @type table<integer, vim.Diagnostic[]>\n+\n+  if opts.as_inlay then\n+    --- Gather diagnostics per-column:\n+    for _, diag in ipairs(line_diagnostics) do\n+      local col = diag.end_col or diag.col\n+      local col_diags = group_diags[col]\n+      if col_diags == nil then\n+        col_diags = {}\n+        group_diags[col] = col_diags\n+      end\n+      table.insert(col_diags, diag)",
            "html_url": "https://github.com/neovim/neovim/pull/34575#discussion_r2156678257",
            "id": 2156678257,
            "in_reply_to_id": 2156658726,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6AjExx",
            "original_commit_id": "1634d3fedcea13445e8673f41994504c34031daf",
            "original_line": 1680,
            "original_position": 67,
            "original_start_line": 1674,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2942442645,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34575",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156678257/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-19T10:28:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2156678257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
                "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
                "followers_url": "https://api.github.com/users/Thibaulltt/followers",
                "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
                "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Thibaulltt",
                "id": 25150288,
                "login": "Thibaulltt",
                "node_id": "MDQ6VXNlcjI1MTUwMjg4",
                "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
                "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
                "repos_url": "https://api.github.com/users/Thibaulltt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Thibaulltt",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Thank you, but this looks a bit awkward, and I worry about an avalanche of follow-up requests for further configuration (truncation, left or right of position, etc.)\r\n\r\nWhy does this need to be a built-in handler rather than personal customization (or a small plugin)?\r\n\r\nIf it's about showing multiple diagnostics, we already have `virtual_lines` for that, which is the cleaner UX in my opinion. (Or the float, which you can trigger on `CursorHold`.) ",
            "created_at": "2025-06-21T16:02:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/34575#issuecomment-2993650251",
            "id": 2993650251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
            "node_id": "IC_kwDOAPphoM6yb3pL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993650251/reactions"
            },
            "updated_at": "2025-06-21T16:05:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993650251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Or am I misunderstanding and this is about the `inline` option not respecting the actual diagnostic (column) position? Wouldn't that just be a bug that needs to be fixed -- why would this need a new option?",
            "created_at": "2025-06-21T16:14:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/34575#issuecomment-2993655274",
            "id": 2993655274,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
            "node_id": "IC_kwDOAPphoM6yb43q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993655274/reactions"
            },
            "updated_at": "2025-06-21T16:14:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2993655274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi @clason !\r\n\r\nIt is a bit of both: a bug and a new feature. The inline option does not respect the diagnostic position, because it is only given as an option for the `nvim_buf_set_extmark` function and not processed in the diagnostic handler(s). Thus, one could argue either:\r\n\r\n1. the documentation is wrong/misleading in which case this is a bugfix if I remove the `as_inlay` option and leave the column-grouping logic, or\r\n2. this behaviour was intended (after all, the virtual text still shows) and in this case this is a new feature.\r\n\r\nThe reason why this was originally set as a new feature is because some people might like the current behaviour, and I do not want to change something users might rely on. If you think this is fine to implement as a bugfix, I'd happily revert the option and only keep the grouping logic.\r\n\r\n----\r\n\r\nAs for your other considerations:\r\n\r\n> Thank you, but this looks a bit awkward, and I worry about an avalanche of follow-up requests for further configuration (truncation, left or right of position, etc.)\r\n\r\nI fear also fear more follow-up requests, but this might not be a bad thing! The stronger and wider the '`neovim` standard library' is, the better the `neovim` experience is. For the specific case of truncation, it could be handled with a custom `format()` function for the diagnostics in the `vim.diagnostic.Opts.VirtualText` structure. As for left or right positioning, I don't think this is handled for any (?) of the default diagnostic handlers. Might be something to keep an eye for :wink: \r\n\r\nAs a whole, I think the documentation on the `vim.diagnostic` (and other Lua modules) might benefit from a bit more user-facing help. Most of the `diagnostic-{events,highlights,handlers,quickstart}` help sections seem to be written for the diagnostic producer, and not the 'consumer'. The case of text truncation is not hard to implement, but should be hinted at in the documentation for the user. Maybe there should be a `diagnostic-faq` sections in the help file just as there is for the LSP module ?\r\n\r\n> If it's about showing multiple diagnostics, we already have virtual_lines for that, which is the cleaner UX in my opinion. (Or the float, which you can trigger on CursorHold.)\r\n\r\nWhile I like the `virtual_lines` diagnostics, I prefer the `virtual_text` (cleaner in my opinion) and the lines ***do not*** play nice when the `wrap` option is enabled. Last time I tried this was a few months ago (so neovim v0.10? v0.9x?) on a TeX file, where I wrap the lines to make it easier to read. Any `virtual_lines` past the right-most window column would be \"replicated\" as a wrapped virtual line below the final character of the *entire* line. This is, to put it mildly, not optimal. I did look into the problem a few months back, but it required digging deep in neovim's C code for line rendering, which I am not familiar with. \r\n\r\n> Why does this need to be a built-in handler rather than personal customization (or a small plugin)?\r\n\r\nIt might be implemented as a small plugin, yes. But I chose to make it built-in to avoid having to re-implement the whole handler logic -- most of which would be directly copied over from the runtime files. This is admittedly a small change, which requires a ton of \"boilerplate\" to do outside of the runtime files.\r\n\r\n----\r\n\r\nI hope this answered your questions. Thanks for taking the time to look at my small contribution :)",
            "created_at": "2025-06-23T12:48:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/34575#issuecomment-2996367523",
            "id": 2996367523,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
            "node_id": "IC_kwDOAPphoM6ymPCj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996367523/reactions"
            },
            "updated_at": "2025-06-23T12:48:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996367523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
                "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
                "followers_url": "https://api.github.com/users/Thibaulltt/followers",
                "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
                "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Thibaulltt",
                "id": 25150288,
                "login": "Thibaulltt",
                "node_id": "MDQ6VXNlcjI1MTUwMjg4",
                "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
                "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
                "repos_url": "https://api.github.com/users/Thibaulltt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Thibaulltt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  The stronger and wider the 'neovim standard library' is, the better the neovim experience is\r\n\r\nThis we need to push back on. \"The stronger and wider the 'neovim standard library' is\", the more difficult it becomes to document and maintain, which makes the \"neovim experience\" _worse_. Generally, the first question is therefore \"does this **have** to be in core?\", with the expectation that if it doesn't, it _should_ be a plugin.\r\n\r\nRegarding the current virtual text option: I think the non-eol version is _horrible_ UX that I don't even think we should expose by default; I assume that this is simply passing through all possible (but not reasonable) options to the `nvim_buf_set_extmark` call. The reason that nobody before you complained about this is more likely an indication that nobody is using it, rather than that people are happy about it...\r\n\r\nOne possible (and my personal favorite) fix would be to simply drop these options from the interface and fix `eol`. (People can still write their own, better, handlers for inline diagnostics.)\r\n\r\nSo I think a \"fix\" could be considered, but adding a new variant is out of scope.",
            "created_at": "2025-06-23T13:41:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/34575#issuecomment-2996549867",
            "id": 2996549867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
            "node_id": "IC_kwDOAPphoM6ym7jr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996549867/reactions"
            },
            "updated_at": "2025-06-23T13:41:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996549867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Alright, I'll remove the option and make it a fix rather than a new feature in a few hours. While I do not agree having only the `eol` version is desirable, I do understand the restraint needed for the maintainability of the project.\r\n\r\nOn a somewhat related note: I see multiple references inside the `vim.diagnostic` runtime file to a cached set of diagnostics (aptly named `diagnostics_cache`) that seems to be made local to the runtime, and thus unavailable for the plugin developers. In order to reduce the amount of data replicated for any given buffer, can we expect a (maybe read-only) access to the table for third-party plugins ?",
            "created_at": "2025-06-23T14:40:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/34575#issuecomment-2996763769",
            "id": 2996763769,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
            "node_id": "IC_kwDOAPphoM6ynvx5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996763769/reactions"
            },
            "updated_at": "2025-06-23T14:40:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996763769",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
                "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
                "followers_url": "https://api.github.com/users/Thibaulltt/followers",
                "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
                "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Thibaulltt",
                "id": 25150288,
                "login": "Thibaulltt",
                "node_id": "MDQ6VXNlcjI1MTUwMjg4",
                "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
                "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
                "repos_url": "https://api.github.com/users/Thibaulltt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Thibaulltt",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> On a somewhat related note: I see multiple references inside the vim.diagnostic runtime file to a cached set of diagnostics (aptly named diagnostics_cache) that seems to be made local to the runtime, and thus unavailable for the plugin developers. In order to reduce the amount of data replicated for any given buffer, can we expect a (maybe read-only) access to the table for third-party plugins ?\r\n\r\nUnrelated to this PR, so please open a new issue about this and give _concrete_ examples for the use case and a proposed API. (This is an implementation detail that plugins should not have to worry about, so I am skeptical.)",
            "created_at": "2025-06-23T14:49:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/34575#issuecomment-2996796170",
            "id": 2996796170,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
            "node_id": "IC_kwDOAPphoM6yn3sK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996796170/reactions"
            },
            "updated_at": "2025-06-23T14:49:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996796170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34575/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34575/commits",
    "created_at": "2025-06-19T10:05:14Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34575.diff",
    "draft": false,
    "head": {
        "label": "Thibaulltt:diagnostics-virtual-text-inlay",
        "ref": "diagnostics-virtual-text-inlay",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/Thibaulltt/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/Thibaulltt/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/Thibaulltt/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/Thibaulltt/neovim/branches{/branch}",
            "clone_url": "https://github.com/Thibaulltt/neovim.git",
            "collaborators_url": "https://api.github.com/repos/Thibaulltt/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/Thibaulltt/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/Thibaulltt/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/Thibaulltt/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/Thibaulltt/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/Thibaulltt/neovim/contributors",
            "created_at": "2025-06-12T11:55:31Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/Thibaulltt/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/Thibaulltt/neovim/downloads",
            "events_url": "https://api.github.com/repos/Thibaulltt/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/Thibaulltt/neovim/forks",
            "full_name": "Thibaulltt/neovim",
            "git_commits_url": "https://api.github.com/repos/Thibaulltt/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/Thibaulltt/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/Thibaulltt/neovim/git/tags{/sha}",
            "git_url": "git://github.com/Thibaulltt/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/Thibaulltt/neovim/hooks",
            "html_url": "https://github.com/Thibaulltt/neovim",
            "id": 1000837435,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/Thibaulltt/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/Thibaulltt/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/Thibaulltt/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/Thibaulltt/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/Thibaulltt/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/Thibaulltt/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/Thibaulltt/neovim/merges",
            "milestones_url": "https://api.github.com/repos/Thibaulltt/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOO6eROw",
            "notifications_url": "https://api.github.com/repos/Thibaulltt/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
                "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
                "followers_url": "https://api.github.com/users/Thibaulltt/followers",
                "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
                "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Thibaulltt",
                "id": 25150288,
                "login": "Thibaulltt",
                "node_id": "MDQ6VXNlcjI1MTUwMjg4",
                "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
                "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
                "repos_url": "https://api.github.com/users/Thibaulltt/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Thibaulltt",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/Thibaulltt/neovim/pulls{/number}",
            "pushed_at": "2025-06-19T10:28:31Z",
            "releases_url": "https://api.github.com/repos/Thibaulltt/neovim/releases{/id}",
            "size": 319452,
            "ssh_url": "git@github.com:Thibaulltt/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/Thibaulltt/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/Thibaulltt/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/Thibaulltt/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/Thibaulltt/neovim/subscription",
            "svn_url": "https://github.com/Thibaulltt/neovim",
            "tags_url": "https://api.github.com/repos/Thibaulltt/neovim/tags",
            "teams_url": "https://api.github.com/repos/Thibaulltt/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/Thibaulltt/neovim/git/trees{/sha}",
            "updated_at": "2025-06-18T13:05:08Z",
            "url": "https://api.github.com/repos/Thibaulltt/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
            "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
            "followers_url": "https://api.github.com/users/Thibaulltt/followers",
            "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
            "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Thibaulltt",
            "id": 25150288,
            "login": "Thibaulltt",
            "node_id": "MDQ6VXNlcjI1MTUwMjg4",
            "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
            "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
            "repos_url": "https://api.github.com/users/Thibaulltt/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Thibaulltt",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34575",
    "id": 2604294060,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34575",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e5ca9e596e084f47ba19f3723970fac2c1c5f9e3",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6bOl-s",
    "number": 34575,
    "patch_url": "https://github.com/neovim/neovim/pull/34575.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34575/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/d326e21cd6bf77e7f46b0b288b41ce0ca7dd88fc",
    "title": "Proposal: add `as_inlay` to diagnostics `virtual_text` options",
    "updated_at": "2025-06-23T14:49:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34575",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/25150288?v=4",
        "events_url": "https://api.github.com/users/Thibaulltt/events{/privacy}",
        "followers_url": "https://api.github.com/users/Thibaulltt/followers",
        "following_url": "https://api.github.com/users/Thibaulltt/following{/other_user}",
        "gists_url": "https://api.github.com/users/Thibaulltt/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Thibaulltt",
        "id": 25150288,
        "login": "Thibaulltt",
        "node_id": "MDQ6VXNlcjI1MTUwMjg4",
        "organizations_url": "https://api.github.com/users/Thibaulltt/orgs",
        "received_events_url": "https://api.github.com/users/Thibaulltt/received_events",
        "repos_url": "https://api.github.com/users/Thibaulltt/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Thibaulltt/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Thibaulltt/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Thibaulltt",
        "user_view_type": "public"
    }
}