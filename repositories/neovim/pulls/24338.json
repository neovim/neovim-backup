{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24338/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24338/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24338"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24338"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24338/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24338"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/152e377542d5db303cd6b999e283af9014fa348c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5947,
            "forks_count": 5947,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1887,
            "open_issues_count": 1887,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-03-25T00:05:23Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 313207,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 87566,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-03-25T02:32:27Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 87566,
            "watchers_count": 87566,
            "web_commit_signoff_required": false
        },
        "sha": "516b173780e39de3ce1e4525f0a8f0ff250c992b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Early WIP/draft:\r\n\r\nThere are occasionally requests for dedicated APIs for code actions or codelens, (also formatter, but there's `formatexpr`, `formatprg` and `!cmd` and afaik so far no explanation of why they are not sufficient). Concrete request for codelens: https://github.com/neovim/neovim/issues/20181\r\n\r\nOr potential use-cases for code-action:\r\n\r\n- https://github.com/lervag/vimtex/blob/01733c0969cf8922e932bcc30b768966c69ffaf0/doc/vimtex.txt#L5953\r\n- https://github.com/lewis6991/gitsigns.nvim#null-ls\r\n\r\nFor `vim.diagnostic`, a dedicated module made a lot of sense as linters have existed long before LSP and there are lots of standalone tools.\r\n\r\n\r\nFor the others (codelens, code actions, hover, inline-hints, etc.) the value proposition is more questionable. What would a dedicated API improve over just using LSP?\r\n\r\nOne problem with \"just use LSP\" is that you either need a separate process, or some boilerplate.\r\nThis PR would address the boilerplate problem.\r\n\r\nE.g. a implementation for hover could look like this:\r\n\r\n\r\n```lua\r\nlocal api = vim.api\r\nlocal server = vim.lsp.server({\r\n  capabilities = {\r\n    hoverProvider = true\r\n  },\r\n  handlers = {\r\n    ---@param params lsp.HoverParams\r\n    [\"textDocument/hover\"] = function(_, params)\r\n      local bufnr = vim.uri_to_bufnr(params.textDocument.uri)\r\n      local lnum = params.position.line\r\n      local col = params.position.character\r\n      -- use bufnr/lnum/col to provide actual text\r\n      return {\r\n        contents = {\r\n          kind = \"plaintext\",\r\n          value = \"just some dummy text\",\r\n        }\r\n      }\r\n    end,\r\n  }\r\n})\r\nvim.lsp.start({ name = \"dummy-ls\", cmd = server })\r\n```\r\n\r\nAdvantages:\r\n\r\n- We don't need to figure out a provider pull/push model for plugins to register code-actions, hover, etc.\r\n- We don't need a ton of new APIs, documentations and tests\r\n- Also provides answers for progress notification and cancellation (although with open construction sites, e.g. https://github.com/neovim/neovim/issues/22852)\r\n- We already use something like that in the tests.  Even if we decide to add dedicated APIs later, this might be low cost due do that\r\n- We can maybe convince Lewis to improve multi-client support, which we want anyway, instead of working on https://github.com/lewis6991/hover.nvim\r\n- Would also be useful for plugins implementing off-spec LSP extensions or similar functions for testing.  (E.g lsp-compl has something like this in its tests)\r\n\r\n\r\nDisadvantages:\r\n\r\n- LSP allows to make requests for buffers that are not visible and not \"current\": That means in the handlers you cannot make good use of functions like `vim.fn.expand(\"<cexpr>\")`, but you'd currently have to create a dummy window, and open the buffer in that windows\r\n- Slightly more verbose than dedicated APIs might be\r\n-  Limited to LSP functionality\r\n\r\n\r\n---\r\n\r\nTBD:\r\n\r\n- [x] Decide if we want this\r\n- [ ] Finetune API\r\n    - is the `method` param required for each handler, it's kinda redundant.\r\n    - How about push from server to client?\r\n- [ ] Finish example in the docs (including how to `vim.lsp.start` such a server)\r\n",
    "closed_at": null,
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "We could reduce the boilerplate even more. For example:\r\n\r\n\r\n```lua\r\nlocal server = vim.lsp.server({\r\n  ---@param params lsp.HoverParams\r\n  [\"on_textDocument/hover\"] = function(_, params)\r\n    local bufnr = vim.uri_to_bufnr(params.textDocument.uri)\r\n    local lnum = params.position.line\r\n    local col = params.position.character\r\n    -- use bufnr/lnum/col to provide actual text\r\n    return {\r\n      contents = {\r\n        kind = \"plaintext\",\r\n        value = \"just some dummy text\",\r\n      }\r\n    }\r\n  end,\r\n})\r\n```\r\n\r\n`capability` is implicitly set, based on provided handlers. (We already have a method <-> provider mapping internally)\r\n\r\nMaybe even with a `auto_start = true` or something like that, to also imply the `vim.lsp.start()`\r\n",
            "created_at": "2023-07-13T14:23:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1634338213",
            "id": 1634338213,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hagWl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 10,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634338213/reactions"
            },
            "updated_at": "2023-07-13T14:23:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634338213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Wonderful! I think we definitely want this, can you confirm the following:\r\n\r\n- It extends the usefulness of our LSP support by allowing LSP concepts to be re-used even when a server is not available.\r\n    - So non-langserver things like [cscope](https://github.com/dhananjaylatkar/cscope_maps.nvim) can be adapted to Nvim LSP interface.\r\n- Formalizes the general idea behinds [null-ls](https://github.com/jose-elias-alvarez/null-ls.nvim)\r\n- Analogous to [vscode's in-process language features](https://code.visualstudio.com/api/language-extensions/programmatic-language-features)\r\n",
            "created_at": "2023-07-14T15:47:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636048696",
            "id": 1636048696,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hhB84",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 12,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 12,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636048696/reactions"
            },
            "updated_at": "2023-07-14T15:48:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636048696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It extends the usefulness of our LSP support by allowing LSP concepts to be re-used even when a server is not available.\r\n\r\nYes\r\n\r\n> Formalizes the general idea behinds null-ls\r\n\r\nYes. null-ls used the same mechanism. (At least since Neovim 0.8 made it possible, before it hacked into internals))\r\n\r\n> Analogous to vscode's in-process language features\r\n\r\nIt goes into that direction in the sense that it lets plugins provide that kind of functionality, yes - but also with a key difference.\r\nAfaik in VSCode, the core editor and the language server client share the same primitives like `Position`, `Location`, `TextDocument`. The core editor also has higher level concepts like `ReferenceProvider`, `DefinitionProvider` and the concrete language server client is just one implementation of these providers. Any extension can also implement providers without going through a lsp-client.\r\n\r\nThat makes a lot of sense for vscode since they already share the common structures, but for Neovim we have different core primitives. `bufnr`, `lnum` and `col` instead of `TextDocument` and `Position`. So we'd need a translation layer (like `vim.lsp.diagnostic` is for `vim.diagnostic`)\r\n\r\nFollowing the vscode model closely would mean creating `vim.references`, `vim.definitions`, `vim.code_actions`, `vim.codelenses`, and re-building LSP on top of that.\r\nWhat this does instead is using the lsp-client as ReferenceProvider/DefinitionProvider/CodeActionProvider\r\n",
            "created_at": "2023-07-14T17:06:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636139428",
            "id": 1636139428,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hhYGk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 14,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 14,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636139428/reactions"
            },
            "updated_at": "2023-07-14T17:07:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636139428",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Following the vscode model closely would mean creating `vim.references`, `vim.definitions`, `vim.code_actions`, vim.codelenses`, and re-building LSP on top of that.\r\n> What this does instead is using the lsp-client as ReferenceProvider/DefinitionProvider/CodeActionProvider\r\n\r\n👍 The latter approach (this PR) is 100% fine and (for reference) we definitely don't need/want to take the \"inverted\" approach. ",
            "created_at": "2023-07-14T17:24:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636160842",
            "id": 1636160842,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hhdVK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636160842/reactions"
            },
            "updated_at": "2023-07-14T17:24:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636160842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@mfussenegger I'm author of https://github.com/pmizio/typescript-tools.nvim and this is s great addition to have which can really simplify process of spawning this tsserver mess. Tsserver is lsp like but not compatible on \"message structure\" level. I see how this addition can simplify my code, but to use this I would need few extensions to this:\n- pass `request_id` into handler thanks to that I can drop code related to synchronization ids between tsserver and nvim\n- incorporate into api async handlers - for me it will be waiting for pong from tsserver, for others it can be running some process and waiting for stout(null-lsish plugins)\n- get access to dispatchers - just useful thing to have\n\nI know this pr is meant to be for simpler use cases but this three changes can make it more universal even for more complicated projects. Of course I give only my insight from building off-spec in process server plugin and it is ok if this is out of scope of this pr. But anyway I want to put this on the table.",
            "created_at": "2023-07-15T07:21:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636696585",
            "id": 1636696585,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hjgIJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 15,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 15,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636696585/reactions"
            },
            "updated_at": "2023-07-15T07:21:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636696585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4346598?v=4",
                "events_url": "https://api.github.com/users/pmizio/events{/privacy}",
                "followers_url": "https://api.github.com/users/pmizio/followers",
                "following_url": "https://api.github.com/users/pmizio/following{/other_user}",
                "gists_url": "https://api.github.com/users/pmizio/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pmizio",
                "id": 4346598,
                "login": "pmizio",
                "node_id": "MDQ6VXNlcjQzNDY1OTg=",
                "organizations_url": "https://api.github.com/users/pmizio/orgs",
                "received_events_url": "https://api.github.com/users/pmizio/received_events",
                "repos_url": "https://api.github.com/users/pmizio/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pmizio/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pmizio/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pmizio",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm pretty confident we need to pass a callback to the handlers to better support async applications as opposed to them returning data.\n\n```lua\nlocal api = vim.api\nlocal server = vim.lsp.server({\n  capabilities = {\n    hoverProvider = true\n  },\n  handlers = {\n    ---@param params lsp.HoverParams\n    [\"textDocument/hover\"] = function(_, params, callback)\n      local bufnr = vim.uri_to_bufnr(params.textDocument.uri)\n      local lnum = params.position.line\n      local col = params.position.character\n      -- use bufnr/lnum/col to provide actual text\n      callback({\n        contents = {\n          kind = \"plaintext\",\n          value = \"just some dummy text\",\n        }\n      })\n    end,\n  }\n})\nvim.lsp.start({ name = \"dummy-ls\", cmd = server })\n```",
            "created_at": "2023-07-15T08:52:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636713428",
            "id": 1636713428,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hjkPU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 6,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636713428/reactions"
            },
            "updated_at": "2023-07-15T08:54:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636713428",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm pretty confident we need to pass a callback to the handlers to better support async applications as opposed to them returning data.\r\n\r\nIt could run in a coroutine to allow yielding.\r\nThe same approach is already used in global handlers - when a server sends a request and the client returns a response. \r\nDownside is that it requires some yield/resume boilerplate if the components used internally lack coroutine awareness. But if they do, it would avoid callback nesting.\r\n\r\nFor example, if we extended `vim.system` with something like this:\r\n\r\n```diff\r\n--- a/runtime/lua/vim/_system.lua\r\n+++ b/runtime/lua/vim/_system.lua\r\n@@ -22,10 +22,11 @@ local uv = vim.uv\r\n --- @field handle uv_process_t\r\n --- @field timer uv_timer_t\r\n --- @field pid integer\r\n --- @field timeout? integer\r\n --- @field done boolean\r\n+--- @field co thread\r\n --- @field stdin uv_stream_t?\r\n --- @field stdout uv_stream_t?\r\n --- @field stderr uv_stream_t?\r\n --- @field cmd string[]\r\n --- @field result? SystemCompleted\r\n@@ -78,10 +79,20 @@ local MAX_TIMEOUT = 2 ^ 31\r\n --- @param timeout? integer\r\n --- @return SystemCompleted\r\n function SystemObj:wait(timeout)\r\n   local state = self._state\r\n\r\n+  if state.done then\r\n+    return state.result\r\n+  end\r\n+\r\n+  local co, is_main = coroutine.running()\r\n+  if co and not is_main then\r\n+    state.co = co\r\n+    -- TODO: spawn timer for timeout?\r\n+    return coroutine.yield()\r\n+  end\r\n+\r\n   vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\r\n     return state.done\r\n   end)\r\n\r\n   if not state.done then\r\n@@ -294,14 +305,16 @@ function M.run(cmd, opts, on_exit)\r\n         code = code,\r\n         signal = signal,\r\n         stdout = stdout_data and table.concat(stdout_data) or nil,\r\n         stderr = stderr_data and table.concat(stderr_data) or nil,\r\n       }\r\n-\r\n       if on_exit then\r\n         on_exit(state.result)\r\n       end\r\n+      if state.co then\r\n+        coroutine.resume(state.co, state.result)\r\n+      end\r\n     end)\r\n   end, function()\r\n     close_handles(state)\r\n   end)\r\n```\r\n\r\n\r\nOne could write code as if synchronous without blocking and without the 2-color problem of explicit async/await\r\n",
            "created_at": "2023-07-15T09:54:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636724649",
            "id": 1636724649,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hjm-p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636724649/reactions"
            },
            "updated_at": "2023-07-15T10:18:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636724649",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think there's any need for that and just over complicates things as there are too many edge cases that need to be considered with coroutines. Plus an async interface is already planned (#19624) so it should just be handled with that. All we need here is the handlers to have access to a callback.",
            "created_at": "2023-07-15T11:03:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-1636736454",
            "id": 1636736454,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM5hjp3G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 17,
                "-1": 6,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 23,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636736454/reactions"
            },
            "updated_at": "2023-07-19T11:29:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636736454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason do I understand correctly that this is currently blocked by #19624?",
            "created_at": "2024-10-22T20:14:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-2430171619",
            "id": 2430171619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM6Q2Xnj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2430171619/reactions"
            },
            "updated_at": "2024-10-22T20:14:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2430171619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/66178592?v=4",
                "events_url": "https://api.github.com/users/flexagoon/events{/privacy}",
                "followers_url": "https://api.github.com/users/flexagoon/followers",
                "following_url": "https://api.github.com/users/flexagoon/following{/other_user}",
                "gists_url": "https://api.github.com/users/flexagoon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/flexagoon",
                "id": 66178592,
                "login": "flexagoon",
                "node_id": "MDQ6VXNlcjY2MTc4NTky",
                "organizations_url": "https://api.github.com/users/flexagoon/orgs",
                "received_events_url": "https://api.github.com/users/flexagoon/received_events",
                "repos_url": "https://api.github.com/users/flexagoon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/flexagoon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flexagoon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/flexagoon",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No. The PR is still WIP. The only feedback from me is that the handlers should accept callback instead of returning the result.",
            "created_at": "2024-10-22T21:04:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-2430281157",
            "id": 2430281157,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM6Q2yXF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2430281157/reactions"
            },
            "updated_at": "2024-10-22T21:04:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2430281157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not blocked on a async module, but I'd like to have multi-client/server support in a better shape before this gets in.\r\nThere's been decent progress on that recently.\r\n\r\nAnother aspect could be the `vim._with` - or a LSP specific variant to make it easier to temporarily set the cursor to a requests' position, because I noticed while trying out some extensions that a lot of the useful `vim.fn.` functions depend on buf/win/cursor state.\r\n",
            "created_at": "2024-10-24T11:52:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-2435066455",
            "id": 2435066455,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM6RJCpX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 4,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2435066455/reactions"
            },
            "updated_at": "2024-10-24T11:52:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2435066455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "FYI, I'm testing this out, and it seems that request handled with this are endlessly `pending` in the `Client.requests` table.\r\nThis happens both in my scripts, and in crates.nvim https://github.com/saecki/crates.nvim/blob/main/lua/crates/lsp.lua",
            "created_at": "2025-03-19T21:49:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/24338#issuecomment-2738237786",
            "id": 2738237786,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
            "node_id": "IC_kwDOAPphoM6jNjFa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2738237786/reactions"
            },
            "updated_at": "2025-03-19T21:49:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2738237786",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20758186?v=4",
                "events_url": "https://api.github.com/users/PolyMeilex/events{/privacy}",
                "followers_url": "https://api.github.com/users/PolyMeilex/followers",
                "following_url": "https://api.github.com/users/PolyMeilex/following{/other_user}",
                "gists_url": "https://api.github.com/users/PolyMeilex/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/PolyMeilex",
                "id": 20758186,
                "login": "PolyMeilex",
                "node_id": "MDQ6VXNlcjIwNzU4MTg2",
                "organizations_url": "https://api.github.com/users/PolyMeilex/orgs",
                "received_events_url": "https://api.github.com/users/PolyMeilex/received_events",
                "repos_url": "https://api.github.com/users/PolyMeilex/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/PolyMeilex/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/PolyMeilex/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/PolyMeilex",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24338/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24338/commits",
    "created_at": "2023-07-13T12:12:06Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24338.diff",
    "draft": true,
    "head": {
        "label": "mfussenegger:lsp-server",
        "ref": "lsp-server",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/mfussenegger/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/mfussenegger/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/mfussenegger/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/mfussenegger/neovim/branches{/branch}",
            "clone_url": "https://github.com/mfussenegger/neovim.git",
            "collaborators_url": "https://api.github.com/repos/mfussenegger/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/mfussenegger/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/mfussenegger/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/mfussenegger/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/mfussenegger/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/mfussenegger/neovim/contributors",
            "created_at": "2020-01-25T15:44:28Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/mfussenegger/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/mfussenegger/neovim/downloads",
            "events_url": "https://api.github.com/repos/mfussenegger/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/mfussenegger/neovim/forks",
            "full_name": "mfussenegger/neovim",
            "git_commits_url": "https://api.github.com/repos/mfussenegger/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/mfussenegger/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/mfussenegger/neovim/git/tags{/sha}",
            "git_url": "git://github.com/mfussenegger/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/mfussenegger/neovim/hooks",
            "html_url": "https://github.com/mfussenegger/neovim",
            "id": 236190222,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/mfussenegger/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/mfussenegger/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/mfussenegger/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/mfussenegger/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/mfussenegger/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/mfussenegger/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/mfussenegger/neovim/merges",
            "milestones_url": "https://api.github.com/repos/mfussenegger/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMzYxOTAyMjI=",
            "notifications_url": "https://api.github.com/repos/mfussenegger/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/mfussenegger/neovim/pulls{/number}",
            "pushed_at": "2025-03-16T11:39:08Z",
            "releases_url": "https://api.github.com/repos/mfussenegger/neovim/releases{/id}",
            "size": 304753,
            "ssh_url": "git@github.com:mfussenegger/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/mfussenegger/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/mfussenegger/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/mfussenegger/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/mfussenegger/neovim/subscription",
            "svn_url": "https://github.com/mfussenegger/neovim",
            "tags_url": "https://api.github.com/repos/mfussenegger/neovim/tags",
            "teams_url": "https://api.github.com/repos/mfussenegger/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/mfussenegger/neovim/git/trees{/sha}",
            "updated_at": "2024-01-03T04:13:43Z",
            "url": "https://api.github.com/repos/mfussenegger/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "152e377542d5db303cd6b999e283af9014fa348c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24338",
    "id": 1433003744,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24338",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5Vaebg",
    "number": 24338,
    "patch_url": "https://github.com/neovim/neovim/pull/24338.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24338/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/152e377542d5db303cd6b999e283af9014fa348c",
    "title": "feat(lsp): add vim.lsp.server to create in-process server",
    "updated_at": "2025-03-19T21:49:34Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24338",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
        "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
        "followers_url": "https://api.github.com/users/mfussenegger/followers",
        "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
        "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mfussenegger",
        "id": 38700,
        "login": "mfussenegger",
        "node_id": "MDQ6VXNlcjM4NzAw",
        "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
        "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
        "repos_url": "https://api.github.com/users/mfussenegger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mfussenegger",
        "user_view_type": "public"
    }
}