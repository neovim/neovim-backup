{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31975/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31975/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31975"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31975"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31975/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/e8ac1152934b6d8879b1928e1f2a05da73f05db1"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5823,
            "forks_count": 5823,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1843,
            "open_issues_count": 1843,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-01-21T00:10:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 304457,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85427,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-01-21T01:35:11Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85427,
            "watchers_count": 85427,
            "web_commit_signoff_required": false
        },
        "sha": "71507281fb86deaaa7f47460e8c7a503b46663f6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Implemented incremental injection parsing as described in https://github.com/neovim/neovim/issues/31809.\r\n\r\nAdding `#set! injection.root @some_capture` to all patterns in `injections.scm` enables the optimization.\r\n\r\nThis improves performance when viewing/editing large files, as injections only within the visible range are parsed, and only the changed ranges are reparsed when editing the buffer.\r\n\r\nCloses https://github.com/neovim/neovim/issues/31809",
    "closed_at": "2025-01-19T16:27:51Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1914225708"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1914225708"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If a table entry's value is `nil`, the entry does not exist in the table, so `match` here will always be non-nil. ",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T04:28:31Z",
            "diff_hunk": "@@ -625,14 +716,25 @@ function LanguageTree:set_included_regions(new_regions)\n       self:_do_callback('changedtree', t:included_ranges(true), t)\n     end\n     self._trees = {}\n+    self._injections = {}\n+    self._tree_region_valid = {}\n     self:invalidate()\n   else\n     self:_iter_regions(function(i, region)\n-      return vim.deep_equal(new_regions[i], region)\n+      return not new_regions[i] or vim.deep_equal(new_regions[i], region)\n     end)\n   end\n \n-  self._regions = new_regions\n+  self._regions = {}\n+  for i, match in ipairs(new_regions) do\n+    if match then",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1914225708",
            "id": 1914225708,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yGMQs",
            "original_commit_id": "66c778dd1fc0170890fff330478a5ad245ff0dc0",
            "original_line": 870,
            "original_position": 332,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2548756745,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1914225708/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T04:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1914225708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1914257729"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1914257729"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`@param` comment was wrong.\r\n Tree region can be `false` if it was invalidated but wasn't reparsed.",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T05:13:29Z",
            "diff_hunk": "@@ -625,14 +716,25 @@ function LanguageTree:set_included_regions(new_regions)\n       self:_do_callback('changedtree', t:included_ranges(true), t)\n     end\n     self._trees = {}\n+    self._injections = {}\n+    self._tree_region_valid = {}\n     self:invalidate()\n   else\n     self:_iter_regions(function(i, region)\n-      return vim.deep_equal(new_regions[i], region)\n+      return not new_regions[i] or vim.deep_equal(new_regions[i], region)\n     end)\n   end\n \n-  self._regions = new_regions\n+  self._regions = {}\n+  for i, match in ipairs(new_regions) do\n+    if match then",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1914257729",
            "id": 1914257729,
            "in_reply_to_id": 1914225708,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yGUFB",
            "original_commit_id": "66c778dd1fc0170890fff330478a5ad245ff0dc0",
            "original_line": 870,
            "original_position": 332,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2548829824,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1914257729/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T05:13:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1914257729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915729022"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915729022"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of having this new capture, would it be possible to calculate this range by combining the ranges of all captures in a pattern? E.g. for\r\n\r\n```\r\n(parent\r\n  (cap) @_node\r\n  (content) @injection.content\r\n  (#eq? @_node ... ))\r\n```\r\nwe compose the root range from the start of `@_node` until the end of `@injection.content`. This could also remove the need for the confusing `all_have_injection_root` logic, so all injections can be incrementally validated\r\n\r\nOr at the very least I think this new capture should be documented",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T23:09:07Z",
            "diff_hunk": "@@ -905,6 +1016,16 @@ function LanguageTree:_get_injection(match, metadata)\n     or (injection_lang and resolve_lang(injection_lang))\n   local include_children = metadata['injection.include-children'] ~= nil\n \n+  ---@type Range6?\n+  local root_range\n+\n+  local root_i = metadata['nvim.injection-root']",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915729022",
            "id": 1915729022,
            "line": 1025,
            "node_id": "PRRC_kwDOAPphoM5yL7R-",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1025,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 416,
            "pull_request_review_id": 2551210870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915729022/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T23:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915729022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915738402"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915738402"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n---Find 0-based [begin_i, end_i) that the given range is next to or intersects.\r\n```\r\nnit\r\n\r\nAlso maybe should put `@return` annotations for clarity",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T23:16:40Z",
            "diff_hunk": "@@ -0,0 +1,344 @@\n+local bit = require('bit')\n+local rshift = bit.rshift\n+\n+local M = {}\n+\n+--- Indices are 0-based.\n+local function memmove(dst, dst_begin, src, src_begin, count)\n+  -- Accessing an undefined field of a global variable\n+  -- luacheck: push ignore 143\n+  if table.move then\n+    table.move(src, 1 + src_begin, 1 + src_begin + count - 1, 1 + dst_begin, dst)\n+    -- luacheck: pop\n+  else\n+    if dst == src then\n+      if dst_begin == src_begin then\n+        return\n+      end\n+      assert(dst_begin <= src_begin, 'not implemented')\n+    end\n+\n+    for i = 1, count do\n+      dst[dst_begin + i] = src[src_begin + i]\n+    end\n+  end\n+end\n+\n+---Used as 0-based, end exclusive\n+---@class ByteRange\n+---@inlinedoc\n+---@field [1] integer begin byte\n+---@field [2] integer end byte\n+\n+---@param ranges ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@return integer index\n+function M.ranges_find_first_edited(ranges, edit_b, edit_e_old)\n+  local count = #ranges\n+\n+  local bi = 1\n+  local ei = 1 + count\n+  if edit_b == edit_e_old then\n+    while bi < ei do\n+      local mi = rshift(bi + ei, 1)\n+      local meb = ranges[mi][2]\n+      if edit_b <= meb then\n+        ei = mi\n+      else\n+        bi = mi + 1\n+      end\n+    end\n+  else\n+    while bi < ei do\n+      local mi = rshift(bi + ei, 1)\n+      local meb = ranges[mi][2]\n+      if edit_b < meb then\n+        ei = mi\n+      else\n+        bi = mi + 1\n+      end\n+    end\n+  end\n+\n+  return ei\n+end\n+\n+---Find 0-based [begin_i, end_i) that the given range next to or intersects.",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915738402",
            "id": 1915738402,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yL9ki",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 67,
            "original_position": 67,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_byte_range.lua",
            "position": null,
            "pull_request_review_id": 2551210870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915738402/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T23:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915738402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915740887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915740887"
                }
            },
            "author_association": "MEMBER",
            "body": "Are these the ranges of the `@injection.content` captures? If so I think the naming is a bit unclear, maybe could be called `content_ranges` or something; what do you think?",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T23:19:03Z",
            "diff_hunk": "@@ -69,13 +72,27 @@ local TSCallbackNames = {\n   on_child_removed = 'child_removed',\n }\n \n+---@nodoc\n+---@class (private) InjectionMatch\n+---Root range. Any text/syntax change inside makes the match invalid.\n+---Range is 0-based, end-exclusive.\n+---@field range Range6\n+---@field included Range6[]? Included ranges, relative to `range`.",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915740887",
            "id": 1915740887,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yL-LX",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 80,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2551210870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915740887/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T23:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915740887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915744205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915744205"
                }
            },
            "author_association": "MEMBER",
            "body": "To me it is not very clear what this function does, maybe a doc string/different name would help",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T23:23:52Z",
            "diff_hunk": "@@ -1007,6 +1299,68 @@ function LanguageTree:_do_callback(cb_name, ...)\n   end\n end\n \n+---@param injections InjectionMatch[]\n+---@param beg Point\n+---@param old_end Point\n+---@param new_end Point\n+local function injection_matches_adjust(injections, beg, old_end, new_end)\n+  local count = #injections\n+\n+  local insert_i = 1\n+  local i = 1\n+  while i <= count do\n+    local it = injections[i]\n+    local changed = Range.range6_edit(it.range, beg, old_end, new_end)\n+    if changed then\n+      it.included = nil\n+    end\n+\n+    -- Remove match if 0-width.\n+    if it.range[3] ~= it.range[6] then\n+      if i ~= insert_i then\n+        injections[insert_i] = it\n+      end\n+      insert_i = insert_i + 1\n+    end\n+\n+    i = i + 1\n+  end\n+\n+  while insert_i <= count do\n+    injections[insert_i] = nil\n+    insert_i = insert_i + 1\n+  end\n+end\n+\n+---@param ranges ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@param edit_e_new integer\n+local function edit_ranges_adjust(ranges, edit_b, edit_e_old, edit_e_new)",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915744205",
            "id": 1915744205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yL-_N",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1339,
            "original_position": 790,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2551210870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915744205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T23:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915744205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915745034"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915745034"
                }
            },
            "author_association": "MEMBER",
            "body": "This function's return value is unused, is that intended? If so maybe it should not return anything, and have a clearer name (since the name now implies it just runs a check with no side effects, returning a boolean)",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-14T23:25:11Z",
            "diff_hunk": "@@ -1007,6 +1299,68 @@ function LanguageTree:_do_callback(cb_name, ...)\n   end\n end\n \n+---@param injections InjectionMatch[]\n+---@param beg Point\n+---@param old_end Point\n+---@param new_end Point\n+local function injection_matches_adjust(injections, beg, old_end, new_end)\n+  local count = #injections\n+\n+  local insert_i = 1\n+  local i = 1\n+  while i <= count do\n+    local it = injections[i]\n+    local changed = Range.range6_edit(it.range, beg, old_end, new_end)\n+    if changed then\n+      it.included = nil\n+    end\n+\n+    -- Remove match if 0-width.\n+    if it.range[3] ~= it.range[6] then\n+      if i ~= insert_i then\n+        injections[insert_i] = it\n+      end\n+      insert_i = insert_i + 1\n+    end\n+\n+    i = i + 1\n+  end\n+\n+  while insert_i <= count do\n+    injections[insert_i] = nil\n+    insert_i = insert_i + 1\n+  end\n+end\n+\n+---@param ranges ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@param edit_e_new integer\n+local function edit_ranges_adjust(ranges, edit_b, edit_e_old, edit_e_new)\n+  ---@type integer\n+  local count = #ranges\n+  local i = byte_range.ranges_find_first_edited(ranges, edit_b, edit_e_old)\n+\n+  while i <= count do\n+    local it = ranges[i]\n+    if it[1] >= edit_e_old then\n+      break\n+    end\n+\n+    byte_range.edit_intersects(it, edit_b, edit_e_old, edit_e_new)",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915745034",
            "id": 1915745034,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yL_MK",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1350,
            "original_position": 801,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2551210870,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915745034/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-14T23:27:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915745034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915794940"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915794940"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "~~`edit_if_intersects()` should be clearer. Or maybe `adjust_if_intersects()`, so that it is silar to all other new `adjust` functions~~\r\nrenamed to `adjust_if_intersects()`",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T00:35:52Z",
            "diff_hunk": "@@ -1007,6 +1299,68 @@ function LanguageTree:_do_callback(cb_name, ...)\n   end\n end\n \n+---@param injections InjectionMatch[]\n+---@param beg Point\n+---@param old_end Point\n+---@param new_end Point\n+local function injection_matches_adjust(injections, beg, old_end, new_end)\n+  local count = #injections\n+\n+  local insert_i = 1\n+  local i = 1\n+  while i <= count do\n+    local it = injections[i]\n+    local changed = Range.range6_edit(it.range, beg, old_end, new_end)\n+    if changed then\n+      it.included = nil\n+    end\n+\n+    -- Remove match if 0-width.\n+    if it.range[3] ~= it.range[6] then\n+      if i ~= insert_i then\n+        injections[insert_i] = it\n+      end\n+      insert_i = insert_i + 1\n+    end\n+\n+    i = i + 1\n+  end\n+\n+  while insert_i <= count do\n+    injections[insert_i] = nil\n+    insert_i = insert_i + 1\n+  end\n+end\n+\n+---@param ranges ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@param edit_e_new integer\n+local function edit_ranges_adjust(ranges, edit_b, edit_e_old, edit_e_new)\n+  ---@type integer\n+  local count = #ranges\n+  local i = byte_range.ranges_find_first_edited(ranges, edit_b, edit_e_old)\n+\n+  while i <= count do\n+    local it = ranges[i]\n+    if it[1] >= edit_e_old then\n+      break\n+    end\n+\n+    byte_range.edit_intersects(it, edit_b, edit_e_old, edit_e_new)",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915794940",
            "id": 1915794940,
            "in_reply_to_id": 1915745034,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yMLX8",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1350,
            "original_position": 801,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2551327893,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915794940/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T06:56:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915794940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915796409"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915796409"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "~~`adjust_edit_ranges()` is one option.~~\r\n\r\n~~Not sure how to name it, because we need to apply the new edit to old edit ranges. And `edit_edit_ranges()` would be a strange name~~\r\n\r\nrenamed to `adjust_edit_ranges()` ",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T00:38:15Z",
            "diff_hunk": "@@ -1007,6 +1299,68 @@ function LanguageTree:_do_callback(cb_name, ...)\n   end\n end\n \n+---@param injections InjectionMatch[]\n+---@param beg Point\n+---@param old_end Point\n+---@param new_end Point\n+local function injection_matches_adjust(injections, beg, old_end, new_end)\n+  local count = #injections\n+\n+  local insert_i = 1\n+  local i = 1\n+  while i <= count do\n+    local it = injections[i]\n+    local changed = Range.range6_edit(it.range, beg, old_end, new_end)\n+    if changed then\n+      it.included = nil\n+    end\n+\n+    -- Remove match if 0-width.\n+    if it.range[3] ~= it.range[6] then\n+      if i ~= insert_i then\n+        injections[insert_i] = it\n+      end\n+      insert_i = insert_i + 1\n+    end\n+\n+    i = i + 1\n+  end\n+\n+  while insert_i <= count do\n+    injections[insert_i] = nil\n+    insert_i = insert_i + 1\n+  end\n+end\n+\n+---@param ranges ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@param edit_e_new integer\n+local function edit_ranges_adjust(ranges, edit_b, edit_e_old, edit_e_new)",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915796409",
            "id": 1915796409,
            "in_reply_to_id": 1915744205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yMLu5",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1339,
            "original_position": 790,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2551331125,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915796409/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T06:57:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915796409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1915839039"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915839039"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Some injections depend on captured nodes being the nth child of a node. Adding a new argument before the captured nodes doesn't invalidate the injection. So in either case injection queries need to be manually updated to support incremental invalidation. ",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T01:44:23Z",
            "diff_hunk": "@@ -905,6 +1016,16 @@ function LanguageTree:_get_injection(match, metadata)\n     or (injection_lang and resolve_lang(injection_lang))\n   local include_children = metadata['injection.include-children'] ~= nil\n \n+  ---@type Range6?\n+  local root_range\n+\n+  local root_i = metadata['nvim.injection-root']",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1915839039",
            "id": 1915839039,
            "in_reply_to_id": 1915729022,
            "line": 1025,
            "node_id": "PRRC_kwDOAPphoM5yMWI_",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1025,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 416,
            "pull_request_review_id": 2551400856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915839039/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T01:57:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1915839039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1916029982"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1916029982"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "renamed to `content_ranges()`",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T06:57:53Z",
            "diff_hunk": "@@ -69,13 +72,27 @@ local TSCallbackNames = {\n   on_child_removed = 'child_removed',\n }\n \n+---@nodoc\n+---@class (private) InjectionMatch\n+---Root range. Any text/syntax change inside makes the match invalid.\n+---Range is 0-based, end-exclusive.\n+---@field range Range6\n+---@field included Range6[]? Included ranges, relative to `range`.",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1916029982",
            "id": 1916029982,
            "in_reply_to_id": 1915740887,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yNEwe",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 80,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": null,
            "pull_request_review_id": 2551694223,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1916029982/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T06:57:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1916029982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1916160872"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1916160872"
                }
            },
            "author_association": "MEMBER",
            "body": "If it requires query changes, I really think we NEED to coordinate this with upstream or at least Helix. How does this tie into the injection scope proposals?",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T08:50:19Z",
            "diff_hunk": "@@ -905,6 +1016,16 @@ function LanguageTree:_get_injection(match, metadata)\n     or (injection_lang and resolve_lang(injection_lang))\n   local include_children = metadata['injection.include-children'] ~= nil\n \n+  ---@type Range6?\n+  local root_range\n+\n+  local root_i = metadata['nvim.injection-root']",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1916160872",
            "id": 1916160872,
            "in_reply_to_id": 1915729022,
            "line": 1025,
            "node_id": "PRRC_kwDOAPphoM5yNkto",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1025,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 416,
            "pull_request_review_id": 2551905169,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1916160872/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T08:50:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1916160872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1917070219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917070219"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> If it requires query changes, I really think we NEED to coordinate this with upstream or at least Helix. \r\n\r\nThe directive doesn't change the semantics of the query. If tree-sitter allowed modifying queries after parsing or, at least, querying information about the structure of the pattern, it should be possible to deduce the root node automatically.\r\n\r\nI hoped since the directive doesn't change anything; we wouldn't need any coordination.\r\n\r\n> How does this tie into the injection scope proposals?\r\n\r\nhttps://github.com/helix-editor/helix/discussions/11157\r\nhttps://github.com/neovim/neovim/pull/31778\r\n\r\nshould both work with this PR. ",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T17:25:51Z",
            "diff_hunk": "@@ -905,6 +1016,16 @@ function LanguageTree:_get_injection(match, metadata)\n     or (injection_lang and resolve_lang(injection_lang))\n   local include_children = metadata['injection.include-children'] ~= nil\n \n+  ---@type Range6?\n+  local root_range\n+\n+  local root_i = metadata['nvim.injection-root']",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1917070219",
            "id": 1917070219,
            "in_reply_to_id": 1915729022,
            "line": 1025,
            "node_id": "PRRC_kwDOAPphoM5yRCuL",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1025,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 416,
            "pull_request_review_id": 2553451379,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917070219/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T17:25:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917070219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1917077607"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917077607"
                }
            },
            "author_association": "MEMBER",
            "body": "If the directive is necessary, it _does_ require coordination. (We really want to avoid further divergence between queries, if it can be avoided.) This coordination may be as little as agreeing on the name. (Or it might not, if the behavior is sufficiently different.)\r\n\r\n(And if it doesn't change anything, what's the point?)",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T17:31:42Z",
            "diff_hunk": "@@ -905,6 +1016,16 @@ function LanguageTree:_get_injection(match, metadata)\n     or (injection_lang and resolve_lang(injection_lang))\n   local include_children = metadata['injection.include-children'] ~= nil\n \n+  ---@type Range6?\n+  local root_range\n+\n+  local root_i = metadata['nvim.injection-root']",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1917077607",
            "id": 1917077607,
            "in_reply_to_id": 1915729022,
            "line": 1025,
            "node_id": "PRRC_kwDOAPphoM5yREhn",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1025,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 416,
            "pull_request_review_id": 2553463854,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917077607/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T17:31:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917077607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1917117324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917117324"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> (And if it doesn't change anything, what's the point?)\r\n\r\nFrom the perspective of query writers, adding/removing th directive changes nothing. But it runs faster if all patterns have the directive.\r\n",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-15T17:59:21Z",
            "diff_hunk": "@@ -905,6 +1016,16 @@ function LanguageTree:_get_injection(match, metadata)\n     or (injection_lang and resolve_lang(injection_lang))\n   local include_children = metadata['injection.include-children'] ~= nil\n \n+  ---@type Range6?\n+  local root_range\n+\n+  local root_i = metadata['nvim.injection-root']",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1917117324",
            "id": 1917117324,
            "in_reply_to_id": 1915729022,
            "line": 1025,
            "node_id": "PRRC_kwDOAPphoM5yROOM",
            "original_commit_id": "7c36d97379705db5efc386335d078f699dc3a0c2",
            "original_line": 1025,
            "original_position": 454,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/languagetree.lua",
            "position": 416,
            "pull_request_review_id": 2553527697,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917117324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-15T17:59:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1917117324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1918134593"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918134593"
                }
            },
            "author_association": "MEMBER",
            "body": "I would remove this and just use `[integer, integer]`",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-16T09:40:27Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+local bit = require('bit')\n+local rshift = bit.rshift\n+\n+local M = {}\n+\n+--- Indices are 0-based.\n+local function memmove(dst, dst_begin, src, src_begin, count)\n+  -- Accessing an undefined field of a global variable\n+  -- luacheck: push ignore 143\n+  if table.move then\n+    table.move(src, 1 + src_begin, 1 + src_begin + count - 1, 1 + dst_begin, dst)\n+    -- luacheck: pop\n+  else\n+    if dst == src then\n+      if dst_begin == src_begin then\n+        return\n+      end\n+      assert(dst_begin <= src_begin, 'Not implemented')\n+    end\n+\n+    for i = 1, count do\n+      dst[dst_begin + i] = src[src_begin + i]\n+    end\n+  end\n+end\n+\n+---Used as 0-based, end exclusive.\n+---@class vim.treesitter.ByteRange",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1918134593",
            "id": 1918134593,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yVGlB",
            "original_commit_id": "9516657434cf475a7d4ff4f205d30b6898279d57",
            "original_line": 28,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_byte_range.lua",
            "position": null,
            "pull_request_review_id": 2555370617,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918134593/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-16T09:40:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918134593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1918137298"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918137298"
                }
            },
            "author_association": "MEMBER",
            "body": "The only difference between these blocks is `<=` and `<`",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-16T09:42:10Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+local bit = require('bit')\n+local rshift = bit.rshift\n+\n+local M = {}\n+\n+--- Indices are 0-based.\n+local function memmove(dst, dst_begin, src, src_begin, count)\n+  -- Accessing an undefined field of a global variable\n+  -- luacheck: push ignore 143\n+  if table.move then\n+    table.move(src, 1 + src_begin, 1 + src_begin + count - 1, 1 + dst_begin, dst)\n+    -- luacheck: pop\n+  else\n+    if dst == src then\n+      if dst_begin == src_begin then\n+        return\n+      end\n+      assert(dst_begin <= src_begin, 'Not implemented')\n+    end\n+\n+    for i = 1, count do\n+      dst[dst_begin + i] = src[src_begin + i]\n+    end\n+  end\n+end\n+\n+---Used as 0-based, end exclusive.\n+---@class vim.treesitter.ByteRange\n+---@inlinedoc\n+---@field [1] integer begin byte\n+---@field [2] integer end byte\n+\n+---@param ranges vim.treesitter.ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@return integer index\n+function M.ranges_find_first_edited(ranges, edit_b, edit_e_old)\n+  local count = #ranges\n+\n+  local bi = 1\n+  local ei = 1 + count\n+  if edit_b == edit_e_old then\n+    while bi < ei do\n+      local mi = rshift(bi + ei, 1)\n+      local meb = ranges[mi][2]\n+      if edit_b <= meb then",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1918137298",
            "id": 1918137298,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5yVHPS",
            "original_commit_id": "9516657434cf475a7d4ff4f205d30b6898279d57",
            "original_line": 46,
            "original_position": 46,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_byte_range.lua",
            "position": null,
            "pull_request_review_id": 2555374757,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918137298/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-16T09:46:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918137298",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1918139002"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918139002"
                }
            },
            "author_association": "MEMBER",
            "body": "This functions never inspects the begin byte of a range. Is that an oversight?",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-16T09:43:20Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+local bit = require('bit')\n+local rshift = bit.rshift\n+\n+local M = {}\n+\n+--- Indices are 0-based.\n+local function memmove(dst, dst_begin, src, src_begin, count)\n+  -- Accessing an undefined field of a global variable\n+  -- luacheck: push ignore 143\n+  if table.move then\n+    table.move(src, 1 + src_begin, 1 + src_begin + count - 1, 1 + dst_begin, dst)\n+    -- luacheck: pop\n+  else\n+    if dst == src then\n+      if dst_begin == src_begin then\n+        return\n+      end\n+      assert(dst_begin <= src_begin, 'Not implemented')\n+    end\n+\n+    for i = 1, count do\n+      dst[dst_begin + i] = src[src_begin + i]\n+    end\n+  end\n+end\n+\n+---Used as 0-based, end exclusive.\n+---@class vim.treesitter.ByteRange\n+---@inlinedoc\n+---@field [1] integer begin byte\n+---@field [2] integer end byte\n+\n+---@param ranges vim.treesitter.ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@return integer index\n+function M.ranges_find_first_edited(ranges, edit_b, edit_e_old)",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1918139002",
            "id": 1918139002,
            "line": 31,
            "node_id": "PRRC_kwDOAPphoM5yVHp6",
            "original_commit_id": "9516657434cf475a7d4ff4f205d30b6898279d57",
            "original_line": 31,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_byte_range.lua",
            "position": 31,
            "pull_request_review_id": 2555374757,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918139002/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-16T09:46:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918139002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1918787797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918787797"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This function expects ranges to be sorted, don't overlap, and don't contain any 0-width ranges. I don't remember removing a comment about this, but I don't see it. I should add it.\r\n\r\nThe function searches for the first range that ends aftar the start of the edit. Since the ranges don't overlap, we can guarantee that the previous range ends before the edit, and doesn't need to be edited.\r\n\r\nThe range that this function finds wouldn't be edited only if the edit is bwtween all of the ranges. Not sure how the function name should reflect that.",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-16T15:45:31Z",
            "diff_hunk": "@@ -0,0 +1,190 @@\n+local bit = require('bit')\n+local rshift = bit.rshift\n+\n+local M = {}\n+\n+--- Indices are 0-based.\n+local function memmove(dst, dst_begin, src, src_begin, count)\n+  -- Accessing an undefined field of a global variable\n+  -- luacheck: push ignore 143\n+  if table.move then\n+    table.move(src, 1 + src_begin, 1 + src_begin + count - 1, 1 + dst_begin, dst)\n+    -- luacheck: pop\n+  else\n+    if dst == src then\n+      if dst_begin == src_begin then\n+        return\n+      end\n+      assert(dst_begin <= src_begin, 'Not implemented')\n+    end\n+\n+    for i = 1, count do\n+      dst[dst_begin + i] = src[src_begin + i]\n+    end\n+  end\n+end\n+\n+---Used as 0-based, end exclusive.\n+---@class vim.treesitter.ByteRange\n+---@inlinedoc\n+---@field [1] integer begin byte\n+---@field [2] integer end byte\n+\n+---@param ranges vim.treesitter.ByteRange[]\n+---@param edit_b integer\n+---@param edit_e_old integer\n+---@return integer index\n+function M.ranges_find_first_edited(ranges, edit_b, edit_e_old)",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1918787797",
            "id": 1918787797,
            "in_reply_to_id": 1918139002,
            "line": 31,
            "node_id": "PRRC_kwDOAPphoM5yXmDV",
            "original_commit_id": "9516657434cf475a7d4ff4f205d30b6898279d57",
            "original_line": 31,
            "original_position": 37,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/_byte_range.lua",
            "position": 31,
            "pull_request_review_id": 2556552296,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918787797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-16T15:45:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1918787797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31975#discussion_r1920711161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31975"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1920711161"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "need to remove this comment",
            "commit_id": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
            "created_at": "2025-01-17T20:36:31Z",
            "diff_hunk": "@@ -635,17 +652,162 @@ int x = INT_MAX;\n           -- READ_STRING_OK(x, y) (char *)read_string((x), (size_t)(y))\n         }, get_ranges())\n       end)\n+\n+      it('scopes injections appropriately', function()\n+        -- `injection.combined` are combined within a TSTree.\n+        -- Lua injections on lines 2-4 should be combined within their\n+        -- respective C injection trees, and lua injections on lines 0 and 6\n+        -- are separate from each other and other lua injections on lines 2-4.\n+\n+        exec_lua(function()\n+          local lines = {\n+            [[func('int a = func(\"local a = [=[\");')]],\n+            [[]],\n+            [[func('int a = func(\"local a = 6\") + func(\"+ 3\");')]],\n+            [[func('int a = func(\"local a = 6\") + func(\"+ 3\");')]],\n+            [[func('int a = func(\"local a = 6\") + func(\"+ 3\");')]],\n+            [[]],\n+            [[func('int a = func(\"]=]\");')]],\n+          }\n+          vim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\n+          _G.parser = vim.treesitter.get_parser(0, 'lua', {\n+            injections = {\n+              -- lua injections are combined within a C tree, but C injections\n+              -- are not combined within a lua tree. So lua injection trees on\n+              -- lines 0 and 6 should\n+              -- not be sAparate and not include lua injection trees on lines 2-4.",
            "html_url": "https://github.com/neovim/neovim/pull/31975#discussion_r1920711161",
            "id": 1920711161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ye7n5",
            "original_commit_id": "3885addbdf7d0c4f12d84e3a120015c5a61e5b3d",
            "original_line": 678,
            "original_position": 135,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": null,
            "pull_request_review_id": 2559916517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1920711161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-17T20:36:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1920711161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "How to test:\r\n\r\n<details>\r\n\r\n`patch.diff` (for nvim-treesitter 097fb77312c731347180e8907424f6c967323f05):\r\n```diff\r\ndiff --git a/queries/c/injections.scm b/queries/c/injections.scm\r\nindex 77b4d7a..5547c7c 100644\r\n--- a/queries/c/injections.scm\r\n+++ b/queries/c/injections.scm\r\n@@ -1,14 +1,18 @@\r\n ((preproc_arg) @injection.content\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#set! injection.language \"c\"))\r\n \r\n ((comment) @injection.content\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#set! injection.language \"comment\"))\r\n \r\n ((comment) @injection.content\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#match? @injection.content \"/\\\\*!([a-zA-Z]+:)?re2c\")\r\n   (#set! injection.language \"re2c\"))\r\n \r\n ((comment) @injection.content\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#lua-match? @injection.content \"/[*\\/][!*\\/]<?[^a-zA-Z]\")\r\n   (#set! injection.language \"doxygen\"))\r\n \r\n@@ -22,9 +26,9 @@\r\n       (concatenated_string\r\n         (string_literal\r\n           (string_content) @injection.content))\r\n-    ]))\r\n+    ])) @_root\r\n   ; format-ignore\r\n-  (#any-of? @_function \r\n+  (#any-of? @_function\r\n     \"printf\" \"printf_s\"\r\n     \"vprintf\" \"vprintf_s\"\r\n     \"scanf\" \"scanf_s\"\r\n@@ -36,6 +40,7 @@\r\n     \"cscanf\" \"_cscanf\"\r\n     \"printw\"\r\n     \"scanw\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"printf\"))\r\n \r\n ((call_expression\r\n@@ -49,9 +54,9 @@\r\n       (concatenated_string\r\n         (string_literal\r\n           (string_content) @injection.content))\r\n-    ]))\r\n+    ])) @_root\r\n   ; format-ignore\r\n-  (#any-of? @_function \r\n+  (#any-of? @_function\r\n     \"fprintf\" \"fprintf_s\"\r\n     \"sprintf\"\r\n     \"dprintf\"\r\n@@ -72,6 +77,7 @@\r\n     \"vw_printw\" \"vwprintw\"\r\n     \"wscanw\"\r\n     \"vw_scanw\" \"vwscanw\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"printf\"))\r\n \r\n ((call_expression\r\n@@ -87,9 +93,9 @@\r\n       (concatenated_string\r\n         (string_literal\r\n           (string_content) @injection.content))\r\n-    ]))\r\n+    ])) @_root\r\n   ; format-ignore\r\n-  (#any-of? @_function \r\n+  (#any-of? @_function\r\n     \"sprintf_s\"\r\n     \"snprintf\" \"snprintf_s\"\r\n     \"vsprintf_s\"\r\n@@ -100,6 +106,7 @@\r\n     \"vsnwprintf_s\"\r\n     \"mvprintw\"\r\n     \"mvscanw\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"printf\"))\r\n \r\n ((call_expression\r\n@@ -117,8 +124,9 @@\r\n       (concatenated_string\r\n         (string_literal\r\n           (string_content) @injection.content))\r\n-    ]))\r\n+    ])) @_root\r\n   (#any-of? @_function \"mvwprintw\" \"mvwscanw\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"printf\"))\r\n \r\n ; TODO: add when asm is added\r\ndiff --git a/queries/lua/injections.scm b/queries/lua/injections.scm\r\nindex e76745f..080ff0a 100644\r\n--- a/queries/lua/injections.scm\r\n+++ b/queries/lua/injections.scm\r\n@@ -7,7 +7,8 @@\r\n   ]\r\n   arguments: (arguments\r\n     (string\r\n-      content: _ @injection.content)))\r\n+      content: _ @injection.content))) @_root\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"c\")\r\n   (#eq? @_cdef_identifier \"cdef\"))\r\n \r\n@@ -15,7 +16,8 @@\r\n   name: (_) @_vimcmd_identifier\r\n   arguments: (arguments\r\n     (string\r\n-      content: _ @injection.content)))\r\n+      content: _ @injection.content))) @_root\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"vim\")\r\n   (#any-of? @_vimcmd_identifier \"vim.cmd\" \"vim.api.nvim_command\" \"vim.api.nvim_exec2\"))\r\n \r\n@@ -23,7 +25,8 @@\r\n   name: (_) @_vimcmd_identifier\r\n   arguments: (arguments\r\n     (string\r\n-      content: _ @injection.content) .))\r\n+      content: _ @injection.content) .)) @_root\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"query\")\r\n   (#any-of? @_vimcmd_identifier \"vim.treesitter.query.set\" \"vim.treesitter.query.parse\"))\r\n \r\n@@ -37,9 +40,10 @@\r\n       content: _ @_method)\r\n     .\r\n     (string\r\n-      content: _ @injection.content)))\r\n+      content: _ @injection.content))) @_root\r\n   (#any-of? @_vimcmd_identifier \"vim.rpcrequest\" \"vim.rpcnotify\")\r\n   (#eq? @_method \"nvim_exec_lua\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"lua\"))\r\n \r\n ; exec_lua [[ ... ]] in functionaltests\r\n@@ -47,12 +51,13 @@\r\n   name: (identifier) @_function\r\n   arguments: (arguments\r\n     (string\r\n-      content: (string_content) @injection.content)))\r\n+      content: (string_content) @injection.content))) @_root\r\n   (#eq? @_function \"exec_lua\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"lua\"))\r\n \r\n ; vim.api.nvim_create_autocmd(\"FileType\", { command = \"injected here\" })\r\n-(function_call\r\n+((function_call\r\n   name: (_) @_vimcmd_identifier\r\n   arguments: (arguments\r\n     .\r\n@@ -62,13 +67,14 @@\r\n       (field\r\n         name: (identifier) @_command\r\n         value: (string\r\n-          content: (_) @injection.content))) .)\r\n+          content: (_) @injection.content))) .)) @_root\r\n   ; limit so only 2-argument functions gets matched before pred handle\r\n   (#eq? @_vimcmd_identifier \"vim.api.nvim_create_autocmd\")\r\n   (#eq? @_command \"command\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"vim\"))\r\n \r\n-(function_call\r\n+((function_call\r\n   name: (_) @_user_cmd\r\n   arguments: (arguments\r\n     .\r\n@@ -77,11 +83,12 @@\r\n     (string\r\n       content: (_) @injection.content)\r\n     .\r\n-    (_) .)\r\n+    (_) .)) @_root\r\n   (#eq? @_user_cmd \"vim.api.nvim_create_user_command\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"vim\"))\r\n \r\n-(function_call\r\n+((function_call\r\n   name: (_) @_user_cmd\r\n   arguments: (arguments\r\n     .\r\n@@ -92,9 +99,10 @@\r\n     (string\r\n       content: (_) @injection.content)\r\n     .\r\n-    (_) .)\r\n+    (_) .)) @_root\r\n   ; Limiting predicate handling to only functions with 4 arguments\r\n   (#eq? @_user_cmd \"vim.api.nvim_buf_create_user_command\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"vim\"))\r\n \r\n ; rhs highlighting for vim.keymap.set/vim.api.nvim_set_keymap/vim.api.nvim_buf_set_keymap\r\n@@ -127,11 +135,13 @@\r\n (string\r\n   content: _ @injection.content\r\n   (#lua-match? @injection.content \"^%s*;+%s?query\")\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#set! injection.language \"query\"))\r\n \r\n (comment\r\n   content: (_) @injection.content\r\n   (#lua-match? @injection.content \"^[-][%s]*[@|]\")\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#set! injection.language \"luadoc\")\r\n   (#offset! @injection.content 0 1 0 0))\r\n \r\n@@ -145,9 +155,10 @@\r\n     (_)\r\n     .\r\n     (string\r\n-      content: (string_content) @injection.content\r\n-      (#set! injection.language \"luap\")\r\n-      (#set! injection.include-children))))\r\n+      content: (string_content) @injection.content)) @_root\r\n+  (#set! nvim.injection-root @_root)\r\n+  (#set! injection.language \"luap\")\r\n+  (#set! injection.include-children))\r\n \r\n ;(\"123\"):match(\"%d+\")\r\n (function_call\r\n@@ -157,9 +168,10 @@\r\n   arguments: (arguments\r\n     .\r\n     (string\r\n-      content: (string_content) @injection.content\r\n-      (#set! injection.language \"luap\")\r\n-      (#set! injection.include-children))))\r\n+      content: (string_content) @injection.content)) @_root\r\n+  (#set! nvim.injection-root @_root)\r\n+  (#set! injection.language \"luap\")\r\n+  (#set! injection.include-children))\r\n \r\n ; string.format(\"pi = %.2f\", 3.14159)\r\n ((function_call\r\n@@ -168,8 +180,9 @@\r\n   arguments: (arguments\r\n     .\r\n     (string\r\n-      (string_content) @injection.content)))\r\n+      (string_content) @injection.content)) @_root)\r\n   (#eq? @_method \"format\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"printf\"))\r\n \r\n ; (\"pi = %.2f\"):format(3.14159)\r\n@@ -178,12 +191,14 @@\r\n     table: (_\r\n       (string\r\n         (string_content) @injection.content))\r\n-    method: (identifier) @_method))\r\n+    method: (identifier) @_method) @_root)\r\n   (#eq? @_method \"format\")\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"printf\"))\r\n \r\n (comment\r\n   content: (_) @injection.content\r\n+  (#set! nvim.injection-root @injection.content)\r\n   (#set! injection.language \"comment\"))\r\n \r\n ; vim.filetype.add({ pattern = { [\"some lua pattern here\"] = \"filetype\" } })\r\n@@ -196,7 +211,8 @@\r\n         value: (table_constructor\r\n           (field\r\n             name: (string\r\n-              content: _ @injection.content)))))))\r\n+              content: _ @injection.content))))))) @_root\r\n+  (#set! nvim.injection-root @_root)\r\n   (#set! injection.language \"luap\")\r\n   (#eq? @_filetypeadd_identifier \"vim.filetype.add\")\r\n   (#eq? @_pattern_key \"pattern\"))\r\n```\r\n\r\n`minimal.lua`:\r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git',\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:prepend(install_path)\r\nend\r\n\r\nvim.cmd('!cd nvim_issue/nvim_treesitter && git apply ../../patch.diff')\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { 'c', 'lua', 'printf' },\r\n  highlight = { enable = true },\r\n}\r\n\r\nvim.api.nvim_set_hl(0, '@character.printf', { fg = 'green' })\r\n```\r\n\r\n(Only `c` and `lua` injections)\r\n\r\n</details>",
            "created_at": "2025-01-12T07:54:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2585628607",
            "id": 2585628607,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6aHY-_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585628607/reactions"
            },
            "updated_at": "2025-01-12T07:55:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585628607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Theoretical bug: if a match is found past the end of the range set in the iterator, then everything would break.",
            "created_at": "2025-01-13T04:16:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2586144906",
            "id": 2586144906,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6aJXCK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2586144906/reactions"
            },
            "updated_at": "2025-01-14T06:43:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2586144906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Are new the tests in #26827 compatible with this PR?",
            "created_at": "2025-01-14T06:28:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2589132993",
            "id": 2589132993,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6aUwjB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2589132993/reactions"
            },
            "updated_at": "2025-01-14T06:28:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2589132993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Added tests for incremental injections",
            "created_at": "2025-01-15T06:59:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2591786937",
            "id": 2591786937,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6ae4e5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2591786937/reactions"
            },
            "updated_at": "2025-01-15T06:59:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2591786937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This PR would need a follow-up that tries to reuse existing tree regions when injections are added/removed. I couldn't use tests from https://github.com/neovim/neovim/pull/26827 because this PR uses the old \"invalidate all trees if a new tree is added\" approach.\r\n\r\nI did try to write the logic, but it becomes too complicated for 1 PR.",
            "created_at": "2025-01-15T07:05:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2591794299",
            "id": 2591794299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6ae6R7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2591794299/reactions"
            },
            "updated_at": "2025-01-15T07:05:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2591794299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Question: what is supposed to happen if an injected language has combined injections?\r\nDo we need to execute injection query on everything in all ancestors and the injected language? \r\nOr is executing it on everything in the injected language fine?\r\n\r\nBoth this PR and https://github.com/neovim/neovim/pull/26827/files appear to do the latter.\r\n\r\nWhy are combined injections combined across multiple trees and not within the tree? Does this mean there are some injected languages that rely on this?",
            "created_at": "2025-01-15T20:19:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2593854151",
            "id": 2593854151,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6amxLH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593854151/reactions"
            },
            "updated_at": "2025-01-15T20:19:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593854151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The (officially stated) intention is that all injections with combined _in the document_ are parsed as a single contiguous region. ",
            "created_at": "2025-01-15T20:25:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2593862944",
            "id": 2593862944,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6amzUg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593862944/reactions"
            },
            "updated_at": "2025-01-15T20:25:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593862944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I removed searching injections within the parse `range`. Most of the time edits don't invalidate the entire document, and the update range is not made smaller.",
            "created_at": "2025-01-15T21:31:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2593978223",
            "id": 2593978223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6anPdv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593978223/reactions"
            },
            "updated_at": "2025-01-15T21:31:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2593978223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Added a benchmark",
            "created_at": "2025-01-16T02:39:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2594351251",
            "id": 2594351251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6aoqiT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2594351251/reactions"
            },
            "updated_at": "2025-01-16T02:39:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2594351251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can you quantify the performance increase? What sort of files specifically would profit from this?\r\n\r\nThis is a massive complexity increase (with high maintenance cost in an already arcane codepath), which together with requiring query changes (which we can't rely on) means it would have to be both necessary and sufficiently effective to consider merging this.",
            "created_at": "2025-01-16T10:06:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2595095910",
            "id": 2595095910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6argVm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2595095910/reactions"
            },
            "updated_at": "2025-01-16T10:06:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2595095910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> What sort of files specifically would profit from this?\r\n\r\nFor me, it is any source code file with >5'000 lines. >2'000 on a laptop.\r\n\r\n> Can you quantify the performance increase?\r\n\r\nMaking an edit in a file with 7'000 lines (`/src/nvim/ops.c`) takes 25ms for injections currently. With this PR, the time is down to 0.1ms.\r\n\r\n\r\n",
            "created_at": "2025-01-16T16:19:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2596155077",
            "id": 2596155077,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6avi7F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 2,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2596155077/reactions"
            },
            "updated_at": "2025-01-16T16:19:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2596155077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Making an edit in a file with 7'000 lines (/src/nvim/ops.c) takes 25ms for injections currently. With this PR, the time is down to 0.1ms.\r\n\r\nI'm guessing most of that gain is from running the query over a shorter range?",
            "created_at": "2025-01-16T16:48:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2596222250",
            "id": 2596222250,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6avzUq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2596222250/reactions"
            },
            "updated_at": "2025-01-16T16:48:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2596222250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I'm guessing most of that gain is from running the query over a shorter range?\r\n\r\nYes",
            "created_at": "2025-01-16T17:39:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2596331552",
            "id": 2596331552,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6awOAg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2596331552/reactions"
            },
            "updated_at": "2025-01-16T17:39:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2596331552",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Question: what is supposed to happen if an injected language has combined injections? Do we need to execute injection query on everything in all ancestors and the injected language? Or is executing it on everything in the injected language fine?\r\n> \r\n> Both this PR and https://github.com/neovim/neovim/pull/26827/files appear to do the latter.\r\n> \r\n> Why are combined injections combined across multiple trees and not within the tree? Does this mean there are some injected languages that rely on this?\r\n\r\nTurns out this is not true. Injections are only combined within one `TSTree`.",
            "created_at": "2025-01-17T19:08:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2599022686",
            "id": 2599022686,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6a6fBe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599022686/reactions"
            },
            "updated_at": "2025-01-17T19:08:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599022686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So why are `TSTree`s grouped by language? I thought it is only because injections need to be combined across all trees in a language, but that is not the case.",
            "created_at": "2025-01-17T19:20:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2599040527",
            "id": 2599040527,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6a6jYP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599040527/reactions"
            },
            "updated_at": "2025-01-17T19:20:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599040527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Fixed the code and added a test for combined injections.",
            "created_at": "2025-01-17T20:07:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2599109793",
            "id": 2599109793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6a60Sh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599109793/reactions"
            },
            "updated_at": "2025-01-17T20:07:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2599109793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Helix will not be implementing this for a while. Can we stick with `nvim.injection-root` for now? The predicate is not required for queries to work. We only need to add it if injectuon parsing is a bottleneck for a particular grammar.\r\n\r\nI made a script that can automatically add the predicate for all queries (and remove the old predicate). So it can be easily added or renamed at any point.\r\n\r\nI ran it on queries in `nvim-treesitter` and it worked on 281 languages. Remaining 5 queries had patterns that match siblings (`http`, `julia`, `nim`, `nix`, `pug`).\r\n\r\n<details>\r\n\r\n<summary>script.lua</summary>\r\n\r\n```lua\r\nlocal queries_path = '$HOME/nvim-treesitter/queries/'\r\n\r\nlocal old_capture = '@_injection_root'\r\nlocal old_predicate = '(#set! nvim.injection-root @_injection_root)'\r\n\r\nlocal new_capture = '@_injection_root'\r\nlocal new_predicate = '(#set! nvim.injection-root @_injection_root)'\r\n-- Check if generated query is valid. Requires all parsers.\r\nlocal try_reparse = true\r\n\r\n\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git',\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:prepend(install_path)\r\nend\r\n\r\nlocal uv = vim.uv\r\nlocal function readFile(path, callback)\r\n  uv.fs_open(path, \"r\", 438, function(err, fd)\r\n    if err then return callback(err) end\r\n    uv.fs_fstat(fd, function(err, stat)\r\n      if err then return callback(err) end\r\n      uv.fs_read(fd, stat.size, 0, function(err, data)\r\n        if err then return callback(err) end\r\n        pcall(callback, nil, data)\r\n        uv.fs_close(fd, function() end)\r\n      end)\r\n    end)\r\n  end)\r\nend\r\n\r\nlocal function findRootNode(parent)\r\n  local ptype = parent:type()\r\n  if ptype == 'named_node' or ptype == 'anonymous_node' or ptype == 'list' then\r\n    return parent\r\n  elseif ptype == 'grouping' then\r\n    local found_node = nil\r\n    local found_type = nil\r\n    for child in parent:iter_children() do\r\n      if child:named() then\r\n        local ctype = child:type()\r\n        if ctype == 'capture' then\r\n        elseif ctype ~= 'predicate' and ctype ~= 'comment' then\r\n          assert(\r\n            ctype == 'named_node' or ctype == 'anonymous_node'\r\n              or ctype == 'list' or ctype == 'grouping',\r\n            'type?: ' .. ctype .. ' at ' .. vim.inspect({ parent:range() })\r\n          )\r\n          if found_node == nil then\r\n            found_node = child\r\n            found_type = ctype\r\n          else\r\n            found_node = nil\r\n            found_type = nil\r\n            break\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    if found_type == 'grouping' then\r\n      return findRootNode(found_node)\r\n    end\r\n\r\n    return found_node\r\n  elseif ptype == 'comment' then\r\n    return nil, true\r\n  else\r\n    assert(false, 'type?: ' .. ptype .. ' at ' .. vim.inspect({ parent:range() }))\r\n  end\r\nend\r\n\r\nlocal language = require('vim.treesitter.language')\r\n\r\nlocal function is_whitespace(char)\r\n  return char == ' ' or char == '\\r' or char == '\\n'\r\nend\r\n\r\nlocal function adjusted(byte, insert_i, insert_c)\r\n  if byte >= insert_i then\r\n    return byte + insert_c\r\n  else\r\n    return byte\r\n  end\r\nend\r\n\r\nlocal function remove_old_pred(content)\r\n  local result = ''\r\n  local i = 1\r\n\r\n  while true do\r\n    local first, last = content:find(old_predicate, i, true)\r\n    if not first then\r\n      result = result .. content:sub(i)\r\n      break\r\n    end\r\n\r\n    local first_prev = first - 1\r\n    while true do\r\n      local it = content:sub(first_prev, first_prev)\r\n      if not is_whitespace(it) then\r\n        break\r\n      end\r\n      first_prev = first_prev - 1\r\n    end\r\n\r\n    local first_next = last + 1\r\n    while true do\r\n      local it = content:sub(first_next, first_next)\r\n      if not is_whitespace(it) then\r\n        break\r\n      end\r\n      first_next = first_next + 1\r\n    end\r\n\r\n    if content:sub(first_next, first_next) == ')' then\r\n      result = result .. content:sub(i, first_prev)\r\n    else\r\n      result = result .. content:sub(i, first - 1)\r\n    end\r\n    i = first_next\r\n  end\r\n\r\n  return result\r\nend\r\n\r\nlocal function remove_old_capture(content)\r\n  local result = ''\r\n  local i = 1\r\n\r\n  while true do\r\n    local first, last = content:find(old_capture, i, true)\r\n    if not first then\r\n      result = result .. content:sub(i)\r\n      break\r\n    end\r\n\r\n    local prev = content:sub(first - 1, first - 1)\r\n    local next = content:sub(last + 1, last + 1)\r\n    if prev == ' ' and (is_whitespace(next) or next == nil or next == ')') then\r\n      first = first - 1\r\n    end\r\n\r\n    result = result .. content:sub(i, first - 1)\r\n    i = last + 1\r\n  end\r\n\r\n  return result\r\nend\r\n\r\nlocal function processFile(content, lang_name)\r\n  content = remove_old_capture(remove_old_pred(content))\r\n\r\n  local parser = vim.treesitter.get_string_parser(content, 'query')\r\n  -- no async because it is not a buffer\r\n  local tree_node = parser:parse(true)[1]:root()\r\n\r\n  local insert_positions = {}\r\n  for pattern_node in tree_node:iter_children() do\r\n    local root, ignore = findRootNode(pattern_node)\r\n    if not ignore then\r\n      if root == nil then\r\n        return nil, { pattern_node:range() }\r\n      end\r\n      local _, _, _, _, _, eb = root:range(true)\r\n      local _, _, pb, _, _, pe = pattern_node:range(true)\r\n      local par = pattern_node:type() ~= 'grouping'\r\n      table.insert(insert_positions, {\r\n        bounds = { pb, pe },\r\n        capture_i = eb,\r\n        predicate_i = par and pe or pe - 1,\r\n        parenthesis = par,\r\n      })\r\n    end\r\n  end\r\n\r\n  for i = #insert_positions, 1, -1 do\r\n    local params = insert_positions[i]\r\n    local bounds = params.bounds\r\n    local capture_i = params.capture_i\r\n    local parenthesis = params.parenthesis\r\n    local predicate_i = params.predicate_i\r\n\r\n    local next = content:sub(1 + capture_i)\r\n    local nc = next:sub(1, 1)\r\n\r\n    local need_space = (nc ~= nil and not is_whitespace(nc)) and capture_i ~= predicate_i\r\n    local insert = ' ' .. new_capture .. (need_space and ' ' or '')\r\n\r\n    content = content:sub(1, 1 + capture_i - 1) .. insert .. next\r\n    bounds[1] = adjusted(bounds[1], capture_i, #insert)\r\n    bounds[2] = adjusted(bounds[2], capture_i, #insert)\r\n    predicate_i = adjusted(predicate_i, capture_i, #insert)\r\n\r\n    next = content:sub(1 + predicate_i)\r\n    insert = '\\n  ' .. new_predicate\r\n\r\n    content = content:sub(1, 1 + predicate_i - 1) .. insert .. next\r\n    bounds[1] = adjusted(bounds[1], capture_i, #insert)\r\n    bounds[2] = adjusted(bounds[2], capture_i, #insert)\r\n\r\n    if parenthesis then\r\n      content = content:sub(1, 1 + bounds[1] - 1) .. '('\r\n        .. content:sub(1 + bounds[1], 1 + bounds[2] - 1) .. ')'\r\n        .. content:sub(1 + bounds[2])\r\n    end\r\n  end\r\n\r\n  if try_reparse then\r\n    local lang = vim.treesitter.language.get_lang(lang_name)\r\n    if language.add(lang) then\r\n      local is_parsed, err = pcall(vim._ts_parse_query, lang, content)\r\n      if not is_parsed then\r\n        error('Result is not a query: ' .. err)\r\n      end\r\n    else\r\n      vim.notify(\r\n        \"Could not reparse \" .. lang_name .. \": parser doesn't load\",\r\n        vim.log.levels.WARN\r\n      )\r\n    end\r\n  end\r\n\r\n  return content\r\nend\r\n\r\nlocal function processFiles()\r\n  vim.opt.redrawtime = 999999\r\n\r\n  local files = vim.fn.glob('*/injections.scm', false, true)\r\n  local lang_names = {}\r\n  for i, path in ipairs(files) do\r\n    local first_sep = path:find('/')\r\n    if first_sep == nil then\r\n      first_sep = path:find('\\\\')\r\n    end\r\n    lang_names[i] = path:sub(1, first_sep - 1)\r\n  end\r\n\r\n  require'nvim-treesitter.configs'.setup {\r\n    sync_install = true,\r\n    ensure_installed = try_reparse and lang_names or { 'scheme' },\r\n  }\r\n\r\n  local success = 0\r\n  local fail = 0\r\n  local skip = 0\r\n  local function print_done()\r\n    local total = success + fail + skip\r\n    if total >= #files then\r\n      print('Done ' .. total .. ' files')\r\n      print('  successfully:', success)\r\n      print('  skipped:', skip)\r\n      print('  error:', fail)\r\n    end\r\n  end\r\n\r\n  for i, path in ipairs(files) do\r\n    readFile(path, function(err, content)\r\n      if err ~= nil then\r\n        vim.notify(\"Error reading file \" .. path, vim.log.levels.ERROR)\r\n        fail = fail + 1\r\n        print_done()\r\n        error(err)\r\n      end\r\n      vim.schedule(function()\r\n        local ok, new_cont, info = pcall(processFile, content, lang_names[i])\r\n        if not ok then\r\n          vim.notify(\"Error processing file \" .. path, vim.log.levels.ERROR)\r\n          fail = fail + 1\r\n          print_done()\r\n          error(new_cont)\r\n        end\r\n        if new_cont == nil then\r\n          skip = skip + 1\r\n          print_done()\r\n          vim.notify(\r\n            \"Could not make file \" .. path .. \" incremental at \" .. vim.inspect(info),\r\n            vim.log.levels.WARN\r\n          )\r\n        else\r\n          local off = 0\r\n\r\n          local fd\r\n          local ok, err = pcall(function()\r\n            fd = uv.fs_open(path, \"w\", 438)\r\n            while off < #new_cont do\r\n              local written = uv.fs_write(fd, new_cont:sub(1 + off), off)\r\n              off = off + written\r\n            end\r\n          end)\r\n          uv.fs_close(fd)\r\n          if not ok then\r\n            fail = fail + 1\r\n            print_done()\r\n            error(err)\r\n          end\r\n\r\n          success = success + 1\r\n          print_done()\r\n        end\r\n      end)\r\n    end)\r\n  end\r\nend\r\n\r\nvim.cmd.cd(queries_path)\r\nprocessFiles()\r\n```\r\n\r\n</details>",
            "created_at": "2025-01-19T02:05:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2600484165",
            "id": 2600484165,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6bAD1F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2600484165/reactions"
            },
            "updated_at": "2025-01-19T02:59:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2600484165",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@vanaigr I really appreciate all the effort you put into this -- that's impressive work, and the numbers are nice! But...\r\n\r\nI am sorry, but requiring query changes for this is a hard NO: This leaks abstraction (across projects!) and makes my job maintaining these queries significantly harder. (It's not just about the initial conversion but having to reason about this when making or reviewing future changes, which often involves non-Neovim users). There's also a number of open PRs that touch related code, and such a complex change makes it hard to coordinate them.\r\n\r\nSo I would suggest the following \"bite size\" approach instead:\r\n\r\n1. Have the highlighter apply (non-combined) injection queries only for the visible lines. This should be fairly simple and quickly mergeable.\r\n2. Fix combined injections (which currently have incorrect behavior, and correctness has priority over performance).\r\n3. For this, I suspect a proper region (list of ranges) abstraction and (internal) API that complements `vim._range` would be useful. Adding that and refactoring the code to use it consistently would make future changes easier, I am sure.\r\n\r\nAfter this and the other lower-hanging fruit PRs are merged, we can take stock and see if (and how) we want to go full incremental.",
            "created_at": "2025-01-19T16:27:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31975#issuecomment-2600931884",
            "id": 2600931884,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
            "node_id": "IC_kwDOAPphoM6bBxIs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2600931884/reactions"
            },
            "updated_at": "2025-01-19T16:27:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2600931884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31975/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31975/commits",
    "created_at": "2025-01-12T07:51:29Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31975.diff",
    "draft": false,
    "head": {
        "label": "vanaigr:incremental-injections-3",
        "ref": "incremental-injections-3",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/vanaigr/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/vanaigr/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/vanaigr/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/vanaigr/neovim/branches{/branch}",
            "clone_url": "https://github.com/vanaigr/neovim.git",
            "collaborators_url": "https://api.github.com/repos/vanaigr/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/vanaigr/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/vanaigr/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/vanaigr/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/vanaigr/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/vanaigr/neovim/contributors",
            "created_at": "2023-12-05T22:08:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/vanaigr/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/vanaigr/neovim/downloads",
            "events_url": "https://api.github.com/repos/vanaigr/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/vanaigr/neovim/forks",
            "full_name": "vanaigr/neovim",
            "git_commits_url": "https://api.github.com/repos/vanaigr/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/vanaigr/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/vanaigr/neovim/git/tags{/sha}",
            "git_url": "git://github.com/vanaigr/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/vanaigr/neovim/hooks",
            "html_url": "https://github.com/vanaigr/neovim",
            "id": 727936921,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/vanaigr/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/vanaigr/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/vanaigr/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/vanaigr/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/vanaigr/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/vanaigr/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/vanaigr/neovim/merges",
            "milestones_url": "https://api.github.com/repos/vanaigr/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK2NvmQ",
            "notifications_url": "https://api.github.com/repos/vanaigr/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/vanaigr/neovim/pulls{/number}",
            "pushed_at": "2025-01-20T05:27:23Z",
            "releases_url": "https://api.github.com/repos/vanaigr/neovim/releases{/id}",
            "size": 296126,
            "ssh_url": "git@github.com:vanaigr/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/vanaigr/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/vanaigr/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/vanaigr/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/vanaigr/neovim/subscription",
            "svn_url": "https://github.com/vanaigr/neovim",
            "tags_url": "https://api.github.com/repos/vanaigr/neovim/tags",
            "teams_url": "https://api.github.com/repos/vanaigr/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/vanaigr/neovim/git/trees{/sha}",
            "updated_at": "2025-01-12T07:18:31Z",
            "url": "https://api.github.com/repos/vanaigr/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "e8ac1152934b6d8879b1928e1f2a05da73f05db1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
            "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
            "followers_url": "https://api.github.com/users/vanaigr/followers",
            "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/vanaigr",
            "id": 65824523,
            "login": "vanaigr",
            "node_id": "MDQ6VXNlcjY1ODI0NTIz",
            "organizations_url": "https://api.github.com/users/vanaigr/orgs",
            "received_events_url": "https://api.github.com/users/vanaigr/received_events",
            "repos_url": "https://api.github.com/users/vanaigr/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/vanaigr",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31975",
    "id": 2272417145,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31975",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "8bf13dda1c4677867f2f3408c569e33a914974f6",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6HclV5",
    "number": 31975,
    "patch_url": "https://github.com/neovim/neovim/pull/31975.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31975/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/e8ac1152934b6d8879b1928e1f2a05da73f05db1",
    "title": "feat: incremental injection parsing",
    "updated_at": "2025-01-19T16:28:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31975",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
        "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vanaigr/followers",
        "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vanaigr",
        "id": 65824523,
        "login": "vanaigr",
        "node_id": "MDQ6VXNlcjY1ODI0NTIz",
        "organizations_url": "https://api.github.com/users/vanaigr/orgs",
        "received_events_url": "https://api.github.com/users/vanaigr/received_events",
        "repos_url": "https://api.github.com/users/vanaigr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vanaigr",
        "user_view_type": "public"
    }
}