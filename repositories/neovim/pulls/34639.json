{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34639/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34639/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34639"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34639"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34639/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": {
        "commit_message": "Problem:\nCloses #31453\n\nSolution:\nIntroduce `vim.lsp.Capability`, which may serve as the base class for\nall LSP features that require caching data. it\n- was created if there is at least one client that supports the specific method;\n- was destroyed if all clients that support the method were detached.\n\n- Apply the refactor for `folding_range.lua` and `semantic_tokens.lua`.\n- Show active features in :checkhealth.\n\nFuture:\nI found that these features that are expected to be refactored by\n`vim.lsp.Capability` have one characteristic in common: they all send\nLSP requests once the document is modified. The following code is\ndifferent, but they are all for this purpose.\n\n- semantic tokens:\nhttps://github.com/neovim/neovim/blob/fb8dba413f2bcaa61c15d1854b28112e3e91a035/runtime/lua/vim/lsp/semantic_tokens.lua#L192-L198\n- inlay hints, folding ranges, document color\nhttps://github.com/neovim/neovim/blob/fb8dba413f2bcaa61c15d1854b28112e3e91a035/runtime/lua/vim/lsp/inlay_hint.lua#L250-L266\n\nI think I can sum up this characteristic as the need to keep certain\ndata synchronized with the latest version computed by the server.\nI believe we can handle this at the `vim.lsp.Capability` level, and\nI think it will be very useful.\n\nTherefore, my next step is to implement LSP request sending and data\nsynchronization on `vim.lsp.Capability`, rather than limiting it to the\ncurrent create/destroy data approach.",
        "commit_title": "refactor(lsp): stateful data abstraction, vim.lsp.Capability #34639",
        "enabled_by": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "merge_method": "squash"
    },
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6198,
            "forks_count": 6198,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1970,
            "open_issues_count": 1970,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-21T05:18:47Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 334403,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91287,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-22T03:04:19Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91287,
            "watchers_count": 91287,
            "web_commit_signoff_required": false
        },
        "sha": "5973328edaedb04425e2f6cb63b2efab4aeb5fcb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "## Problem\r\nCloses #31453\r\n\r\n## Solution\r\nThis PR introduces a new class called `vim.lsp.Capability`, which may serve as the base class for all LSP features that require caching data. it\r\n- was created if there is at least one client that supports the specific method;\r\n- was destroyed if all clients that support the method were detached.\r\n\r\nI've applied the refactor for `folding_range.lua` and `semantic_tokens.lua`. Among the modules I'm familiar with, I think we can do this for `inlay_hint.lua` (with some modification), and it could be used for `codelens.lua` too, but I think it would be better if we re-implement it to align with our inlay hint support. I will be trying to work on #30841 if this PR gets merged, because it was originally blocked by #31453. The refactor could also be applied to #34388 since we've discussed some of the ideas there.\r\n\r\nI've also added the corresponding health check to show the active data.\r\n\r\n## Next\r\n\r\nI found that these features that are expected to be refactored by `vim.lsp.Capability` have one characteristic in common: they all send LSP requests once the document is modified. The following code is different, but they are all for this purpose.\r\n\r\n- semantic tokens:\r\nhttps://github.com/neovim/neovim/blob/fb8dba413f2bcaa61c15d1854b28112e3e91a035/runtime/lua/vim/lsp/semantic_tokens.lua#L192-L198\r\n\r\n- inlay hints, folding ranges, document color\r\nhttps://github.com/neovim/neovim/blob/fb8dba413f2bcaa61c15d1854b28112e3e91a035/runtime/lua/vim/lsp/inlay_hint.lua#L250-L266\r\n\r\nI think I can sum up this characteristic as the need to keep certain data synchronized with the latest version computed by the server. I believe we can handle this at the `vim.lsp.Capability` level, and I think it will be very useful.\r\n\r\nTherefore, my next step is to implement LSP request sending and data synchronization on `vim.lsp.Capability`, rather than limiting it to the current create/destroy data approach.\r\n",
    "closed_at": "2025-07-07T03:51:30Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2166020330"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166020330"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\nlocal M = {}\n```\n",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-25T07:37:45Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature\n+---@field name string\n+---@field active table<integer, vim.lsp.Feature?>\n+---@field bufnr integer\n+---@field augroup integer\n+---@field client_state table<integer, table>\n+local Feature = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2166020330",
            "id": 2166020330,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BGtjq",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2957007787,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166020330/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-25T07:40:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166020330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2166021742"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166021742"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n---@class vim.lsp.Feature\n```\n\nThis isn't private. Private classes are private to the module, not the workspace.",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-25T07:38:30Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2166021742",
            "id": 2166021742,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BGt5u",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 3,
            "original_position": 3,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2957007787,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166021742/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-25T07:40:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166021742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2166027866"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166027866"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I am not very confident about the naming. Initially, I planned to name the base class `vim.lsp.State` and the subclass `vim.lsp.folding_range.State`, but I found that this naming approach would cause confusion with variable names since variable names cannot include namespaces. If there is a metatable called `State`, due to the lack of namespace in the variable name, we cannot distinguish whether it is a subclass or a base class except by renaming it.\r\n\r\nThumbs down to indicate that you think I should revert to the original naming, or feel free to tell me if you have any better ideas.",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-25T07:41:45Z",
            "diff_hunk": "@@ -33,18 +35,20 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-local State = { active = {} }\n+local FoldEvaluator = { name = 'Folding Range', active = {} }",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2166027866",
            "id": 2166027866,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BGvZa",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 38,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2957019272,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166027866/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-25T07:41:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166027866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2166056205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166056205"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't understand where/how `self` gets all the methods of `Feature`. From what I can tell `Class` is the subclass object?",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-25T07:56:33Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature\n+---@field name string\n+---@field active table<integer, vim.lsp.Feature?>\n+---@field bufnr integer\n+---@field augroup integer\n+---@field client_state table<integer, table>\n+local Feature = {}\n+Feature.__index = Feature\n+\n+---@generic T : vim.lsp.Feature\n+---@param self T\n+---@param bufnr integer\n+---@return T\n+function Feature:new(bufnr)\n+  ---@type vim.lsp.Feature\n+  local Class = self\n+  assert(Class.name and Class.active, 'Do not instantiate the abstract class')\n+\n+  ---@type vim.lsp.Feature\n+  self = setmetatable({}, Class)",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2166056205",
            "id": 2166056205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BG2UN",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2957062839,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166056205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-25T07:56:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166056205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2166071652"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166071652"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah I see each subclass needs to call `setmetatable(FoldEvaluator, Feature)`",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-25T08:04:23Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature\n+---@field name string\n+---@field active table<integer, vim.lsp.Feature?>\n+---@field bufnr integer\n+---@field augroup integer\n+---@field client_state table<integer, table>\n+local Feature = {}\n+Feature.__index = Feature\n+\n+---@generic T : vim.lsp.Feature\n+---@param self T\n+---@param bufnr integer\n+---@return T\n+function Feature:new(bufnr)\n+  ---@type vim.lsp.Feature\n+  local Class = self\n+  assert(Class.name and Class.active, 'Do not instantiate the abstract class')\n+\n+  ---@type vim.lsp.Feature\n+  self = setmetatable({}, Class)",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2166071652",
            "id": 2166071652,
            "in_reply_to_id": 2166056205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BG6Fk",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2957087266,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166071652/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-25T08:04:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166071652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2166123744"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166123744"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, that's the reason I'm using `Feature:new()` instead of `Feature.new()`. \r\n\r\nLua's OOP is quite unintuitive; my convention here is to always use the type itself as the metatable for its instances; I find that easier to understand.\r\n\r\nWhen calling `Feature:new()`, the `self` here will be the metatable `Feature`, because that's what we passed, not its instance. Only when calling methods by `feature:on_detach()`, `self` is the instance.\r\n\r\nThe subclasses are expected to call `Feature.new(SubClass, bufnr)` when it instanciates, so `self` here will be the metatable corresponding to the subclass, which was injected with methods when defining the subclass. Then we could use the methods of subclass in the base class, otherwise `self:on_detach` will always point to `Feature:ondetach`, never `STHighlighter:on_detach`.\r\n",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-25T08:29:14Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature\n+---@field name string\n+---@field active table<integer, vim.lsp.Feature?>\n+---@field bufnr integer\n+---@field augroup integer\n+---@field client_state table<integer, table>\n+local Feature = {}\n+Feature.__index = Feature\n+\n+---@generic T : vim.lsp.Feature\n+---@param self T\n+---@param bufnr integer\n+---@return T\n+function Feature:new(bufnr)\n+  ---@type vim.lsp.Feature\n+  local Class = self\n+  assert(Class.name and Class.active, 'Do not instantiate the abstract class')\n+\n+  ---@type vim.lsp.Feature\n+  self = setmetatable({}, Class)",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2166123744",
            "id": 2166123744,
            "in_reply_to_id": 2166056205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BHGzg",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2957176744,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166123744/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-25T08:29:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2166123744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2170804863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2170804863"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I just found that `Client` in `client.lua` is `local Client`, not `local M`. \r\n\r\nhttps://github.com/neovim/neovim/blob/2b4c1127ad1c8cff38f562d71f411c35ec6ba8d6/runtime/lua/vim/lsp/client.lua#L227\r\n\r\nMaybe `local Capability` would be better for consistency?",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-06-27T05:14:07Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature\n+---@field name string\n+---@field active table<integer, vim.lsp.Feature?>\n+---@field bufnr integer\n+---@field augroup integer\n+---@field client_state table<integer, table>\n+local Feature = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2170804863",
            "id": 2170804863,
            "in_reply_to_id": 2166020330,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6BY9p_",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2964775988,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2170804863/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-27T05:14:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2170804863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188758963"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188758963"
                }
            },
            "author_association": "MEMBER",
            "body": "`M` is always preferred if possible",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T00:32:27Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+local api = vim.api\n+\n+---@class (private) vim.lsp.Feature\n+---@field name string\n+---@field active table<integer, vim.lsp.Feature?>\n+---@field bufnr integer\n+---@field augroup integer\n+---@field client_state table<integer, table>\n+local Feature = {}",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188758963",
            "id": 2188758963,
            "in_reply_to_id": 2166020330,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cdc-z",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_feature.lua",
            "position": null,
            "pull_request_review_id": 2991864394,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188758963/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T00:32:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188758963",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188759128"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188759128"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice!",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T00:33:00Z",
            "diff_hunk": "@@ -192,6 +192,7 @@ LSP\n • The function form of `cmd` in a vim.lsp.Config or vim.lsp.ClientConfig\n   receives the resolved config as the second arg: `cmd(dispatchers, config)`.\n • Support for annotated text edits.\n+• `:checkhealth vim.lsp` is now available to check which buffers the active LSP features are attached to.",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188759128",
            "id": 2188759128,
            "line": 198,
            "node_id": "PRRC_kwDOAPphoM6CddBY",
            "original_commit_id": "41bef4196815b75115004f19a0a1071a5cd2ca3f",
            "original_line": 198,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": 4,
            "pull_request_review_id": 2991864662,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188759128/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T00:33:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188759128",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188856887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188856887"
                }
            },
            "author_association": "MEMBER",
            "body": "When the scope is small, names don't need to be over-descriptive.  E.g. in this case, the scope is module-scope, and the module is 350 lines. If `State` isn't ambiguous in this module scope, it's probably a fine name. ",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T02:41:25Z",
            "diff_hunk": "@@ -33,18 +35,20 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-local State = { active = {} }\n+local FoldEvaluator = { name = 'Folding Range', active = {} }",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188856887",
            "id": 2188856887,
            "in_reply_to_id": 2166027866,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cd043",
            "original_commit_id": "b80021341f8e9af9a2871fb73b1e3eeb2675775e",
            "original_line": 38,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2992003850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188856887/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T02:42:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188856887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188857902"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188857902"
                }
            },
            "author_association": "MEMBER",
            "body": "would refresh() make sense here? that's a common name in other modules.",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T02:42:40Z",
            "diff_hunk": "@@ -33,18 +35,20 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-local State = { active = {} }\n+local FoldEvaluator = { name = 'Folding Range', active = {} }\n+FoldEvaluator.__index = FoldEvaluator\n+setmetatable(FoldEvaluator, Capability)\n \n---- Renew the cached foldinfo in the buffer.\n-function State:renew()\n+--- Re-evaluate the cached foldinfo in the buffer.\n+function FoldEvaluator:evaluate()",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188857902",
            "id": 2188857902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cd1Iu",
            "original_commit_id": "de748a0ba51f2b6cebeabc6bc46b1801633e7f5c",
            "original_line": 43,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2992003850,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188857902/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T02:42:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188857902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188861207"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188861207"
                }
            },
            "author_association": "MEMBER",
            "body": "double-underscore is typically understood as Lua-internal things. single-underscore should be enough for a signal for Nvim-internal things.\n\nI'm not sure that an underscore is needed for `b:` variables though, because that is not a \"public\" namespace, it's understood that things there are owned by the prefix family (`lsp` in this case).\n\n```suggestion\n  if not api.nvim_buf_is_loaded(bufnr) or not vim.b[bufnr]._lsp_folding_range_enabled then\n```",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T02:46:21Z",
            "diff_hunk": "@@ -83,6 +87,9 @@ end\n --- Force `foldexpr()` to be re-evaluated, without opening folds.\n ---@param bufnr integer\n local function foldupdate(bufnr)\n+  if not api.nvim_buf_is_loaded(bufnr) or not vim.b[bufnr].__lsp_folding_range_enabled then",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188861207",
            "id": 2188861207,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cd18X",
            "original_commit_id": "de748a0ba51f2b6cebeabc6bc46b1801633e7f5c",
            "original_line": 90,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2992009562,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188861207/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T02:46:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188861207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188862255"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188862255"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I noticed the generality of `refresh`, but in other modules, it is usually used to mean \"sending a new LSP request,\" which is somewhat different from the situation of `renew()` here. We could rename the `request()` below to `refresh()`.",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T02:47:26Z",
            "diff_hunk": "@@ -33,18 +35,20 @@ local M = {}\n ---\n --- Index in the form of start_row -> collapsed_text\n ---@field row_text table<integer, string?>\n-local State = { active = {} }\n+local FoldEvaluator = { name = 'Folding Range', active = {} }\n+FoldEvaluator.__index = FoldEvaluator\n+setmetatable(FoldEvaluator, Capability)\n \n---- Renew the cached foldinfo in the buffer.\n-function State:renew()\n+--- Re-evaluate the cached foldinfo in the buffer.\n+function FoldEvaluator:evaluate()",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188862255",
            "id": 2188862255,
            "in_reply_to_id": 2188857902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cd2Mv",
            "original_commit_id": "de748a0ba51f2b6cebeabc6bc46b1801633e7f5c",
            "original_line": 43,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2992010813,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188862255/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T02:47:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188862255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34639#discussion_r2188868273"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34639"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188868273"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Got it, I added these underscores mainly to indicate that it is not a supported API. I will apply the single-undercore way.",
            "commit_id": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
            "created_at": "2025-07-07T02:54:52Z",
            "diff_hunk": "@@ -83,6 +87,9 @@ end\n --- Force `foldexpr()` to be re-evaluated, without opening folds.\n ---@param bufnr integer\n local function foldupdate(bufnr)\n+  if not api.nvim_buf_is_loaded(bufnr) or not vim.b[bufnr].__lsp_folding_range_enabled then",
            "html_url": "https://github.com/neovim/neovim/pull/34639#discussion_r2188868273",
            "id": 2188868273,
            "in_reply_to_id": 2188861207,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cd3qx",
            "original_commit_id": "de748a0ba51f2b6cebeabc6bc46b1801633e7f5c",
            "original_line": 90,
            "original_position": 55,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_folding_range.lua",
            "position": null,
            "pull_request_review_id": 2992018599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188868273/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-07T02:54:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188868273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Nothing against some class style to encapsulate state, but could we please try to avoid the inheritance route before all other options have been explored. Like composition?\r\n\r\nI also get the impression that the level of abstraction here is in a way too generic. \"Feature\" and \"State\" can be anything.\r\nHow about something like a `Subscription` abstraction instead, where the LSP methods and a function on how to process the data is parameterized.\r\n\r\nFrom what I can tell, most of the modules have those things in common:\r\n- Can be enabled/disabled\r\n- Makes LSP requests on buffer changes to get new data\r\n- Does something with it\r\n\r\nSo you'd have something like `local subscription = Subscription({ method = \"textDocument/xy\", on_data = function() ... end })`. Possible with different `method` options, to also cover cases like lazy resolve.\r\nThis could have methods like `:enable()` that are re-exported to fit the current public interfaces.\r\n\r\n",
            "created_at": "2025-06-25T10:04:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3004188180",
            "id": 3004188180,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zEEYU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004188180/reactions"
            },
            "updated_at": "2025-06-25T10:04:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004188180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "naming nit: to avoid new jargon, instead of `Feature` or `Subscription`, perhaps reuse the lsp name `Capability`, since this roughly maps to that idea?",
            "created_at": "2025-06-25T10:09:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3004200500",
            "id": 3004200500,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zEHY0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004200500/reactions"
            },
            "updated_at": "2025-06-25T10:09:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004200500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> naming nit: to avoid new jargon, instead of Feature or Subscription, perhaps reuse the lsp name Capability, since this roughly maps to that idea?\r\n\r\n`Capability` to me in the context of LSP is a property stating \"I can do this\". The Subscription would be about following/observing changes on the server. Observable/Observer or Publication/Subscription (or the Publisher/Subscriber variant) are quite common terms for that pattern. That said, I'd take `Capability` over `Feature`.",
            "created_at": "2025-06-25T10:15:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3004218809",
            "id": 3004218809,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zEL25",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004218809/reactions"
            },
            "updated_at": "2025-06-25T10:15:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004218809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thank you for your valuable suggestions. I have already considered some of them before; this is my current ideas. Sorry if I didn't express myself enough.\r\n\r\n> Nothing against some class style to encapsulate state, but could we please try to avoid the inheritance route before all other options have been explored. Like composition?\r\n\r\nThe problem this PR currently solves is the timely creation/destruction of LSP data, avoiding the nil errors that have appeared in inlay hints before. I think composition doesn't help much in solving this problem; at best, it allows us to reuse some code and then continue copy other parts. Using composition means we need to manage the lifecycle of two objects simultaneously. Honestly, I don't like inheritance at all, especially Lua inheritance,  which is not very intuitive. But from a practical standpoint, I think this is a pretty good approach for now because the complexities of inheritance code only need to be deal with once.\r\n\r\n> naming nit: to avoid new jargon, instead of `Feature` or `Subscription`, perhaps reuse the lsp name `Capability`, since this roughly maps to that idea?\r\n\r\nAs mentioned below, the naming of `Capability` may have some drawbacks, but there is one advantage I really like: my current design synchronizes the lifecycle of this base class (whatever it is called) with the client's capability. That is, when there is a client supporting the corresponding capability in the buffer, it is ensured to exist, and when there is no corresponding capability in the buffer, it is destroyed. I find this very intuitive.\r\n\r\n> How about something like a `Subscription` abstraction instead, where the LSP methods and a function on how to process the data is parameterized.\r\n\r\n`Subscription` is a pretty good idea because it is the goal I plan to implement next, and the name is self-explanatory for this purpose. \r\n\r\n> So you'd have something like `local subscription = Subscription({ method = \"textDocument/xy\", on_data = function() ... end })`. Possible with different `method` options, to also cover cases like lazy resolve.\r\n\r\nIt can handle the `**/resolve` method separately, but there is a more complex case:\r\n\r\n```lua\r\nlocal semantic_tokens_full = Subscription({ method = \"textDocument/semantic_tokens/full\", on_data = function() ... end )\r\nlocal semantic_tokens_delta = Subscription({ method = \"textDocument/semantic_tokens/delta\", on_data = function() ... end )\r\nlocal semantic_tokens_range = Subscription({ method = \"textDocument/semantic_tokens/range\", on_data = function() ... end )\r\n```\r\n\r\nFor semantic_tokens, there are two update strategies (full+delta vs range) to choose from, with a total of three methods controlling the same data.Therefore, although I am indeed considering an `on_data`, I think it is like this:\r\n\r\n```lua\r\nfunction Subscription:on_data(method, ...)\r\n  if method == \"textDocument/semantic_tokens/full\" then\r\n    ...\r\nelseif method == \"textDocument/semantic_tokens/delta\" then\r\n    ...\r\n  else if method == \"textDocument/semantic_tokens/range\" then\r\n    ...\r\n  end\r\nend\r\n```\r\n\r\nI think there is no much advantages using:\r\n\r\n```lua\r\nlocal subscription = Subscription({\r\n  ['textDocument/inlayHint'] = {\r\n    on_results = function ... end,\r\n    on_multi_results = function ... end,\r\n    --- other hooks\r\n  },\r\n    ['textDocument/inlayHint/resolve'] = {\r\n    on_results = function ... end,\r\n    on_multi_results = function ... end,\r\n    --- other hooks\r\n  },\r\n})\r\n```\r\n\r\ninstead of using:\r\n```lua\r\nfunction Subscription:on_results(method, ...)\r\n  ...\r\nend\r\n\r\nfunction Subscription:on_multi_results(method, ...)\r\n  -- By the way, we can call other methods inside without defining a variable for the function\r\n  self:on_results(method, ...)\r\nend\r\n```\r\n\r\nWe currently have two kinds of handlers, that's `lsp.Handler` and `lsp.MultiHandler`, I want to mention that I also plan to support `partialResultParams`, which has a great impact on user experience. We are unlikely to support it in the above two handlers, or repeat the related boilerplate code. This is another advantage of the current approach, which binds the data and the handler together while keeping flexibility.\r\n\r\n> This could have methods like `:enable()` that are re-exported to fit the current public interfaces.\r\n\r\nFor `enable()`, since I mentioned earlier aligning the lifecycle of the base class with the `capability`, my current plan is to keep this data independent of the base class because it is purely controlled by the user. The user can enable a feature on a client that does not support the corresponding capability, which seems ineffective, but it ensures that the feature is enabled when a client with the capability attaches.\r\n\r\nI think I have just reviewed my three goals, and here I will summarize them again:\r\n\r\n1. Ensure that the object storing the data can be correctly created and can be destroyed without causing memory leaks;\r\n2. This object contains data that can be updated by multiple methods for control;\r\n3. Control behaviors related to enabling.\r\n\r\nThe corresponding solutions are:\r\n1. Keep the object synchronized with clients that support the corresponding capability;\r\n2. Use the LSP handler as a method of the object;\r\n3. Separate enable-related variables from LSP data; they can be managed using `vim.g.*` or `vim.b.*`.",
            "created_at": "2025-06-25T11:44:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3004471682",
            "id": 3004471682,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zFJmC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004471682/reactions"
            },
            "updated_at": "2025-06-25T11:44:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004471682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think composition doesn't help much in solving this problem; at best, it allows us to reuse some code and then continue copy other parts. Using composition means we need to manage the lifecycle of two objects simultaneously. Honestly, I don't like inheritance at all, especially Lua inheritance, which is not very intuitive. But from a practical standpoint, I think this is a pretty good approach for now because the complexities of inheritance code only need to be deal with once.\r\n\r\nComposition helps keep things loosely decoupled and easier to understand. You end up with \"A uses B\" instead of \"A extends B where B can call into A and vice versa\". Which only gets worse with multiple levels.\r\nIt is incredibly rare to have a case where inheritance is the best option and I very much doubt it is the case here.\r\n\r\nThat you're proposing to use both, `vim.b` to manage enabled state, and have a `active[bufnr]` table inside the `Feature` seems also a bit odd to me.\r\n\r\nThe semantic tokens case does indeed look a bit more challenging and would need more thought.\r\n",
            "created_at": "2025-06-25T12:19:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3004569007",
            "id": 3004569007,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zFhWv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004569007/reactions"
            },
            "updated_at": "2025-06-25T12:19:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004569007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Composition is a solution I considered early on. Consider the following situation:\r\n```lua\r\ninlay_hint.subscription = Subscription.new()\r\ncodelens.subscription = Subscription.new()\r\n```\r\nFor `inlay_hint` and `codelens`, there will definitely be a point in time when we need to destroy them, such as `LspDetach`:\r\n```lua\r\n-- in inlay_hint.lua\r\napi.nvim_create_autocmd(\"LspDetach\", {\r\n  callback = function()\r\n    -- Destroy `inlay_hint`\r\n  end\r\n})\r\n-- in codelens.lua\r\napi.nvim_create_autocmd(\"LspDetach\", {\r\n  callback = function()\r\n  -- Destroy `codelens`\r\n  end\r\n})\r\n```\r\nUsing composition, we cannot reuse the logic for creation/destruction, which is the primary purpose of this PR.\r\n\r\nFor solving the creation/destruction issue, a straightforward approach is to use variables like `vim.b.*` (assuming #12544 was resolved), but this still has the following problems:\r\n\r\n- Even if it can be destroyed when the buffer is destroyed, we still need to write separate logic to ensure it is created. Additionally, this approach does not have as fine-grained control as in this PR;\r\n- Even if the data is destroyed, the autocmds will not disappear accordingly, and we lose control over the timing of this process.\r\n- It is possible that we need it to persist even after the buffer was deleted (see #32247).\r\n\r\nI also considered another approach of using a separate module to achieve the same lifecycle as `capabilities` that I mentioned above, where these feature-specific modules only need to constantly check if `bufstate` is empty. However, such a module is structurally awkward, possibly containing only some autocmds, and it does not help with my second goal (binding data with handlers to update the data for data handling).\r\n\r\n> try to avoid the inheritance route before all other options have been explored.\r\n\r\nI feel I have tried my best to achieve this, making inheritance the last option. Completing this PR was not time-consuming, but what really took up my time was comparing the pros and cons of these approaches. I have never prioritized using inheritance; that is, I'm not deliberately looking for reasons to use the method I prefer. Honestly, I only recently thought of using inheritance to accomplish this module, so using inheritance to implement this feature was not included as a solution in my original GSoC proposal.\r\n\r\n> It is incredibly rare to have a case where inheritance is the best option\r\n\r\nI know inheritance has many scary features, such as multi-level inheritance and multiple inheritance, which is why new programming languages have weakened OOP syntax support, and I don't like it. But can we consider the usage here as an *interface* or more precisely, \"abstract class\"? My main intention is not `A extends B` but `A implements B` (which is why I thought of naming this class `Feature`, although the name is not good). It’s just that since we still need to reuse code, it should be an abstract base class rather than just an interface. To summarize, my purpose in introducing `vim.lsp.Subscription` (no matter what its name) is:\r\n\r\n- As an interface, this is prepared for methods such as `on_results`, `on_multi_results`, `on_partial_results`, etc..\r\n- As an abstract base class, the purpose is to reuse their common code\r\n\r\nAnd I believe this is the end of the inheritance usage; we will only derive it once, and it is impossible to use multiple inheritance.\r\n\r\n> have a `active[bufnr]` table inside the `Feature` seems also a bit odd to me.\r\n\r\n`active` is just a static field; the difference is that Lua lacks a keyword to represent it.",
            "created_at": "2025-06-25T14:15:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3004951470",
            "id": 3004951470,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zG-uu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004951470/reactions"
            },
            "updated_at": "2025-06-25T14:36:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3004951470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've renamed the base class to `Capability`. Not against `Subscription` at all, but this PR does not include any logic regarding subscribing to LSP data yet; instead, it ensures that all LSP data share the same lifecycle as capabilities. We can rename it once again after \"data subscription\" was implemented.\r\n\r\nI think I do not invent any new logic at all, but extracted the common code from `semantic_tokens.lua` and `folding_range.lua`, so I think using inheritance here as refactor is pretty intuitive, and at very least, we can easily get rid of the inheritance by duplicating the code of the base class if we find another way in the future.\r\n\r\nInheritance is not mandatory at all, but after comparing the pros and cons of these approaches, I think it is not that bad. I'm really very willing to hear any other ideas so that we have a relatively best way to get things done, no matter what it is.",
            "created_at": "2025-06-27T05:12:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3011698123",
            "id": 3011698123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM6zgt3L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3011698123/reactions"
            },
            "updated_at": "2025-06-27T05:12:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3011698123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I forgot to rename `vim.b.__` to `vim.b._` in the tests...sorry.",
            "created_at": "2025-07-07T03:28:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/34639#issuecomment-3043370483",
            "id": 3043370483,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
            "node_id": "IC_kwDOAPphoM61ZiXz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043370483/reactions"
            },
            "updated_at": "2025-07-07T03:28:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3043370483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34639/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34639/commits",
    "created_at": "2025-06-25T07:35:10Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34639.diff",
    "draft": false,
    "head": {
        "label": "ofseed:refactor-state",
        "ref": "refactor-state",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ofseed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ofseed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ofseed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ofseed/neovim/branches{/branch}",
            "clone_url": "https://github.com/ofseed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ofseed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ofseed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ofseed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ofseed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ofseed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ofseed/neovim/contributors",
            "created_at": "2021-11-30T18:13:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ofseed/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ofseed/neovim/downloads",
            "events_url": "https://api.github.com/repos/ofseed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ofseed/neovim/forks",
            "full_name": "ofseed/neovim",
            "git_commits_url": "https://api.github.com/repos/ofseed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ofseed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ofseed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ofseed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ofseed/neovim/hooks",
            "html_url": "https://github.com/ofseed/neovim",
            "id": 433537354,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ofseed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ofseed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ofseed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ofseed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ofseed/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ofseed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ofseed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ofseed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGddBSg",
            "notifications_url": "https://api.github.com/repos/ofseed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ofseed/neovim/pulls{/number}",
            "pushed_at": "2025-07-21T10:38:55Z",
            "releases_url": "https://api.github.com/repos/ofseed/neovim/releases{/id}",
            "size": 325328,
            "ssh_url": "git@github.com:ofseed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ofseed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ofseed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ofseed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ofseed/neovim/subscription",
            "svn_url": "https://github.com/ofseed/neovim",
            "tags_url": "https://api.github.com/repos/ofseed/neovim/tags",
            "teams_url": "https://api.github.com/repos/ofseed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ofseed/neovim/git/trees{/sha}",
            "updated_at": "2025-07-21T08:45:39Z",
            "url": "https://api.github.com/repos/ofseed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
            "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofseed/followers",
            "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofseed",
            "id": 61115159,
            "login": "ofseed",
            "node_id": "MDQ6VXNlcjYxMTE1MTU5",
            "organizations_url": "https://api.github.com/users/ofseed/orgs",
            "received_events_url": "https://api.github.com/users/ofseed/received_events",
            "repos_url": "https://api.github.com/users/ofseed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofseed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34639",
    "id": 2617271345,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34639",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 7015246296,
            "name": "checkhealth",
            "node_id": "LA_kwDOAPphoM8AAAABoiQp2A",
            "url": "https://api.github.com/repos/neovim/neovim/labels/checkhealth"
        }
    ],
    "locked": false,
    "merge_commit_sha": "8d5452c46d01acc3f044326173ae8e1cb793cccf",
    "merged_at": "2025-07-07T03:51:30Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6cAGQx",
    "number": 34639,
    "patch_url": "https://github.com/neovim/neovim/pull/34639.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34639/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/4a89c2a46d5b31bb8d97c9a23c1fca584f415bf8",
    "title": "refactor(lsp): introduce `vim.lsp.Capability`",
    "updated_at": "2025-07-21T08:06:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34639",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}