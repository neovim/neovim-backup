{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33723/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33723/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33723"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33723"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33723/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6062,
            "forks_count": 6062,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1916,
            "open_issues_count": 1916,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-05-06T02:05:16Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 321796,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89216,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-05-06T02:05:21Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89216,
            "watchers_count": 89216,
            "web_commit_signoff_required": false
        },
        "sha": "0ab0cdb2dabc551f836851aa85d06e927c42d92a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "**Problem**: there is no way to see diagnostic count in stock neovim\r\n\r\n**Solution**: add buffer diagnostic count to the default statusline\r\n\r\n**Context**: There is [interest](https://github.com/neovim/neovim/issues/28809#issuecomment-2840298390) in trying this out. I tried to keep the implementation to a bare minimum.\r\n\r\n**Preview**:\r\nStatusline displays current buffer diagnostics just before cursor position information. Different diagnostics are displayed based on what window statusline belongs to. Diagnostics kinds with 0 count are omitted from the status line\r\n\r\n<img src=\"https://github.com/user-attachments/assets/db6addc2-df1d-4c93-ba7c-08166e8fcdcf\" />\r\n\r\n---\r\nI will add tests and news entry once settled on the implementation.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069154349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069154349"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure if this is a good idea to do by default as it can either lead to more redraws than necessary or in the worst case interfere with messages that are being polled (like lsp status)\r\n\r\nI think ideally the full `DiagnosticChanged` autocmd should only be setup on demand if the default status line is actually used. Otherwise everyone pays the cost for the string formatting.",
            "commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "created_at": "2025-04-30T17:27:53Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069154349",
            "id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57VMot",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2807906775,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069154349/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T17:27:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069154349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069244311"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069244311"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The schedule is most likely unnecessary here. I initially added it to my custom statusline because of some plugin compatibility issue. I can test this implementation without scheduling redraws.\r\n\r\nIs there a preferred way of detecting if statusline was changed from default? I can only think of using `OptionSet` autocommand for statusline",
            "commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "created_at": "2025-04-30T18:35:31Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069244311",
            "id": 2069244311,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57VimX",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808063824,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069244311/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T18:35:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069244311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069534561"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069534561"
                }
            },
            "author_association": "MEMBER",
            "body": "> I think ideally the full `DiagnosticChanged` autocmd should only be setup on demand if the default status line is actually used. Otherwise everyone pays the cost for the string formatting.\r\n\r\nOh, should we introduce this as `vim.diagnostic.status()` (compare `vim.lsp.status()`) ?\r\n\r\nAnd yes, making this conditional on whether the default statusline is used, makes sense.",
            "commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "created_at": "2025-04-30T21:58:36Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069534561",
            "id": 2069534561,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57Wpdh",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808609376,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069534561/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T21:58:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069534561",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069569241"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069569241"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Oh, should we introduce this as vim.diagnostic.status() (compare vim.lsp.status()) ?\r\n\r\nMakes sense. Looking at the implementation `vim.lsp.status()` displays messages from all clients for all buffers. `vim.diagnostic.status()` would have to be local to the current or passed in buffer for starters, can be expanded to display all diagnostics if needed.\r\n\r\nIf we decided to go with `vim.diagnostic.status()` would it be used in the statusline as is i.e. \r\n```lua\r\nvim.opt.status = '... %{luaeval(\"vim.diagnostic.status()\")} ...'\r\n```\r\n\r\n> And yes, making this conditional on whether the default statusline is used, makes sense.\r\n\r\nI've updated the code to sub/unsub when statusline is changed",
            "commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "created_at": "2025-04-30T22:31:54Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069569241",
            "id": 2069569241,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57Wx7Z",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808678918,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069569241/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T22:31:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069569241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069668207"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069668207"
                }
            },
            "author_association": "MEMBER",
            "body": "> `vim.lsp.status()` displays messages from all clients for all buffers.\r\n\r\nvim.diagnostics.status() doesn't need to exactly match how lsp.status works; it's just a reference for the \"shape\" + name.\r\n\r\n\r\n\r\n> If we decided to go with `vim.diagnostic.status()` would it be used in the statusline as is i.e.\r\n\r\nI think so. And then the [default 'statusline'](https://github.com/neovim/neovim/blob/6577d72d819dde32abeacd6a72d6ba64483f7ddc/src/nvim/options.lua#L8577-L8584) will reflect this too, which is Good. If there are \"performance\" issues, those need to be fixed internally in `status()`, e.g. by debouncing or whatever.",
            "commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "created_at": "2025-04-30T23:40:21Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069668207",
            "id": 2069668207,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57XKFv",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808831956,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069668207/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T23:42:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069668207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "You can use `vim.diagnostic.count()` to get the counts.",
            "created_at": "2025-04-30T09:15:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2841330877",
            "id": 2841330877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pW0S9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2841330877/reactions"
            },
            "updated_at": "2025-04-30T09:15:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2841330877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33849340?v=4",
                "events_url": "https://api.github.com/users/SebasF1349/events{/privacy}",
                "followers_url": "https://api.github.com/users/SebasF1349/followers",
                "following_url": "https://api.github.com/users/SebasF1349/following{/other_user}",
                "gists_url": "https://api.github.com/users/SebasF1349/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SebasF1349",
                "id": 33849340,
                "login": "SebasF1349",
                "node_id": "MDQ6VXNlcjMzODQ5MzQw",
                "organizations_url": "https://api.github.com/users/SebasF1349/orgs",
                "received_events_url": "https://api.github.com/users/SebasF1349/received_events",
                "repos_url": "https://api.github.com/users/SebasF1349/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SebasF1349/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SebasF1349/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SebasF1349",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "screenshot helps a lot with these kinds of changes :)",
            "created_at": "2025-04-30T14:09:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2842117118",
            "id": 2842117118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pZ0P-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2842117118/reactions"
            },
            "updated_at": "2025-04-30T14:09:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2842117118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I suggest we use capital letters E,W,I instead of small ones. As they take up full height as the number next to it (E:2 looks more symatric then e:2 ) . .And I think plugins are also used to using them. I think I've been seeing them since syntastic/ale days.\r\n\r\nThere are already some standard highlight groups for shoing Error and Warning states like ErrorMsg, WarningMsg should the statusline use them in this case?\r\n\r\nDoing it from `vim.diagnostics.status()` makes sense. Also, I think we should consider if we would introduce e new namespace for all statusling things., Instead of scattering them in different parts of the system. Like `vim.ui.status.diagnostics()`  or `vim.status.diagnostics`? So later stuff can be put under that status module.\r\n",
            "created_at": "2025-05-01T04:09:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844037279",
            "id": 2844037279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6phJCf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844037279/reactions"
            },
            "updated_at": "2025-05-01T04:10:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844037279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not sure a `status()` is warranted. Counts are already conveniently exposed via `diagnostic.count`, so all one has to do is the str formatting - which people likely want to customize - especially the `E` and `W`.\r\n\r\nI think what would have higher leverage is to support `statusline` being a table of segments, where each segment is either a string as is or a lua function so one doesn't have to go through `luaeval` or buffer variables.",
            "created_at": "2025-05-01T09:47:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844559733",
            "id": 2844559733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pjIl1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844559733/reactions"
            },
            "updated_at": "2025-05-01T09:47:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844559733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> consider if we would introduce e new namespace for all statusling things., Instead of scattering them in different parts of the system. Like `vim.ui.status.diagnostics()` or `vim.status.diagnostics`?\r\n\r\ncan consider that later, if it becomes obvious that it is needed. but for now, let's continue the existing pattern. subsystem-specific stuff usually lives in the subsystem's own module. the fact that each subsystem has common features doesn't mean that it should be \"inverted\" such that the common feature now has its own module with per-subsystem names.",
            "created_at": "2025-05-01T09:49:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844562365",
            "id": 2844562365,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pjJO9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844562365/reactions"
            },
            "updated_at": "2025-05-01T09:49:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844562365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure a `status()` is warranted. Counts are already conveniently exposed via `diagnostic.count`, so all one has to do is the str formatting\r\n\r\nthe current logic in this PR is 20+ lines. `status()` allows people to easily plug-in diagnostics status into custom statuslines, instead of copy-pasting the logic. and we can always add parameters later if it makes sense (for formatting, etc).\r\n\r\n\r\n\r\n> support `statusline` being a table of segments, where each segment is either a string as is or a lua function\r\n\r\nthat sounds out of scope for this topic, unless I misunderstood",
            "created_at": "2025-05-01T09:53:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844567067",
            "id": 2844567067,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pjKYb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844567067/reactions"
            },
            "updated_at": "2025-05-01T09:53:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844567067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> the fact that each subsystem has common features doesn't mean that it should be \"inverted\" such that the common feature now has its own module with per-subsystem names.\r\n\r\nI didn't mean that. We wish to add more stuff to the statusline. All of them might not have a designated module where they'd clearly belong. The progress integrator, for example. Most of the things added, I assume, will be done in Lua. Keeping a standard place for statusline gives us at least 2 advantages without any disadvantage as far as I see:\r\n - When adding new things, it is clear where they'll go in the future.\r\n - If user want to reuse these modules in their custom statusline, they are easy to find.\r\n\r\nI was planning on making a similar pr, adding diagnostics in the default statusline. So, just sharing my thoughts",
            "created_at": "2025-05-02T04:23:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2846280037",
            "id": 2846280037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6ppsll",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2846280037/reactions"
            },
            "updated_at": "2025-05-02T04:23:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2846280037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We wish to add more stuff to the statusline. All of them might not have a designated module where they'd clearly belong. The progress integrator,\r\n\r\nmakes sense, but probably shouldn't block this pr. can revisit later.",
            "created_at": "2025-05-03T18:43:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2848754080",
            "id": 2848754080,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pzImg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848754080/reactions"
            },
            "updated_at": "2025-05-03T18:43:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848754080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I suggest we use capital letters E,W,I instead of small ones. As they take up full height as the number next to it (E:2 looks more symatric then e:2 ) . .And I think plugins are also used to using them. I think I've been seeing them since syntastic/ale days.\r\n> \r\n> There are already some standard highlight groups for shoing Error and Warning states like ErrorMsg, WarningMsg should the statusline use them in this case?\r\n\r\nOr as @clason has advocated in other PRs, use `vim.diagnostic.config().signs.text` for this (which defaults to E, W, H, I) so it's user-configurable. For highlighting, `vim.diagnostic().config().signs.numhl` can probably be used.\r\n",
            "created_at": "2025-05-05T21:18:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2852361725",
            "id": 2852361725,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6qA5X9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2852361725/reactions"
            },
            "updated_at": "2025-05-05T21:18:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2852361725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33723/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33723/commits",
    "created_at": "2025-04-29T23:23:36Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33723.diff",
    "draft": true,
    "head": {
        "label": "antonk52:f/statusline-diagnostics",
        "ref": "f/statusline-diagnostics",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/antonk52/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/antonk52/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/antonk52/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/antonk52/neovim/branches{/branch}",
            "clone_url": "https://github.com/antonk52/neovim.git",
            "collaborators_url": "https://api.github.com/repos/antonk52/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/antonk52/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/antonk52/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/antonk52/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/antonk52/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/antonk52/neovim/contributors",
            "created_at": "2023-12-10T10:35:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/antonk52/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/antonk52/neovim/downloads",
            "events_url": "https://api.github.com/repos/antonk52/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/antonk52/neovim/forks",
            "full_name": "antonk52/neovim",
            "git_commits_url": "https://api.github.com/repos/antonk52/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/antonk52/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/antonk52/neovim/git/tags{/sha}",
            "git_url": "git://github.com/antonk52/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/antonk52/neovim/hooks",
            "html_url": "https://github.com/antonk52/neovim",
            "id": 729778945,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/antonk52/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/antonk52/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/antonk52/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/antonk52/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/antonk52/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/antonk52/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/antonk52/neovim/merges",
            "milestones_url": "https://api.github.com/repos/antonk52/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK3-LAQ",
            "notifications_url": "https://api.github.com/repos/antonk52/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/antonk52/neovim/pulls{/number}",
            "pushed_at": "2025-05-05T05:14:17Z",
            "releases_url": "https://api.github.com/repos/antonk52/neovim/releases{/id}",
            "size": 316102,
            "ssh_url": "git@github.com:antonk52/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/antonk52/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/antonk52/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/antonk52/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/antonk52/neovim/subscription",
            "svn_url": "https://github.com/antonk52/neovim",
            "tags_url": "https://api.github.com/repos/antonk52/neovim/tags",
            "teams_url": "https://api.github.com/repos/antonk52/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/antonk52/neovim/git/trees{/sha}",
            "updated_at": "2025-04-28T20:07:40Z",
            "url": "https://api.github.com/repos/antonk52/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
            "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
            "followers_url": "https://api.github.com/users/antonk52/followers",
            "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
            "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/antonk52",
            "id": 5817809,
            "login": "antonk52",
            "node_id": "MDQ6VXNlcjU4MTc4MDk=",
            "organizations_url": "https://api.github.com/users/antonk52/orgs",
            "received_events_url": "https://api.github.com/users/antonk52/received_events",
            "repos_url": "https://api.github.com/users/antonk52/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/antonk52",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33723",
    "id": 2490105941,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim defaults for options, colorscheme/theme, autocmds/events, etc.",
            "id": 103777064,
            "name": "defaults",
            "node_id": "MDU6TGFiZWwxMDM3NzcwNjQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/defaults"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "tabline, winbar, statuscolumn",
            "id": 3385615828,
            "name": "statusline",
            "node_id": "LA_kwDOAPphoM7JzGXU",
            "url": "https://api.github.com/repos/neovim/neovim/labels/statusline"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e7332e30c83f42c8b6e8120090c853578679156a",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6UbABV",
    "number": 33723,
    "patch_url": "https://github.com/neovim/neovim/pull/33723.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33723/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
    "title": "feat(statusline): add buffer diagnostics count",
    "updated_at": "2025-05-05T21:18:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
        "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
        "followers_url": "https://api.github.com/users/antonk52/followers",
        "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
        "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/antonk52",
        "id": 5817809,
        "login": "antonk52",
        "node_id": "MDQ6VXNlcjU4MTc4MDk=",
        "organizations_url": "https://api.github.com/users/antonk52/orgs",
        "received_events_url": "https://api.github.com/users/antonk52/received_events",
        "repos_url": "https://api.github.com/users/antonk52/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/antonk52",
        "user_view_type": "public"
    }
}