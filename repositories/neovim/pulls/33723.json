{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33723/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33723/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33723"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33723"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33723/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/d48059da31b6aca2d13b8aef8eb016bd5203680f"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6179,
            "forks_count": 6179,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1956,
            "open_issues_count": 1956,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-07-14T22:14:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 332755,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91117,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-15T02:58:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91117,
            "watchers_count": 91117,
            "web_commit_signoff_required": false
        },
        "sha": "d4c8e8df1c80cf195dc1d1b98c1c8429dd3f43ed",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "**Problem**: there is no way to see diagnostic count in stock neovim\r\n\r\n**Solution**: add buffer diagnostic count to the default statusline\r\n\r\n**Context**: There is [interest](https://github.com/neovim/neovim/issues/28809#issuecomment-2840298390) in trying this out. I tried to keep the implementation to a bare minimum.\r\n\r\n**Preview**:\r\nStatusline displays current buffer diagnostics just before cursor position information. Different diagnostics are displayed based on what window statusline belongs to. Diagnostics kinds with 0 count are omitted from the status line\r\n\r\n<img src=\"https://github.com/user-attachments/assets/db6addc2-df1d-4c93-ba7c-08166e8fcdcf\" />\r\n\r\n---\r\nI will add tests and news entry once settled on the implementation.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069154349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069154349"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure if this is a good idea to do by default as it can either lead to more redraws than necessary or in the worst case interfere with messages that are being polled (like lsp status)\r\n\r\nI think ideally the full `DiagnosticChanged` autocmd should only be setup on demand if the default status line is actually used. Otherwise everyone pays the cost for the string formatting.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-04-30T17:27:53Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069154349",
            "id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57VMot",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2807906775,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069154349/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T17:27:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069154349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069244311"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069244311"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "The schedule is most likely unnecessary here. I initially added it to my custom statusline because of some plugin compatibility issue. I can test this implementation without scheduling redraws.\r\n\r\nIs there a preferred way of detecting if statusline was changed from default? I can only think of using `OptionSet` autocommand for statusline",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-04-30T18:35:31Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069244311",
            "id": 2069244311,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57VimX",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808063824,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069244311/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T18:35:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069244311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069534561"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069534561"
                }
            },
            "author_association": "MEMBER",
            "body": "> I think ideally the full `DiagnosticChanged` autocmd should only be setup on demand if the default status line is actually used. Otherwise everyone pays the cost for the string formatting.\r\n\r\nOh, should we introduce this as `vim.diagnostic.status()` (compare `vim.lsp.status()`) ?\r\n\r\nAnd yes, making this conditional on whether the default statusline is used, makes sense.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-04-30T21:58:36Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069534561",
            "id": 2069534561,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57Wpdh",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808609376,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069534561/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T21:58:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069534561",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069569241"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069569241"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Oh, should we introduce this as vim.diagnostic.status() (compare vim.lsp.status()) ?\r\n\r\nMakes sense. Looking at the implementation `vim.lsp.status()` displays messages from all clients for all buffers. `vim.diagnostic.status()` would have to be local to the current or passed in buffer for starters, can be expanded to display all diagnostics if needed.\r\n\r\nIf we decided to go with `vim.diagnostic.status()` would it be used in the statusline as is i.e. \r\n```lua\r\nvim.opt.status = '... %{luaeval(\"vim.diagnostic.status()\")} ...'\r\n```\r\n\r\n> And yes, making this conditional on whether the default statusline is used, makes sense.\r\n\r\nI've updated the code to sub/unsub when statusline is changed",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-04-30T22:31:54Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069569241",
            "id": 2069569241,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57Wx7Z",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808678918,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069569241/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T22:31:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069569241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2069668207"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069668207"
                }
            },
            "author_association": "MEMBER",
            "body": "> `vim.lsp.status()` displays messages from all clients for all buffers.\r\n\r\nvim.diagnostics.status() doesn't need to exactly match how lsp.status works; it's just a reference for the \"shape\" + name.\r\n\r\n\r\n\r\n> If we decided to go with `vim.diagnostic.status()` would it be used in the statusline as is i.e.\r\n\r\nI think so. And then the [default 'statusline'](https://github.com/neovim/neovim/blob/6577d72d819dde32abeacd6a72d6ba64483f7ddc/src/nvim/options.lua#L8577-L8584) will reflect this too, which is Good. If there are \"performance\" issues, those need to be fixed internally in `status()`, e.g. by debouncing or whatever.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-04-30T23:40:21Z",
            "diff_hunk": "@@ -925,6 +925,57 @@ do\n       end\n     end\n   end\n+\n+  vim.api.nvim_create_autocmd('DiagnosticChanged', {\n+    pattern = '*',\n+    desc = 'Update buffer diagnostics in the statusline',\n+    group = vim.api.nvim_create_augroup('nvim.statusline', {}),\n+    callback = function()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+      local diagnostics = vim.diagnostic.get(bufnr)\n+\n+      local counts = { errors = 0, warnings = 0, info = 0, hints = 0 }\n+      local severity = vim.diagnostic.severity\n+\n+      for _, d in ipairs(diagnostics) do\n+        if d.severity == severity.ERROR then\n+          counts.errors = counts.errors + 1\n+        elseif d.severity == severity.WARN then\n+          counts.warnings = counts.warnings + 1\n+        elseif d.severity == severity.INFO then\n+          counts.info = counts.info + 1\n+        elseif d.severity == severity.HINT then\n+          counts.hints = counts.hints + 1\n+        end\n+      end\n+\n+      local result = {}\n+      if counts.errors > 0 then\n+        table.insert(result, 'e:' .. counts.errors)\n+      end\n+      if counts.warnings > 0 then\n+        table.insert(result, 'w:' .. counts.warnings)\n+      end\n+      if counts.info > 0 then\n+        table.insert(result, 'i:' .. counts.info)\n+      end\n+      if counts.hints > 0 then\n+        table.insert(result, 'h:' .. counts.hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')\n+\n+      if #result_str > 0 then\n+        result_str = result_str .. '  '\n+      end\n+\n+      vim.b[bufnr].buffer_diagnostics = result_str\n+\n+      vim.schedule(function()\n+        vim.cmd.redrawstatus()\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2069668207",
            "id": 2069668207,
            "in_reply_to_id": 2069154349,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57XKFv",
            "original_commit_id": "90c831f5db3145b141a1ef6bcf4d067664744f47",
            "original_line": 976,
            "original_position": 52,
            "original_start_line": 974,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2808831956,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069668207/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-04-30T23:42:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2069668207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2075622099"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075622099"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n      local counts = vim.diagnostic.count(0)\r\n\r\n      local user_signs = vim.tbl_get(vim.diagnostic.config(), 'signs', 'text') or {}\r\n      local signs = vim.tbl_extend('keep', user_signs, { 'E', 'W', 'I', 'H' })\r\n\r\n      local result_str = vim.iter(pairs(counts)):map(function(severity, count)\r\n        return ('%s:%s'):format(signs[severity], count)\r\n      end):join(' ')\r\n```",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-05-06T14:35:24Z",
            "diff_hunk": "@@ -925,6 +925,63 @@ do\n       end\n     end\n   end\n+\n+  -- statusline\n+  do\n+    local function on_diagnostics_change()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+\n+      local severity = vim.diagnostic.severity\n+\n+      local result = {}\n+      local count = vim.diagnostic.count(bufnr)\n+      local errors = count[severity.ERROR] or 0\n+      if errors > 0 then\n+        table.insert(result, 'e:' .. errors)\n+      end\n+      local warnings = count[severity.WARN] or 0\n+      if warnings > 0 then\n+        table.insert(result, 'w:' .. warnings)\n+      end\n+      local infos = count[severity.INFO] or 0\n+      if infos > 0 then\n+        table.insert(result, 'i:' .. infos)\n+      end\n+      local hints = count[severity.HINT] or 0\n+      if hints > 0 then\n+        table.insert(result, 'h:' .. hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2075622099",
            "id": 2075622099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57t3rT",
            "original_commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "original_line": 955,
            "original_position": 31,
            "original_start_line": 932,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2818536212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075622099/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-06T14:44:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075622099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2075623806"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075623806"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm not 100% sure, but I think setting bufnr to 0 is the same as vim.diagnostic.count(vim.api.nvim_get_current_buf())",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-05-06T14:36:15Z",
            "diff_hunk": "@@ -925,6 +925,63 @@ do\n       end\n     end\n   end\n+\n+  -- statusline\n+  do\n+    local function on_diagnostics_change()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+\n+      local severity = vim.diagnostic.severity\n+\n+      local result = {}\n+      local count = vim.diagnostic.count(bufnr)\n+      local errors = count[severity.ERROR] or 0\n+      if errors > 0 then\n+        table.insert(result, 'e:' .. errors)\n+      end\n+      local warnings = count[severity.WARN] or 0\n+      if warnings > 0 then\n+        table.insert(result, 'w:' .. warnings)\n+      end\n+      local infos = count[severity.INFO] or 0\n+      if infos > 0 then\n+        table.insert(result, 'i:' .. infos)\n+      end\n+      local hints = count[severity.HINT] or 0\n+      if hints > 0 then\n+        table.insert(result, 'h:' .. hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2075623806",
            "id": 2075623806,
            "in_reply_to_id": 2075622099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM57t4F-",
            "original_commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "original_line": 955,
            "original_position": 31,
            "original_start_line": 932,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2818536212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075623806/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-06T14:44:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075623806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2075639896"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075639896"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This file is generated, and the option should be changed in `src/nvim/options.lua` I believe.",
            "commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "created_at": "2025-05-06T14:43:53Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2075639896",
            "id": 2075639896,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM57t8BY",
            "original_commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/_meta/options.lua",
            "position": 1,
            "pull_request_review_id": 2818536212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075639896/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-05-06T14:44:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2075639896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2080396007"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2080396007"
                }
            },
            "author_association": "NONE",
            "body": "> I'm not 100% sure, but I think setting bufnr to 0 is the same as vim.diagnostic.count(vim.api.nvim_get_current_buf())\r\n\r\nIt’s the exact same. When you call `vim.diagnostic.count()` with a number as bufnr, it eventually calls `vim._resolve_bufnr()`, which does just that:\r\n```\r\nfunction vim._resolve_bufnr(bufnr)\r\n  if bufnr == nil or bufnr == 0 then\r\n    return vim.api.nvim_get_current_buf()\r\n  end\r\n  vim.validate('bufnr', bufnr, 'number')\r\n  return bufnr\r\nend\r\n```\r\nNote: Calling it with nil instead does not reach this part and instead returns diagnostics for all buffers.\r\n",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-05-08T20:09:25Z",
            "diff_hunk": "@@ -925,6 +925,63 @@ do\n       end\n     end\n   end\n+\n+  -- statusline\n+  do\n+    local function on_diagnostics_change()\n+      local bufnr = vim.api.nvim_get_current_buf()\n+\n+      local severity = vim.diagnostic.severity\n+\n+      local result = {}\n+      local count = vim.diagnostic.count(bufnr)\n+      local errors = count[severity.ERROR] or 0\n+      if errors > 0 then\n+        table.insert(result, 'e:' .. errors)\n+      end\n+      local warnings = count[severity.WARN] or 0\n+      if warnings > 0 then\n+        table.insert(result, 'w:' .. warnings)\n+      end\n+      local infos = count[severity.INFO] or 0\n+      if infos > 0 then\n+        table.insert(result, 'i:' .. infos)\n+      end\n+      local hints = count[severity.HINT] or 0\n+      if hints > 0 then\n+        table.insert(result, 'h:' .. hints)\n+      end\n+\n+      local result_str = table.concat(result, ' ')",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2080396007",
            "id": 2080396007,
            "in_reply_to_id": 2075622099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM58AFLn",
            "original_commit_id": "18f5286ec4d4df12a501ea72ff1d1ae67b27ccb2",
            "original_line": 955,
            "original_position": 31,
            "original_start_line": 932,
            "path": "runtime/lua/vim/_defaults.lua",
            "position": null,
            "pull_request_review_id": 2826252627,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2080396007/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-05-08T20:10:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2080396007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/145048791?v=4",
                "events_url": "https://api.github.com/users/CatsDeservePets/events{/privacy}",
                "followers_url": "https://api.github.com/users/CatsDeservePets/followers",
                "following_url": "https://api.github.com/users/CatsDeservePets/following{/other_user}",
                "gists_url": "https://api.github.com/users/CatsDeservePets/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CatsDeservePets",
                "id": 145048791,
                "login": "CatsDeservePets",
                "node_id": "U_kgDOCKVE1w",
                "organizations_url": "https://api.github.com/users/CatsDeservePets/orgs",
                "received_events_url": "https://api.github.com/users/CatsDeservePets/received_events",
                "repos_url": "https://api.github.com/users/CatsDeservePets/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CatsDeservePets/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CatsDeservePets/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CatsDeservePets",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2081604705"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2081604705"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n  local user_signs = vim.tbl_get(M.config() --[[@as vim.diagnostic.Opts]], 'signs', 'text') or {}\r\n```\r\nTo satisfy CI. But M.config() should probably have an overload to handle both signatures `fun(vim.diagnostic.Opts): nil` and `fun(): vim.diagnostic.Opts`.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-05-09T12:50:50Z",
            "diff_hunk": "@@ -2591,4 +2591,18 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+function M.status()\n+  local counts = M.count(0)\n+  local user_signs = vim.tbl_get(M.config(), 'signs', 'text') or {}",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2081604705",
            "id": 2081604705,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM58EsRh",
            "original_commit_id": "10353829852a0759839849033ff7ed3ad9e6701b",
            "original_line": 2596,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2828190572,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2081604705/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-09T12:54:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2081604705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2081608993"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2081608993"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Don't forget to run `make doc` to also generate\truntime/doc/options.txt and runtime/lua/vim/_meta/options.lua :)",
            "commit_id": "10353829852a0759839849033ff7ed3ad9e6701b",
            "created_at": "2025-05-09T12:53:47Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2081608993",
            "id": 2081608993,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM58EtUh",
            "original_commit_id": "10353829852a0759839849033ff7ed3ad9e6701b",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": 1,
            "pull_request_review_id": 2828190572,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2081608993/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-05-09T12:54:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2081608993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2084636023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2084636023"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Something more in the line of \"The severities with 0 diagnostics are left out.\"? Empty sounds weird here, they're not 'empty', but rather absent. Would also be nice to mention the use of `vim.diagnostic.signs.text` and show an example (`E:1 I:2`).",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-05-12T13:07:25Z",
            "diff_hunk": "@@ -937,6 +937,13 @@ show({namespace}, {bufnr}, {diagnostics}, {opts})\n       • {opts}         (`vim.diagnostic.Opts?`) Display options. See\n                        |vim.diagnostic.Opts|.\n \n+status()                                             *vim.diagnostic.status()*\n+    Returns formatted string with diagnostics for the current buffer. Empty\n+    diagnostics are not included.",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2084636023",
            "id": 2084636023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM58QQV3",
            "original_commit_id": "4a25865bf4f479088711f961351ba134866c89aa",
            "original_line": 942,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/diagnostic.txt",
            "position": null,
            "pull_request_review_id": 2833158900,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2084636023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-05-12T13:07:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2084636023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2154724030"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154724030"
                }
            },
            "author_association": "MEMBER",
            "body": "checking this at module-load time is kind of random. I would just drop this check for now. Users can `:au! nvim.diagnostic.status` if it matters that much.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-06-18T14:13:37Z",
            "diff_hunk": "@@ -2591,4 +2591,37 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'Error', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()\n+  local counts = M.count(0)\n+  local user_signs = vim.tbl_get(M.config() --[[@as vim.diagnostic.Opts]], 'signs', 'text') or {}\n+  local signs = vim.tbl_extend('keep', user_signs, { 'E', 'W', 'I', 'H' })\n+  local result_str = vim\n+    .iter(pairs(counts))\n+    :map(function(severity, count)\n+      return ('%s:%s'):format(signs[severity], count)\n+    end)\n+    :join(' ')\n+\n+  return result_str\n+end\n+\n+if vim.o.statusline:find('vim.diagnostic.status') then",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2154724030",
            "id": 2154724030,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Abnq-",
            "original_commit_id": "638e420f382b5dcdcd248c13f25b0941e6dc3a8f",
            "original_line": 2620,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2939419400,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154724030/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-18T14:13:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154724030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2154728363"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154728363"
                }
            },
            "author_association": "MEMBER",
            "body": "is this really going to work? statusline expressions have access to `g:actual_curbuf` (see help), and could pass it. that avoids assumptions.\r\n```suggestion\r\nfunction M.status(buf)\r\n  local counts = M.count(buf)\r\n```",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-06-18T14:15:28Z",
            "diff_hunk": "@@ -2591,4 +2591,37 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'Error', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()\n+  local counts = M.count(0)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2154728363",
            "id": 2154728363,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Abour",
            "original_commit_id": "638e420f382b5dcdcd248c13f25b0941e6dc3a8f",
            "original_line": 2755,
            "original_position": 17,
            "original_start_line": 2606,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2939426407,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154728363/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-18T14:15:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2154728363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2181184245"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2181184245"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "while evaluating  expression in `%{ }`, the current buffer is set to buffer whose statusline is being drawn, which is what we want for vim.diagnostic.count(0) to work correctly. I think passing in g:actual_curbuf (which is, oddly, a string) is not what we want, we want to draw diagnostics per buffer don't we? from my experiments I found that not passing in g:actual_curbuf is what *I* wanted anyway - otherwise I had the same diagnostic count in each buffer statusline (including help buffers, which does not make sense) due to passing in  g:actual_curbuf.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-03T00:00:28Z",
            "diff_hunk": "@@ -2591,4 +2591,37 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'Error', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()\n+  local counts = M.count(0)",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2181184245",
            "id": 2181184245,
            "in_reply_to_id": 2154728363,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CAjr1",
            "original_commit_id": "638e420f382b5dcdcd248c13f25b0941e6dc3a8f",
            "original_line": 2755,
            "original_position": 17,
            "original_start_line": 2606,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2980971023,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2181184245/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-03T00:00:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2181184245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7416158?v=4",
                "events_url": "https://api.github.com/users/craigmac/events{/privacy}",
                "followers_url": "https://api.github.com/users/craigmac/followers",
                "following_url": "https://api.github.com/users/craigmac/following{/other_user}",
                "gists_url": "https://api.github.com/users/craigmac/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/craigmac",
                "id": 7416158,
                "login": "craigmac",
                "node_id": "MDQ6VXNlcjc0MTYxNTg=",
                "organizations_url": "https://api.github.com/users/craigmac/orgs",
                "received_events_url": "https://api.github.com/users/craigmac/received_events",
                "repos_url": "https://api.github.com/users/craigmac/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/craigmac/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/craigmac/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/craigmac",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2186182546"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2186182546"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Removed, I definitely agree it's an ugly check. To double check, do you mean to drop the check but keep the autocommand or to drop both?\r\n\r\nI don't like the check itself too. but not sure if dropping the autocommand is a good idea as this raises the chances that the user will be looking at stale diagnostics. I'd argue having no diagnostics is better than outdated diagnostics.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-04T23:07:11Z",
            "diff_hunk": "@@ -2591,4 +2591,37 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'Error', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()\n+  local counts = M.count(0)\n+  local user_signs = vim.tbl_get(M.config() --[[@as vim.diagnostic.Opts]], 'signs', 'text') or {}\n+  local signs = vim.tbl_extend('keep', user_signs, { 'E', 'W', 'I', 'H' })\n+  local result_str = vim\n+    .iter(pairs(counts))\n+    :map(function(severity, count)\n+      return ('%s:%s'):format(signs[severity], count)\n+    end)\n+    :join(' ')\n+\n+  return result_str\n+end\n+\n+if vim.o.statusline:find('vim.diagnostic.status') then",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2186182546",
            "id": 2186182546,
            "in_reply_to_id": 2154724030,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CTn-S",
            "original_commit_id": "638e420f382b5dcdcd248c13f25b0941e6dc3a8f",
            "original_line": 2620,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2988440058,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2186182546/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-04T23:07:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2186182546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2188302771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188302771"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I agree: drop the check but keep the autocmd. The outdated diagnostics are frustrating.\r\n",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-06T13:46:11Z",
            "diff_hunk": "@@ -2591,4 +2591,37 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'Error', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()\n+  local counts = M.count(0)\n+  local user_signs = vim.tbl_get(M.config() --[[@as vim.diagnostic.Opts]], 'signs', 'text') or {}\n+  local signs = vim.tbl_extend('keep', user_signs, { 'E', 'W', 'I', 'H' })\n+  local result_str = vim\n+    .iter(pairs(counts))\n+    :map(function(severity, count)\n+      return ('%s:%s'):format(signs[severity], count)\n+    end)\n+    :join(' ')\n+\n+  return result_str\n+end\n+\n+if vim.o.statusline:find('vim.diagnostic.status') then",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2188302771",
            "id": 2188302771,
            "in_reply_to_id": 2154724030,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cbtmz",
            "original_commit_id": "638e420f382b5dcdcd248c13f25b0941e6dc3a8f",
            "original_line": 2620,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2991311407,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188302771/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:46:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188302771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2188308388"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188308388"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\r\n• 'statusline' includes |vim.diagnostic.status()|\r\n```",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-06T13:52:36Z",
            "diff_hunk": "@@ -139,6 +139,7 @@ DEFAULTS\n \n • 'statusline' default is exposed as a statusline expression (previously it\n   was implemented as an internal C routine).\n+• 'statusline' includes 'vim.diagnostic.status()'",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2188308388",
            "id": 2188308388,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Cbu-k",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 142,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 2991317530,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188308388/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:56:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188308388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2188309316"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188309316"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Maybe add the bufnr as argument (ofc 0 as default). Simple addition that is more in line with other function from the stdlib.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-06T13:53:52Z",
            "diff_hunk": "@@ -2692,4 +2692,30 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'e', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2188309316",
            "id": 2188309316,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbvNE",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 2754,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2991317530,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188309316/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:56:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188309316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2188310012"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188310012"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I suggest adding the autocmd back in:\r\n```lua\r\n  vim.api.nvim_create_autocmd('DiagnosticChanged', {\r\n    group = vim.api.nvim_create_augroup('nvim.diagnostic.status', {}),\r\n    callback = function(ev)\r\n      vim.api.nvim__redraw({ buf = ev.buf, statusline = true })\r\n    end,\r\n    desc = 'diagnostics component for the statusline',\r\n  })\r\n```",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-06T13:55:20Z",
            "diff_hunk": "@@ -2692,4 +2692,30 @@ function M.fromqflist(list)\n   return diagnostics\n end\n \n+--- Returns formatted string with diagnostics for the current buffer.\n+--- The severities with 0 diagnostics are left out.\n+--- Example `E:2 W:3 I:4 H:5`\n+---\n+--- To customise appearance, set diagnostic signs text with\n+--- ```lua\n+--- vim.diagnostic.config({\n+---   signs = { text = { [vim.diagnostic.severity.ERROR] = 'e', ... } }\n+--- })\n+--- ```\n+---\n+---@return string\n+function M.status()",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2188310012",
            "id": 2188310012,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6CbvX8",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 2754,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/lua/vim/diagnostic.lua",
            "position": null,
            "pull_request_review_id": 2991317530,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188310012/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-06T13:56:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2188310012",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166372"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166372"
                }
            },
            "author_association": "MEMBER",
            "body": "instead of a separate test for this case, let's just add an extra step to the end of the one above, something like `enew` followed by `eq('', exec_lua(return vim.diagnostic.status()`.\n\nthat saves 20 lines of code, which is valuable.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-13T05:43:07Z",
            "diff_hunk": "@@ -3766,6 +3766,85 @@ describe('vim.diagnostic', function()\n     end)\n   end)\n \n+  describe('status', function()\n+    it('returns empty string if no diagnostics', function()\n+      local result = exec_lua(function()\n+        vim.diagnostic.set(_G.diagnostic_ns, _G.diagnostic_bufnr, {})\n+        return vim.diagnostic.status()\n+      end)\n+\n+      eq(result, '')\n+    end)\n+\n+    it('returns count for each diagnostic kind', function()\n+      local result = exec_lua(function()\n+        vim.diagnostic.set(_G.diagnostic_ns, 0, {\n+          _G.make_error('Error 1', 0, 1, 0, 1),\n+\n+          _G.make_warning('Warning 1', 2, 2, 2, 2),\n+          _G.make_warning('Warning 2', 2, 2, 2, 2),\n+\n+          _G.make_info('Info 1', 3, 3, 3, 3),\n+          _G.make_info('Info 2', 3, 3, 3, 3),\n+          _G.make_info('Info 3', 3, 3, 3, 3),\n+\n+          _G.make_hint('Hint 1', 4, 4, 4, 4),\n+          _G.make_hint('Hint 2', 4, 4, 4, 4),\n+          _G.make_hint('Hint 3', 4, 4, 4, 4),\n+          _G.make_hint('Hint 4', 4, 4, 4, 4),\n+        })\n+        return vim.diagnostic.status()\n+      end)\n+\n+      eq(result, 'E:1 W:2 I:3 H:4')\n+    end)\n+\n+    it('does not return diagnostics for non current buffers', function()",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166372",
            "id": 2203166372,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUaak",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 3802,
            "original_position": 37,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": null,
            "pull_request_review_id": 3013883274,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166372/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T05:43:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166372",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166422"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166422"
                }
            },
            "author_association": "MEMBER",
            "body": "note: the args are flipped :) `eq()` takes the \"expected\" value as the first arg.",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-13T05:43:34Z",
            "diff_hunk": "@@ -3766,6 +3766,85 @@ describe('vim.diagnostic', function()\n     end)\n   end)\n \n+  describe('status', function()\n+    it('returns empty string if no diagnostics', function()\n+      local result = exec_lua(function()\n+        vim.diagnostic.set(_G.diagnostic_ns, _G.diagnostic_bufnr, {})\n+        return vim.diagnostic.status()\n+      end)\n+\n+      eq(result, '')\n+    end)\n+\n+    it('returns count for each diagnostic kind', function()\n+      local result = exec_lua(function()\n+        vim.diagnostic.set(_G.diagnostic_ns, 0, {\n+          _G.make_error('Error 1', 0, 1, 0, 1),\n+\n+          _G.make_warning('Warning 1', 2, 2, 2, 2),\n+          _G.make_warning('Warning 2', 2, 2, 2, 2),\n+\n+          _G.make_info('Info 1', 3, 3, 3, 3),\n+          _G.make_info('Info 2', 3, 3, 3, 3),\n+          _G.make_info('Info 3', 3, 3, 3, 3),\n+\n+          _G.make_hint('Hint 1', 4, 4, 4, 4),\n+          _G.make_hint('Hint 2', 4, 4, 4, 4),\n+          _G.make_hint('Hint 3', 4, 4, 4, 4),\n+          _G.make_hint('Hint 4', 4, 4, 4, 4),\n+        })\n+        return vim.diagnostic.status()\n+      end)\n+\n+      eq(result, 'E:1 W:2 I:3 H:4')",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166422",
            "id": 2203166422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUabW",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 3799,
            "original_position": 34,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": null,
            "pull_request_review_id": 3013883332,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166422/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T05:43:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166422",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166503"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n  describe('status()', function()\n```",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-13T05:43:57Z",
            "diff_hunk": "@@ -3766,6 +3766,85 @@ describe('vim.diagnostic', function()\n     end)\n   end)\n \n+  describe('status', function()",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166503",
            "id": 2203166503,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUacn",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 3769,
            "original_position": 4,
            "original_start_line": null,
            "path": "test/functional/lua/diagnostic_spec.lua",
            "position": null,
            "pull_request_review_id": 3013883383,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T05:43:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33723"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166609"
                }
            },
            "author_association": "MEMBER",
            "body": "^",
            "commit_id": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
            "created_at": "2025-07-13T05:44:48Z",
            "diff_hunk": "@@ -139,6 +139,7 @@ DEFAULTS\n \n • 'statusline' default is exposed as a statusline expression (previously it\n   was implemented as an internal C routine).\n+• 'statusline' includes 'vim.diagnostic.status()'",
            "html_url": "https://github.com/neovim/neovim/pull/33723#discussion_r2203166609",
            "id": 2203166609,
            "in_reply_to_id": 2188308388,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6DUaeR",
            "original_commit_id": "ae455299cd565cdb3907be85e9e71de0f247661f",
            "original_line": 142,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 3013883499,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-13T05:44:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2203166609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "You can use `vim.diagnostic.count()` to get the counts.",
            "created_at": "2025-04-30T09:15:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2841330877",
            "id": 2841330877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pW0S9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2841330877/reactions"
            },
            "updated_at": "2025-04-30T09:15:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2841330877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33849340?v=4",
                "events_url": "https://api.github.com/users/SebasF1349/events{/privacy}",
                "followers_url": "https://api.github.com/users/SebasF1349/followers",
                "following_url": "https://api.github.com/users/SebasF1349/following{/other_user}",
                "gists_url": "https://api.github.com/users/SebasF1349/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/SebasF1349",
                "id": 33849340,
                "login": "SebasF1349",
                "node_id": "MDQ6VXNlcjMzODQ5MzQw",
                "organizations_url": "https://api.github.com/users/SebasF1349/orgs",
                "received_events_url": "https://api.github.com/users/SebasF1349/received_events",
                "repos_url": "https://api.github.com/users/SebasF1349/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/SebasF1349/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/SebasF1349/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/SebasF1349",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "screenshot helps a lot with these kinds of changes :)",
            "created_at": "2025-04-30T14:09:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2842117118",
            "id": 2842117118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pZ0P-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2842117118/reactions"
            },
            "updated_at": "2025-04-30T14:09:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2842117118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I suggest we use capital letters E,W,I instead of small ones. As they take up full height as the number next to it (E:2 looks more symatric then e:2 ) . .And I think plugins are also used to using them. I think I've been seeing them since syntastic/ale days.\r\n\r\nThere are already some standard highlight groups for shoing Error and Warning states like ErrorMsg, WarningMsg should the statusline use them in this case?\r\n\r\nDoing it from `vim.diagnostics.status()` makes sense. Also, I think we should consider if we would introduce e new namespace for all statusling things., Instead of scattering them in different parts of the system. Like `vim.ui.status.diagnostics()`  or `vim.status.diagnostics`? So later stuff can be put under that status module.\r\n",
            "created_at": "2025-05-01T04:09:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844037279",
            "id": 2844037279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6phJCf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844037279/reactions"
            },
            "updated_at": "2025-05-01T04:10:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844037279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not sure a `status()` is warranted. Counts are already conveniently exposed via `diagnostic.count`, so all one has to do is the str formatting - which people likely want to customize - especially the `E` and `W`.\r\n\r\nI think what would have higher leverage is to support `statusline` being a table of segments, where each segment is either a string as is or a lua function so one doesn't have to go through `luaeval` or buffer variables.",
            "created_at": "2025-05-01T09:47:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844559733",
            "id": 2844559733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pjIl1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844559733/reactions"
            },
            "updated_at": "2025-05-01T09:47:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844559733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> consider if we would introduce e new namespace for all statusling things., Instead of scattering them in different parts of the system. Like `vim.ui.status.diagnostics()` or `vim.status.diagnostics`?\r\n\r\ncan consider that later, if it becomes obvious that it is needed. but for now, let's continue the existing pattern. subsystem-specific stuff usually lives in the subsystem's own module. the fact that each subsystem has common features doesn't mean that it should be \"inverted\" such that the common feature now has its own module with per-subsystem names.",
            "created_at": "2025-05-01T09:49:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844562365",
            "id": 2844562365,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pjJO9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844562365/reactions"
            },
            "updated_at": "2025-05-01T09:49:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844562365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm not sure a `status()` is warranted. Counts are already conveniently exposed via `diagnostic.count`, so all one has to do is the str formatting\r\n\r\nthe current logic in this PR is 20+ lines. `status()` allows people to easily plug-in diagnostics status into custom statuslines, instead of copy-pasting the logic. and we can always add parameters later if it makes sense (for formatting, etc).\r\n\r\n\r\n\r\n> support `statusline` being a table of segments, where each segment is either a string as is or a lua function\r\n\r\nthat sounds out of scope for this topic, unless I misunderstood",
            "created_at": "2025-05-01T09:53:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2844567067",
            "id": 2844567067,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pjKYb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844567067/reactions"
            },
            "updated_at": "2025-05-01T09:53:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2844567067",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> the fact that each subsystem has common features doesn't mean that it should be \"inverted\" such that the common feature now has its own module with per-subsystem names.\r\n\r\nI didn't mean that. We wish to add more stuff to the statusline. All of them might not have a designated module where they'd clearly belong. The progress integrator, for example. Most of the things added, I assume, will be done in Lua. Keeping a standard place for statusline gives us at least 2 advantages without any disadvantage as far as I see:\r\n - When adding new things, it is clear where they'll go in the future.\r\n - If user want to reuse these modules in their custom statusline, they are easy to find.\r\n\r\nI was planning on making a similar pr, adding diagnostics in the default statusline. So, just sharing my thoughts",
            "created_at": "2025-05-02T04:23:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2846280037",
            "id": 2846280037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6ppsll",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2846280037/reactions"
            },
            "updated_at": "2025-05-02T04:23:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2846280037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We wish to add more stuff to the statusline. All of them might not have a designated module where they'd clearly belong. The progress integrator,\r\n\r\nmakes sense, but probably shouldn't block this pr. can revisit later.",
            "created_at": "2025-05-03T18:43:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2848754080",
            "id": 2848754080,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6pzImg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848754080/reactions"
            },
            "updated_at": "2025-05-03T18:43:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2848754080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I suggest we use capital letters E,W,I instead of small ones. As they take up full height as the number next to it (E:2 looks more symatric then e:2 ) . .And I think plugins are also used to using them. I think I've been seeing them since syntastic/ale days.\r\n> \r\n> There are already some standard highlight groups for shoing Error and Warning states like ErrorMsg, WarningMsg should the statusline use them in this case?\r\n\r\nOr as @clason has advocated in other PRs, use `vim.diagnostic.config().signs.text` for this (which defaults to E, W, H, I) so it's user-configurable. For highlighting, `vim.diagnostic().config().signs.numhl` can probably be used.\r\n",
            "created_at": "2025-05-05T21:18:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2852361725",
            "id": 2852361725,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6qA5X9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2852361725/reactions"
            },
            "updated_at": "2025-05-05T21:18:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2852361725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the input everyone. I'll update this PR in a couple of days\r\n\r\n* migrate it to use `vim.diagnostic.status()`\r\n* use `vim.diagnostic.config().signs.text` for the characters",
            "created_at": "2025-05-06T11:43:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2854263710",
            "id": 2854263710,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6qIJue",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2854263710/reactions"
            },
            "updated_at": "2025-05-06T11:43:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2854263710",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've updated the PR to have `vim.diagnostic.status()` instead that returns a formatted string with current buffer diagnostics and used in the default statusline\r\n\r\n<img src=\"https://github.com/user-attachments/assets/77fbae38-e329-47fc-ac88-692c99ae34b7\" />\r\n\r\nI am not clear on 2 things:\r\n1. Currently the statusline is not updated automatically when diagnostics have changed. Should we subscribe to diagnostic if this function is ever called? Are there better ways of doing this?\r\n2. I am not sure on how to call `vim.diagnostic.status()` in the statusline expression _once_ and pad it on the right only if it is a non empty string. I've hardcoded a space there. Perhaps there's an nicer way of doing this.",
            "created_at": "2025-05-08T22:06:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2864540611",
            "id": 2864540611,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6qvWvD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864540611/reactions"
            },
            "updated_at": "2025-05-08T22:06:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864540611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": ">     2. I am not sure on how to call `vim.diagnostic.status()` in the statusline expression _once_ and pad it on the right only if it is a non empty string. I've hardcoded a space there. Perhaps there's an nicer way of doing this.\r\n\r\nYou can put the function call into an item group `\"%(%{v:lua.vim.diagnostic.status()} %)\"`. This way, the space on the right only appears if the return value is not empty.\r\nHowever, this expression gets evaluated every time the statusline is redrawn.\r\n\r\n",
            "created_at": "2025-05-09T00:48:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2864788920",
            "id": 2864788920,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6qwTW4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864788920/reactions"
            },
            "updated_at": "2025-05-09T00:48:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2864788920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/145048791?v=4",
                "events_url": "https://api.github.com/users/CatsDeservePets/events{/privacy}",
                "followers_url": "https://api.github.com/users/CatsDeservePets/followers",
                "following_url": "https://api.github.com/users/CatsDeservePets/following{/other_user}",
                "gists_url": "https://api.github.com/users/CatsDeservePets/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/CatsDeservePets",
                "id": 145048791,
                "login": "CatsDeservePets",
                "node_id": "U_kgDOCKVE1w",
                "organizations_url": "https://api.github.com/users/CatsDeservePets/orgs",
                "received_events_url": "https://api.github.com/users/CatsDeservePets/received_events",
                "repos_url": "https://api.github.com/users/CatsDeservePets/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/CatsDeservePets/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CatsDeservePets/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/CatsDeservePets",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Currently the statusline is not updated automatically when diagnostics have changed. Should we subscribe to diagnostic if this function is ever called? Are there better ways of doing this?\r\n\r\nI tried this and it seems to work for me (with lua-ls). But it can probably be done with:\r\n\r\n```lua\r\nfunction M.status()\r\n  -- first checking if it exists seems like the right thing, but I don't know if it \r\n  -- actually makes any difference in speed\r\n  if not vim.api.nvim_create_augroup('nvim.diagnostic.status', { clear = false }) then\r\n    vim.api.nvim_create_autocmd('DiagnosticChanged', {\r\n      group = vim.api.nvim_create_augroup('nvim.diagnostic.status', {}),\r\n      callback = vim.cmd.redrawstatus,\r\n      -- or with nvim__redraw, don't know what's preferred:\r\n      -- callback = vim.api.nvim__redraw({ statusline = true }),\r\n      desc = '...',\r\n    })\r\n  end\r\n\r\n  local counts = M.count(0)\r\n  local user_signs = vim.tbl_get(M.config(), 'signs', 'text') or {}\r\n  local signs = vim.tbl_extend('keep', user_signs, { 'E', 'W', 'I', 'H' })\r\n  local result_str = vim\r\n    .iter(pairs(counts))\r\n    :map(function(severity, count)\r\n      return ('%s:%s'):format(signs[severity], count)\r\n    end)\r\n    :join(' ')\r\n\r\n  return result_str\r\nend\r\n``` ",
            "created_at": "2025-05-09T13:17:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2866504721",
            "id": 2866504721,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6q22QR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2866504721/reactions"
            },
            "updated_at": "2025-06-18T14:16:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2866504721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've tried @yochem suggestion though the if condition always evaluates to false. An alternative with a global variable also did not work for me for some reason\r\n\r\n```lua\r\nlocal has_autoupdate_diagnostic = false\r\n\r\nfunction M.status()\r\n  if not has_autoupdate_diagnostic then\r\n    vim.api.nvim_create_autocmd('DiagnosticChanged', {\r\n      group = vim.api.nvim_create_augroup('nvim.diagnostic.status', {}),\r\n      command = 'redrawstatus',\r\n    })\r\n    has_autoupdate_diagnostic = true\r\n  end\r\n\r\n  ...\r\n```\r\n\r\nAt this point I am unclear on why the autocmd is not being set. I also noticed that `vim.print` or `vim.notify` calls are not send to messages when placed inside this function",
            "created_at": "2025-05-10T22:25:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2869179617",
            "id": 2869179617,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6rBDTh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2869179617/reactions"
            },
            "updated_at": "2025-05-10T22:25:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2869179617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This rather simple condition works to check if it's used in the statusline:\r\n```lua\r\nfunction M.status()\r\n  if vim.o.statusline:find('vim.diagnostic.status') then\r\n    vim.api.nvim_create_autocmd('DiagnosticChanged', {\r\n      group = vim.api.nvim_create_augroup('nvim.diagnostic.status', {}),\r\n      command = 'redrawstatus',\r\n    })\r\n  end\r\n  ...\r\n```\r\n\r\nUsing the default statusline, `:autocmd nvim.diagnostic.status` shows the autocmd:\r\n\r\n```\r\n--- Autocommands ---\r\nnvim.diagnostic.status  DiagnosticChanged\r\n    *         redrawstatus\r\n```\r\n\r\nWhile with `set stl='hi'` in your config, the autocmd is not set.\r\n\r\nThat said, I think it's also fine to just remove the condition. It probably doesn't add much performance overhead to redraw the statusline on diagnostic changes, and I don't think this function will be used in other cases than the statusline anyways.",
            "created_at": "2025-05-12T13:02:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2872479500",
            "id": 2872479500,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6rNo8M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2872479500/reactions"
            },
            "updated_at": "2025-05-12T13:02:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2872479500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This rather simple condition works to check if it's used in the statusline:\r\n\r\nI am unclear on why, but even when I remove the condition, calls to `nvim_create_autocmd`. The output of `:autocmd DiagnosticChanged` is empty. I moved it outside of the `M.status` for this reason. I am not a fan of this module having a side effect but it works now. the doc is updated as well. If there are no other concerns for implementation, I am happy to update the tests and mark this PR as ready for review",
            "created_at": "2025-05-12T21:55:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2874293295",
            "id": 2874293295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6rUjwv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2874293295/reactions"
            },
            "updated_at": "2025-05-12T21:55:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2874293295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Do you think it would make sense to include workspace diagnostics now that #34262 is merged? I'm not sure how other editors do this, but I can imagine that full workspace diagnostics in the statusline is also useful, especially if a user opens Nvim instances on project-basis.\r\n\r\nEDIT: probably better suited for a followup.",
            "created_at": "2025-06-19T12:07:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2987855763",
            "id": 2987855763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6yFw-T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987855763/reactions"
            },
            "updated_at": "2025-06-19T12:40:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987855763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> include workspace diagnostics now that #34262 is merged?\r\n\r\nshould be a followup",
            "created_at": "2025-06-19T12:39:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2987965977",
            "id": 2987965977,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6yGL4Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987965977/reactions"
            },
            "updated_at": "2025-06-19T12:39:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987965977",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Definitely followup, but lest I forget: could present it as `E: 4/18` (buffer / workspace) to keep the presentation concise.",
            "created_at": "2025-06-19T12:42:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-2987973482",
            "id": 2987973482,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM6yGNtq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987973482/reactions"
            },
            "updated_at": "2025-06-19T12:42:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2987973482",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This should be review ready now.\r\n\r\nThe two items that I'd like some feedback\r\n\r\n1. I still think neovim should include an autocommand to refresh statusline on diagnostic change. Otherwise the diagnostics will likely be frequently outdated.\r\n2. the test `test/functional/core/channels_spec.lua` fails. The failed equality check varies. I can see in the github actions it gets [one message](https://github.com/neovim/neovim/actions/runs/16081758226/job/45387456589?pr=33723#step:10:9738) `*[1] = 'E5108: Lua: vim/_init_packages.lua:0: module 'vim.diagnostic' not ' } } }. While locally I get a different message `*[1] = 'E5108: Lua: vim/_editor.lua:0: module 'vim.deprecated.hea' } } }`. It is not clear to me how the changes could have affected this test so would appreciate any pointers.",
            "created_at": "2025-07-04T23:14:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-3037388952",
            "id": 3037388952,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM61CuCY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3037388952/reactions"
            },
            "updated_at": "2025-07-04T23:14:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3037388952",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "oh, i see the test you were asking about:\r\n\r\n```\r\nFAILED   test/functional/core/channels_spec.lua @ 199: channels can use stdio channel with pty\r\n...\r\n     *[1] = 'E5108: Lua: vim/_init_packages.lua:0: module 'vim.diagnostic' not fo' } } }\r\n```\r\n\r\nThe reason it's failing is because 'statusline' now eagerly requests `vim.diagnostic`, but that's not available in `nvim -u NONE` contexts.\r\n\r\nThis is signaling a realistic problem (when users run `nvim -u NONE`). I think the best way to handle it is to change the statusline item to something like \r\n\r\n    %{luaeval('not vim.diagnostic')?'':v:lua.vim.diagnostic.status()}\r\n\r\nKind of ugly but we can revisit in the future.",
            "created_at": "2025-07-13T21:15:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-3067305274",
            "id": 3067305274,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM620106",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3067305274/reactions"
            },
            "updated_at": "2025-07-13T21:20:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3067305274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The functionality seem good at this point.\r\n\r\nThere are now only 2 failing jobs left.\r\n\r\n1. docs lint [fails to parse](https://github.com/neovim/neovim/actions/runs/16253940403/job/45887418751?pr=33723#step:5:163) the new long default status line value\r\n2. functional test for channel spec runs into a [similar E5108  issue](https://github.com/neovim/neovim/actions/runs/16253940411/job/45887425671?pr=33723#step:10:9781) where diagnostic is not available for `nvim -u NONE`. This is surprising given that the access to diagnostic in statusline is now guarded",
            "created_at": "2025-07-13T22:53:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-3067360316",
            "id": 3067360316,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM621DQ8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3067360316/reactions"
            },
            "updated_at": "2025-07-13T22:53:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3067360316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe just don't include the default value of 'statusline' in help, like 'errorformat'?",
            "created_at": "2025-07-13T22:57:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/33723#issuecomment-3067362339",
            "id": 3067362339,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
            "node_id": "IC_kwDOAPphoM621Dwj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3067362339/reactions"
            },
            "updated_at": "2025-07-13T22:57:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3067362339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33723/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33723/commits",
    "created_at": "2025-04-29T23:23:36Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33723.diff",
    "draft": false,
    "head": {
        "label": "antonk52:f/statusline-diagnostics",
        "ref": "f/statusline-diagnostics",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/antonk52/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/antonk52/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/antonk52/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/antonk52/neovim/branches{/branch}",
            "clone_url": "https://github.com/antonk52/neovim.git",
            "collaborators_url": "https://api.github.com/repos/antonk52/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/antonk52/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/antonk52/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/antonk52/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/antonk52/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/antonk52/neovim/contributors",
            "created_at": "2023-12-10T10:35:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/antonk52/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/antonk52/neovim/downloads",
            "events_url": "https://api.github.com/repos/antonk52/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/antonk52/neovim/forks",
            "full_name": "antonk52/neovim",
            "git_commits_url": "https://api.github.com/repos/antonk52/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/antonk52/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/antonk52/neovim/git/tags{/sha}",
            "git_url": "git://github.com/antonk52/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/antonk52/neovim/hooks",
            "html_url": "https://github.com/antonk52/neovim",
            "id": 729778945,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/antonk52/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/antonk52/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/antonk52/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/antonk52/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/antonk52/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/antonk52/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/antonk52/neovim/merges",
            "milestones_url": "https://api.github.com/repos/antonk52/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK3-LAQ",
            "notifications_url": "https://api.github.com/repos/antonk52/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
                "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
                "followers_url": "https://api.github.com/users/antonk52/followers",
                "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
                "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/antonk52",
                "id": 5817809,
                "login": "antonk52",
                "node_id": "MDQ6VXNlcjU4MTc4MDk=",
                "organizations_url": "https://api.github.com/users/antonk52/orgs",
                "received_events_url": "https://api.github.com/users/antonk52/received_events",
                "repos_url": "https://api.github.com/users/antonk52/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/antonk52",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/antonk52/neovim/pulls{/number}",
            "pushed_at": "2025-07-15T03:02:27Z",
            "releases_url": "https://api.github.com/repos/antonk52/neovim/releases{/id}",
            "size": 327791,
            "ssh_url": "git@github.com:antonk52/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/antonk52/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/antonk52/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/antonk52/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/antonk52/neovim/subscription",
            "svn_url": "https://github.com/antonk52/neovim",
            "tags_url": "https://api.github.com/repos/antonk52/neovim/tags",
            "teams_url": "https://api.github.com/repos/antonk52/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/antonk52/neovim/git/trees{/sha}",
            "updated_at": "2025-07-13T21:22:25Z",
            "url": "https://api.github.com/repos/antonk52/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d48059da31b6aca2d13b8aef8eb016bd5203680f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
            "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
            "followers_url": "https://api.github.com/users/antonk52/followers",
            "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
            "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/antonk52",
            "id": 5817809,
            "login": "antonk52",
            "node_id": "MDQ6VXNlcjU4MTc4MDk=",
            "organizations_url": "https://api.github.com/users/antonk52/orgs",
            "received_events_url": "https://api.github.com/users/antonk52/received_events",
            "repos_url": "https://api.github.com/users/antonk52/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/antonk52",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33723",
    "id": 2490105941,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33723",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim defaults for options, colorscheme/theme, autocmds/events, etc.",
            "id": 103777064,
            "name": "defaults",
            "node_id": "MDU6TGFiZWwxMDM3NzcwNjQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/defaults"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "tabline, winbar, statuscolumn",
            "id": 3385615828,
            "name": "statusline",
            "node_id": "LA_kwDOAPphoM7JzGXU",
            "url": "https://api.github.com/repos/neovim/neovim/labels/statusline"
        }
    ],
    "locked": false,
    "merge_commit_sha": "aa0561d054fcbaa59e2381392aef5a9844eae26f",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6UbABV",
    "number": 33723,
    "patch_url": "https://github.com/neovim/neovim/pull/33723.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu",
            "user_view_type": "public"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33723/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/d48059da31b6aca2d13b8aef8eb016bd5203680f",
    "title": "feat(statusline): add buffer diagnostics count",
    "updated_at": "2025-07-15T03:02:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33723",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5817809?v=4",
        "events_url": "https://api.github.com/users/antonk52/events{/privacy}",
        "followers_url": "https://api.github.com/users/antonk52/followers",
        "following_url": "https://api.github.com/users/antonk52/following{/other_user}",
        "gists_url": "https://api.github.com/users/antonk52/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/antonk52",
        "id": 5817809,
        "login": "antonk52",
        "node_id": "MDQ6VXNlcjU4MTc4MDk=",
        "organizations_url": "https://api.github.com/users/antonk52/orgs",
        "received_events_url": "https://api.github.com/users/antonk52/received_events",
        "repos_url": "https://api.github.com/users/antonk52/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/antonk52/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/antonk52/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/antonk52",
        "user_view_type": "public"
    }
}