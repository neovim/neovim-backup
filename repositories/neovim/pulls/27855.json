{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27855/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27855/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27855"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27855"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27855/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/43f4290bc6a6bd798c7128a186d7b9c33a213c89"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5823,
            "forks_count": 5823,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1843,
            "open_issues_count": 1843,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-01-21T00:10:15Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 304457,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85427,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-01-21T01:35:11Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85427,
            "watchers_count": 85427,
            "web_commit_signoff_required": false
        },
        "sha": "bbf36ef8ef86534e317e4e0153730a40ae4c936e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:  We have an unmaintained Vimscript parser and cmdline\r\nhighlighting mechanism, with which it is hard to leverage the\r\ntreesitter highlighter. Long messages result in a hit-enter-prompt.\r\n\r\nSolution: Implement a vim.ui_attach() UI, that replaces the message\r\ngrid (orphaning some 3000+ LOC core C code). Introduce an experimental\r\nvim._extui module, because removing the message grid at the same time is\r\ntoo risky. The new UI leverages the bundled Vimscript treesitter parser\r\nand highlighter to highlight the cmdline (still in the 'cmdheight'\r\narea). Messages are placed in a floating message box in the bottom right\r\ncorner. Various default UI elements ('showcmd', 'ruler') are still placed\r\nin the cmdline area, as virtual text.\r\n\r\n`require('vim._extui').enable(true)` enables the experimental UI.\r\n\r\nFollowup: After an incubation period the following steps should be made:\r\n  - Come to a consensus for how best to represent messages, alternative:\r\n    * Only move messages that do not fit the 'cmdheight' area to a dedicated\r\n      floating message box.\r\n  - Come to a consensus for how best to represent the cmdline, alternative:\r\n    * Move the cmdline elsewhere, at least with `:set cmdheight=0`.\r\n  - Start removing message grid when this is deemed a successful replacement.\r\n    When that is finished, make this new UI the default and update aloooot of tests.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901146741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901146741"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    callback = function(ev)\r\n      ext.tab_check_wins()\r\n      if ev.match == 'cmdheight' then\r\n```",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-02T18:23:11Z",
            "diff_hunk": "@@ -0,0 +1,109 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      if ev.match == 'cmdheight' then",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901146741",
            "id": 1901146741,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xUTJ1",
            "original_commit_id": "9ff928c7becb91c2df6c6627e14f2a32475d07e7",
            "original_line": 68,
            "original_position": 66,
            "original_start_line": 65,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2528028841,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901146741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-01-02T18:23:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901146741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901236314"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901236314"
                }
            },
            "author_association": "MEMBER",
            "body": "AFAICT winblend only has an effect when `Normal` has a guifg/bg color defined. I keep `Normal` cleared in my colorscheme (it just uses default fg/bg colors from the terminal) so these options make the message window have a plain black background with no border. In addition to setting these options when `'termguicolors'` is set I suggest also checking the values of the `Normal` highlight group.",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-02T20:28:50Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901236314",
            "id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xUpBa",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2528177206,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901236314/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-02T20:28:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901236314",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901619317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901619317"
                }
            },
            "author_association": "MEMBER",
            "body": "Well the idea was to have an invisible message box (`MsgArea` linked to `Normal` by default), and no border unless necessary (terminal space being precious and all). Clearing `Normal` should not yield black background unless your terminal background is indeed black, or you define `MsgArea` with a black background.\r\n\r\n`'winblend'` helps to discern text that runs behind the floating window, but that doesn't work with `'notermguicolors'`, in which case a border is needed. Otherwise I don't think a cleared `Normal` group is relevant; it should still give alpha to text below the float, but maybe I'm misunderstanding.",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-03T09:45:51Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901619317",
            "id": 1901619317,
            "in_reply_to_id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xWGh1",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2528801759,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901619317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T09:54:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901619317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901804164"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901804164"
                }
            },
            "author_association": "MEMBER",
            "body": ">Clearing Normal should not yield black background unless your terminal background is indeed black, or you define MsgArea with a black background.\r\n\r\nThat's what I'm saying, this is not the case. The `'winblend'` option creates a black background when `Normal` is cleared. You can try it for yourself and see. I don't know if this is intended behavior or not (the compositor presumably needs to know the default fg/bg color to perform the blending which it doesn't know if `Normal` is cleared).",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-03T13:51:02Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901804164",
            "id": 1901804164,
            "in_reply_to_id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xWzqE",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2529114491,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901804164/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T13:51:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901804164",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901812986"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901812986"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure what to try, could you share reproduction steps and or a screenshot of what you're seeing?",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-03T14:01:53Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901812986",
            "id": 1901812986,
            "in_reply_to_id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xW1z6",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2529129455,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901812986/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T14:01:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901812986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901889369"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901889369"
                }
            },
            "author_association": "MEMBER",
            "body": "With this PR display any kind of message (e.g. `Ctrl-G`) with `Normal` cleared and then again with `Normal` defined with a gui fg/bg color.\r\n\r\nWith Normal cleared and `'winblend'` set to 30, I see this:\r\n\r\n![Screenshot from 2025-01-03 09-24-24](https://github.com/user-attachments/assets/4295d2bf-5b44-4223-b10d-1961b909aec6)\r\n\r\nWith Normal defined with the same fg/bg colors as my terminal and `'winblend'` set to 30, I see this:\r\n\r\n![Screenshot from 2025-01-03 09-24-35](https://github.com/user-attachments/assets/1bbd4a4b-e65a-4471-9dd8-bbb1b54ab3c2)\r\n\r\nWith Normal cleared and `'winblend'` set to 0, I see this:\r\n\r\n![Screenshot from 2025-01-03 09-28-20](https://github.com/user-attachments/assets/f78a14a7-23bf-4ee1-b551-29ac795efe47)\r\n",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-03T15:25:55Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901889369",
            "id": 1901889369,
            "in_reply_to_id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xXIdZ",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2529265582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901889369/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T15:29:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901889369",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901913521"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901913521"
                }
            },
            "author_association": "MEMBER",
            "body": "Interesting, not sure what causes that; it doesn't reproduce from `build/bin/nvim --clean +\"hi clear Normal\" +\"set tgc\" +\"lua require('vim._extui').enable(true)\"` so more info is needed.",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-03T15:40:18Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901913521",
            "id": 1901913521,
            "in_reply_to_id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xXOWx",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2529298484,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901913521/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T15:59:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901913521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27855#discussion_r1901927985"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27855"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901927985"
                }
            },
            "author_association": "MEMBER",
            "body": "Interesting, it doesn't reproduce with `hi clear Normal`, but does with `call nvim_set_hl(0, 'Normal', #{})`.",
            "commit_id": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
            "created_at": "2025-01-03T15:56:25Z",
            "diff_hunk": "@@ -0,0 +1,110 @@\n+local api = vim.api\n+local ext = require('vim._extui.shared')\n+ext.msg = require('vim._extui.messages')\n+ext.cmd = require('vim._extui.cmdline')\n+local M = {}\n+local lsauid = -1 -- Autocommand id for 'laststatus' WinOpen/Closed handler.\n+\n+local function ui_callback(event, ...)\n+  local handler = ext.msg[event] or ext.cmd[event]\n+  if not handler then\n+    return\n+  end\n+  ext.tab_check_wins()\n+  handler(...)\n+  vim.api.nvim__redraw({\n+    flush = true,\n+    cursor = handler == ext.cmd[event] and true or nil,\n+    win = handler == ext.cmd[event] and ext.wins[ext.tab].cmd or nil,\n+  })\n+end\n+local scheduled_ui_callback = vim.schedule_wrap(ui_callback)\n+\n+M.enable = function(enable)\n+  if not enable then\n+    -- Detach and cleanup windows, buffers and autocommands.\n+    for _, tab in ipairs(api.nvim_list_tabpages()) do\n+      for _, win in pairs(ext.wins[tab] or {}) do\n+        api.nvim_win_close(win, true)\n+      end\n+    end\n+    api.nvim_buf_delete(ext.bufs.cmd, {})\n+    api.nvim_buf_delete(ext.bufs.msg, {})\n+    api.nvim_buf_delete(ext.bufs.more, {})\n+    api.nvim_clear_autocmds({ group = ext.augroup })\n+    vim.ui_detach(ext.ns)\n+    return\n+  end\n+\n+  ext.cmdheight = vim.o.cmdheight\n+  vim.ui_attach(ext.ns, { ext_cmdline = true, ext_messages = true }, function(event, ...)\n+    if vim.in_fast_event() then\n+      scheduled_ui_callback(event, ...)\n+    else\n+      ui_callback(event, ...)\n+    end\n+  end)\n+  vim.o.cmdheight = ext.cmdheight\n+\n+  api.nvim_set_hl(ext.ns, 'Normal', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'Search', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'CurSearch', { link = 'MsgArea' })\n+  api.nvim_set_hl(ext.ns, 'IncSearch', { link = 'MsgArea' })\n+\n+  api.nvim_create_autocmd('VimResized', {\n+    group = ext.augroup,\n+    callback = function()\n+      ext.msg.set_pos(ext.cmdheight, 0)\n+    end,\n+    desc = 'Manipulate cmdline and message window dimensions after shell resize.',\n+  })\n+\n+  api.nvim_create_autocmd('OptionSet', {\n+    group = ext.augroup,\n+    pattern = { 'cmdheight', 'laststatus', 'termguicolors' },\n+    callback = function(ev)\n+      ext.tab_check_wins()\n+      if ev.match == 'cmdheight' then\n+        -- 'cmdheight' set; (un)hide cmdline window and set its height.\n+        ext.cmdheight = vim.v.option_new\n+        local cfg = { height = math.max(ext.cmdheight, 1), hide = ext.cmdheight == 0 }\n+        pcall(api.nvim_win_set_config, ext.wins[ext.tab].cmd, cfg)\n+      elseif ev.match == 'termguicolors' then\n+        -- 'termguicolors' toggled; add or remove border and set 'winblend' for message windows.\n+        for _, tab in ipairs(api.nvim_list_tabpages()) do\n+          local win = ext.wins[tab].msg\n+          pcall(api.nvim_win_set_config, win, { border = vim.v.option_new and 'none' or 'single' })\n+          pcall(api.nvim_set_option_value, 'winblend', vim.v.option_new and 30 or 0, { win = win })",
            "html_url": "https://github.com/neovim/neovim/pull/27855#discussion_r1901927985",
            "id": 1901927985,
            "in_reply_to_id": 1901236314,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5xXR4x",
            "original_commit_id": "0976997d1283ffd5d7119845cbc76bb72db84bf3",
            "original_line": 77,
            "original_position": 77,
            "original_start_line": null,
            "path": "runtime/lua/vim/_extui.lua",
            "position": null,
            "pull_request_review_id": 2529322392,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901927985/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T15:56:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901927985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> Come to a consensus for how best to represent messages, alternative:\r\nOnly move messages that do not fit the 'cmdheight' area to a dedicated\r\nfloating message box.\r\n\r\nrelated: #22478 \r\n\r\nTL;DR: we need to distinguish (at least) three kinds of messages\r\n1. single line \"status messages\" (-> route to `vim.notify`; print on cmdline as default)\r\n2. error/deprecation messages/stacktraces etc. that should not be ignored (-> ???, floating window sounds good but probably needs to go through a `vim.notify` hook for plugins)\r\n3. long-form output like `:map` (-> full buffer for search, yank, etc.)\r\n\r\n(Of course, the line between 2 and 3 is blurry -- for example, `:Inspect` output would fit better in a floating window, so expected length of output is pobably a better distinguisher, and a separate \"priority\" option should be applied to must-read error messages. Prompt messages could be handled by a similar flag.)\r\n",
            "created_at": "2024-12-20T14:12:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2557093424",
            "id": 2557093424,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6YaiYw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557093424/reactions"
            },
            "updated_at": "2024-12-20T14:13:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557093424",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My starting point (which I mentioned in https://github.com/neovim/neovim/issues/27811#issuecomment-1997091918, and is now present in the PR) is that _all_ messages go in a (disappearing) floating window. Only when they exceed some length are they moved to a persistent floating window (mimicking a more prompt).\r\n\r\nIf @neovim/core (or people who try out this feature) feel strongly about still placing messages that fit the 'cmdheight' area where we are used for them to be, we can change that. The logic for determining based on text height is present in this PR. My hope was that people can get used to even small messages appearing in the bottom right corner.",
            "created_at": "2024-12-20T14:32:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2557127328",
            "id": 2557127328,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6Yaqqg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557127328/reactions"
            },
            "updated_at": "2024-12-20T14:32:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557127328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That's fine; I just wanted to link the context. The main points are that a) we need \"message metadata\" to allow different handling of messages (length is a good stand-in for an MVP, but maybe not enough in the long run) and b) we need to expose that to plugins like noice that want to shiny up the message UX. Again, not a blocker, just something to keep in mind.",
            "created_at": "2024-12-20T14:37:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2557134979",
            "id": 2557134979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6YasiD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557134979/reactions"
            },
            "updated_at": "2024-12-20T14:37:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557134979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">   When that is finished, make this new UI the default and update aloooot of tests.\r\n\r\nWhy shouldn't the default behavior continue to show the messages in the cmdline region?  Changing the placement of messages doesn't need to be part of this phase.\r\n\r\nIf a message exceeds 'cmdheight' (i.e. would trigger \"press enter\"), just truncate its display (and show a hint like `+3 messages` in bottom-right corner). Users can invoke a default mapping such as `g>` to see the pager.",
            "created_at": "2025-01-02T16:35:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2568051434",
            "id": 2568051434,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6ZEVrq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568051434/reactions"
            },
            "updated_at": "2025-01-02T16:36:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568051434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why shouldn't the default behavior continue to show the messages in the cmdline region?\r\n\r\nBecause we can (with ext_messages and floating windows) easily choose a representation that makes more sense.\r\nThe message box representation seemed natural to me, and is what I implemented.\r\nAt least with `:set cmdheight=0`, anything other than what we currently have makes more sense IMO.\r\n\r\nBut I can see how this would be contentious, which is why I asked for input in #27811.\r\nIf the old representation needs to stay with (`cmdheight > 0`) that could be done but if it were up to me I would try to avoid it in order to not have to maintain two separate representations.",
            "created_at": "2025-01-02T16:52:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2568074748",
            "id": 2568074748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6ZEbX8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568074748/reactions"
            },
            "updated_at": "2025-01-02T16:53:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568074748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Just tried this locally, and I'm very excited for it. The highlighting and pager are very cool.\r\n\r\n> > Why shouldn't the default behavior continue to show the messages in the cmdline region?\r\n> \r\n> Because we can (with ext_messages and floating windows) easily choose a representation that makes more sense.\r\n\r\nIt's not obvious that showing the result of `:ls` in a timed floating window at bottom-right is any better than placing it where it normally goes. Seems somewhat arbitrary. \r\n\r\nMain point I want to make is: this PR is fantastic, and I want to ship it ASAP. Mimicking the legacy behavior (to a reasonable extent) is a two-way door: we can always debate a more \"fancy\" layout later, it doesn't reduce complexity or risk to decide that *now*. It can easily be a later phase, so it should be.\r\n\r\nAnd depending on how much test changes are required, a \"legacy layout\" may be justified even just to avoid updating lots of tests.",
            "created_at": "2025-01-02T17:41:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2568136918",
            "id": 2568136918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6ZEqjW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568136918/reactions"
            },
            "updated_at": "2025-01-02T17:43:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568136918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Side effects with merged-in master branch here:\r\n\r\n- `nvim --clean -V9 -c \"lua require('vim._extui').enable(true)\" runtime/lua/vim/lsp/buf.lua` - crashes after [q]uitting from initial (not redirected yet) messages:\r\n```cpp\r\n#0  __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44\r\n#1  0x00007fce587dedef in __pthread_kill_internal (threadid=<optimized out>, signo=6) at ./nptl/pthread_kill.c:78\r\n#2  0x00007fce5878ad02 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\r\n#3  0x00007fce587734f0 in __GI_abort () at ./stdlib/abort.c:79\r\n#4  0x00007fce58773418 in __assert_fail_base (fmt=0x7fce588f7ca0 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\", assertion=assertion@entry=0x5615277b57a0 \"msg_ext_kind == kind\",\r\n    file=file@entry=0x5615277d76b0 \"/home/arctgx/dev/external/neovim-dev/src/nvim/message.c\", line=line@entry=315, function=function@entry=0x56152778daa8 <__PRETTY_FUNCTION__.17> \"msg_multihl\") at ./assert/assert.c:94\r\n#5  0x00007fce58783612 in __assert_fail (assertion=assertion@entry=0x5615277b57a0 \"msg_ext_kind == kind\", file=file@entry=0x5615277d76b0 \"/home/arctgx/dev/external/neovim-dev/src/nvim/message.c\", line=line@entry=315,\r\n    function=function@entry=0x56152778daa8 <__PRETTY_FUNCTION__.17> \"msg_multihl\") at ./assert/assert.c:103\r\n#6  0x00005615274e898c in msg_multihl (hl_msg=..., kind=0x5615277a9a20 \"echomsg\", history=true, err=false) at /home/arctgx/dev/external/neovim-dev/src/nvim/message.c:315\r\n#7  0x000056152734c87c in nvim_echo (chunks=..., history=<optimized out>, opts=0x7fff936a533e, err=0x7fff936a53e0) at /home/arctgx/dev/external/neovim-dev/src/nvim/api/vim.c:795\r\n#8  0x000056152733c99d in handle_nvim_echo (channel_id=<optimized out>, args=..., arena=<optimized out>, error=0x7fff936a53e0) at /home/arctgx/dev/external/neovim-dev/build/src/nvim/auto/api/private/dispatch_wrappers.generated.h:7936\r\n#9  0x0000561527503421 in request_event (argv=0x24f71) at /home/arctgx/dev/external/neovim-dev/src/nvim/msgpack_rpc/channel.c:366\r\n#10 0x00005615275d6f06 in state_handle_k_event () at /home/arctgx/dev/external/neovim-dev/src/nvim/state.c:120\r\n#11 0x00005615275126c4 in nv_event (cap=<optimized out>) at /home/arctgx/dev/external/neovim-dev/src/nvim/normal.c:6634\r\n#12 0x00005615275068e4 in normal_execute (state=0x7fff936a5580, key=<optimized out>) at /home/arctgx/dev/external/neovim-dev/src/nvim/normal.c:1244\r\n#13 0x00005615275d6d9d in state_enter (s=0x7fff936a5580) at /home/arctgx/dev/external/neovim-dev/src/nvim/state.c:102\r\n#14 0x0000561527503bd4 in normal_enter (cmdwin=<optimized out>, noexmode=<optimized out>) at /home/arctgx/dev/external/neovim-dev/src/nvim/normal.c:522\r\n#15 0x0000561527319157 in main (argc=<optimized out>, argv=<optimized out>) at /home/arctgx/dev/external/neovim-dev/src/nvim/main.c:651\r\n```\r\n\r\n- `nvim --clean -c \"lua require('vim._extui').enable(true)\" runtime/lua/vim/lsp/buf.lua -c 'se verbose=9'`\r\n```cpp\r\n#0  __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44\r\n#1  0x00007f07527a2def in __pthread_kill_internal (threadid=<optimized out>, signo=6) at ./nptl/pthread_kill.c:78\r\n#2  0x00007f075274ed02 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\r\n#3  0x00007f07527374f0 in __GI_abort () at ./stdlib/abort.c:79\r\n#4  0x00007f0752737418 in __assert_fail_base (fmt=0x7f07528bbca0 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\", assertion=assertion@entry=0x55d306d0194c \"pos_delta >= 0\",\r\n    file=file@entry=0x55d306d236b0 \".../src/nvim/message.c\", line=line@entry=2476, function=function@entry=0x55d306cd9ef0 <__PRETTY_FUNCTION__.0> \"msg_scroll_flush\") at ./assert/assert.c:94\r\n#5  0x00007f0752747612 in __assert_fail (assertion=assertion@entry=0x55d306d0194c \"pos_delta >= 0\", file=file@entry=0x55d306d236b0 \".../src/nvim/message.c\", line=line@entry=2476,\r\n    function=function@entry=0x55d306cd9ef0 <__PRETTY_FUNCTION__.0> \"msg_scroll_flush\") at ./assert/assert.c:103\r\n#6  0x000055d306a3abae in msg_scroll_flush () at .../src/nvim/message.c:2476\r\n#7  0x000055d306b69254 in ui_flush () at .../src/nvim/ui.c:541\r\n#8  0x000055d3068ef9ed in ui_flush () at .../src/nvim/drawscreen.c:404\r\n#9  screen_resize (width=179, height=<optimized out>) at .../src/nvim/drawscreen.c:401\r\n#10 screen_resize (width=<optimized out>, height=<optimized out>) at .../src/nvim/drawscreen.c:269\r\n#11 0x000055d306b64161 in ui_refresh () at .../src/nvim/ui.c:245\r\n#12 0x000055d306b64f98 in ui_remove_cb (ns_id=2, checkerr=true) at .../src/nvim/ui.c:799\r\n#13 0x000055d306b22f06 in state_handle_k_event () at .../src/nvim/state.c:120\r\n#14 0x000055d306a5e6c4 in nv_event (cap=<optimized out>) at .../src/nvim/normal.c:6634\r\n#15 0x000055d306a528e4 in normal_execute (state=0x7ffe3ebf3720, key=<optimized out>) at .../src/nvim/normal.c:1244\r\n#16 0x000055d306b22d9d in state_enter (s=0x7ffe3ebf3720) at .../src/nvim/state.c:102\r\n#17 0x000055d306a4fbd4 in normal_enter (cmdwin=<optimized out>, noexmode=<optimized out>) at .../src/nvim/normal.c:522\r\n#18 0x000055d306865157 in main (argc=<optimized out>, argv=<optimized out>) at .../src/nvim/main.c:651\r\n```\r\nNot sure if worth report while testing on combined commit. On the other side here are only Lua changes so probably both cases can be minimized to something reproducible on master.\r\n\r\nBackground: I wanted to check at first if WinScrolled autocmds are (rather unwantedly) triggered on the message window. \r\n",
            "created_at": "2025-01-10T17:44:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2583342627",
            "id": 2583342627,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6Z-q4j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583342627/reactions"
            },
            "updated_at": "2025-01-10T19:28:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583342627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for reporting, I'm not too concerned with the second backtrace, which happens after the extui was already forcibly detached due to excessive errors. 'verbose' was not considered yet, good to look into thanks.\r\n\r\nFirst backtrace hits an assert that we want to avoid (recently added to make sure), but is also not too critical. Both will be easier resolve once the message grid is no more but I can check if there is an easy fix in the meantime. \r\n\r\nEDIT: first assert is also hit _after_ the extui was forcibly detached, we don't care about it anymore at that point. We need to reset some variables when first attached and after forced detachment to avoid the second assert. This is tracked in #21056, so marking as resolved. The main thing here will be to avoid the errors in the extui implementation.",
            "created_at": "2025-01-10T18:18:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2583465553",
            "id": 2583465553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6Z_I5R",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583465553/reactions"
            },
            "updated_at": "2025-01-11T12:07:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2583465553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Now (after merging master again here) on `nvim --clean -c \"lua require('vim._extui').enable(true)\" runtime/lua/vim/lsp/buf.lua -c 'se verbose=9'` and hitting Enter enough I get \r\n\r\n```\r\nError executing vim.schedule lua callback: ...m-src-dev/share/nvim/runtime/lua/vim/_extui/messages.lua:276: Invalid window id:\r\n1015\r\nstack traceback:\r\n        [C]: in function 'nvim_win_set_config'\r\n        ...m-src-dev/share/nvim/runtime/lua/vim/_extui/messages.lua:276: in function 'win_set_pos'\r\n        ...m-src-dev/share/nvim/runtime/lua/vim/_extui/messages.lua:299: in function 'set_pos'\r\n        ...m-src-dev/share/nvim/runtime/lua/vim/_extui/messages.lua:104: in function 'show_msg'\r\n```",
            "created_at": "2025-01-11T01:05:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2584973529",
            "id": 2584973529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6aE5DZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2584973529/reactions"
            },
            "updated_at": "2025-01-11T11:48:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2584973529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Let's get around the above issue with `verbose` to show the case with `WinScrolled`:\r\n\r\n- `nvim --clean -c \"lua require('vim._extui').enable(true)\" -c 'au WinScrolled * echo rand()'`\r\n- `:echo 'x'`\r\n\r\nIs it possible to ignore autocommand events on the message window? I tried to wrap displaying message window and updating its buffer by `vim._with({noautocmd = true},`, but with no result. \r\n\r\n`WinScrolled` with (anti?)pattern `*` appears even in clean Nvim (`call s:Highlight_Matching_Pair()`), but also in plugins like nvim-tresitter-context. ",
            "created_at": "2025-01-11T01:25:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2584983172",
            "id": 2584983172,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6aE7aE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2584983172/reactions"
            },
            "updated_at": "2025-01-11T11:49:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2584983172",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, autocommands firing for the extui buffers/windows is probably unwanted, at least publicly (namespaced autocommands/editor objects(window buffer) could still be useful for the event handler itself). Perhaps avoiding that warrants the more general API of marking a window as a UI element which I alluded to in #27984, #31269.\r\n\r\nWe can ourselves set `'eventignore' = \"all\"` and restore it in the UI callback, but that doesn't avoid firing `WinScrolled`; which fires after the UI callback has already returned (it's checked every event loop iteration, rather than fired when scrolling actually happens).",
            "created_at": "2025-01-11T11:48:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2585221113",
            "id": 2585221113,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6aF1f5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585221113/reactions"
            },
            "updated_at": "2025-01-11T14:23:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585221113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Quick check without detailed debugging shows me that\r\n- for some reason set `vim.go.eventignore = 'all'` (and empty after) directly works unlike when set from `vim._with`,\r\n- `OptionSet` seems to be the edge case, for which I cannot avoid displaying verbose messages about firing that event,\r\n- verbosity (at level 9 and probably not only) produces junky `\\n` messages with no kind:\r\n![image](https://github.com/user-attachments/assets/cafd6078-9895-4391-83fd-368f94abcb9c)\r\n\r\nI'm curious what you'll (or anyone else here) propose for display verbose messages here. At the moment for my playground I consider displaying them in some separate space (buffer and window) to avoid spamming (any) message area. I keep in mind that sometimes it's useful to display all messages together to track the order of appearing, but usually rather not. \r\n",
            "created_at": "2025-01-11T13:13:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/27855#issuecomment-2585265990",
            "id": 2585265990,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
            "node_id": "IC_kwDOAPphoM6aGAdG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585265990/reactions"
            },
            "updated_at": "2025-01-11T13:37:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2585265990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27855/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27855/commits",
    "created_at": "2024-03-14T10:10:17Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27855.diff",
    "draft": true,
    "head": {
        "label": "luukvbaal:ext_msg",
        "ref": "ext_msg",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/luukvbaal/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/luukvbaal/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/luukvbaal/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/luukvbaal/neovim/branches{/branch}",
            "clone_url": "https://github.com/luukvbaal/neovim.git",
            "collaborators_url": "https://api.github.com/repos/luukvbaal/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/luukvbaal/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/luukvbaal/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/luukvbaal/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/luukvbaal/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/luukvbaal/neovim/contributors",
            "created_at": "2022-07-05T23:21:47Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/luukvbaal/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/luukvbaal/neovim/downloads",
            "events_url": "https://api.github.com/repos/luukvbaal/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/luukvbaal/neovim/forks",
            "full_name": "luukvbaal/neovim",
            "git_commits_url": "https://api.github.com/repos/luukvbaal/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/luukvbaal/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/luukvbaal/neovim/git/tags{/sha}",
            "git_url": "git://github.com/luukvbaal/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/luukvbaal/neovim/hooks",
            "html_url": "https://github.com/luukvbaal/neovim",
            "id": 510922471,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/luukvbaal/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/luukvbaal/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/luukvbaal/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/luukvbaal/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/luukvbaal/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/luukvbaal/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/luukvbaal/neovim/merges",
            "milestones_url": "https://api.github.com/repos/luukvbaal/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHnQO5w",
            "notifications_url": "https://api.github.com/repos/luukvbaal/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/luukvbaal/neovim/pulls{/number}",
            "pushed_at": "2025-01-20T19:59:36Z",
            "releases_url": "https://api.github.com/repos/luukvbaal/neovim/releases{/id}",
            "size": 302096,
            "ssh_url": "git@github.com:luukvbaal/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/luukvbaal/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/luukvbaal/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/luukvbaal/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/luukvbaal/neovim/subscription",
            "svn_url": "https://github.com/luukvbaal/neovim",
            "tags_url": "https://api.github.com/repos/luukvbaal/neovim/tags",
            "teams_url": "https://api.github.com/repos/luukvbaal/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/luukvbaal/neovim/git/trees{/sha}",
            "updated_at": "2025-01-15T13:07:18Z",
            "url": "https://api.github.com/repos/luukvbaal/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "43f4290bc6a6bd798c7128a186d7b9c33a213c89",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
            "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
            "followers_url": "https://api.github.com/users/luukvbaal/followers",
            "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
            "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/luukvbaal",
            "id": 31730729,
            "login": "luukvbaal",
            "node_id": "MDQ6VXNlcjMxNzMwNzI5",
            "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
            "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
            "repos_url": "https://api.github.com/users/luukvbaal/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/luukvbaal",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27855",
    "id": 1771822868,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27855",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "building and installing Neovim using the provided scripts",
            "id": 84723321,
            "name": "build",
            "node_id": "MDU6TGFiZWw4NDcyMzMyMQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/build"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "UI messages, log messages, errors, warnings, feedback",
            "id": 5637083595,
            "name": "messages",
            "node_id": "LA_kwDOAPphoM8AAAABT_8Ryw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/messages"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "command line, also cmdwin",
            "id": 5826989442,
            "name": "cmdline-mode",
            "node_id": "LA_kwDOAPphoM8AAAABW1DNgg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/cmdline-mode"
        }
    ],
    "locked": false,
    "merge_commit_sha": "85f3f385624d9ead088689308c2b9244698d6d7e",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5pm98U",
    "number": 27855,
    "patch_url": "https://github.com/neovim/neovim/pull/27855.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27855/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/43f4290bc6a6bd798c7128a186d7b9c33a213c89",
    "title": "feat(ui): ext_cmdline/messages for the TUI",
    "updated_at": "2025-01-15T15:51:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27855",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
        "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
        "followers_url": "https://api.github.com/users/luukvbaal/followers",
        "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
        "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/luukvbaal",
        "id": 31730729,
        "login": "luukvbaal",
        "node_id": "MDQ6VXNlcjMxNzMwNzI5",
        "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
        "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
        "repos_url": "https://api.github.com/users/luukvbaal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/luukvbaal",
        "user_view_type": "public"
    }
}