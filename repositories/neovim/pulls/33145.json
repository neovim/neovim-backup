{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33145/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33145/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/33145"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/33145"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33145/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/765087391d7930ea79240d38b1feba7375ff124d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6114,
            "forks_count": 6114,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1972,
            "open_issues_count": 1972,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-03T01:03:43Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 326078,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89994,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-03T02:10:49Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89994,
            "watchers_count": 89994,
            "web_commit_signoff_required": false
        },
        "sha": "6e12ef4a7b4cd966244ac6bce2593943e7df7758",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Work on #32660. This PR has two commits:\r\n\r\n---\r\n\r\n### feat(api): tiny, experimental API function for getting fold info\r\n\r\nThis commit introduces a simple API function to get the start and end\r\nlines of the closed fold on a given line in a given window.\r\n\r\n---\r\n\r\n### fix(treesitter): use double buffering in highlighter to reduce flickering\r\n\r\n**Problem:** Ever since treesitter highlighting made use of async\r\nparsing, highlights have started flickering since redraw attempts might\r\nbe made when the parser is still parsing. This is especially bad while\r\nediting.\r\n\r\n**Solution:** Apply a double buffering approach to the highlighter,\r\nmeaning that when redraw attempts are made when a parse has not yet\r\ncompleted, the highlighter will re-apply the highlights from the\r\nprevious cycle to reduce flickering.\r\n\r\n**Notes:**\r\n\r\n- This mostly fixes flicker while editing; flickering for two\r\n  windows open at the same time needs a parser-level change. Also note\r\n  that\r\n- The cons of this approach are that all extmarks applied by the\r\n  highlighter must now be stored in a table which will be overwritten at\r\n  every redraw attempt. This presumably means there will be more memory\r\n  usage and GC overhead, but the effect seems minimal in my testing.\r\n- This commit removes the `on_line` callback, and applies all extmarks\r\n  in `on_win` (while still making sure to skip over folds). Treesitter\r\n  query iteration was never really designed to be linewise, and\r\n  eliminating flicker was nearly impossible with the previous, somewhat\r\n  convoluted line-wise iteration logic.\r\n- This changes highlighter extmarks to apply with `strict = true` (since the previous buffer of marks my fall outside the new buffer range)\r\n\r\n## Before\r\n\r\n[flicker_bad.webm](https://github.com/user-attachments/assets/670fa111-3060-4328-be4b-d6bc840be69f)\r\n\r\n## After\r\n\r\n[flicker_good.webm](https://github.com/user-attachments/assets/5833ba81-ca2a-4fd6-8998-ccc3afa5eb2c)",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33145#discussion_r2019754803"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019754803"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  FUNC_API_SINCE(13)\r\n```\r\n(or even higher?)",
            "commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "created_at": "2025-03-29T08:44:50Z",
            "diff_hunk": "@@ -0,0 +1,42 @@\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#include \"nvim/api/fold.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/fold.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"api/fold.c.generated.h\"  // IWYU pragma: keep\n+#endif\n+\n+/// Gets the start and end lines for the closed fold on the given line. If the line is not within a\n+/// closed fold, an empty table will be returned.\n+///\n+/// @param window   |window-ID|, or 0 for current window\n+/// @param lnum   The line number to check (0-indexed)\n+/// @param[out] err Error details, if any\n+/// @return {start, stop}\n+ArrayOf(Integer, 2) nvim__fold_info_for_line(Window window, Integer lnum, Arena *arena, Error *err)\n+  FUNC_API_SINCE(12)",
            "html_url": "https://github.com/neovim/neovim/pull/33145#discussion_r2019754803",
            "id": 2019754803,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM54YwMz",
            "original_commit_id": "accd631bed5e330147324fb80d6518df06c90c77",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/api/fold.c",
            "position": null,
            "pull_request_review_id": 2727316800,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019754803/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-29T08:44:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019754803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33145#discussion_r2019769680"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019769680"
                }
            },
            "author_association": "MEMBER",
            "body": "yeah 14, and need to bump NVIM_API_LEVEL and change `NVIM_API_PRERELEASE` to `true`:  https://github.com/neovim/neovim/blob/95ab723995f1cc1a11c62355fbac64597526d47e/CMakeLists.txt#L148 (in this PR)",
            "commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "created_at": "2025-03-29T10:25:07Z",
            "diff_hunk": "@@ -0,0 +1,42 @@\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#include \"nvim/api/fold.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/fold.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"api/fold.c.generated.h\"  // IWYU pragma: keep\n+#endif\n+\n+/// Gets the start and end lines for the closed fold on the given line. If the line is not within a\n+/// closed fold, an empty table will be returned.\n+///\n+/// @param window   |window-ID|, or 0 for current window\n+/// @param lnum   The line number to check (0-indexed)\n+/// @param[out] err Error details, if any\n+/// @return {start, stop}\n+ArrayOf(Integer, 2) nvim__fold_info_for_line(Window window, Integer lnum, Arena *arena, Error *err)\n+  FUNC_API_SINCE(12)",
            "html_url": "https://github.com/neovim/neovim/pull/33145#discussion_r2019769680",
            "id": 2019769680,
            "in_reply_to_id": 2019754803,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM54Yz1Q",
            "original_commit_id": "accd631bed5e330147324fb80d6518df06c90c77",
            "original_line": 22,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/api/fold.c",
            "position": null,
            "pull_request_review_id": 2727335625,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019769680/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-29T10:25:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019769680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33145#discussion_r2019775573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019775573"
                }
            },
            "author_association": "MEMBER",
            "body": "Even if this only returns start/end for now, let's call it `nvim__fold_info` and return a Dict so we can expand it later?\r\n```suggestion\r\nDict(fold_info) nvim__fold_info(Window window, Integer lnum, Arena *arena, Error *err)\r\n```",
            "commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "created_at": "2025-03-29T11:06:38Z",
            "diff_hunk": "@@ -0,0 +1,42 @@\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#include \"nvim/api/fold.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/fold.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"api/fold.c.generated.h\"  // IWYU pragma: keep\n+#endif\n+\n+/// Gets the start and end lines for the closed fold on the given line. If the line is not within a\n+/// closed fold, an empty table will be returned.\n+///\n+/// @param window   |window-ID|, or 0 for current window\n+/// @param lnum   The line number to check (0-indexed)\n+/// @param[out] err Error details, if any\n+/// @return {start, stop}\n+ArrayOf(Integer, 2) nvim__fold_info_for_line(Window window, Integer lnum, Arena *arena, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/33145#discussion_r2019775573",
            "id": 2019775573,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM54Y1RV",
            "original_commit_id": "accd631bed5e330147324fb80d6518df06c90c77",
            "original_line": 21,
            "original_position": 21,
            "original_start_line": null,
            "path": "src/nvim/api/fold.c",
            "position": null,
            "pull_request_review_id": 2727343095,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019775573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-29T11:06:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019775573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33145#discussion_r2019850509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019850509"
                }
            },
            "author_association": "MEMBER",
            "body": "sorry 😅 , one more... if/when we graduate this, presumably it will always target a window, so should name it `nvim_win_get_fold`. \r\n\r\n(Though \"buffer local\" folds could make sense in theory, then should name this `nvim_fold_get({ win?: int, buf?: int})`. But that's probably unlikely).\r\n\r\n```suggestion\r\nDict(fold_info) nvim__win_get_fold(Window window, Integer lnum, Arena *arena, Error *err)\r\n```",
            "commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "created_at": "2025-03-29T16:53:33Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#include \"nvim/api/fold.h\"\n+#include \"nvim/api/private/dispatch.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/fold.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"api/fold.c.generated.h\"  // IWYU pragma: keep\n+#endif\n+\n+/// Gets the start and end lines for the closed fold on the given line\n+///\n+/// @param window   |window-ID|, or 0 for current window\n+/// @param lnum   The line number to check (0-indexed)\n+/// @param[out] err Error details, if any\n+/// @return  Dict containing fold information, with these keys:\n+///          - first: The start line of the current closed fold, or `nil` if none\n+///          - last: The end line of the current closed fold, or `nil` if none\n+Dict(fold_info) nvim__fold_info(Window window, Integer lnum, Arena *arena, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/33145#discussion_r2019850509",
            "id": 2019850509,
            "line": 23,
            "node_id": "PRRC_kwDOAPphoM54ZHkN",
            "original_commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/fold.c",
            "position": 23,
            "pull_request_review_id": 2727449518,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019850509/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-29T16:53:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019850509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33145#discussion_r2019852894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019852894"
                }
            },
            "author_association": "MEMBER",
            "body": "That makes sense; should this be moved to `api/window.c`? or just kept here",
            "commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "created_at": "2025-03-29T16:55:33Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#include \"nvim/api/fold.h\"\n+#include \"nvim/api/private/dispatch.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/fold.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"api/fold.c.generated.h\"  // IWYU pragma: keep\n+#endif\n+\n+/// Gets the start and end lines for the closed fold on the given line\n+///\n+/// @param window   |window-ID|, or 0 for current window\n+/// @param lnum   The line number to check (0-indexed)\n+/// @param[out] err Error details, if any\n+/// @return  Dict containing fold information, with these keys:\n+///          - first: The start line of the current closed fold, or `nil` if none\n+///          - last: The end line of the current closed fold, or `nil` if none\n+Dict(fold_info) nvim__fold_info(Window window, Integer lnum, Arena *arena, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/33145#discussion_r2019852894",
            "id": 2019852894,
            "in_reply_to_id": 2019850509,
            "line": 23,
            "node_id": "PRRC_kwDOAPphoM54ZIJe",
            "original_commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/fold.c",
            "position": 23,
            "pull_request_review_id": 2727454677,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019852894/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-29T16:55:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019852894",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/33145#discussion_r2019870536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/33145"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019870536"
                }
            },
            "author_association": "MEMBER",
            "body": "fold.c probably is good to have, since we likely want a lot more fold api stuff",
            "commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "created_at": "2025-03-29T17:19:20Z",
            "diff_hunk": "@@ -0,0 +1,43 @@\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#include \"nvim/api/fold.h\"\n+#include \"nvim/api/private/dispatch.h\"\n+#include \"nvim/api/private/validate.h\"\n+#include \"nvim/fold.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"api/fold.c.generated.h\"  // IWYU pragma: keep\n+#endif\n+\n+/// Gets the start and end lines for the closed fold on the given line\n+///\n+/// @param window   |window-ID|, or 0 for current window\n+/// @param lnum   The line number to check (0-indexed)\n+/// @param[out] err Error details, if any\n+/// @return  Dict containing fold information, with these keys:\n+///          - first: The start line of the current closed fold, or `nil` if none\n+///          - last: The end line of the current closed fold, or `nil` if none\n+Dict(fold_info) nvim__fold_info(Window window, Integer lnum, Arena *arena, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/33145#discussion_r2019870536",
            "id": 2019870536,
            "in_reply_to_id": 2019850509,
            "line": 23,
            "node_id": "PRRC_kwDOAPphoM54ZMdI",
            "original_commit_id": "765087391d7930ea79240d38b1feba7375ff124d",
            "original_line": 23,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/fold.c",
            "position": 23,
            "pull_request_review_id": 2727509020,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019870536/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-03-29T17:19:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2019870536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I've noticed a decent performance regression when editing with multiple windows open into the same buffer... I think this needs a bit more time. Keying the stored marks by window id eliminates flicker in these cases but typing is still noticeably slower",
            "created_at": "2025-03-29T16:44:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2763696151",
            "id": 2763696151,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6kuqgX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763696151/reactions"
            },
            "updated_at": "2025-03-29T16:44:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763696151",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe all ranges should be calculated/merged in `on_buf`? If we could add an option to the decoration provider to make it so that ephemeral marks are only cleared when returning `true` from `on_win` or `on_buf` this would help greatly, but this is above my pay grade sadly",
            "created_at": "2025-03-29T16:46:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2763699680",
            "id": 2763699680,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6kurXg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763699680/reactions"
            },
            "updated_at": "2025-03-29T16:46:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2763699680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can we keep last syntax trees and `iter_captures()` on those?",
            "created_at": "2025-03-31T00:29:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2764837318",
            "id": 2764837318,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6kzBHG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764837318/reactions"
            },
            "updated_at": "2025-03-31T01:00:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764837318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yeah that is a much better idea. Ideally I think there should be an option to keep the previous ephemeral marks in place (to prevent duplicate work) but I think this is the next best thing.",
            "created_at": "2025-03-31T01:22:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2764881529",
            "id": 2764881529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6kzL55",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764881529/reactions"
            },
            "updated_at": "2025-03-31T01:22:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764881529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Can we keep last syntax trees and `iter_captures()` on those?\r\n\r\nSomething like this:\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\nindex 46f02628ad..68e3432a8a 100644\r\n--- a/runtime/lua/vim/treesitter/highlighter.lua\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -131,6 +131,7 @@ function TSHighlighter.new(tree, opts)\r\n   self.redraw_count = 0\r\n   self._conceal_checked = {}\r\n   self._queries = {}\r\n+  self._highlight_trees = {}\r\n \r\n   -- Queries for a specific language can be overridden by a custom\r\n   -- string query... if one is not provided it will be looked up by file.\r\n@@ -184,40 +185,53 @@ function TSHighlighter:destroy()\r\n   end\r\n end\r\n \r\n+function TSHighlighter:add_highlighlight_state(srow, erow, info)\r\n+  local tstree = info[1]\r\n+  local lang = info[2]\r\n+\r\n+  local root_node = tstree:root()\r\n+  local root_start_row, _, root_end_row, _ = root_node:range()\r\n+\r\n+  -- Only consider trees within the visible range\r\n+  if root_start_row > erow or root_end_row < srow then\r\n+    return\r\n+  end\r\n+\r\n+  local hl_query = self:get_query(lang)\r\n+  -- Some injected languages may not have highlight queries.\r\n+  if not hl_query:query() then\r\n+    return\r\n+  end\r\n+\r\n+  -- _highlight_states should be a list so that the highlights are added in the same order as\r\n+  -- for_each_tree traversal. This ensures that parents' highlight don't override children's.\r\n+  table.insert(self._highlight_states, {\r\n+    tstree = tstree,\r\n+    next_row = 0,\r\n+    iter = nil,\r\n+    highlighter_query = hl_query,\r\n+  })\r\n+end\r\n+\r\n ---@param srow integer\r\n ---@param erow integer exclusive\r\n ---@private\r\n-function TSHighlighter:prepare_highlight_states(srow, erow)\r\n-  self._highlight_states = {}\r\n+function TSHighlighter:prepare_highlight_states(win, srow, erow)\r\n+  local trees = {}\r\n+  self._highlight_trees[win] = trees\r\n \r\n   self.tree:for_each_tree(function(tstree, tree)\r\n     if not tstree then\r\n       return\r\n     end\r\n \r\n-    local root_node = tstree:root()\r\n-    local root_start_row, _, root_end_row, _ = root_node:range()\r\n-\r\n-    -- Only consider trees within the visible range\r\n-    if root_start_row > erow or root_end_row < srow then\r\n-      return\r\n-    end\r\n-\r\n-    local hl_query = self:get_query(tree:lang())\r\n-    -- Some injected languages may not have highlight queries.\r\n-    if not hl_query:query() then\r\n-      return\r\n-    end\r\n-\r\n-    -- _highlight_states should be a list so that the highlights are added in the same order as\r\n-    -- for_each_tree traversal. This ensures that parents' highlight don't override children's.\r\n-    table.insert(self._highlight_states, {\r\n-      tstree = tstree,\r\n-      next_row = 0,\r\n-      iter = nil,\r\n-      highlighter_query = hl_query,\r\n-    })\r\n+    table.insert(trees, { tstree, tree:lang() })\r\n   end)\r\n+\r\n+  self._highlight_states = {}\r\n+  for _, info in ipairs(trees) do\r\n+    self:add_highlighlight_state(srow, erow, info)\r\n+  end\r\n end\r\n \r\n ---@param fn fun(state: vim.treesitter.highlighter.State)\r\n@@ -408,7 +422,7 @@ end\r\n ---@param buf integer\r\n ---@param srow integer\r\n ---@param erow integer\r\n-function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\r\n+function TSHighlighter._on_spell_nav(_, win_maybe, buf, srow, _, erow, _)\r\n   local self = TSHighlighter.active[buf]\r\n   if not self then\r\n     return\r\n@@ -417,7 +431,7 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\r\n   -- Do not affect potentially populated highlight state. Here we just want a temporary\r\n   -- empty state so the C code can detect whether the region should be spell checked.\r\n   local highlight_states = self._highlight_states\r\n-  self:prepare_highlight_states(srow, erow)\r\n+  self:prepare_highlight_states(win_maybe, srow, erow)\r\n \r\n   for row = srow, erow do\r\n     on_line_impl(self, buf, row, true, false)\r\n@@ -428,7 +442,7 @@ end\r\n ---@private\r\n ---@param buf integer\r\n ---@param row integer\r\n-function TSHighlighter._on_conceal_line(_, _, buf, row)\r\n+function TSHighlighter._on_conceal_line(_, win_maybe, buf, row)\r\n   local self = TSHighlighter.active[buf]\r\n   if not self or not self._conceal_line or self._conceal_checked[row] then\r\n     return\r\n@@ -437,7 +451,7 @@ function TSHighlighter._on_conceal_line(_, _, buf, row)\r\n   -- Do not affect potentially populated highlight state.\r\n   local highlight_states = self._highlight_states\r\n   self.tree:parse({ row, row })\r\n-  self:prepare_highlight_states(row, row)\r\n+  self:prepare_highlight_states(win_maybe, row, row)\r\n   on_line_impl(self, buf, row, false, true)\r\n   self._highlight_states = highlight_states\r\n end\r\n@@ -459,19 +473,31 @@ end\r\n ---@param buf integer\r\n ---@param topline integer\r\n ---@param botline integer\r\n-function TSHighlighter._on_win(_, _, buf, topline, botline)\r\n+function TSHighlighter._on_win(_, win, buf, topline, botline)\r\n   local self = TSHighlighter.active[buf]\r\n-  if not self or self.parsing then\r\n+  if not self then\r\n     return false\r\n   end\r\n-  self.parsing = self.tree:parse({ topline, botline + 1 }, function(_, trees)\r\n-    if trees and self.parsing then\r\n-      self.parsing = false\r\n-      api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n+\r\n+  if not self.parsing then\r\n+    self.parsing = self.tree:parse({ topline, botline + 1 }, function(_, trees)\r\n+      if trees and self.parsing then\r\n+        self.parsing = false\r\n+        api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n+      end\r\n+    end) == nil\r\n+  end\r\n+\r\n+  if self.parsing then\r\n+    self._highlight_states = {}\r\n+    for _, info in ipairs(self._highlight_trees[win] or {}) do\r\n+      self:add_highlighlight_state(topline, botline, info)\r\n     end\r\n-  end) == nil\r\n+  else\r\n+    self:prepare_highlight_states(win, topline, botline)\r\n+  end\r\n+\r\n   self.redraw_count = self.redraw_count + 1\r\n-  self:prepare_highlight_states(topline, botline)\r\n   return #self._highlight_states > 0\r\n end\r\n \r\ndiff --git a/runtime/lua/vim/treesitter/languagetree.lua b/runtime/lua/vim/treesitter/languagetree.lua\r\nindex f2e745ec65..e834692273 100644\r\n--- a/runtime/lua/vim/treesitter/languagetree.lua\r\n+++ b/runtime/lua/vim/treesitter/languagetree.lua\r\n@@ -319,7 +319,7 @@ function LanguageTree:is_valid(exclude_children, range)\r\n   local valid_regions = self._valid_regions\r\n \r\n   if not self._is_entirely_valid then\r\n-    if not range then\r\n+    if true or not range then\r\n       return false\r\n     end\r\n     -- TODO: Efficiently search for possibly intersecting regions using a binary search\r\n```\r\n\r\n</details>\r\n\r\nEach window has its own copy since each window has its own range. And what is \"parsed\" for one tree might not be parsed for a different one.\r\nThere's probably a more elegant solution that doesn't require keeping separate copies for each window.",
            "created_at": "2025-03-31T01:24:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2764883500",
            "id": 2764883500,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6kzMYs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764883500/reactions"
            },
            "updated_at": "2025-03-31T01:33:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764883500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice; I also have a commit for this, hope you can review. A bit simpler but maybe doesnt cover all cases",
            "created_at": "2025-03-31T01:29:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2764887647",
            "id": 2764887647,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6kzNZf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764887647/reactions"
            },
            "updated_at": "2025-03-31T01:29:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2764887647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "```patch\r\ncommit 0e7f0bd3958b66820da3c088009962bdcb029621\r\nAuthor: Riley Bruins <ribru17@hotmail.com>\r\nDate:   Sun Mar 30 16:17:42 2025 -0700\r\n\r\n    fix(treesitter): eliminate flicker while editing\r\n    \r\n    This commit will not fully reduce flicker with multiple open windows.\r\n\r\ndiff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\nindex 46f02628ad..38e34560b4 100644\r\n--- a/runtime/lua/vim/treesitter/highlighter.lua\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -131,6 +131,7 @@ function TSHighlighter.new(tree, opts)\r\n   self.redraw_count = 0\r\n   self._conceal_checked = {}\r\n   self._queries = {}\r\n+  self._highlight_states = {}\r\n \r\n   -- Queries for a specific language can be overridden by a custom\r\n   -- string query... if one is not provided it will be looked up by file.\r\n@@ -461,17 +462,29 @@ end\r\n ---@param botline integer\r\n function TSHighlighter._on_win(_, _, buf, topline, botline)\r\n   local self = TSHighlighter.active[buf]\r\n-  if not self or self.parsing then\r\n+  if not self then\r\n     return false\r\n   end\r\n-  self.parsing = self.tree:parse({ topline, botline + 1 }, function(_, trees)\r\n-    if trees and self.parsing then\r\n-      self.parsing = false\r\n-      api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n-    end\r\n-  end) == nil\r\n-  self.redraw_count = self.redraw_count + 1\r\n-  self:prepare_highlight_states(topline, botline)\r\n+  self.parsing = self.parsing\r\n+    or self.tree:parse({ topline, botline + 1 }, function(_, trees)\r\n+        if trees and self.parsing then\r\n+          self.parsing = false\r\n+          api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n+        end\r\n+      end)\r\n+      == nil\r\n+  if not self.parsing then\r\n+    self.redraw_count = self.redraw_count + 1\r\n+    self:prepare_highlight_states(topline, botline)\r\n+  else\r\n+    self:for_each_highlight_state(function(state)\r\n+      -- TODO(ribru17): Inefficient. Eventually all marks should be applied in on_buf, and all\r\n+      -- non-folded ranges of each open window should be merged, and iterators should only be\r\n+      -- created over those regions. This would also fix #31777\r\n+      state.iter = nil\r\n+      state.next_row = 0\r\n+    end)\r\n+  end\r\n   return #self._highlight_states > 0\r\n end\r\n ```",
            "created_at": "2025-03-31T05:59:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2765220497",
            "id": 2765220497,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6k0eqR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2765220497/reactions"
            },
            "updated_at": "2025-03-31T05:59:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2765220497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> ```diff\r\n> commit 0e7f0bd3958b66820da3c088009962bdcb029621\r\n> Author: Riley Bruins <ribru17@hotmail.com>\r\n> Date:   Sun Mar 30 16:17:42 2025 -0700\r\n> \r\n>     fix(treesitter): eliminate flicker while editing\r\n>     \r\n>     This commit will not fully reduce flicker with multiple open windows.\r\n> \r\n> diff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\n> index 46f02628ad..38e34560b4 100644\r\n> --- a/runtime/lua/vim/treesitter/highlighter.lua\r\n> +++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n> @@ -131,6 +131,7 @@ function TSHighlighter.new(tree, opts)\r\n>    self.redraw_count = 0\r\n>    self._conceal_checked = {}\r\n>    self._queries = {}\r\n> +  self._highlight_states = {}\r\n>  \r\n>    -- Queries for a specific language can be overridden by a custom\r\n>    -- string query... if one is not provided it will be looked up by file.\r\n> @@ -461,17 +462,29 @@ end\r\n>  ---@param botline integer\r\n>  function TSHighlighter._on_win(_, _, buf, topline, botline)\r\n>    local self = TSHighlighter.active[buf]\r\n> -  if not self or self.parsing then\r\n> +  if not self then\r\n>      return false\r\n>    end\r\n> -  self.parsing = self.tree:parse({ topline, botline + 1 }, function(_, trees)\r\n> -    if trees and self.parsing then\r\n> -      self.parsing = false\r\n> -      api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n> -    end\r\n> -  end) == nil\r\n> -  self.redraw_count = self.redraw_count + 1\r\n> -  self:prepare_highlight_states(topline, botline)\r\n> +  self.parsing = self.parsing\r\n> +    or self.tree:parse({ topline, botline + 1 }, function(_, trees)\r\n> +        if trees and self.parsing then\r\n> +          self.parsing = false\r\n> +          api.nvim__redraw({ buf = buf, valid = false, flush = false })\r\n> +        end\r\n> +      end)\r\n> +      == nil\r\n> +  if not self.parsing then\r\n> +    self.redraw_count = self.redraw_count + 1\r\n> +    self:prepare_highlight_states(topline, botline)\r\n> +  else\r\n> +    self:for_each_highlight_state(function(state)\r\n> +      -- TODO(ribru17): Inefficient. Eventually all marks should be applied in on_buf, and all\r\n> +      -- non-folded ranges of each open window should be merged, and iterators should only be\r\n> +      -- created over those regions. This would also fix #31777\r\n> +      state.iter = nil\r\n> +      state.next_row = 0\r\n> +    end)\r\n> +  end\r\n>    return #self._highlight_states > 0\r\n>  end\r\n> ```\r\n\r\nIt still flashes with multiple windows, since highlight states are shared between 2 windows. \r\n\r\nWhen window 1 finishes parsing its portion, it removes javascript injection tree. Then window 2 starts parsing, parsing doesn't finish and it reuses highlight states of window 1, which doesn't have js injection. Then it finishes parsing and adds js injection back.\r\n\r\nreproduction:\r\n\r\n```lua\r\nfor name, url in pairs {\r\n  nvim_treesitter = 'https://github.com/nvim-treesitter/nvim-treesitter.git',\r\n  rose_pine = 'https://github.com/rose-pine/neovim.git',\r\n} do\r\n  local install_path = vim.fn.fnamemodify('nvim_issue/' .. name, ':p')\r\n  if vim.fn.isdirectory(install_path) == 0 then\r\n    vim.fn.system { 'git', 'clone', '--depth=1', url, install_path }\r\n  end\r\n  vim.opt.runtimepath:append(install_path)\r\nend\r\n\r\nrequire'nvim-treesitter.configs'.setup {\r\n  ensure_installed = { 'html', 'javascript', 'css', },\r\n  highlight = { enable = true },\r\n}\r\n\r\nvim.cmd(\"colorscheme rose-pine\")\r\n\r\nlocal lines1 = [==[\r\n<script>\r\nimport HelloWorld from \"./components/HelloWorld.vue\";\r\nimport TheWelcome from \"./components/TheWelcome.vue\";\r\n\r\nconst foo = [];]==]\r\n\r\nlocal filler = 'foo.push(1);\\n'\r\n\r\nlocal lines2 = [==[\r\n</script>\r\n\r\n<template>\r\n  <header>\r\n    <img\r\n      alt=\"Vue logo\"\r\n      class=\"logo\"\r\n      src=\"./assets/logo.svg\"\r\n      width=\"125\"\r\n      height=\"125\"\r\n    />\r\n\r\n    <div class=\"wrapper\">\r\n      <HelloWorld msg=\"You did it!\" />\r\n    </div>\r\n  </header>\r\n\r\n  <main>\r\n    <TheWelcome />\r\n  </main>\r\n</template>\r\n\r\n<style scoped>\r\nheader {\r\n  line-height: 1.5;\r\n}\r\n\r\n.logo {\r\n  display: block;\r\n  margin: 0 auto 2rem;\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  header {\r\n    display: flex;\r\n    place-items: center;\r\n    padding-right: calc(var(--section-gap) / 2);\r\n  }\r\n\r\n  .logo {\r\n    margin: 0 2rem 0 0;\r\n  }\r\n\r\n  header .wrapper {\r\n    display: flex;\r\n    place-items: flex-start;\r\n    flex-wrap: wrap;\r\n  }\r\n}\r\n</style>]==]\r\n\r\nvim.api.nvim_buf_set_lines(\r\n  0, 0, -1, true,\r\n  vim.split(lines1 .. filler:rep(120) .. lines2, '\\n', { plain = true })\r\n)\r\nvim.treesitter.start(0, 'html')\r\nvim.api.nvim_feedkeys(\r\n  vim.api.nvim_replace_termcodes('<C-w><C-s>G', true, true, true),\r\n  'n', false\r\n)\r\n```",
            "created_at": "2025-03-31T15:08:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2766540726",
            "id": 2766540726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6k5g-2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766540726/reactions"
            },
            "updated_at": "2025-03-31T15:08:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2766540726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It still flashes with multiple windows, since highlight states are shared between 2 windows.\r\n\r\nTrue, but I believe this needs a parser-level change such as #32692. The reason is that if we parse one range, then parse another range, the injected trees from the previous range's parse will be dropped. You are right that there still needs to be some logic to separate window parsing states (like changing `self.parsing` to be a map from window -> boolean, and also changing from `api.nvim__redraw({ buf = buf, valid = false, flush = false })` to `api.nvim__redraw({ win = win, valid = false, flush = false })`), but I think this can be a follow up since it wouldn't be a complete solution anyway",
            "created_at": "2025-03-31T23:12:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2767625220",
            "id": 2767625220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6k9pwE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767625220/reactions"
            },
            "updated_at": "2025-03-31T23:12:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2767625220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Syntax flickering and glitches not comes alone. 1 or 2 cores of my cpu loaded to 80% over this issue. It also appears with folke/zen-mode.nvim cuz it opens another split actually.",
            "created_at": "2025-05-31T22:11:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/33145#issuecomment-2925829174",
            "id": 2925829174,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
            "node_id": "IC_kwDOAPphoM6uZJw2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2925829174/reactions"
            },
            "updated_at": "2025-05-31T22:12:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2925829174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1033820?v=4",
                "events_url": "https://api.github.com/users/onyx-zup/events{/privacy}",
                "followers_url": "https://api.github.com/users/onyx-zup/followers",
                "following_url": "https://api.github.com/users/onyx-zup/following{/other_user}",
                "gists_url": "https://api.github.com/users/onyx-zup/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/onyx-zup",
                "id": 1033820,
                "login": "onyx-zup",
                "node_id": "MDQ6VXNlcjEwMzM4MjA=",
                "organizations_url": "https://api.github.com/users/onyx-zup/orgs",
                "received_events_url": "https://api.github.com/users/onyx-zup/received_events",
                "repos_url": "https://api.github.com/users/onyx-zup/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/onyx-zup/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/onyx-zup/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/onyx-zup",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/33145/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/33145/commits",
    "created_at": "2025-03-29T01:43:20Z",
    "diff_url": "https://github.com/neovim/neovim/pull/33145.diff",
    "draft": true,
    "head": {
        "label": "ribru17:fold_info_get_test",
        "ref": "fold_info_get_test",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ribru17/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ribru17/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ribru17/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ribru17/neovim/branches{/branch}",
            "clone_url": "https://github.com/ribru17/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ribru17/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ribru17/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ribru17/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ribru17/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ribru17/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ribru17/neovim/contributors",
            "created_at": "2023-12-31T05:02:30Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ribru17/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ribru17/neovim/downloads",
            "events_url": "https://api.github.com/repos/ribru17/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ribru17/neovim/forks",
            "full_name": "ribru17/neovim",
            "git_commits_url": "https://api.github.com/repos/ribru17/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ribru17/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ribru17/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ribru17/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ribru17/neovim/hooks",
            "html_url": "https://github.com/ribru17/neovim",
            "id": 737455179,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ribru17/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ribru17/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ribru17/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ribru17/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ribru17/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ribru17/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ribru17/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ribru17/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK_SsSw",
            "notifications_url": "https://api.github.com/repos/ribru17/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ribru17/neovim/pulls{/number}",
            "pushed_at": "2025-05-29T10:08:55Z",
            "releases_url": "https://api.github.com/repos/ribru17/neovim/releases{/id}",
            "size": 317210,
            "ssh_url": "git@github.com:ribru17/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ribru17/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ribru17/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ribru17/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ribru17/neovim/subscription",
            "svn_url": "https://github.com/ribru17/neovim",
            "tags_url": "https://api.github.com/repos/ribru17/neovim/tags",
            "teams_url": "https://api.github.com/repos/ribru17/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ribru17/neovim/git/trees{/sha}",
            "updated_at": "2025-05-18T22:13:46Z",
            "url": "https://api.github.com/repos/ribru17/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "765087391d7930ea79240d38b1feba7375ff124d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
            "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
            "followers_url": "https://api.github.com/users/ribru17/followers",
            "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
            "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ribru17",
            "id": 55766287,
            "login": "ribru17",
            "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
            "organizations_url": "https://api.github.com/users/ribru17/orgs",
            "received_events_url": "https://api.github.com/users/ribru17/received_events",
            "repos_url": "https://api.github.com/users/ribru17/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ribru17",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/33145",
    "id": 2426610474,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/33145",
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "redraw, layout, presentation",
            "id": 718084050,
            "name": "display",
            "node_id": "MDU6TGFiZWw3MTgwODQwNTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/display"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6QoyMq",
    "number": 33145,
    "patch_url": "https://github.com/neovim/neovim/pull/33145.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/33145/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/765087391d7930ea79240d38b1feba7375ff124d",
    "title": "Work on preventing flickering",
    "updated_at": "2025-05-31T22:12:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/33145",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
        "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
        "followers_url": "https://api.github.com/users/ribru17/followers",
        "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
        "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ribru17",
        "id": 55766287,
        "login": "ribru17",
        "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
        "organizations_url": "https://api.github.com/users/ribru17/orgs",
        "received_events_url": "https://api.github.com/users/ribru17/received_events",
        "repos_url": "https://api.github.com/users/ribru17/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ribru17",
        "user_view_type": "public"
    }
}