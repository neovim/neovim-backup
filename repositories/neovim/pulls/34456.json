{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34456/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34456/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34456"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34456"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34456/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34456"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6140,
            "forks_count": 6140,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1958,
            "open_issues_count": 1958,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-23T23:51:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 329345,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90542,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-06-24T01:55:09Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90542,
            "watchers_count": 90542,
            "web_commit_signoff_required": false
        },
        "sha": "dc05598d0201d156e8ac435f156751e7f6b224ae",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "create an initial progress model as described in #32537 .\r\n\r\nbased on @echasnovski 's design described [here](https://github.com/neovim/neovim/issues/32537#issuecomment-2930373767).",
    "closed_at": "2025-06-23T11:43:57Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34456#discussion_r2141980687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34456"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141980687"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think leaving `percentage` out is a good idea. Although showing `done/total` is important and inferring percentage from that is possible, it is not universally reasonable. The main general probelm is when steps contribute different amount of load to overall task. For example, when downloading a set of files it is usually expected that percentage shows progress with respect to overall download size, while `done/total` is with respect to number of files.\r\n\r\nAlso delegating `vim.ui.progress` implementation to decide whether to show percentage or `dont/total` will be problematic when it is used to show LSP progress. The `$/progress` method only supports `percentage`, so LSP clients are already adapted (if they wanted) to show `done/total` information in their message. If `vim.ui.progress` implementation doesn't show percentage, then there will be LSP progress messages like `10/100: Diagnosing files: (1/10)`, which is not ideal.\r\n\r\nI'd expect one of the following approaches:\r\n- Have only `percentage` field and no `done/total` (which can be shown in `message`). I'd personally expect this approach.\r\n- Have all three `percentage`, `done`, `total`. Doable and opens more possibilities to `vim.ui.progress` implementations, but might be considered overcomplicating.",
            "commit_id": "82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd",
            "created_at": "2025-06-12T07:52:40Z",
            "diff_hunk": "@@ -235,4 +235,162 @@ function M._get_urls()\n   return urls\n end\n \n+---@alias vim.ui.progress.Token integer|string\n+---@class vim.ui.progress.Task\n+---@field title string\n+---@field message? string\n+---@field cancellable boolean\n+---@field total? integer\n+---@field done? integer",
            "html_url": "https://github.com/neovim/neovim/pull/34456#discussion_r2141980687",
            "id": 2141980687,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rAgP",
            "original_commit_id": "fa93cbc1543d1eed016fdf1154604866c4b27213",
            "original_line": 244,
            "original_position": 10,
            "original_start_line": 243,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 2919951985,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34456",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141980687/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-12T07:52:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141980687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34456#discussion_r2141992730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34456"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141992730"
                }
            },
            "author_association": "MEMBER",
            "body": "Using `vim.notify()` in the default implementation will be problematic for users who have `vim.notify` implementations that show notifications outside of command line. A very common approach is to use floating windows to show each notification separately and hide it after a certain period of time.\r\n\r\nThe problem here is that using `vim.notify` will result in an overwhelming amount of separate notifications for each progress step.\r\n\r\nIn a sense, `vim.ui.progress` is intentionally meant to be a separate from `vim.notify` method to show \"notifications that should be updated in place\", i.e. not result in a separate notifications. In theory, if `vim.notify` was initially designed (or allowed to be updated) to emit and respect some kind of `token`/`id` for separate notifications, there might not have been a need for a `vim.ui.progress` in the first place.\r\n\r\nSo I think default `vim.ui.progress` implementation should use `print` or `vim.api.nvim_echo`.",
            "commit_id": "82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd",
            "created_at": "2025-06-12T07:58:47Z",
            "diff_hunk": "@@ -235,4 +235,162 @@ function M._get_urls()\n   return urls\n end\n \n+---@alias vim.ui.progress.Token integer|string\n+---@class vim.ui.progress.Task\n+---@field title string\n+---@field message? string\n+---@field cancellable boolean\n+---@field total? integer\n+---@field done? integer\n+\n+---@class vim.ui.progress.Progress\n+---@field ns table<integer, table<vim.ui.progress.Token, vim.ui.progress.Task>>\n+---@field on_new fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+---@field on_update fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+---@field on_finish fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+---@field on_fail fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+M._progress = {\n+  ns = {},\n+}\n+\n+M._progress.on_new = function(_, _, task)\n+  vim.notify(",
            "html_url": "https://github.com/neovim/neovim/pull/34456#discussion_r2141992730",
            "id": 2141992730,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rDca",
            "original_commit_id": "fa93cbc1543d1eed016fdf1154604866c4b27213",
            "original_line": 257,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 2919970457,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34456",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141992730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T07:58:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2141992730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34456#discussion_r2142000264"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34456"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142000264"
                }
            },
            "author_association": "MEMBER",
            "body": "Yep, no `vim.notify` for this. Progress is a separate category of messages and needs to be handled separately. This is also important for treating this properly in @luukvbaal's `extui` implementations (both `cmd` and `box`).",
            "commit_id": "82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd",
            "created_at": "2025-06-12T08:02:21Z",
            "diff_hunk": "@@ -235,4 +235,162 @@ function M._get_urls()\n   return urls\n end\n \n+---@alias vim.ui.progress.Token integer|string\n+---@class vim.ui.progress.Task\n+---@field title string\n+---@field message? string\n+---@field cancellable boolean\n+---@field total? integer\n+---@field done? integer\n+\n+---@class vim.ui.progress.Progress\n+---@field ns table<integer, table<vim.ui.progress.Token, vim.ui.progress.Task>>\n+---@field on_new fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+---@field on_update fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+---@field on_finish fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+---@field on_fail fun(ns_id: integer, token: vim.ui.progress.Token, task: vim.ui.progress.Task): nil\n+M._progress = {\n+  ns = {},\n+}\n+\n+M._progress.on_new = function(_, _, task)\n+  vim.notify(",
            "html_url": "https://github.com/neovim/neovim/pull/34456#discussion_r2142000264",
            "id": 2142000264,
            "in_reply_to_id": 2141992730,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rFSI",
            "original_commit_id": "fa93cbc1543d1eed016fdf1154604866c4b27213",
            "original_line": 257,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 2919983304,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34456",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142000264/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-06-12T08:02:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142000264",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/34456#discussion_r2142019908"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/34456"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142019908"
                }
            },
            "author_association": "NONE",
            "body": "id prefer to go with the first approach (only having the `percentage` field), since it simplifies a lot of the internal logic. all it would require from the dev-end (the one calling progress) is passing `percentage = done/total`.",
            "commit_id": "82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd",
            "created_at": "2025-06-12T08:12:30Z",
            "diff_hunk": "@@ -235,4 +235,162 @@ function M._get_urls()\n   return urls\n end\n \n+---@alias vim.ui.progress.Token integer|string\n+---@class vim.ui.progress.Task\n+---@field title string\n+---@field message? string\n+---@field cancellable boolean\n+---@field total? integer\n+---@field done? integer",
            "html_url": "https://github.com/neovim/neovim/pull/34456#discussion_r2142019908",
            "id": 2142019908,
            "in_reply_to_id": 2141980687,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5_rKFE",
            "original_commit_id": "fa93cbc1543d1eed016fdf1154604866c4b27213",
            "original_line": 244,
            "original_position": 10,
            "original_start_line": 243,
            "path": "runtime/lua/vim/ui.lua",
            "position": null,
            "pull_request_review_id": 2920015450,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/34456",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142019908/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-06-12T08:22:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2142019908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I think @shadmansaleh may have some work in-progress for this. Or if not, then we can perhaps coordinate here. Though first we need to decide what the interface and requirements are.",
            "created_at": "2025-06-11T18:41:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2963818887",
            "id": 2963818887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wqEmH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963818887/reactions"
            },
            "updated_at": "2025-06-11T18:41:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963818887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I think @shadmansaleh may have some work in-progress for this. Or if not, then we can perhaps coordinate here. Though first we need to decide what the interface and requirements are.\r\n\r\noh so sorry; i was not aware someone else had already started working on this.\r\ni wanted to create a starting point to create some discussion and feedback iteration since i felt that the original issue had become sort of stale (mostly everyone agreed on the requirements and how it should be used).\r\ni felt like it was important to get some work started since some other pr's seemed to depend on it to some capacity (#34009, #28809).",
            "created_at": "2025-06-11T19:21:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2963911418",
            "id": 2963911418,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wqbL6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963911418/reactions"
            },
            "updated_at": "2025-06-11T19:22:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2963911418",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think @shadmansaleh may have some work in-progress for this. Or if not, then we can perhaps coordinate here. Though first we need to decide what the interface and requirements are.\r\n\r\nI actually haven't yet started work on this. Had ideas on it. But after you said it'll be part of @ofseed s project I didn't touch it.",
            "created_at": "2025-06-12T01:36:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2964716949",
            "id": 2964716949,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wtf2V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2964716949/reactions"
            },
            "updated_at": "2025-06-12T01:36:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2964716949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ofseed mentioned that the \"progress\" feature may involve changes to the LSP layer. whereas this PR is focused on the api. \r\n\r\nwe can discuss the api here without overlapping the lsp-related changes.",
            "created_at": "2025-06-12T01:46:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2964728451",
            "id": 2964728451,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wtiqD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2964728451/reactions"
            },
            "updated_at": "2025-06-12T01:46:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2964728451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, my understanding is that I will use the progress interface to implement LSP-related features, but it does not include implementing the interface itself. I think our division of work is that my work focuses on LSP, while @shadmansaleh 's work focuses on the status line (which also includes `vim.ui.progress`) and the prompt buffer.",
            "created_at": "2025-06-12T01:52:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2964735763",
            "id": 2964735763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wtkcT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2964735763/reactions"
            },
            "updated_at": "2025-06-12T01:52:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2964735763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "i changed the progress messages to use `vim.api.nvim_echo` instead and was wondering if it should use a custom `ui-messages` kind to indicate a progress message.",
            "created_at": "2025-06-12T08:59:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965731927",
            "id": 2965731927,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wxXpX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965731927/reactions"
            },
            "updated_at": "2025-06-12T08:59:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965731927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Our initial idea was to place progress indicators in the statusline. With this interface is it expected that any one trying to do something different with the progress data here will be overriding on_new, on_update, on_finish, on_fail functions here?\r\n\r\nI think even as a default. A short indicator in the statusline is much better than writing a message. It can end up being quite spammy with multiple lsp clients being attached to the same buffer. Also, it'll shadow any other message, any plugins, or other pieces of code in core trying to send. Usually, unless there's an issue upon entering buffer msg area remains empty.",
            "created_at": "2025-06-12T09:06:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965754243",
            "id": 2965754243,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wxdGD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965754243/reactions"
            },
            "updated_at": "2025-06-12T09:06:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965754243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Our initial idea was to place progress indicators in the statusline. \r\n\r\nPlacing progress indicators in the statusline can in theory be done via default `vim.ui.progress` implementation. For example, each call to `vim.ui.progress` updates some exported summary state. Like in `g:progress_status`. This can then be displayed in the default statusline.\r\n\r\nOn top of the interface itself, the decision is needed here about the default way of showing progress updates (cc @justinmk):\r\n- As messages in command line.\r\n- As part of default statusline.\r\n- Or maybe by exporting `g:progress_status` and allowing users to do whatever they want to do with it. Including including it in default statusline.\r\n\r\n> With this interface is it expected that any one trying to do something different with the progress data here will be overriding on_new, on_update, on_finish, on_fail functions here?\r\n\r\nIf users/plugins want to create their own way of showing progress updates, all they have to do is override `vim.ui.progress`. The same approach as with `vim.ui.select`, `vim.ui.input`, and `vim.notify`.",
            "created_at": "2025-06-12T09:18:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965801904",
            "id": 2965801904,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wxouw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965801904/reactions"
            },
            "updated_at": "2025-06-12T09:18:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965801904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No, we absolutely want both. The statusline is the right place for a simple spinner or percent count, but (LSP) progress notifications can come with (arbitrarily long) messages that have no place in the statusline but may still be shown to users (e.g., in a fixed `pos = 'box'` extui place).\r\n\r\nSo as @echasnovski wrote, \"progress interface\" requires two distinct components:\r\n1. a backend that providers (LSP clients, plugins, ...) register with, which accumulates incoming progress notifications and handles source separation, cleanup etc.;\r\n2. one or (likely) more frontends that display the stored notifications in a structured way.\r\n\r\nIt is crucial that the backend can handle both multiple sources and multiple frontends (as by default we want at least a statusline spinner and an extui message display, with most users likely wanting both).",
            "created_at": "2025-06-12T09:19:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965803958",
            "id": 2965803958,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wxpO2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965803958/reactions"
            },
            "updated_at": "2025-06-12T09:26:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965803958",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> No, we absolutely want both. The statusline is the right place for a simple spinner or percent count, but (LSP) progress notifications can come with (arbitrarily long) messages that have no place in the statusline but may still be shown to users (e.g., in a fixed `pos = 'box'` extui place).\r\n\r\nThen probably having the default implementation only collect all progress updates in a single exported place can be a good idea. Be it a `g:progress_status` string, `g:progress_summary` table with separate `percent` and `msg`, or somewhere in the Lua place (like `vim.progress`).\r\n\r\nOtherwise I don't think expecting to have a *user-customizable* (i.e. fully allowing them to alter how progress is visualized) progress updates via a single `vim.ui.progress` is reasonable here. And I very much think that allowing user customization is important here.",
            "created_at": "2025-06-12T09:28:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965842558",
            "id": 2965842558,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wxyp-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965842558/reactions"
            },
            "updated_at": "2025-06-12T09:28:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965842558",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "\n> If users/plugins want to create their own way of showing progress updates, all they have to do is override `vim.ui.progress`. The same approach as with `vim.ui.select`, `vim.ui.input`, and `vim.notify`.\n\nmy initial idea in this pr *was* that users could override the `on_*` functions to separate ui and core logic. the main function can handle state changes through a *static* api and then ui could be handled however someone might want.\n\nif this is not what is expected from this feature I'll replace it. <3",
            "created_at": "2025-06-12T09:29:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965847066",
            "id": 2965847066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wxzwa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965847066/reactions"
            },
            "updated_at": "2025-06-12T09:29:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965847066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this is very much a case of \"design needed\". We should not add individual components before having the full picture thought out (in broad strokes) to avoid painting ourselves into a corner. In particular, handling multiple parallel sources gracefully is a must-have for the MVP already (having learned our lessons from the LSP client...)\r\n\r\n@mfussenegger ",
            "created_at": "2025-06-12T10:00:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2965963810",
            "id": 2965963810,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wyQQi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965963810/reactions"
            },
            "updated_at": "2025-06-12T10:00:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2965963810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "For multiple clients we can support for listener callbacks. In that case the `ui.progress` module basically acts as a central hub. Things tring to send progress message would send them through the interface we have set here. Then anything else trying to listen on those would register callbacks in the progress module. As the events come the ui.progress can do some form of basic processing (like data validation,..) if needed Then send the info to the listeners through the callback. Then ext ui, statusline or any plugin can use the info by their discretion. In short pub-sub model?",
            "created_at": "2025-06-12T10:12:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966008138",
            "id": 2966008138,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wybFK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966008138/reactions"
            },
            "updated_at": "2025-06-12T10:12:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966008138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13149513?v=4",
                "events_url": "https://api.github.com/users/shadmansaleh/events{/privacy}",
                "followers_url": "https://api.github.com/users/shadmansaleh/followers",
                "following_url": "https://api.github.com/users/shadmansaleh/following{/other_user}",
                "gists_url": "https://api.github.com/users/shadmansaleh/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/shadmansaleh",
                "id": 13149513,
                "login": "shadmansaleh",
                "node_id": "MDQ6VXNlcjEzMTQ5NTEz",
                "organizations_url": "https://api.github.com/users/shadmansaleh/orgs",
                "received_events_url": "https://api.github.com/users/shadmansaleh/received_events",
                "repos_url": "https://api.github.com/users/shadmansaleh/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/shadmansaleh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/shadmansaleh/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/shadmansaleh",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">I described my ideas for implementing this interface in my initial GSoC proposal, but based on the final division of work, I did not continue to implement it. Just sharing these thoughts.\r\n### Progress Interface – A Built-In `vim.ui.progress`\r\n\r\nAI-based completion often runs automatically in the background and can take a while to finish. Letting users know what tasks are in progress and how far along they are is crucial—especially since multiple tasks might be running simultaneously. We need:\r\n\r\n- Independence among different progress states\r\n\r\n- The ability to show multiple progress indicators simultaneously\r\n\r\nWe currently have `vim.ui.select` and `vim.ui.input`, which are “single-instance” UI elements. By contrast, `vim.ui.progress` must handle multiple concurrent instances. Hence, an OOP-like pattern is appropriate.\r\n\r\n#### Implementation\r\n\r\nCalling `vim.ui.progress(opts)` returns a `Progress` instance. The `opts` table might contain:\r\n\r\n- **`title`**\r\n- **`desc`**\r\n- **`level`** (from `vim.log.levels`)\r\n- **`percent`** (a float, where `1` represents 100%)\r\n- **`bufnr`** (affects how the progress is displayed, as we plan to show it on the statusline)\r\n\r\nA `Progress` instance might have methods like:\r\n\r\n- **`Progress:start()`**: Progress only shows up in the UI after calling this.\r\n- **`Progress:update(opts)`**: Updates its display.\r\n- **`Progress:clear()`**: Clears the progress indicator, removing it from the UI.\r\n\r\nEventually, a task might succeed, fail, or be canceled, but those outcomes should be handled by the plugin that owns the `Progress` (because it alone knows the task’s details). When an error occurs, for instance, the plugin could call `Progress:update(opts)` with `opts.level = vim.log.levels.ERROR` and handle error the error itself.\r\n\r\n#### Constraints\r\n\r\nAlthough the above design meets most LSP needs, LSP’s progress also includes a `cancellabel` field, letting users click on a button to cancel the task. We lack such kind of interaction, so I don't plan to implement that for now. We could add it by extending `opts` later if needed, or by community plugins.\r\n\r\nSince the statusline space is highly limited, we can’t always display multiple progress bars. That design constraint means the default implementation must pick a minimalistic approach—possibly showing only the most recently created progress indicator with a simple aggregated view. More details below.\r\n\r\n### Progress Interface – Updated Default Statusline\r\n\r\nThe statusline is a highly customized space, and no single design can satisfy everyone. However, to provide a builtin default implementation for `vim.lsp.progress`, we’ll need to adjust the default statusline to show progress.\r\n\r\n#### Implementation\r\n\r\nKeep the default approach as minimalistic as possible, showing only a spinner and a brief title:\r\n\r\n- Use [Braille Patterns](https://en.wikipedia.org/wiki/Braille_Patterns#Block) from Unicode as spinners. They have a nice aesthetic as minimal spinners.\r\n- When at least one `vim.ui.Progress` is active, display its `title` plus a rotating spinner.\r\n- If multiple `vim.ui.Progress` instances are active, show only the most recent one.\r\n- Through `:messages`, we could display a list of all active progress tasks. Completed ones will appear.\r\n\r\n#### Constraints\r\n\r\nSince the statusline space is limited, it’s impractical to display all ongoing tasks there in detail, or even just one. A single spinner plus a short title is a compromise to let users know “something is running, and what's the latest one.”\r\n\r\nIf we wants to show all progress details in real time, we might consider merging [fidget.nvim](https://github.com/j-hui/fidget.nvim) or implementing it ourselves in a similar style.",
            "created_at": "2025-06-12T10:34:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966078700",
            "id": 2966078700,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wysTs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966078700/reactions"
            },
            "updated_at": "2025-06-12T10:34:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966078700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Then send the info to the listeners through the callback. Then ext ui, statusline or any plugin can use the info by their discretion. In short pub-sub model?\r\n\r\nMy personal preference would be to not overcomplicate this with custom Lua solutions and instead trigger something like `ProgressChanged` event with necessary data. This can be done in default `vim.ui.progress()` in a documented way, which other implementations would have to follow. Similar to `DiagnosticChanged`, etc.\r\n\r\nMaybe there can be lessons applied from `vim.lsp.diagnostic`-> `vim.diagnostic` transition and have similar effect of `LspProgress` replaced with `ProgressChanged`?",
            "created_at": "2025-06-12T10:39:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966092219",
            "id": 2966092219,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wyvm7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966092219/reactions"
            },
            "updated_at": "2025-06-12T10:39:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966092219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> My personal preference would be to not overcomplicate this with custom Lua solutions and instead trigger something like `ProgressChanged` event with necessary data.\r\n\r\ni feel like this is a solution that fits how other neovim interfaces have been designed.\r\nusing autocommands instead of listeners better fits the current design of other neovim api's.\r\n\r\n> We currently have vim.ui.select and vim.ui.input, which are “single-instance” UI elements. By contrast, vim.ui.progress must handle multiple concurrent instances. Hence, an OOP-like pattern is appropriate.\r\n\r\nusing OOP might work here but it would still be important to keep the progress instances in a global variable or ns table.",
            "created_at": "2025-06-12T10:42:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966099999",
            "id": 2966099999,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wyxgf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966099999/reactions"
            },
            "updated_at": "2025-06-12T10:43:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966099999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> using OOP might work here but it would still be important to keep the progress instances in a global variable or ns table.\r\n\r\nThat could be done quite straightforwardly. Here's an existing example we can take inspiration from.\r\n\r\nhttps://github.com/neovim/neovim/blob/d86d4bacc14bc6ab51b3173f3644d703f53ffbde/runtime/lua/vim/lsp/semantic_tokens.lua#L31-L38\r\n\r\nThe `active` field here tracks every instance of `STHighlighter`; it's a static field.",
            "created_at": "2025-06-12T11:16:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966217414",
            "id": 2966217414,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wzOLG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966217414/reactions"
            },
            "updated_at": "2025-06-12T11:16:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966217414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> That could be done quite straightforwardly. Here's an existing example we can take inspiration from.\r\n\r\nin the current pr this also already being done. every task is added to a table scoped by ns and token.",
            "created_at": "2025-06-12T11:17:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966221383",
            "id": 2966221383,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wzPJH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966221383/reactions"
            },
            "updated_at": "2025-06-12T11:17:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966221383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The proposal so far looks a lot like the LSP [progress support](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress) / [work done progress](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgress).\r\n\r\nWhat's the advantage of this, and what are the shortcomings of the LSP progress approach?\r\n",
            "created_at": "2025-06-12T11:50:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966378219",
            "id": 2966378219,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6wz1br",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966378219/reactions"
            },
            "updated_at": "2025-06-12T11:50:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966378219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The proposal so far looks a lot like the LSP [progress support](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progress) / [work done progress](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgress).\r\n> \r\n> What's the advantage of this, and what are the shortcomings of the LSP progress approach?\r\n\r\nThat was my suggestion to intentionally reuse already known structure/design for notifications. The goal is to have a dedicated way to show progress without having to go through LSP routing (#32537, #32084, #28809), which requires to have more data structures involved (LSP server, buffer it is attached to) than necessary to just show progress.\r\n\r\nUsers/plugins can then override how progress updates are shown, separately from LSP progress. Also the default LSP handler can then use `vim.ui.progress`.",
            "created_at": "2025-06-12T12:20:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966482586",
            "id": 2966482586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6w0O6a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966482586/reactions"
            },
            "updated_at": "2025-06-12T12:20:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966482586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> which requires to have more data structures involved (LSP server, ...\r\n\r\nI think that's mainly a matter of abstraction? With `lsp.server` we could get it to a point that's likely similar concise as what's proposed in this PR so far.\r\n\r\n> ... buffer it is attached to\r\n\r\nA language server doesn't have to be attached to any buffer to be able to send notifications.\r\nProgress in the language server protocol is not tied to individual documents.\r\n\r\n> (#32537, #32084, #28809),\r\n\r\nThose mainly mention having some sort of progress capabilities, but none of these point out any LSP progress shortcomings.\r\n\r\n\r\n> Users/plugins can then override how progress updates are shown, separately from LSP progress.\r\n> Also the default LSP handler can then use vim.ui.progress.\r\n\r\n\r\nGiven that there are already some plugins customizing the display for LSP - I'm still not seeing any advantage here?\r\n\r\nAs was already pointed out in this issue, there's a `LspProgress` autocmd event with kind=begin|report|end, which mirrors the ProgressChanged, ProgressDone, ProgressError, ProgressStart autocmds in this PR here.\r\n\r\nWhy is having ProgressChanged, ProgressDone, ProgressError, ProgressStart in addition to `LspProgress` needed or better?\r\n",
            "created_at": "2025-06-12T12:42:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966563799",
            "id": 2966563799,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6w0ivX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966563799/reactions"
            },
            "updated_at": "2025-06-12T12:42:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966563799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > which requires to have more data structures involved (LSP server, ...\r\n> \r\n> I think that's mainly a matter of abstraction? With `lsp.server` we could get it to a point that's likely similar concise as what's proposed in this PR so far.\r\n\r\nThere is no `lsp.server` merged yet. I'd very much like it to, though.\r\nAfter that, the decision of whether a separate `vim.ui.progress` / `vim.progress` is needed mostly comes down to @justinmk. I'd personally be fine with abstracting \"show progress update\" into \"create in-process LSP server and use its `$/progress`\", if the latter is relatively concise and actually *shows* progress updates by default.\r\n\r\n> Why is having ProgressChanged, ProgressDone, ProgressError, ProgressStart in addition to `LspProgress` needed or better?\r\n\r\nYes, separate events is unnecessary. I'd thought to have a more general replacement of `LspProgress`.",
            "created_at": "2025-06-12T12:49:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966589377",
            "id": 2966589377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6w0o_B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966589377/reactions"
            },
            "updated_at": "2025-06-12T12:50:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966589377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Why is having ProgressChanged, ProgressDone, ProgressError, ProgressStart in addition to `LspProgress` needed or better?\r\n\r\nyes i agree that is not needed. i simplified it to a singular `Progress` event in [82c4be0](https://github.com/neovim/neovim/pull/34456/commits/82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd)",
            "created_at": "2025-06-12T13:13:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2966666192",
            "id": 2966666192,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6w07vQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966666192/reactions"
            },
            "updated_at": "2025-06-12T13:13:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2966666192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Before introducing a new Progress object, let's try to instead augment existing vim `:messages`. They can take an id, be updated, and emit events.\r\n\r\nUpdated proposal: https://github.com/neovim/neovim/issues/32537#issuecomment-2672600804",
            "created_at": "2025-06-23T11:43:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/34456#issuecomment-2996153397",
            "id": 2996153397,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
            "node_id": "IC_kwDOAPphoM6ylaw1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996153397/reactions"
            },
            "updated_at": "2025-06-23T11:43:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2996153397",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34456/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34456/commits",
    "created_at": "2025-06-11T18:23:01Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34456.diff",
    "draft": true,
    "head": {
        "label": "comfysage:feat/progress-interface",
        "ref": "feat/progress-interface",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/comfysage/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/comfysage/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/comfysage/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/comfysage/neovim/branches{/branch}",
            "clone_url": "https://github.com/comfysage/neovim.git",
            "collaborators_url": "https://api.github.com/repos/comfysage/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/comfysage/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/comfysage/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/comfysage/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/comfysage/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/comfysage/neovim/contributors",
            "created_at": "2025-06-11T17:38:26Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/comfysage/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/comfysage/neovim/downloads",
            "events_url": "https://api.github.com/repos/comfysage/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/comfysage/neovim/forks",
            "full_name": "comfysage/neovim",
            "git_commits_url": "https://api.github.com/repos/comfysage/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/comfysage/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/comfysage/neovim/git/tags{/sha}",
            "git_url": "git://github.com/comfysage/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/comfysage/neovim/hooks",
            "html_url": "https://github.com/comfysage/neovim",
            "id": 1000383855,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/comfysage/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/comfysage/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/comfysage/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/comfysage/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/comfysage/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/comfysage/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/comfysage/neovim/merges",
            "milestones_url": "https://api.github.com/repos/comfysage/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOO6Clbw",
            "notifications_url": "https://api.github.com/repos/comfysage/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
                "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
                "followers_url": "https://api.github.com/users/comfysage/followers",
                "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
                "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/comfysage",
                "id": 67917529,
                "login": "comfysage",
                "node_id": "MDQ6VXNlcjY3OTE3NTI5",
                "organizations_url": "https://api.github.com/users/comfysage/orgs",
                "received_events_url": "https://api.github.com/users/comfysage/received_events",
                "repos_url": "https://api.github.com/users/comfysage/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/comfysage",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/comfysage/neovim/pulls{/number}",
            "pushed_at": "2025-06-12T13:12:28Z",
            "releases_url": "https://api.github.com/repos/comfysage/neovim/releases{/id}",
            "size": 327145,
            "ssh_url": "git@github.com:comfysage/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/comfysage/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/comfysage/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/comfysage/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/comfysage/neovim/subscription",
            "svn_url": "https://github.com/comfysage/neovim",
            "tags_url": "https://api.github.com/repos/comfysage/neovim/tags",
            "teams_url": "https://api.github.com/repos/comfysage/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/comfysage/neovim/git/trees{/sha}",
            "updated_at": "2025-06-11T17:38:26Z",
            "url": "https://api.github.com/repos/comfysage/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
            "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
            "followers_url": "https://api.github.com/users/comfysage/followers",
            "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
            "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/comfysage",
            "id": 67917529,
            "login": "comfysage",
            "node_id": "MDQ6VXNlcjY3OTE3NTI5",
            "organizations_url": "https://api.github.com/users/comfysage/orgs",
            "received_events_url": "https://api.github.com/users/comfysage/received_events",
            "repos_url": "https://api.github.com/users/comfysage/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/comfysage",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34456",
    "id": 2585080264,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34456",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "needs a clear design proposal",
            "id": 124510010,
            "name": "needs:design",
            "node_id": "MDU6TGFiZWwxMjQ1MTAwMTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:design"
        }
    ],
    "locked": false,
    "merge_commit_sha": "173df5cf743ea9321a11d4ac8dfbb567c7768a66",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6aFTHI",
    "number": 34456,
    "patch_url": "https://github.com/neovim/neovim/pull/34456.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34456/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/82c4be0b1aebe5ebdf92b0d2ba5696fca49313bd",
    "title": "feat(ui): progress interface",
    "updated_at": "2025-06-23T11:43:58Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34456",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/67917529?v=4",
        "events_url": "https://api.github.com/users/comfysage/events{/privacy}",
        "followers_url": "https://api.github.com/users/comfysage/followers",
        "following_url": "https://api.github.com/users/comfysage/following{/other_user}",
        "gists_url": "https://api.github.com/users/comfysage/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/comfysage",
        "id": 67917529,
        "login": "comfysage",
        "node_id": "MDQ6VXNlcjY3OTE3NTI5",
        "organizations_url": "https://api.github.com/users/comfysage/orgs",
        "received_events_url": "https://api.github.com/users/comfysage/received_events",
        "repos_url": "https://api.github.com/users/comfysage/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/comfysage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/comfysage/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/comfysage",
        "user_view_type": "public"
    }
}