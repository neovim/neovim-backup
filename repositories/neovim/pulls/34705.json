{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34705/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34705/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/34705"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/34705"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34705/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/34705"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/95162ca1176b881c40d6a6012a3692a705500558"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6150,
            "forks_count": 6150,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1963,
            "open_issues_count": 1963,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-06-30T23:58:06Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 330464,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 90708,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-07-01T02:27:30Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 90708,
            "watchers_count": 90708,
            "web_commit_signoff_required": false
        },
        "sha": "f7c939fa7af9744bcb6d79100a7e126f7e9c8f5c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Problem:\r\nThe table returned by `vim.system():wait()` after completition did not include the original executed command.\r\n\r\nSolution:\r\nPopulate `state.result.cmd` with `state.cmd` in `_on_exit()` so callers can read `job.cmd` field directly.\r\n\r\ncloses #34703 \r\n\r\n<!--\r\n  Thank you for contributing to Neovim!\r\n  If this is your first time, check out https://github.com/neovim/neovim/blob/master/CONTRIBUTING.md#pull-requests-prs\r\n  for our PR guidelines.\r\n-->\r\n",
    "closed_at": "2025-06-30T12:35:22Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I'd prefer to not do this. Needing to know the command is fairly niche and if required can be easily achieved by wrapping `vim.system`.\n\nLikewise any async function in the future should not store a reference to the function/request it represents.",
            "created_at": "2025-06-29T18:10:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3016939966",
            "id": 3016939966,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z0tm-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016939966/reactions"
            },
            "updated_at": "2025-06-29T18:10:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3016939966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Needing to know the command is fairly niche\r\n\r\nIt's pretty common when needing to log something. Would you be opposed to setting `__tostring` metamethod so that it reports the command ?\r\n\r\n> Likewise any async function in the future should not store a reference to the function/request it represents.\r\n\r\nWhat about a weak reference?",
            "created_at": "2025-06-30T09:46:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018499036",
            "id": 3018499036,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z6qPc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018499036/reactions"
            },
            "updated_at": "2025-06-30T09:47:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018499036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It's pretty common when needing to log something. \r\n\r\nBut is also not hard to keep a reference to the command. It seems like the primary usecase is for static commands like\r\n\r\n```lua\r\nvim.system({'my_command', 'arg'}):wait(function(obj)\r\n  print(obj.cmd)\r\nend)\r\n```\r\n\r\nWhen you could quite easily do this.\r\n\r\n```lua\r\nlocal cmd = {'my_command', 'arg'}\r\nvim.system(cmd):wait(function(obj)\r\n  print(cmd)\r\nend)\r\n\r\n-- or \r\n\r\nlocal handle = vim.system({'my_command', 'arg'}):wait(function(obj)\r\n  print(handle.cmd)\r\nend)\r\n\r\n```\r\n\r\nOften though, any command that's worth logging is usually built into an array to begin with.\r\n\r\n```lua\r\nlocal cmd = {'my_command'}\r\nif add_arg then\r\n   cmd[#cmd+1] = 'arg'\r\nend\r\n\r\nvim.system(cmd):wait(function(obj)\r\n  print(cmd)\r\nend)\r\n```\r\n\r\nAnd if you are going to log a command, you usually want to log it unconditionally before it starts. This is an absolute requirement for gitsigns as commands failing is not a common problem of bugs, but usually the processing of unexpected output that has propagated several commands back.\r\n\r\nAlso, if you are going to store `cmd`, you surely also want to store `opts` (and any other arguments) as well. If you carry this logic forward, you would want all async continuations to contain the full context. There may be some arguments for that, but I'd prefer not to do it, and require it to be opt-in:\r\n\r\n```lua\r\non_exit_with_context = ...\r\nlocal obj = vim.system(cmd, opts, function(result)\r\n   on_exit_with_context(obj, result)\r\nend)\r\n```\r\n\r\nFor general simplicity, continuations should only ever pass back the result, and context can be added to the handle holding the operation (`vim.SystemObj` in this instance). This is also how luv is structured, callbacks only ever receive results, and the handles can be used to get context (e.g. `timer:get_repeat()`, `process:get_pid()`).\r\n\r\n> What about a weak reference?\r\n\r\nWhat for though? There needs to be an actual problem this is needed to solve, it just comes across as: \"maybe it could be useful\".",
            "created_at": "2025-06-30T10:15:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018588144",
            "id": 3018588144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z6__w",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018588144/reactions"
            },
            "updated_at": "2025-06-30T10:15:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018588144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > It's pretty common when needing to log something.\r\n> \r\n> But is also not hard to keep a reference to the command\r\n\r\nIt's not hard but it is friction that results logs having less visibility because of the extra friction, in practice.\r\n\r\n> Also, if you are going to store `cmd`, you surely also want to store `opts`\r\n\r\nTechnically sure, but the `cmd` is a recognizable human-readable \"name\" for something that otherwise is opaque. If the choice is imperfect visibility vs no visibility, it is useful to have imperfect visibility.\r\n\r\nAre you opposed to a `__tostring` metamethod ?",
            "created_at": "2025-06-30T10:58:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018710388",
            "id": 3018710388,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z7d10",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018710388/reactions"
            },
            "updated_at": "2025-06-30T10:59:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018710388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It's not hard but it is friction that results logs having less visibility because of the extra friction, in practice.\r\n\r\nI think you are overweighting the specific use case you have in mind. If someone wants to log the command, this friction won't stop them.\r\n\r\n> Are you opposed to a __tostring metamethod ?\r\n\r\nOn `SystemCompleted`(?), yes, for the reasons I've outlined above. Could maybe be added to `SystemObj`. If `SystemCompleted` needs a `__tostring` metamethod it should be `stdout or stderr` so you can do `print(vim.system(...):wait())`\r\n",
            "created_at": "2025-06-30T11:14:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018757470",
            "id": 3018757470,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z7pVe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018757470/reactions"
            },
            "updated_at": "2025-06-30T11:14:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018757470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm grateful for your detailed replies, but I just reviewed them and I don't see why storing `cmd` is costly. What is the cost you are trying to avoid? It reduces friction and is useful. The fact that it doesn't cover every edge case isn't a reason not to provide it.",
            "created_at": "2025-06-30T11:35:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018815719",
            "id": 3018815719,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z73jn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018815719/reactions"
            },
            "updated_at": "2025-06-30T11:36:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018815719",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It's about providing a coherent API that follow consistent patterns. I've provided several low friction alternatives that are also more generally useful. I don't see how we can justify adding another slightly lower friction alternative, which is only lower friction in specific instances. I also worry that if we add this here, that will set a precedent for adding other fields in other places, and thus diverging from the patterns, increasing entropy, for the sake of tiny/niche instances of friction.\r\n\r\nIn a lot of issues, you are hyper focused on API surface area, and very specifically aim to minimise the amount of functions in `vim.*` and `vim.api.*`, even if that means the alternatives incur more friction. It is no different here. I want to be very explicit about how and where data is held, especially on async interfaces where the design space is large. I highly value being able to abide by strict patterns here, and any deviations from that should be strongly justified, or else it questions the general patterns.\r\n\r\nAfter months (years?) of working on this. The pattern I strongly want to establish consists of:\r\n- continuations pass results\r\n- handles (tasks) hold state (which can include input)",
            "created_at": "2025-06-30T12:02:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018890591",
            "id": 3018890591,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z8J1f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018890591/reactions"
            },
            "updated_at": "2025-06-30T12:02:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018890591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In a lot of issues, you are hyper focused on API surface area, and very specifically aim to minimise the amount of functions in `vim.*` and `vim.api.*`, even if that means the alternatives incur more friction. It is no different here.\r\n\r\nMy rationale in this case is that the field is readonly (quasi-immutable). Immutable fields are cheap if they aren't costly to provide in terms of implementation and potential future changes. \r\n\r\nEdit: https://github.com/neovim/neovim/issues/34703#issuecomment-3018992728 is an even stronger argument :)\r\n\r\n> I highly value being able to abide by strict patterns here, and any deviations from that should be strongly justified, or else it questions the general patterns.\r\n\r\nYes, fair enough. Let's skip this then.",
            "created_at": "2025-06-30T12:35:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/34705#issuecomment-3018986854",
            "id": 3018986854,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
            "node_id": "IC_kwDOAPphoM6z8hVm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018986854/reactions"
            },
            "updated_at": "2025-06-30T12:41:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3018986854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/34705/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/34705/commits",
    "created_at": "2025-06-29T15:19:50Z",
    "diff_url": "https://github.com/neovim/neovim/pull/34705.diff",
    "draft": false,
    "head": {
        "label": "tampueroc:feat-wait-cmd-field",
        "ref": "feat-wait-cmd-field",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/tampueroc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/tampueroc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/tampueroc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/tampueroc/neovim/branches{/branch}",
            "clone_url": "https://github.com/tampueroc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/tampueroc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/tampueroc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/tampueroc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/tampueroc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/tampueroc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/tampueroc/neovim/contributors",
            "created_at": "2025-05-01T16:36:34Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/tampueroc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/tampueroc/neovim/downloads",
            "events_url": "https://api.github.com/repos/tampueroc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/tampueroc/neovim/forks",
            "full_name": "tampueroc/neovim",
            "git_commits_url": "https://api.github.com/repos/tampueroc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/tampueroc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/tampueroc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/tampueroc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/tampueroc/neovim/hooks",
            "html_url": "https://github.com/tampueroc/neovim",
            "id": 976180439,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/tampueroc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/tampueroc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/tampueroc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/tampueroc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/tampueroc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/tampueroc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/tampueroc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/tampueroc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOOi9U1w",
            "notifications_url": "https://api.github.com/repos/tampueroc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
                "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
                "followers_url": "https://api.github.com/users/tampueroc/followers",
                "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
                "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tampueroc",
                "id": 46233260,
                "login": "tampueroc",
                "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
                "organizations_url": "https://api.github.com/users/tampueroc/orgs",
                "received_events_url": "https://api.github.com/users/tampueroc/received_events",
                "repos_url": "https://api.github.com/users/tampueroc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tampueroc",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/tampueroc/neovim/pulls{/number}",
            "pushed_at": "2025-06-30T22:11:56Z",
            "releases_url": "https://api.github.com/repos/tampueroc/neovim/releases{/id}",
            "size": 320793,
            "ssh_url": "git@github.com:tampueroc/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/tampueroc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/tampueroc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/tampueroc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/tampueroc/neovim/subscription",
            "svn_url": "https://github.com/tampueroc/neovim",
            "tags_url": "https://api.github.com/repos/tampueroc/neovim/tags",
            "teams_url": "https://api.github.com/repos/tampueroc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/tampueroc/neovim/git/trees{/sha}",
            "updated_at": "2025-06-29T17:44:11Z",
            "url": "https://api.github.com/repos/tampueroc/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "95162ca1176b881c40d6a6012a3692a705500558",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
            "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
            "followers_url": "https://api.github.com/users/tampueroc/followers",
            "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
            "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/tampueroc",
            "id": 46233260,
            "login": "tampueroc",
            "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
            "organizations_url": "https://api.github.com/users/tampueroc/orgs",
            "received_events_url": "https://api.github.com/users/tampueroc/received_events",
            "repos_url": "https://api.github.com/users/tampueroc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/tampueroc",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/34705",
    "id": 2627031130,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/34705",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "OS resources, pipes, streams",
            "id": 713599092,
            "name": "system",
            "node_id": "MDU6TGFiZWw3MTM1OTkwOTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/system"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e951b91a52fe75efc42a262634ce1ceab13e7074",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6clVBa",
    "number": 34705,
    "patch_url": "https://github.com/neovim/neovim/pull/34705.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/34705/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/95162ca1176b881c40d6a6012a3692a705500558",
    "title": "feat(system): add `cmd` field in wait() result",
    "updated_at": "2025-06-30T22:11:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/34705",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/46233260?v=4",
        "events_url": "https://api.github.com/users/tampueroc/events{/privacy}",
        "followers_url": "https://api.github.com/users/tampueroc/followers",
        "following_url": "https://api.github.com/users/tampueroc/following{/other_user}",
        "gists_url": "https://api.github.com/users/tampueroc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tampueroc",
        "id": 46233260,
        "login": "tampueroc",
        "node_id": "MDQ6VXNlcjQ2MjMzMjYw",
        "organizations_url": "https://api.github.com/users/tampueroc/orgs",
        "received_events_url": "https://api.github.com/users/tampueroc/received_events",
        "repos_url": "https://api.github.com/users/tampueroc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tampueroc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tampueroc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tampueroc",
        "user_view_type": "public"
    }
}