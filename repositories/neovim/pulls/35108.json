{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35108/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35108/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35108"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35108"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35108/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/107a39ee13082094fc5bdd9feafaf08b7f98c190"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6225,
            "forks_count": 6225,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1969,
            "open_issues_count": 1969,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-04T05:24:53Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 335555,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91672,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-05T02:46:52Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91672,
            "watchers_count": 91672,
            "web_commit_signoff_required": false
        },
        "sha": "2ef48fc65ccf9fe55426ef7e3efa115a210abed5",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "**Problem**\r\n\r\nUsages of binary search are pretty common. We added `vim.list.unique` a while ago, so having a function like `vim.list.bisect` should be appropriate too.\r\n\r\nThis is also for reducing duplicated code in #30841.\r\n\r\n**Solution**\r\n\r\nAdd `lower_bound` and `upper_bound` respectively.",
    "closed_at": "2025-08-03T14:45:50Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2242012338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242012338"
                }
            },
            "author_association": "MEMBER",
            "body": "prefer `bisect_left/right` 😮‍💨",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-30T09:09:02Z",
            "diff_hunk": "@@ -2101,13 +2101,48 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.lower_bound({t}, {val}, {opts})              *vim.list.lower_bound()*",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2242012338",
            "id": 2242012338,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FomSy",
            "original_commit_id": "dae179b29a15690db3d4c77846e4a014caca58b6",
            "original_line": 2104,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3070548644,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242012338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-30T09:09:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242012338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2242012852"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242012852"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991  I'd like to ask if you think `vim.func.memoize` is suitable for this purpose",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-30T09:09:15Z",
            "diff_hunk": "@@ -350,12 +350,21 @@ end\n \n vim.list = {}\n \n+---TODO: memoize?\n+---@generic T\n+---@param v T\n+---@param key? fun(v: T): any\n+---@return any\n+local function key_fn(v, key)\n+  return key and key(v) or v\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2242012852",
            "id": 2242012852,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Foma0",
            "original_commit_id": "dae179b29a15690db3d4c77846e4a014caca58b6",
            "original_line": 360,
            "original_position": 11,
            "original_start_line": 353,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3070549293,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242012852/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-30T09:09:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242012852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2242022551"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242022551"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm also a bit hesitant about whether Python-like naming would be better. Also, perhaps `bisect`(lower bound) and `bisect_right`(upper bound) would be more concise? It's a bit difficult to decide...",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-30T09:13:16Z",
            "diff_hunk": "@@ -2101,13 +2101,48 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.lower_bound({t}, {val}, {opts})              *vim.list.lower_bound()*",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2242022551",
            "id": 2242022551,
            "in_reply_to_id": 2242012338,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FooyX",
            "original_commit_id": "dae179b29a15690db3d4c77846e4a014caca58b6",
            "original_line": 2104,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3070561631,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242022551/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-30T09:13:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242022551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2242035276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242035276"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  local val_key = key_fn(val, key)\r\n  \r\n  while lo < hi do\r\n    local mid = bit.rshift(lo + hi, 1)  -- Equivalent to floor((lo + hi) / 2).\r\n    if key_fn(t[mid], key) < val_key then\r\n```",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-30T09:18:22Z",
            "diff_hunk": "@@ -404,6 +410,112 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+\n+--- Do a lower-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the first occurrence of {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local i = vim.list.lower_bound(t, 2)\n+--- -- i is now 2\n+---\n+--- i = vim.list.lower_bound(t, 4)\n+--- -- i is now 7\n+--- ```\n+---\n+--- or you can use it together with |vim.list.upper_bound()|\n+--- to obtain the range of occurrences.\n+---@see |vim.list.upper_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.lower_bound(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\n+    if key_fn(t[mid], opts.key) < key_fn(val, opts.key) then",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2242035276",
            "id": 2242035276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6For5M",
            "original_commit_id": "dae179b29a15690db3d4c77846e4a014caca58b6",
            "original_line": 461,
            "original_position": 99,
            "original_start_line": 458,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3070580352,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242035276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-30T09:19:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242035276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2242037983"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242037983"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  local val_key = key_fn(val, key)\r\n  \r\n  while lo < hi do\r\n    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\r\n    if val_key < key_fn(t[mid], key) then\r\n```",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-30T09:19:30Z",
            "diff_hunk": "@@ -404,6 +410,112 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+\n+--- Do a lower-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the first occurrence of {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local i = vim.list.lower_bound(t, 2)\n+--- -- i is now 2\n+---\n+--- i = vim.list.lower_bound(t, 4)\n+--- -- i is now 7\n+--- ```\n+---\n+--- or you can use it together with |vim.list.upper_bound()|\n+--- to obtain the range of occurrences.\n+---@see |vim.list.upper_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.lower_bound(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\n+    if key_fn(t[mid], opts.key) < key_fn(val, opts.key) then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+\n+  return lo\n+end\n+\n+--- Do a upper-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the index in {t} after the last occurrence of the given {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local start = vim.list.lower_bound(t, 3)\n+--- -- start is now 4\n+--- local end = vim.list.upper_bound(t, 2)\n+--- -- end is now 7\n+---\n+--- -- 3 is in [start, end)\n+--- for i = start, end - 1 do\n+---   print(t[i])\n+--- end\n+--- -- { 3, 3, 3 }\n+--- ```\n+---\n+--- To find the first occurrence, use |vim.list.lower_bound()|\n+---@see |vim.list.lower_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.upper_bound(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\n+    if key_fn(val, opts.key) < key_fn(t[mid], opts.key) then",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2242037983",
            "id": 2242037983,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Fosjf",
            "original_commit_id": "dae179b29a15690db3d4c77846e4a014caca58b6",
            "original_line": 509,
            "original_position": 147,
            "original_start_line": 506,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3070580352,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242037983/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-30T09:19:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2242037983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2244266969"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244266969"
                }
            },
            "author_association": "MEMBER",
            "body": "thanks for creating list_spec 👍 \n```suggestion\n-- Test suite for vim.list\n```",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-31T03:31:00Z",
            "diff_hunk": "@@ -0,0 +1,65 @@\n+-- Test suite for testing interactions with API bindings",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2244266969",
            "id": 2244266969,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FxMvZ",
            "original_commit_id": "84c8e5761b1c05229dc664d75ef7a36818a6c03a",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "test/functional/lua/list_spec.lua",
            "position": null,
            "pull_request_review_id": 3073873987,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244266969/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T03:31:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244266969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2244269170"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244269170"
                }
            },
            "author_association": "MEMBER",
            "body": "Seems like the interface can be ('upper'/'lower' are just placeholders, their names can be debated):\n\n    vim.list.bisect(dir: 'upper'|'lower', ...)\n\nThe parameters are the same between both. The implementations can be separate local functions if we want, but one \"bisect\" function seems discoverable.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-31T03:33:45Z",
            "diff_hunk": "@@ -404,6 +411,114 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+\n+--- Do a lower-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the first occurrence of {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local i = vim.list.lower_bound(t, 2)\n+--- -- i is now 2\n+---\n+--- i = vim.list.lower_bound(t, 4)\n+--- -- i is now 7\n+--- ```\n+---\n+--- or you can use it together with |vim.list.upper_bound()|\n+--- to obtain the range of occurrences.\n+---@see |vim.list.upper_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.lower_bound(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+\n+  local val_key = key_fn(val, opts.key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\n+    if key_fn(t[mid], opts.key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+\n+  return lo\n+end\n+\n+--- Do a upper-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the index in {t} after the last occurrence of the given {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local start = vim.list.lower_bound(t, 3)\n+--- -- start is now 4\n+--- local end = vim.list.upper_bound(t, 2)\n+--- -- end is now 7\n+---\n+--- -- 3 is in [start, end)\n+--- for i = start, end - 1 do\n+---   print(t[i])\n+--- end\n+--- -- { 3, 3, 3 }\n+--- ```\n+---\n+--- To find the first occurrence, use |vim.list.lower_bound()|\n+---@see |vim.list.lower_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.upper_bound(t, val, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2244269170",
            "id": 2244269170,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FxNRy",
            "original_commit_id": "84c8e5761b1c05229dc664d75ef7a36818a6c03a",
            "original_line": 501,
            "original_position": 146,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3073876719,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244269170/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T03:33:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244269170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2244298529"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244298529"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In this way, I tend to put this parameter into opts while it defaults to lower, because in most cases we use lower instead of upper, because upper returns not the search target but the first one greater than the search target.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-31T04:05:00Z",
            "diff_hunk": "@@ -404,6 +411,114 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+\n+--- Do a lower-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the first occurrence of {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local i = vim.list.lower_bound(t, 2)\n+--- -- i is now 2\n+---\n+--- i = vim.list.lower_bound(t, 4)\n+--- -- i is now 7\n+--- ```\n+---\n+--- or you can use it together with |vim.list.upper_bound()|\n+--- to obtain the range of occurrences.\n+---@see |vim.list.upper_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.lower_bound(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+\n+  local val_key = key_fn(val, opts.key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\n+    if key_fn(t[mid], opts.key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+\n+  return lo\n+end\n+\n+--- Do a upper-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the index in {t} after the last occurrence of the given {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local start = vim.list.lower_bound(t, 3)\n+--- -- start is now 4\n+--- local end = vim.list.upper_bound(t, 2)\n+--- -- end is now 7\n+---\n+--- -- 3 is in [start, end)\n+--- for i = start, end - 1 do\n+---   print(t[i])\n+--- end\n+--- -- { 3, 3, 3 }\n+--- ```\n+---\n+--- To find the first occurrence, use |vim.list.lower_bound()|\n+---@see |vim.list.lower_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.upper_bound(t, val, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2244298529",
            "id": 2244298529,
            "in_reply_to_id": 2244269170,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FxUch",
            "original_commit_id": "84c8e5761b1c05229dc664d75ef7a36818a6c03a",
            "original_line": 501,
            "original_position": 146,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3073916261,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244298529/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T04:05:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244298529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2244304923"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244304923"
                }
            },
            "author_association": "MEMBER",
            "body": "> put this parameter into opts while it defaults to lower, because in most cases we use lower instead of upper,\r\n\r\nmakes sense!",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-07-31T04:12:23Z",
            "diff_hunk": "@@ -404,6 +411,114 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+\n+--- Do a lower-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the first occurrence of {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local i = vim.list.lower_bound(t, 2)\n+--- -- i is now 2\n+---\n+--- i = vim.list.lower_bound(t, 4)\n+--- -- i is now 7\n+--- ```\n+---\n+--- or you can use it together with |vim.list.upper_bound()|\n+--- to obtain the range of occurrences.\n+---@see |vim.list.upper_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.lower_bound(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+\n+  local val_key = key_fn(val, opts.key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2).\n+    if key_fn(t[mid], opts.key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+\n+  return lo\n+end\n+\n+--- Do a upper-bound binary search of the list in the half-open range [lo, hi),\n+--- returns the index in {t} after the last occurrence of the given {val}.\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local start = vim.list.lower_bound(t, 3)\n+--- -- start is now 4\n+--- local end = vim.list.upper_bound(t, 2)\n+--- -- end is now 7\n+---\n+--- -- 3 is in [start, end)\n+--- for i = start, end - 1 do\n+---   print(t[i])\n+--- end\n+--- -- { 3, 3, 3 }\n+--- ```\n+---\n+--- To find the first occurrence, use |vim.list.lower_bound()|\n+---@see |vim.list.lower_bound()|\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+function vim.list.upper_bound(t, val, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2244304923",
            "id": 2244304923,
            "in_reply_to_id": 2244269170,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FxWAb",
            "original_commit_id": "84c8e5761b1c05229dc664d75ef7a36818a6c03a",
            "original_line": 501,
            "original_position": 146,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3073923929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244304923/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T04:12:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2244304923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2246790370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246790370"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n    Returns the index of the first element that is not less than the {val} by\n```",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T03:11:33Z",
            "diff_hunk": "@@ -2101,13 +2101,53 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first elemen that is not less than the {val} by",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2246790370",
            "id": 2246790370,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F60zi",
            "original_commit_id": "9575776008894f08257e25c465094d4b0581cd76",
            "original_line": 2106,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3077492631,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246790370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T03:11:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246790370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2246792190"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246792190"
                }
            },
            "author_association": "MEMBER",
            "body": "missing `@returns` ?",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T03:13:29Z",
            "diff_hunk": "@@ -2101,13 +2101,53 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first elemen that is not less than the {val} by\n+    default (ie: lower bound). Use {bound} to specify the search variant\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local start = vim.list.bisect(t, 3)\n+        -- start is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local end = vim.list.bisect(t, 2, { bound = 'upper' })\n+        -- end is now 7\n+\n+        -- 3 is in [start, end)\n+        for i = start, end - 1 do\n+          print(t[i])\n+        end\n+        -- { 3, 3, 3 }\n+<\n+\n+    Parameters: ~\n+      • {t}     (`any[]`) A comparable list.\n+      • {val}   (`any`) The value to search.\n+      • {opts}  (`table?`) A table with the following fields:\n+                • {lo}? (`integer`, default: `1`) Start index of the list.\n+                • {hi}? (`integer`, default: `#t + 1`) End index of the list,\n+                  exclusive.\n+                • {key}? (`fun(val: any): any`) Optional, compare the return\n+                  value instead of the {val} itself if provided.\n+                • {bound}? (`'lower'|'upper'`, default: `'lower'`) Specifies\n+                  the search variant.\n+                  • \"lower\": returns the index of the first element that is\n+                    not less than the given value.\n+                  • \"upper\": returns the index of the first element that is\n+                    greater than the given value.",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2246792190",
            "id": 2246792190,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F61P-",
            "original_commit_id": "9575776008894f08257e25c465094d4b0581cd76",
            "original_line": 2146,
            "original_position": 42,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3077495802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246792190/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T03:13:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246792190",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2246796895"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246796895"
                }
            },
            "author_association": "MEMBER",
            "body": "non-blocker: A very useful convention from python is to also accept a string key. So this would become:\n\n    local idx = vim.list.bisect(highlights, { end_line = row }, { key = 'end_line' })",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T03:19:01Z",
            "diff_hunk": "@@ -761,7 +739,11 @@ function M.get_at_pos(bufnr, row, col)\n   for client_id, client in pairs(highlighter.client_state) do\n     local highlights = client.current_result.highlights\n     if highlights then\n-      local idx = lower_bound(highlights, row, 1, #highlights + 1)\n+      local idx = vim.list.bisect(highlights, { end_line = row }, {\n+        key = function(highlight)\n+          return highlight.end_line\n+        end,\n+      })",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2246796895",
            "id": 2246796895,
            "line": 746,
            "node_id": "PRRC_kwDOAPphoM6F62Zf",
            "original_commit_id": "9575776008894f08257e25c465094d4b0581cd76",
            "original_line": 746,
            "original_position": 69,
            "original_start_line": 742,
            "path": "runtime/lua/vim/lsp/semantic_tokens.lua",
            "position": 69,
            "pull_request_review_id": 3077505019,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246796895/reactions"
            },
            "side": "RIGHT",
            "start_line": 742,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-01T03:19:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246796895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2247325696"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247325696"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Leave as a todo for now, as there may be other improvements for the `key`, like memoize,  or we can define it as a convention with doc. Explore them later.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T08:33:37Z",
            "diff_hunk": "@@ -761,7 +739,11 @@ function M.get_at_pos(bufnr, row, col)\n   for client_id, client in pairs(highlighter.client_state) do\n     local highlights = client.current_result.highlights\n     if highlights then\n-      local idx = lower_bound(highlights, row, 1, #highlights + 1)\n+      local idx = vim.list.bisect(highlights, { end_line = row }, {\n+        key = function(highlight)\n+          return highlight.end_line\n+        end,\n+      })",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2247325696",
            "id": 2247325696,
            "in_reply_to_id": 2246796895,
            "line": 746,
            "node_id": "PRRC_kwDOAPphoM6F83gA",
            "original_commit_id": "9575776008894f08257e25c465094d4b0581cd76",
            "original_line": 746,
            "original_position": 69,
            "original_start_line": 742,
            "path": "runtime/lua/vim/lsp/semantic_tokens.lua",
            "position": 69,
            "pull_request_review_id": 3078248282,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247325696/reactions"
            },
            "side": "RIGHT",
            "start_line": 742,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-08-01T08:33:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247325696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2247433780"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247433780"
                }
            },
            "author_association": "MEMBER",
            "body": "This isn't legal\n```suggestion\n        local last = vim.list.bisect(t, 2, { bound = 'upper' })\n```",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T09:23:15Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (ie: lower bound). Use {bound} to specify the search variant\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local start = vim.list.bisect(t, 3)\n+        -- start is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local end = vim.list.bisect(t, 2, { bound = 'upper' })",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2247433780",
            "id": 2247433780,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F9R40",
            "original_commit_id": "780650679ccf684f185fc17eb1fcc07ae914618e",
            "original_line": 2118,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3078406135,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247433780/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T09:24:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247433780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2247435781"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247435781"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this correct. Isn't the result `3`? Or should the `val` argument be `3`?",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T09:24:13Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (ie: lower bound). Use {bound} to specify the search variant\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local start = vim.list.bisect(t, 3)\n+        -- start is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local end = vim.list.bisect(t, 2, { bound = 'upper' })",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2247435781",
            "id": 2247435781,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F9SYF",
            "original_commit_id": "780650679ccf684f185fc17eb1fcc07ae914618e",
            "original_line": 2118,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3078406135,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247435781/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T09:24:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247435781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2247473730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247473730"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, thanks for the correction.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T09:41:35Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (ie: lower bound). Use {bound} to specify the search variant\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local start = vim.list.bisect(t, 3)\n+        -- start is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local end = vim.list.bisect(t, 2, { bound = 'upper' })",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2247473730",
            "id": 2247473730,
            "in_reply_to_id": 2247435781,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F9bpC",
            "original_commit_id": "780650679ccf684f185fc17eb1fcc07ae914618e",
            "original_line": 2118,
            "original_position": 18,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3078462578,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247473730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T09:41:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2247473730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2248301036"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248301036"
                }
            },
            "author_association": "MEMBER",
            "body": "shouldn't this be 6?",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T15:45:03Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2248301036",
            "id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GAlns",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3079717341,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248301036/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T15:45:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248301036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2248305573"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248305573"
                }
            },
            "author_association": "MEMBER",
            "body": "Instead of a `key` function, wouldn't it make more sense to have a compare (`comp`) function, like the one you would pass to `table.sort()`?",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T15:47:16Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7\n+\n+        -- 3 is in [first, last)\n+        for i = first, last - 1 do\n+          print(t[i])\n+        end\n+        -- { 3, 3, 3 }\n+<\n+\n+    Parameters: ~\n+      • {t}     (`any[]`) A comparable list.\n+      • {val}   (`any`) The value to search.\n+      • {opts}  (`table?`) A table with the following fields:\n+                • {lo}? (`integer`, default: `1`) Start index of the list.\n+                • {hi}? (`integer`, default: `#t + 1`) End index of the list,\n+                  exclusive.\n+                • {key}? (`fun(val: any): any`) Optional, compare the return",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2248305573",
            "id": 2248305573,
            "line": 1798,
            "node_id": "PRRC_kwDOAPphoM6GAmul",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 1798,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 44,
            "pull_request_review_id": 3079724066,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248305573/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T15:47:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248305573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2248397781"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248397781"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is indeed 7, because the return value of upper is the index of the last `3` + 1. This is a specially chosen example, [4, 7) is a half-open range as mentioned below.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T16:32:17Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2248397781",
            "id": 2248397781,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GA9PV",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3079868540,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248397781/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T16:32:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248397781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2248416217"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248416217"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": " `table.sort()` using `comp` is outdated because `key` can be guaranteed to be called only once per element by memoizing the result (O(n)), but memoizing functions like `comp` will produce more results (O(n^2)). The purpose of this constraint is to prevent users from writing overly complex sort functions, which may not satisfy transitivity and will cause performance regressions.\r\n\r\nThe above idea is inspired by Python, which transitioned from the cmp convention to key in the 2.0 to 3.0 update. Another purpose for Python is that functions like `key` can ensure that sorting and comparison are handled in C, but we probably don't need such performance optimizations.\r\n\r\nFor binary search, the above point is not very important, so I keep it open. However, considering that `comp` has no obvious benefits and it can be defined through `__lt` or implemented through packaging(see [python doc](https://docs.python.org/3.10/howto/sorting.html#the-old-way-using-the-cmp-parameter)), I prefer to use `key`.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T16:42:56Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7\n+\n+        -- 3 is in [first, last)\n+        for i = first, last - 1 do\n+          print(t[i])\n+        end\n+        -- { 3, 3, 3 }\n+<\n+\n+    Parameters: ~\n+      • {t}     (`any[]`) A comparable list.\n+      • {val}   (`any`) The value to search.\n+      • {opts}  (`table?`) A table with the following fields:\n+                • {lo}? (`integer`, default: `1`) Start index of the list.\n+                • {hi}? (`integer`, default: `#t + 1`) End index of the list,\n+                  exclusive.\n+                • {key}? (`fun(val: any): any`) Optional, compare the return",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2248416217",
            "id": 2248416217,
            "in_reply_to_id": 2248305573,
            "line": 1798,
            "node_id": "PRRC_kwDOAPphoM6GBBvZ",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 1798,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 44,
            "pull_request_review_id": 3079897538,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248416217/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T16:42:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248416217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2248594860"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248594860"
                }
            },
            "author_association": "MEMBER",
            "body": "The `+1` feels quite random, you even have to undo this offset in the example.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-01T18:25:42Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2248594860",
            "id": 2248594860,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GBtWs",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3080172763,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248594860/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-01T18:25:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2248594860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249046670"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249046670"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is because Lua's contention seems to be `[i, j]` as a closed interval rather than a half-open, half-closed interval like Python's `[i, j)`.\r\n\r\nIf `upper_bound` returns the index of the last value, it will be a closed interval of `[first, last]`, but this means that `bisect` must rely on equality judgment (`__eq`) instead of only rely on comparison (`__lt`), which will bring more restrictions. For example, my original intention of adding this function was to perform search operations on `vim.Range` and `vim.Pos`. I planned to implement a comparison between `vim.Pos` and `vim.Range`, but it is not reasonable to implement an equality judgment.\r\n\r\nAnother benefit is that the return value of `upper_bound` can be used directly to insert the element.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-02T01:00:04Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249046670",
            "id": 2249046670,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GDbqO",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3080820181,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249046670/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-02T01:00:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249046670",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249164838"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249164838"
                }
            },
            "author_association": "MEMBER",
            "body": "> If upper_bound returns the index of the last value, it will be a closed interval of [first, last], but this means that bisect must rely on equality judgment (__eq) instead of only rely on comparison (__lt), which will bring more restrictions.\n\nWhy? Surely you can just undo the offset in the return.\n\n\n> Another benefit is that the return value of upper_bound can be used directly to insert the element.\n\nI'm not sure this is a benefit. If anything it further shows how unintuitive this is.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-02T08:09:41Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249164838",
            "id": 2249164838,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GD4gm",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3080957000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249164838/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-02T08:11:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249164838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249224160"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249224160"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If we just undo without equality judgement, then for a list like {1, 2, 4, 5}, when searching for the value 3(not exists), the return value will be 2, which is difficult to interpret as an upper bound. A more unintuitive example is, if the value we’re searching for is 6, then the lower bound returns 5, while the upper bound returns 4.\r\n\r\nIn most cases where we are only performing lookups, bound=lower should be used, this is also why it is the default. The existence of bound=upper only makes sense when we are looking for a literal upper bound.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-02T12:00:43Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249224160",
            "id": 2249224160,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GEG_g",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081014566,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249224160/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-02T12:05:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249224160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249332622"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249332622"
                }
            },
            "author_association": "MEMBER",
            "body": "This can be all figured out in the implementation. For the input of `1,2,3,4,5`, searching for val `2` should return the same result for both low and upper bounds.\n\nI suggest writing a bunch of tests and adjusting the implementation to the desired test result, instead of defining the behaviour around a specific implementation.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-02T17:37:11Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249332622",
            "id": 2249332622,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GEheO",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081164324,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249332622/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-02T17:37:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249332622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249469530"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249469530"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> This can be all figured out in the implementation. For the input of `1,2,3,4,5`, searching for val `2` should return the same result for both low and upper bounds.\r\n\r\nSuch an implementation would rely on `__eq` because it needs to determine whether the corresponding value is found before returning it, minus 1. Otherwise, if the element does not exist, the result it returns will be strange, even less than the return value of the lower bound, as I just said. This is a limitation of relying solely on `<` to implement binary search.\r\n\r\nIt's worth noting that the behavior of `upper_bound` provided by C++ and Python in their standard libraries is consistent with this one. I think there are potential pitfalls in using the same popular concept but defining different behaviors.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T00:23:41Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249469530",
            "id": 2249469530,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GFC5a",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081590468,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249469530/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T00:23:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249469530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249502519"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249502519"
                }
            },
            "author_association": "MEMBER",
            "body": "> If `upper_bound` returns the index of the last value, it will be a closed interval of `[first, last]`, but this means that `bisect` must rely on equality judgment (`__eq`) instead of only rely on comparison (`__lt`),\r\n> ...\r\n> It's worth noting that the behavior of `upper_bound` provided by C++ and Python in their standard libraries is consistent with this one.\r\n\r\nThat seems pretty reasonable. Plus \"lower\" is the common case, so we can document the quirks of the \"upper\" case. \r\n",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T03:11:23Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249502519",
            "id": 2249502519,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GFK83",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081621782,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249502519/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T03:12:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249502519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249510274"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249510274"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "After thinking it again, I think the issue might lie in the documentation. It could be described in the following way:\r\n\r\n- bisect: Search for a position in a sorted list where `val` can be inserted while keeping the list sorted.\r\n- lower bound: The first position where inserting `val` keeps the list sorted.\r\n- upper bound: The last position where inserting `val` keeps the list sorted.\r\n\r\nThis explanation also justifies why these two variants are named lower bound and upper bound, this is also how it’s explained in the C++ and Python documentation. We can then keep the current examples to demonstrate their common use cases. Do you think this approach would be better？",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T03:55:44Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249510274",
            "id": 2249510274,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GFM2C",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081629606,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249510274/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T03:59:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249510274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249527192"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249527192"
                }
            },
            "author_association": "MEMBER",
            "body": ">  bisect: Search for a position in a sorted list where `val` can be inserted while keeping the list sorted.\r\n\r\nThat's definitely unambiguous, concise, and clear 👍 ",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T05:09:07Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249527192",
            "id": 2249527192,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GFQ-Y",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081646235,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249527192/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T05:09:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249527192",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249623098"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249623098"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes that sounds much better.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T06:48:29Z",
            "diff_hunk": "@@ -2101,13 +2101,56 @@ vim.islist({t})                                                 *vim.islist()*\n     See also: ~\n       • |vim.isarray()|\n \n+vim.list.bisect({t}, {val}, {opts})                        *vim.list.bisect()*\n+    Do a binary search on the sorted list {t} in the half-open range [lo, hi).\n+    Returns the index of the first element that is not less than the {val} by\n+    default (i.e., lower bound). Use {bound} to specify the search variant.\n+\n+    Example: >lua\n+\n+        local t = { 1, 2, 2, 3, 3, 3 }\n+        local first = vim.list.bisect(t, 3)\n+        -- first is now 4\n+\n+        -- or you can use lower bound and upper bound together\n+        -- to obtain the range of occurrences of the element.\n+\n+        local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+        -- last is now 7",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249623098",
            "id": 2249623098,
            "in_reply_to_id": 2248301036,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GFoY6",
            "original_commit_id": "5a55c3ed51e47c4e0929b729067c27b2effa78b4",
            "original_line": 2119,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 3081785665,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249623098/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T06:48:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249623098",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249907547"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249907547"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't this be\n\n```suggestion\n    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n```\n",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T09:54:52Z",
            "diff_hunk": "@@ -404,6 +410,124 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+---\n+--- Specifies the search variant.\n+---   - \"lower\": returns the first position\n+---     where inserting {val} keeps the list sorted.\n+---   - \"upper\": returns the last position\n+---     where inserting {val} keeps the list sorted..\n+--- (default: `'lower'`)\n+---@field bound? 'lower' | 'upper'\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function lower_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi)\n+    if key_fn(t[mid], key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+  return lo\n+end\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function upper_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi)",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249907547",
            "id": 2249907547,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GGt1b",
            "original_commit_id": "fc083f15d73da97dd734d69d2b8230e9b1b4de1d",
            "original_line": 471,
            "original_position": 109,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3082105892,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249907547/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T09:55:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249907547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249910634"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249910634"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Thanks!",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T10:06:15Z",
            "diff_hunk": "@@ -404,6 +410,124 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+---\n+--- Specifies the search variant.\n+---   - \"lower\": returns the first position\n+---     where inserting {val} keeps the list sorted.\n+---   - \"upper\": returns the last position\n+---     where inserting {val} keeps the list sorted..\n+--- (default: `'lower'`)\n+---@field bound? 'lower' | 'upper'\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function lower_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi)\n+    if key_fn(t[mid], key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+  return lo\n+end\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function upper_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi)",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249910634",
            "id": 2249910634,
            "in_reply_to_id": 2249907547,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GGulq",
            "original_commit_id": "fc083f15d73da97dd734d69d2b8230e9b1b4de1d",
            "original_line": 471,
            "original_position": 109,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3082108971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249910634/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T10:06:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249910634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249920672"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249920672"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't you use `t[hi - 1]` here?",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T10:41:05Z",
            "diff_hunk": "@@ -404,6 +410,132 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+---\n+--- Specifies the search variant.\n+---   - \"lower\": returns the first position\n+---     where inserting {val} keeps the list sorted.\n+---   - \"upper\": returns the last position\n+---     where inserting {val} keeps the list sorted..\n+--- (default: `'lower'`)\n+---@field bound? 'lower' | 'upper'\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function lower_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n+    if key_fn(t[mid], key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+  return lo\n+end\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function upper_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n+    if val_key < key_fn(t[mid], key) then\n+      hi = mid\n+    else\n+      lo = mid + 1\n+    end\n+  end\n+  return lo\n+end\n+\n+--- Search for a position in a sorted list {t}\n+--- where {val} can be inserted while keeping the list sorted.\n+---\n+--- Use {bound} to determine whether to return the first or the last position,\n+--- defaults to \"lower\", i.e., the first position.\n+---\n+--- NOTE: Behavior is undefined on unsorted lists!\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local first = vim.list.bisect(t, 3)\n+--- -- `first` is `val`'s first index if found,\n+--- -- useful for existence checks.\n+--- print(t[first]) -- 3\n+---\n+--- local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+--- -- Note that `last` is 7, not 6,\n+--- -- this is suitable for insertion.\n+---\n+--- table.insert(t, last, 4)\n+--- -- t is now { 1, 2, 2, 3, 3, 3, 4 }\n+---\n+--- -- You can use lower bound and upper bound together\n+--- -- to obtain the range of occurrences of `val`.\n+---\n+--- -- 3 is in [first, last)\n+--- for i = first, last - 1 do\n+---   print(t[i]) -- { 3, 3, 3 }\n+--- end\n+--- ```\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer index serves as either the lower bound or the upper bound position.\n+function vim.list.bisect(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+  local key = opts.key\n+\n+  -- Lightweight check, will not catch every kind of invalid input.\n+  if key_fn(t[hi], key) < key_fn(t[lo], key) then",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249920672",
            "id": 2249920672,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GGxCg",
            "original_commit_id": "89c36970bc02f0a05f8dbf8c51343355213c4261",
            "original_line": 528,
            "original_position": 166,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3082118717,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249920672/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T10:41:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249920672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249921246"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249921246"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You're right, sorry I was careless.",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T10:43:03Z",
            "diff_hunk": "@@ -404,6 +410,132 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+---\n+--- Specifies the search variant.\n+---   - \"lower\": returns the first position\n+---     where inserting {val} keeps the list sorted.\n+---   - \"upper\": returns the last position\n+---     where inserting {val} keeps the list sorted..\n+--- (default: `'lower'`)\n+---@field bound? 'lower' | 'upper'\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function lower_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n+    if key_fn(t[mid], key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+  return lo\n+end\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function upper_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n+    if val_key < key_fn(t[mid], key) then\n+      hi = mid\n+    else\n+      lo = mid + 1\n+    end\n+  end\n+  return lo\n+end\n+\n+--- Search for a position in a sorted list {t}\n+--- where {val} can be inserted while keeping the list sorted.\n+---\n+--- Use {bound} to determine whether to return the first or the last position,\n+--- defaults to \"lower\", i.e., the first position.\n+---\n+--- NOTE: Behavior is undefined on unsorted lists!\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local first = vim.list.bisect(t, 3)\n+--- -- `first` is `val`'s first index if found,\n+--- -- useful for existence checks.\n+--- print(t[first]) -- 3\n+---\n+--- local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+--- -- Note that `last` is 7, not 6,\n+--- -- this is suitable for insertion.\n+---\n+--- table.insert(t, last, 4)\n+--- -- t is now { 1, 2, 2, 3, 3, 3, 4 }\n+---\n+--- -- You can use lower bound and upper bound together\n+--- -- to obtain the range of occurrences of `val`.\n+---\n+--- -- 3 is in [first, last)\n+--- for i = first, last - 1 do\n+---   print(t[i]) -- { 3, 3, 3 }\n+--- end\n+--- ```\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer index serves as either the lower bound or the upper bound position.\n+function vim.list.bisect(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+  local key = opts.key\n+\n+  -- Lightweight check, will not catch every kind of invalid input.\n+  if key_fn(t[hi], key) < key_fn(t[lo], key) then",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249921246",
            "id": 2249921246,
            "in_reply_to_id": 2249920672,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GGxLe",
            "original_commit_id": "89c36970bc02f0a05f8dbf8c51343355213c4261",
            "original_line": 528,
            "original_position": 166,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3082119266,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249921246/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T10:43:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249921246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35108#discussion_r2249933076"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35108"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249933076"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n    error('bisect operation on an unsorted list is undefined', 2)\n```\n",
            "commit_id": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
            "created_at": "2025-08-03T11:21:33Z",
            "diff_hunk": "@@ -404,6 +410,132 @@ function vim.list.unique(t, key)\n   return t\n end\n \n+---@class vim.list.bisect.Opts\n+---@inlinedoc\n+---\n+--- Start index of the list.\n+--- (default: `1`)\n+---@field lo? integer\n+---\n+--- End index of the list, exclusive.\n+--- (default: `#t + 1`)\n+---@field hi? integer\n+---\n+--- Optional, compare the return value instead of the {val} itself if provided.\n+---@field key? fun(val: any): any\n+---\n+--- Specifies the search variant.\n+---   - \"lower\": returns the first position\n+---     where inserting {val} keeps the list sorted.\n+---   - \"upper\": returns the last position\n+---     where inserting {val} keeps the list sorted..\n+--- (default: `'lower'`)\n+---@field bound? 'lower' | 'upper'\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` < {val} for all j < i,\n+---                and `t[j]` >= {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function lower_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n+    if key_fn(t[mid], key) < val_key then\n+      lo = mid + 1\n+    else\n+      hi = mid\n+    end\n+  end\n+  return lo\n+end\n+\n+---@generic T\n+---@param t T[]\n+---@param val T\n+---@param key? fun(val: any): any\n+---@param lo integer\n+---@param hi integer\n+---@return integer i in range such that `t[j]` <= {val} for all j < i,\n+---                and `t[j]` > {val} for all j >= i,\n+---                or return {hi} if no such index is found.\n+local function upper_bound(t, val, lo, hi, key)\n+  local bit = require('bit') -- Load bitop on demand\n+  local val_key = key_fn(val, key)\n+  while lo < hi do\n+    local mid = bit.rshift(lo + hi, 1) -- Equivalent to floor((lo + hi) / 2)\n+    if val_key < key_fn(t[mid], key) then\n+      hi = mid\n+    else\n+      lo = mid + 1\n+    end\n+  end\n+  return lo\n+end\n+\n+--- Search for a position in a sorted list {t}\n+--- where {val} can be inserted while keeping the list sorted.\n+---\n+--- Use {bound} to determine whether to return the first or the last position,\n+--- defaults to \"lower\", i.e., the first position.\n+---\n+--- NOTE: Behavior is undefined on unsorted lists!\n+---\n+--- Example:\n+--- ```lua\n+---\n+--- local t = { 1, 2, 2, 3, 3, 3 }\n+--- local first = vim.list.bisect(t, 3)\n+--- -- `first` is `val`'s first index if found,\n+--- -- useful for existence checks.\n+--- print(t[first]) -- 3\n+---\n+--- local last = vim.list.bisect(t, 3, { bound = 'upper' })\n+--- -- Note that `last` is 7, not 6,\n+--- -- this is suitable for insertion.\n+---\n+--- table.insert(t, last, 4)\n+--- -- t is now { 1, 2, 2, 3, 3, 3, 4 }\n+---\n+--- -- You can use lower bound and upper bound together\n+--- -- to obtain the range of occurrences of `val`.\n+---\n+--- -- 3 is in [first, last)\n+--- for i = first, last - 1 do\n+---   print(t[i]) -- { 3, 3, 3 }\n+--- end\n+--- ```\n+---@generic T\n+---@param t T[] A comparable list.\n+---@param val T The value to search.\n+---@param opts? vim.list.bisect.Opts\n+---@return integer index serves as either the lower bound or the upper bound position.\n+function vim.list.bisect(t, val, opts)\n+  vim.validate('t', t, 'table')\n+  vim.validate('opts', opts, 'table', true)\n+\n+  opts = opts or {}\n+  local lo = opts.lo or 1\n+  local hi = opts.hi or #t + 1\n+  local key = opts.key\n+\n+  -- Lightweight check, will not catch every kind of invalid input.\n+  if key_fn(t[hi - 1], key) < key_fn(t[lo], key) then\n+    error('bisect operation on an unsorted list is undefined')",
            "html_url": "https://github.com/neovim/neovim/pull/35108#discussion_r2249933076",
            "id": 2249933076,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6GG0EU",
            "original_commit_id": "6bdbe9d0d27e5530420e7000ed58e999bfc8a791",
            "original_line": 529,
            "original_position": 167,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 3082131618,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249933076/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-08-03T11:21:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2249933076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "It seems that `shared.lua` cannot `require\"bit\"` in the PUC-Lua build. Is this expected?\r\n\r\nEdit: load it inside the functions.",
            "created_at": "2025-08-01T08:55:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3143784251",
            "id": 3143784251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67Ylc7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3143784251/reactions"
            },
            "updated_at": "2025-08-01T12:50:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3143784251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "rebasing will fix oldtest ci.\r\n\r\nThe interface looks great. There is an unresolved behavior question ,  https://github.com/neovim/neovim/pull/35108#discussion_r2249502519 , if it's really critical we can do a followup/ ",
            "created_at": "2025-08-03T03:14:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3146941942",
            "id": 3146941942,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67koX2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146941942/reactions"
            },
            "updated_at": "2025-08-03T03:15:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146941942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Do we need to add any checks/tests for inputs with unsorted lists? Would the behaviour be completely undefined or can we detect and error if we do an operation that indicates the list isn't properly sorted?",
            "created_at": "2025-08-03T06:51:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3147595578",
            "id": 3147595578,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67nH86",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3147595578/reactions"
            },
            "updated_at": "2025-08-03T06:51:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3147595578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Binary search is extremely fast, with a time complexity of *O(log n)*. However, any check for whether a list is sorted requires at least *O(n)* time complexity, because every element in the list must be accessed at least once. This check would become a new bottleneck, degrading overall performance, unless the check is unreliable (only checks part of the list). So yes, the behavior is completely undefined, and I think it is worth it for performance.\r\n\r\nHowever, I could provide a separate *O(n)* function for checking if a list is sorted. While I'm not enthusiastic about adding this feature, it does have some benefits:\r\n\r\n* Some external data sources (e.g., from LSP) are already sorted. Sorting them again would incur *O(n log n)* time complexity. Having such a function helps avoid unnecessary sorting, and the *O(n)* check won’t be the performance bottleneck for any kind of sorting.\r\n* Lua’s `table.sort` uses quicksort. I'm not sure which version is used, but if it’s the classic version that most people write, then its performance degrades to *O(n²)* when the list is already sorted. This check can help prevent such a scenario.",
            "created_at": "2025-08-03T08:01:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148171037",
            "id": 3148171037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67pUcd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148171037/reactions"
            },
            "updated_at": "2025-08-03T08:01:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148171037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I didn't mean we need to ensure that the whole list must be sorted, just any check we can do as the search is performed that is low cost.\n\nIf not, is there any way we can define the behaviour for an unsorted list or is it strictly undefined?",
            "created_at": "2025-08-03T09:52:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148306964",
            "id": 3148306964,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67p1oU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148306964/reactions"
            },
            "updated_at": "2025-08-03T09:55:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148306964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Currently, this is strictly undefined. I personally prefer not to add this kind of error reporting because it is inaccurate, as relying on this behavior may cause users to mistake input that does not report an error as valid.",
            "created_at": "2025-08-03T10:13:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148318717",
            "id": 3148318717,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67p4f9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148318717/reactions"
            },
            "updated_at": "2025-08-03T10:13:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148318717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  I personally prefer not to add this kind of error reporting because it is inaccurate, as relying on this behavior may cause users to mistake input that does not report an error as valid.\n\nI think that is *far less* of a risk than errors silently propagating because of accidental bad input (see [here](https://medium.com/@christian.ppl/introduction-to-the-fail-fast-principle-in-software-development-865ccab28979)). Anyone that relies on error reporting with _this_ function to determine bad input will have much larger problems to deal with.\n\nIf the behaviour is strictly undefined, then we are completely allowed to, and should, error when the operation iterates over values that break the contract, even if it's not guaranteed to for all bad inputs.",
            "created_at": "2025-08-03T10:18:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148321187",
            "id": 3148321187,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67p5Gj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148321187/reactions"
            },
            "updated_at": "2025-08-03T10:25:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148321187",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I added a lightweight check that should cover quite a few cases.",
            "created_at": "2025-08-03T10:32:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148327679",
            "id": 3148327679,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67p6r_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148327679/reactions"
            },
            "updated_at": "2025-08-03T10:32:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148327679",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "ci failing",
            "created_at": "2025-08-03T13:37:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148430182",
            "id": 3148430182,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67qTtm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148430182/reactions"
            },
            "updated_at": "2025-08-03T13:37:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148430182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The check above is indeed effective, and it allowed me to discover a bug in semantic tokens. For a very short period of time, it will output an incorrect result. Note the `end_line` in the following error:\r\n\r\n```\r\nscreen:expect([[\r\n  {6:-- comment}                                                                      |\r\n  local {7:a} = 1                                                                     |\r\n  {2:b} = \"as\"                                                                        |\r\n  {1:~                                                                               }|*54\r\n  {12:                                                                                }|\r\n  {13:Decoration provider \"win\" (ns=nvim.lsp.semantic_tokens):}                        |\r\n  {13:Lua: vim/shared.lua:0: { {}                                                      |\r\n  {13:    end_col = 0,}                                                                |\r\n  {13:    end_line = 9,}                                                               |\r\n  {13:    line = 0,}                                                                   |\r\n  {13:    marked = false,}                                                             |\r\n  {13:    modifiers = {},}                                                             |\r\n  {13:    start_col = 0,}                                                              |\r\n  {13:    type = \"comment\"}                                                            |\r\n  {13:  }, {}                                                                          |\r\n  {13:    end_col = 0,}                                                                |\r\n  {13:    end_line = 7,}                                                               |\r\n  {13:    line = 1,}                                                                   |\r\n  {13:    marked = false,}                                                             |\r\n  {13:    modifiers = {}                                                               |\r\n  {13:      declaration = true}                                                        |\r\n  {13:    },}                                                                          |\r\n  {13:    start_col = 0,}                                                              |\r\n  {13:    type = \"variable\"}                                                           |\r\n  {13:  }, {}                                                                          |\r\n  {13:    end_col = 0,}                                                                |\r\n  {13:    end_line = 2,}                                                               |\r\n  {13:    line = 2,}                                                                   |\r\n  {13:    marked = false,}                                                             |\r\n  {13:    modifiers = {}                                                               |\r\n  {13:      static = true}                                                             |\r\n  {13:    },}                                                                          |\r\n  {13:    start_col = 0,}                                                              |\r\n  {13:    type = \"variable\"}                                                           |\r\n  {13:  } }}                                                                           |\r\n  {13:stack traceback:}                                                                |\r\n  {13:        [C]: in function 'error'}                                                |\r\n  {13:        vim/shared.lua: in function 'bisect'}                                    |\r\n  {13:        ...fseed/neovim/src/runtime/lua/vim/lsp/semantic_tokens.lua:459: in func}|\r\n  {13:tion 'on_win'}                                                                   |\r\n  {13:        ...fseed/neovim/src/runtime/lua/vim/lsp/semantic_tokens.lua:855: in func}|\r\n  {13:tion <...fseed/neovim/src/runtime/lua/vim/lsp/semantic_tokens.lua:852>}          |\r\n  {13:        [builtin#36]: at 0x55f69e722da0}                                         |\r\n  {13:        ...fseed/neovim/src/runtime/lua/vim/lsp/semantic_tokens.lua:277: in func}|\r\n  {13:tion 'handler'}                                                                  |\r\n  {13:        /home/ofseed/neovim/src/runtime/lua/vim/ls}                              |\r\n  {4:Press ENTER or type command to continue}^                                         |\r\n]])\r\n```\r\n\r\nThe expected values here are as follows, note the `end_col`:\r\n\r\n```\r\n        expected = {\r\n          {\r\n            line = 0,\r\n            end_line = 0,\r\n            modifiers = {},\r\n            start_col = 0,\r\n            end_col = 10,\r\n            type = 'comment', -- comment\r\n            marked = true,\r\n          },\r\n          {\r\n            line = 1,\r\n            end_line = 1,\r\n            modifiers = { declaration = true }, -- a\r\n            start_col = 6,\r\n            end_col = 7,\r\n            type = 'variable',\r\n            marked = true,\r\n          },\r\n          {\r\n            line = 2,\r\n            end_line = 2,\r\n            modifiers = { static = true }, -- b (global)\r\n            start_col = 0,\r\n            end_col = 1,\r\n            type = 'variable',\r\n            marked = true,\r\n          },\r\n        },\r\n```\r\n\r\nThe above results indicate that in one of the initial calculations of semantic_tokens, we mistakenly assigned the value of `end_col` to `end_line`. However, this error disappeared in subsequent calculations, so it was not reported by anyone. During the binary search, the value of `end_line` became `end_col`, causing the list to no longer be considered sorted.\r\n\r\nAlthough I wanted to fix this bug, I spent the entire night merely confirming the issue and still couldn’t pinpoint its root cause. I temporarily removed the above check; we can add it back after solving the bug in semantic tokens. I think this check will not block the merging of this PR.",
            "created_at": "2025-08-03T13:44:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/35108#issuecomment-3148433510",
            "id": 3148433510,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
            "node_id": "IC_kwDOAPphoM67qUhm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148433510/reactions"
            },
            "updated_at": "2025-08-03T13:44:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3148433510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35108/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35108/commits",
    "created_at": "2025-07-30T08:53:02Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35108.diff",
    "draft": false,
    "head": {
        "label": "ofseed:feat-bisect",
        "ref": "feat-bisect",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ofseed/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ofseed/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ofseed/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ofseed/neovim/branches{/branch}",
            "clone_url": "https://github.com/ofseed/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ofseed/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ofseed/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ofseed/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ofseed/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ofseed/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ofseed/neovim/contributors",
            "created_at": "2021-11-30T18:13:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ofseed/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ofseed/neovim/downloads",
            "events_url": "https://api.github.com/repos/ofseed/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ofseed/neovim/forks",
            "full_name": "ofseed/neovim",
            "git_commits_url": "https://api.github.com/repos/ofseed/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ofseed/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ofseed/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ofseed/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ofseed/neovim/hooks",
            "html_url": "https://github.com/ofseed/neovim",
            "id": 433537354,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ofseed/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ofseed/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ofseed/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ofseed/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ofseed/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ofseed/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ofseed/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ofseed/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGddBSg",
            "notifications_url": "https://api.github.com/repos/ofseed/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
                "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
                "followers_url": "https://api.github.com/users/ofseed/followers",
                "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
                "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ofseed",
                "id": 61115159,
                "login": "ofseed",
                "node_id": "MDQ6VXNlcjYxMTE1MTU5",
                "organizations_url": "https://api.github.com/users/ofseed/orgs",
                "received_events_url": "https://api.github.com/users/ofseed/received_events",
                "repos_url": "https://api.github.com/users/ofseed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ofseed",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ofseed/neovim/pulls{/number}",
            "pushed_at": "2025-08-04T06:51:17Z",
            "releases_url": "https://api.github.com/repos/ofseed/neovim/releases{/id}",
            "size": 326535,
            "ssh_url": "git@github.com:ofseed/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ofseed/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ofseed/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ofseed/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ofseed/neovim/subscription",
            "svn_url": "https://github.com/ofseed/neovim",
            "tags_url": "https://api.github.com/repos/ofseed/neovim/tags",
            "teams_url": "https://api.github.com/repos/ofseed/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ofseed/neovim/git/trees{/sha}",
            "updated_at": "2025-08-04T02:56:15Z",
            "url": "https://api.github.com/repos/ofseed/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "107a39ee13082094fc5bdd9feafaf08b7f98c190",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
            "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofseed/followers",
            "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofseed",
            "id": 61115159,
            "login": "ofseed",
            "node_id": "MDQ6VXNlcjYxMTE1MTU5",
            "organizations_url": "https://api.github.com/users/ofseed/orgs",
            "received_events_url": "https://api.github.com/users/ofseed/received_events",
            "repos_url": "https://api.github.com/users/ofseed/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofseed",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35108",
    "id": 2706391451,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35108",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "7ed8cbd095805b9e6079def91b13ec24ecec5348",
    "merged_at": "2025-08-03T14:45:50Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6hUEGb",
    "number": 35108,
    "patch_url": "https://github.com/neovim/neovim/pull/35108.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35108/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/107a39ee13082094fc5bdd9feafaf08b7f98c190",
    "title": "feat(lua): add `vim.list.bisect`",
    "updated_at": "2025-08-03T15:17:04Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35108",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/61115159?v=4",
        "events_url": "https://api.github.com/users/ofseed/events{/privacy}",
        "followers_url": "https://api.github.com/users/ofseed/followers",
        "following_url": "https://api.github.com/users/ofseed/following{/other_user}",
        "gists_url": "https://api.github.com/users/ofseed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ofseed",
        "id": 61115159,
        "login": "ofseed",
        "node_id": "MDQ6VXNlcjYxMTE1MTU5",
        "organizations_url": "https://api.github.com/users/ofseed/orgs",
        "received_events_url": "https://api.github.com/users/ofseed/received_events",
        "repos_url": "https://api.github.com/users/ofseed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ofseed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ofseed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ofseed",
        "user_view_type": "public"
    }
}