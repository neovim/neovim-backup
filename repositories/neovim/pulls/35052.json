{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35052/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35052/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/35052"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/35052"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35052/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6e2720090130f65e244a42a595a274dd5bad3d37"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6225,
            "forks_count": 6225,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1969,
            "open_issues_count": 1969,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-08-04T05:24:53Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 335555,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 91672,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-08-05T02:46:52Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 91672,
            "watchers_count": 91672,
            "web_commit_signoff_required": false
        },
        "sha": "1240d29f8fcf390bcd2cb2fd6e916c629364009a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Cover `vim.pack` with tests.\r\n\r\nResolve #34767\r\n\r\n---\r\n\r\nIt is currently only in the state to show and discuss the overall approach to testing. TL;DR: deliberately create Git repos with specific tested properties during test execution and use `file://...` as `src`. Ideally those repos should be created as infrequently as possible (i.e. not in `before_each()` and cleaned in `after_each()`), but I'd need some help with that.\r\n\r\ncc: @justinmk, @lewis6991",
    "closed_at": "2025-08-02T23:35:42Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2229552508"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2229552508"
                }
            },
            "author_association": "MEMBER",
            "body": "this can all just live in `test/functional/plugin/pack_spec.lua` , we don't need an entire `pack/` namespace for 1 plugin.",
            "commit_id": "729358ec98aa71763e8a9de92277f95cb439c46e",
            "created_at": "2025-07-24T20:52:40Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2229552508",
            "id": 2229552508,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM6E5EV8",
            "original_commit_id": "729358ec98aa71763e8a9de92277f95cb439c46e",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "test/functional/pack/testutil.lua",
            "position": 1,
            "pull_request_review_id": 3053259608,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2229552508/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2025-07-24T20:52:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2229552508",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2234069003"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234069003"
                }
            },
            "author_association": "MEMBER",
            "body": "Added a separate test for `vim.pack.add()` to be able to install from the Internet. As suggested [here](https://github.com/neovim/neovim/issues/34767#issuecomment-3036644145), this is done behind a special `TEST_INTEG` environment variable, which is enabled on CI. Seems to be working.",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-27T17:28:45Z",
            "diff_hunk": "@@ -1,40 +1,369 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local fn = n.fn\n+\n+local eq = t.eq\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+local exec_lua = n.exec_lua\n+\n+-- Helpers ====================================================================\n+-- Installed plugins ----------------------------------------------------------\n+\n+local function pack_get_dir()\n+  return vim.fs.joinpath(fn.stdpath('data'), 'site', 'pack', 'core', 'opt')\n+end\n+\n+local function pack_get_plug_path(plug_name)\n+  return vim.fs.joinpath(pack_get_dir(), plug_name)\n+end\n+\n+-- Test repos (to be installed) -----------------------------------------------\n+\n+local repos_dir = vim.fs.abspath('test/functional/lua/pack-test-repos')\n+\n+--- Map from repo name to its proper `src` used in plugin spec\n+--- @type table<string,string>\n+local repos_src = {}\n+\n+local function repo_get_path(repo_name)\n+  vim.validate('repo_name', repo_name, 'string')\n+  return vim.fs.joinpath(repos_dir, repo_name)\n+end\n+\n+local function repo_write_file(repo_name, rel_path, text, no_dedent, append)\n+  local path = vim.fs.joinpath(repo_get_path(repo_name), rel_path)\n+  fn.mkdir(vim.fs.dirname(path), 'p')\n+  t.write_file(path, text, no_dedent, append)\n+end\n+\n+--- @return vim.SystemCompleted\n+local function system_sync(cmd, opts)\n+  return n.exec_lua(function()\n+    local obj = vim.system(cmd, opts)\n+\n+    if opts and opts.timeout then\n+      -- Minor delay before calling wait() so the timeout uv timer can have a headstart over the\n+      -- internal call to vim.wait() in wait().\n+      vim.wait(10)\n+    end\n+\n+    local res = obj:wait()\n+\n+    -- Check the process is no longer running\n+    assert(not vim.api.nvim_get_proc(obj.pid), 'process still exists')\n+\n+    return res\n+  end)\n+end\n+\n+local function git_cmd(cmd, repo_name)\n+  local git_cmd_prefix = {\n+    'git',\n+    '-c',\n+    'gc.auto=0',\n+    '-c',\n+    'user.name=Marvim',\n+    '-c',\n+    'user.email=marvim@neovim.io',\n+    '-c',\n+    'init.defaultBranch=main',\n+  }\n+\n+  cmd = vim.list_extend(git_cmd_prefix, cmd)\n+  local cwd = repo_get_path(repo_name)\n+  local sys_opts = { cwd = cwd, text = true, clear_env = true }\n+  local out = system_sync(cmd, sys_opts)\n+  if out.code ~= 0 then\n+    error(out.stderr)\n+  end\n+  return (out.stdout:gsub('\\n+$', ''))\n+end\n+\n+local function init_test_repo(repo_name)\n+  local path = repo_get_path(repo_name)\n+  fn.mkdir(path, 'p')\n+  repos_src[repo_name] = 'file://' .. path\n+\n+  git_cmd({ 'init' }, repo_name)\n+end\n+\n+local function git_add_commit(msg, repo_name)\n+  git_cmd({ 'add', '*' }, repo_name)\n+  git_cmd({ 'commit', '-m', msg }, repo_name)\n+end\n+\n+local function git_get_hash(rev, repo_name)\n+  return git_cmd({ 'rev-list', '-1', '--abbrev-commit', rev }, repo_name)\n+end\n+\n+-- Common test repos ----------------------------------------------------------\n+local function setup_repo_basic()\n+  init_test_repo('basic')\n+\n+  repo_write_file('basic', 'lua/basic.lua', 'return \"basic main\"')\n+  git_add_commit('Initial commit for \"basic\"', 'basic')\n+\n+  git_cmd({ 'checkout', '-b', 'feat-branch' }, 'basic')\n+\n+  repo_write_file('basic', 'lua/basic.lua', 'return \"basic some-tag\"')\n+  git_add_commit('Add commit for some tag', 'basic')\n+  git_cmd({ 'tag', 'some-tag' }, 'basic')\n+\n+  repo_write_file('basic', 'lua/basic.lua', 'return \"basic feat-branch\"')\n+  git_add_commit('Add important feature', 'basic')\n+\n+  -- Make sure that `main` is the default remote branch\n+  git_cmd({ 'checkout', 'main' }, 'basic')\n+end\n+\n+local function setup_repo_plugindirs()\n+  init_test_repo('plugindirs')\n+\n+  repo_write_file('plugindirs', 'lua/plugindirs.lua', 'return \"plugindirs main\"')\n+  repo_write_file('plugindirs', 'plugin/dirs.lua', 'vim.g._plugin = true')\n+  repo_write_file('plugindirs', 'plugin/dirs.vim', 'let g:_plugin_vim=v:true')\n+  repo_write_file('plugindirs', 'plugin/sub/dirs.lua', 'vim.g._plugin_sub = true')\n+  repo_write_file('plugindirs', 'after/plugin/dirs.lua', 'vim.g._after_plugin = true')\n+  repo_write_file('plugindirs', 'after/plugin/dirs.vim', 'let g:_after_plugin_vim=v:true')\n+  repo_write_file('plugindirs', 'after/plugin/sub/dirs.lua', 'vim.g._after_plugin_sub = true')\n+  git_add_commit('Initial commit for \"plugindirs\"', 'plugindirs')\n+end\n+\n+local function setup_repo_pluginerr()\n+  init_test_repo('pluginerr')\n+\n+  repo_write_file('pluginerr', 'lua/pluginerr.lua', 'return \"pluginerr main\"')\n+  repo_write_file('pluginerr', 'plugin/err.lua', 'error(\"Wow, an error\")')\n+  git_add_commit('Initial commit for \"pluginerr\"', 'pluginerr')\n+end\n+\n+local function setup_repo_defbranch()\n+  init_test_repo('defbranch')\n+\n+  repo_write_file('defbranch', 'lua/defbranch.lua', 'return \"defbranch main\"')\n+  git_add_commit('Initial commit for \"defbranch\"', 'defbranch')\n+\n+  -- Make `develop` the default remote branch\n+  git_cmd({ 'checkout', '-b', 'develop' }, 'defbranch')\n+\n+  repo_write_file('defbranch', 'lua/defbranch.lua', 'return \"defbranch develop\"')\n+  git_add_commit('Add to new default branch', 'defbranch')\n+end\n+\n+local function setup_repo_gitsuffix()\n+  init_test_repo('gitsuffix.git')\n+\n+  repo_write_file('gitsuffix.git', 'lua/gitsuffix.lua', 'return \"gitsuffix main\"')\n+  git_add_commit('Initial commit for \"gitsuffix\"', 'gitsuffix.git')\n+end\n+\n+local function setup_repo_semver()\n+  init_test_repo('semver')\n+\n+  local add_tag = function(name)\n+    repo_write_file('semver', 'lua/semver.lua', 'return \"semver ' .. name .. '\"')\n+    git_add_commit('Add version ' .. name, 'semver')\n+    git_cmd({ 'tag', name }, 'semver')\n+  end\n+\n+  add_tag('v0.0.1')\n+  add_tag('v0.0.2')\n+  add_tag('v0.1.0')\n+  add_tag('v0.1.1')\n+  add_tag('v0.2.0-dev')\n+  add_tag('v0.2.0')\n+  add_tag('v0.3.0')\n+  add_tag('0.3.1')\n+  add_tag('v0.4')\n+  add_tag('v0.2.1') -- Intentionally add version not in order\n+  add_tag('v1.0.0')\n+end\n+\n+-- Tests ======================================================================\n+\n describe('vim.pack', function()\n+  setup(function()\n+    n.clear()\n+    setup_repo_basic()\n+    setup_repo_plugindirs()\n+    setup_repo_pluginerr()\n+    setup_repo_defbranch()\n+    setup_repo_gitsuffix()\n+    setup_repo_semver()\n+  end)\n+\n+  before_each(function()\n+    n.clear()\n+  end)\n+\n+  after_each(function()\n+    vim.fs.rm(pack_get_dir(), { force = true, recursive = true })\n+  end)\n+\n+  teardown(function()\n+    vim.fs.rm(repos_dir, { force = true, recursive = true })\n+  end)\n+\n   describe('add()', function()\n-    pending('works', function()\n-      -- TODO\n+    it('installs at proper version', function()\n+      local out = exec_lua(function()\n+        vim.pack.add({\n+          { src = repos_src.basic, version = 'feat-branch' },\n+        })\n+        -- Should have plugin available immediately after\n+        return require('basic')\n+      end)\n+\n+      eq('basic feat-branch', out)\n+\n+      local rtp = vim.tbl_map(t.fix_slashes, n.api.nvim_list_runtime_paths())\n+      local plug_path = pack_get_plug_path('basic')\n+      local after_dir = vim.fs.joinpath(plug_path, 'after')\n+      eq(true, vim.tbl_contains(rtp, plug_path))\n+      -- No 'after/' directory in runtimepath because it is not present in plugin\n+      eq(false, vim.tbl_contains(rtp, after_dir))\n     end)\n \n-    pending('reports errors after loading', function()\n-      -- TODO\n-      -- Should handle (not let it terminate the function) and report errors from pack_add()\n+    it('can install from the Internet', function()\n+      t.skip(fn.getenv('TEST_INTEG') == vim.NIL, 'Integration test: requires Internet connection')\n+      exec_lua(function()\n+        vim.pack.add({ 'https://github.com/neovim/nvim-lspconfig' })\n+      end)\n+      eq(true, exec_lua('return pcall(require, \"lspconfig\")'))",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2234069003",
            "id": 2234069003,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FKTAL",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 357,
            "original_position": 239,
            "original_start_line": 230,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3059627180,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234069003/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2025-07-27T17:28:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234069003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2234379433"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234379433"
                }
            },
            "author_association": "MEMBER",
            "body": "I think only 1 CI job should enable this. Also, `NVIM_TEST_INTEG` was introduced [recently](https://github.com/neovim/neovim/blob/8a7bfdc0792229e87fcaebdcf2e877fb91e2455c/test/README.md?plain=1#L524) (but not enabled in CI), so let's use that (I don't have a preference on the name though).",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-28T02:14:39Z",
            "diff_hunk": "@@ -25,6 +25,7 @@ env:\n   VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log\n   # TEST_FILE: test/functional/core/startup_spec.lua\n   # TEST_FILTER: foo\n+  TEST_INTEG: true",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2234379433",
            "id": 2234379433,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FLeyp",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 28,
            "original_position": 4,
            "original_start_line": null,
            "path": ".github/workflows/test.yml",
            "position": null,
            "pull_request_review_id": 3059978527,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234379433/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-28T02:14:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234379433",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2234385743"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234385743"
                }
            },
            "author_association": "MEMBER",
            "body": "usually call this `is_blank` (or `not is_blank`). we probably should add `vim.text.isblank`",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-28T02:16:48Z",
            "diff_hunk": "@@ -209,7 +209,11 @@ end\n --- @param x string|vim.VersionRange\n --- @return boolean\n local function is_version(x)\n-  return type(x) == 'string' or (pcall(x.has, x, '1'))\n+  return type(x) == 'string' or (type(x) == 'table' and pcall(x.has, x, '1'))\n+end\n+\n+local function is_nonempty_string(x)",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2234385743",
            "id": 2234385743,
            "line": 214,
            "node_id": "PRRC_kwDOAPphoM6FLgVP",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 214,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/lua/vim/pack.lua",
            "position": 49,
            "pull_request_review_id": 3059986073,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234385743/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-28T02:16:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2234385743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2235297045"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2235297045"
                }
            },
            "author_association": "MEMBER",
            "body": "Blank test/line/string usually means that it consists from zero or more whitespace characters. I.e. empty line is blank line, but not every blank line is empty. It is like this both in Vim (like `:h [:blank:]`, `:h prevnonblank`, or in text like \"Put cursor at first non-blank in the line\") and in other languages.\r\n\r\nHere I think it only makes sense to not allow empty string (because it conflicts with file system actions), while only whitespace characters *technically* should work.",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-28T08:26:06Z",
            "diff_hunk": "@@ -209,7 +209,11 @@ end\n --- @param x string|vim.VersionRange\n --- @return boolean\n local function is_version(x)\n-  return type(x) == 'string' or (pcall(x.has, x, '1'))\n+  return type(x) == 'string' or (type(x) == 'table' and pcall(x.has, x, '1'))\n+end\n+\n+local function is_nonempty_string(x)",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2235297045",
            "id": 2235297045,
            "in_reply_to_id": 2234385743,
            "line": 214,
            "node_id": "PRRC_kwDOAPphoM6FO-0V",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 214,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/lua/vim/pack.lua",
            "position": 49,
            "pull_request_review_id": 3061186004,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2235297045/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-28T08:26:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2235297045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2235308676"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2235308676"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd think that at least testing on sufficiently different environments is worth it. For example: basic (Linux+LuaJIT), MacOS, Windows, PUC Lua. This would require some magic in yaml files, though. Does that sound good?",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-28T08:29:02Z",
            "diff_hunk": "@@ -25,6 +25,7 @@ env:\n   VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log\n   # TEST_FILE: test/functional/core/startup_spec.lua\n   # TEST_FILTER: foo\n+  TEST_INTEG: true",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2235308676",
            "id": 2235308676,
            "in_reply_to_id": 2234379433,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FPBqE",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 28,
            "original_position": 4,
            "original_start_line": null,
            "path": ".github/workflows/test.yml",
            "position": null,
            "pull_request_review_id": 3061200388,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2235308676/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-28T08:29:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2235308676",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2237773439"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2237773439"
                }
            },
            "author_association": "MEMBER",
            "body": "No, let's just start with 1 job. We can worry about platform quirks once that we prove that actually is a real risk. This is only for \"network\" stuff anyway.",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-28T20:13:11Z",
            "diff_hunk": "@@ -25,6 +25,7 @@ env:\n   VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log\n   # TEST_FILE: test/functional/core/startup_spec.lua\n   # TEST_FILTER: foo\n+  TEST_INTEG: true",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2237773439",
            "id": 2237773439,
            "in_reply_to_id": 2234379433,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FYbZ_",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 28,
            "original_position": 4,
            "original_start_line": null,
            "path": ".github/workflows/test.yml",
            "position": null,
            "pull_request_review_id": 3064499682,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2237773439/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-28T20:13:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2237773439",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2240588677"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2240588677"
                }
            },
            "author_association": "MEMBER",
            "body": "[Enabled on release build](https://github.com/neovim/neovim/pull/35052/commits/9b486f6f55538a20021c5e8b81d54c576210365c). Seems [to work](https://github.com/neovim/neovim/actions/runs/16603836583/job/46970404002?pr=35052).",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-29T18:05:54Z",
            "diff_hunk": "@@ -25,6 +25,7 @@ env:\n   VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log\n   # TEST_FILE: test/functional/core/startup_spec.lua\n   # TEST_FILTER: foo\n+  TEST_INTEG: true",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2240588677",
            "id": 2240588677,
            "in_reply_to_id": 2234379433,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6FjKuF",
            "original_commit_id": "7deed7eca284dfa1fc6e2deded9fd62845f6a20a",
            "original_line": 28,
            "original_position": 4,
            "original_start_line": null,
            "path": ".github/workflows/test.yml",
            "position": null,
            "pull_request_review_id": 3068646276,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2240588677/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-29T18:17:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2240588677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2241321703"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2241321703"
                }
            },
            "author_association": "MEMBER",
            "body": "Would prefer to use `vim.pack:` (or just `pack:`) as the message prefix. That is the conventional message format. Don't want new features to start copying a different `(foo)` convention.",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-30T01:10:24Z",
            "diff_hunk": "@@ -367,13 +382,16 @@ local function new_progress_report(title)\n \n   return vim.schedule_wrap(function(kind, percent, fmt, ...)\n     local progress = kind == 'end' and 'done' or ('%3d%%'):format(percent)\n-    print(('(vim.pack) %s: %s %s'):format(progress, title, fmt:format(...)))\n+    local details = (': %s %s'):format(title, fmt:format(...))\n+    local chunks = { { '(vim.pack)', 'ModeMsg' }, { ' ' }, { progress, 'WarningMsg' }, { details } }",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2241321703",
            "id": 2241321703,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6Fl9rn",
            "original_commit_id": "b763980b46b75778dfbfeb217cd872cfa918605d",
            "original_line": 386,
            "original_position": 60,
            "original_start_line": null,
            "path": "runtime/lua/vim/pack.lua",
            "position": null,
            "pull_request_review_id": 3069628242,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2241321703/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-30T01:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2241321703",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/35052#discussion_r2246303926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/35052"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246303926"
                }
            },
            "author_association": "MEMBER",
            "body": "typo",
            "commit_id": "6e2720090130f65e244a42a595a274dd5bad3d37",
            "created_at": "2025-07-31T20:21:53Z",
            "diff_hunk": "@@ -659,60 +706,323 @@ describe('vim.pack', function()\n         [104] = { foreground = Screen.colors.NvimDarkRed },\n         [105] = { foreground = Screen.colors.NvimDarkGreen },\n       })\n-      screen:expect(table.concat(lines, '\\n'))\n+      screen:expect(table.concat(screen_lines, '\\n'))\n+\n+      -- `:write` should confirm\n+      n.exec('write')\n+\n+      -- - Apply changes immediately\n+      eq({ 'return \"fetch new 2\"' }, fn.readfile(fetch_lua_file))\n+\n+      -- - Clean up buffer+window+tabpage\n+      eq(false, api.nvim_buf_is_valid(confirm_bufnr))\n+      eq(false, api.nvim_win_is_valid(confirm_winnr))\n+      eq(false, api.nvim_tabpage_is_valid(confirm_tabpage))\n+\n+      -- - Write to log file\n+      local log_path = vim.fs.joinpath(fn.stdpath('log'), 'nvim-pack.log')\n+      local log_lines = fn.readfile(log_path)\n+      matches('========== Update %d%d%d%d%-%d%d%-%d%d %d%d:%d%d:%d%d ==========', log_lines[1])\n+      local ref_log_lines = {\n+        '# Update ───────────────────────────────────────────────────────────────────────',\n+        '',\n+        '## fetch',\n+        'Path:         ' .. fetch_path,\n+        'Source:       ' .. fetch_src,\n+        'State before: ' .. hashes.fetch_head,\n+        'State after:  ' .. hashes.fetch_new .. ' (main)',\n+        '',\n+        'Pending updates:',\n+        '< ' .. hashes.fetch_head .. ' │ Commit from `main` to be removed',\n+        '> ' .. hashes.fetch_new .. ' │ Commit to be added 2',\n+        '> ' .. hashes.fetch_new_prev .. ' │ Commit to be added 1 (tag: dev-tag)',\n+        '',\n+      }\n+      eq(ref_log_lines, vim.list_slice(log_lines, 2))\n+    end)\n \n-      -- TODO\n-      -- `:write` confirms:\n-      -- - Applies changes with relevant events and progress report.\n-      -- - Closes the tabpage.\n-      -- - Writes to the log file.\n+    it('works with not active plugins', function()\n+      repo_fetch_push_changes()\n+      exec_lua(function()\n+        -- No plugins are added, but they are installed in `before_each()`\n+        vim.pack.update({ 'fetch' })\n+      end)\n+      eq({ 'return \"fetch main\"' }, fn.readfile(fetch_lua_file))\n+      n.exec('write')\n+      eq({ 'return \"fetch new 2\"' }, fn.readfile(fetch_lua_file))\n     end)\n \n-    pending('can dismiss update with `:quite`', function()\n-      -- TODO\n+    it('can dismiss update confirmation with `:quit`', function()\n+      exec_lua(function()\n+        vim.pack.add({ repos_src.fetch })\n+      end)\n+\n+      repo_fetch_push_changes()\n+      exec_lua(function()\n+        vim.pack.update({ 'fetch' })\n+      end)\n+      eq('nvim-pack', api.nvim_get_option_value('filetype', {}))\n+\n+      -- Should not apply upates\n+      n.exec('quit')\n+      eq({ 'return \"fetch main\"' }, fn.readfile(fetch_lua_file))\n     end)\n \n-    pending('has in-porcess LSP features', function()\n-      -- TODO\n+    it('closes full tabpage', function()\n+      exec_lua(function()\n+        vim.pack.add({ repos_src.fetch })\n+        vim.pack.update()\n+      end)\n+\n+      -- Confirm with `:write`\n+      local confirm_tabpage = api.nvim_get_current_tabpage()\n+      n.exec('-tab split other-tab')\n+      local other_tabpage = api.nvim_get_current_tabpage()\n+      n.exec('tabnext')\n+      n.exec('write')\n+      eq(true, api.nvim_tabpage_is_valid(other_tabpage))\n+      eq(false, api.nvim_tabpage_is_valid(confirm_tabpage))\n+\n+      -- Not confirm with `:quit`\n+      n.exec('tab split other-tab-2')\n+      local other_tabpage_2 = api.nvim_get_current_tabpage()\n+      exec_lua(function()\n+        vim.pack.update()\n+      end)\n+      confirm_tabpage = api.nvim_get_current_tabpage()\n+\n+      -- - Temporary split window in tabpage should not matter\n+      n.exec('vsplit other-buf')\n+      n.exec('wincmd w')\n+\n+      n.exec('tabclose ' .. api.nvim_tabpage_get_number(other_tabpage_2))\n+      eq(confirm_tabpage, api.nvim_get_current_tabpage())\n+      n.exec('quit')\n+      eq(false, api.nvim_tabpage_is_valid(confirm_tabpage))\n     end)\n \n-    pending('works with not active plugins', function()\n-      -- TODO\n+    it('can force update', function()\n+      local hashes = { fetch_head = git_get_hash('HEAD', 'fetch') }\n+      repo_fetch_push_changes()\n+      exec_lua(function()\n+        vim.pack.add({ repos_src.fetch })\n+        vim.pack.update({ 'fetch' }, { force = true })\n+      end)\n+\n+      -- Apply changes immediately\n+      local fetch_src = repos_src.fetch\n+      local fetch_path = pack_get_plug_path('fetch')\n+      eq({ 'return \"fetch new 2\"' }, fn.readfile(fetch_lua_file))\n+\n+      -- No special buffer/window/tabpage\n+      eq(1, #api.nvim_list_tabpages())\n+      eq(1, #api.nvim_list_wins())\n+      eq('', api.nvim_get_option_value('filetype', {}))\n+\n+      -- Write to log file\n+      hashes.fetch_new = git_get_hash('HEAD', 'fetch')\n+      hashes.fetch_new_prev = git_get_hash('HEAD~', 'fetch')\n+\n+      local log_path = vim.fs.joinpath(fn.stdpath('log'), 'nvim-pack.log')\n+      local log_lines = fn.readfile(log_path)\n+      matches('========== Update %d%d%d%d%-%d%d%-%d%d %d%d:%d%d:%d%d ==========', log_lines[1])\n+      local ref_log_lines = {\n+        '# Update ───────────────────────────────────────────────────────────────────────',\n+        '',\n+        '## fetch',\n+        'Path:         ' .. fetch_path,\n+        'Source:       ' .. fetch_src,\n+        'State before: ' .. hashes.fetch_head,\n+        'State after:  ' .. hashes.fetch_new .. ' (main)',\n+        '',\n+        'Pending updates:',\n+        '< ' .. hashes.fetch_head .. ' │ Commit from `main` to be removed',\n+        '> ' .. hashes.fetch_new .. ' │ Commit to be added 2',\n+        '> ' .. hashes.fetch_new_prev .. ' │ Commit to be added 1 (tag: dev-tag)',\n+        '',\n+      }\n+      eq(ref_log_lines, vim.list_slice(log_lines, 2))\n+    end)\n+\n+    it('shows progress report', function()\n+      repo_fetch_push_changes()\n+      exec_lua(function()\n+        vim.pack.add({ repos_src.fetch, repos_src.defbranch })\n+        vim.pack.update()\n+      end)\n+\n+      -- During initial download\n+      local messages = vim.split(n.exec_capture('messages'), '\\n')\n+      eq('vim.pack:   0% Downloading updates (0/2)', messages[1])\n+\n+      -- NOTE: There is no guaranteed installation order (as it is async)\n+      local plug_1 = messages[2]:match('^vim%.pack:  50%% Downloading updates %(1/2%) %- (%S+)$')\n+      eq(true, plug_1 == 'fetch' or plug_1 == 'defbranch')\n+      local plug_2 = messages[3]:match('^vim%.pack: 100%% Downloading updates %(2/2%) %- (%S+)$')\n+      eq(true, plug_2 == 'fetch' or plug_2 == 'defbranch')\n+\n+      eq('vim.pack: done Downloading updates (2/2)', messages[4])\n+\n+      eq(4, #messages)\n+      n.exec('messages clear')\n+\n+      -- During application (only for plugins that have updates)\n+      n.exec('write')\n+      messages = vim.split(n.exec_capture('messages'), '\\n')\n+      eq({\n+        'vim.pack:   0% Applying updates (0/1)',\n+        'vim.pack: 100% Applying updates (1/1) - fetch',\n+        'vim.pack: done Applying updates (1/1)',\n+      }, messages)\n+\n+      -- During force update\n+      n.clear()\n+      repo_write_file('fetch', 'lua/fetch.lua', 'return \"fetch new 3\"')\n+      git_add_commit('Commit to be added 3', 'fetch')\n+\n+      exec_lua(function()\n+        vim.pack.add({ repos_src.fetch, repos_src.defbranch })\n+        vim.pack.update(nil, { force = true })\n+      end)\n+\n+      messages = vim.split(n.exec_capture('messages'), '\\n')\n+      eq('vim.pack:   0% Updating (0/2)', messages[1])\n+\n+      -- NOTE: There is no guaranteed installation order (as it is async)\n+      plug_1 = messages[2]:match('^vim%.pack:  50%% Updating %(1/2%) %- (%S+)$')\n+      eq(true, plug_1 == 'fetch' or plug_1 == 'defbranch')\n+      plug_2 = messages[3]:match('^vim%.pack: 100%% Updating %(2/2%) %- (%S+)$')\n+      eq(true, plug_2 == 'fetch' or plug_2 == 'defbranch')\n+\n+      eq('vim.pack: done Updating (2/2)', messages[4])\n+\n+      eq(4, #messages)\n     end)\n \n-    pending('stashes before checkout', function()\n-      -- TODO\n+    it('triggers relevant events', function()\n+      exec_lua(function()\n+        vim.pack.add({ repos_src.fetch, repos_src.defbranch })\n+      end)\n+      repo_fetch_push_changes()\n+\n+      watch_events({ 'PackChangedPre', 'PackChanged' })\n+      exec_lua(function()\n+        vim.pack.update()\n+      end)\n+      eq({}, exec_lua('return _G.event_log'))\n+\n+      -- Should trigger relevant events only for actually updated plugins\n+      n.exec('write')\n+      local log = exec_lua('return _G.event_log')\n+      eq(1, find_in_log(log, 'PackChangedPre', 'update', 'fetch', 'main'))\n+      eq(2, find_in_log(log, 'PackChanged', 'update', 'fetch', 'main'))\n+      eq(2, #log)\n     end)\n \n-    pending('shows progress report', function()\n-      -- TODO\n+    it('has in-porcess LSP features', function()",
            "html_url": "https://github.com/neovim/neovim/pull/35052#discussion_r2246303926",
            "id": 2246303926,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM6F4-C2",
            "original_commit_id": "fd0ee47569e0ff278efa723018473190507cba4f",
            "original_line": 922,
            "original_position": 424,
            "original_start_line": null,
            "path": "test/functional/plugin/pack_spec.lua",
            "position": null,
            "pull_request_review_id": 3076779928,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246303926/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-07-31T20:21:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/2246303926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> Ideally those repos should be created as infrequently as possible (i.e. not in `before_each()` and cleaned in `after_each()`\r\n\r\nAre you aware of `setup()` and `teardown()` (they are the \"once per file\" variant of before_each/after_each).\r\n\r\n> currently only in the state to show and discuss the overall approach to testing\r\n\r\nLGTM but I hope all the tests can live in pack_spec.lua, and (hope) we don't need 10k lines of tests.",
            "created_at": "2025-07-24T20:50:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3114896363",
            "id": 3114896363,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM65qYvr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3114896363/reactions"
            },
            "updated_at": "2025-07-24T20:54:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3114896363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Are you aware of `setup()` and `teardown()` (they are the \"once per file\" variant of before_each/after_each).\r\n\r\nYes, I tried them first, but `make functionaltest` errored because it could not find callable `vim.system` (it was executed in test runner, not child tested process). There is s a TODO in the `get()` test with more details.\r\n\r\n> LGTM but I hope all the tests can live in pack_spec.lua, ...\r\n\r\nThe reason was that it requires non-trivial amount of helpers. As far as I can see, the pattern is to extract that into a separate 'testutil.lua' file.\r\n\r\n> ... and (hope) we don't need 10k lines of tests.\r\n\r\n10k is too much, but proper coverage of intended use cases might get verbose indeed. We'll see.",
            "created_at": "2025-07-24T21:01:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3114934181",
            "id": 3114934181,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM65qh-l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3114934181/reactions"
            },
            "updated_at": "2025-07-24T21:01:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3114934181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As far as I can see, the pattern is to extract that into a separate 'testutil.lua' file.\r\n\r\nThat's not an encouraged pattern, it's for extreme cases where lots of test setup is needed. Let's wait until that proves to be the case. \r\n\r\n> but `make functionaltest` errored because it could not find callable `vim.system` (it was executed in test runner, not child tested process).\r\n\r\nCall `n.clear()` in setup() ?",
            "created_at": "2025-07-24T21:28:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3115027914",
            "id": 3115027914,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM65q43K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3115027914/reactions"
            },
            "updated_at": "2025-07-24T21:28:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3115027914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > but `make functionaltest` errored because it could not find callable `vim.system` (it was executed in test runner, not child tested process).\r\n> \r\n> Call `n.clear()` in setup() ?\r\n\r\nYes, indeed, that does work. My bad. Thanks! I guess the name `clear()` was what confused me (i.e. I thought child process should be already set up and `n.clear()` only makes it ... clear).",
            "created_at": "2025-07-25T07:40:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3116756599",
            "id": 3116756599,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM65xe53",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3116756599/reactions"
            },
            "updated_at": "2025-07-25T07:40:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3116756599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> LGTM after comments\r\n\r\n:+1: It is far from being done, though. Right now it only covers about 80% of `vim.pack.add()` behavior, and there are other functions still. It is incremental work at this point.\r\n\r\n> It looks like the plugin is writing to stdout and this is showing up in the test report? \r\n\r\nYes, I also did notice that, but not sure if that was the problem. It might require using `vim.api.nvim_echo()` instead of `print()` to show progress report, but not sure.\r\n\r\n> > I thought child process should be already set up and `n.clear()` only makes it ... clear).\r\n> \r\n> I'd be in favor of renaming it, I didn't have the courage because of the churn.\r\n\r\nI can take a look. What would be the better name? For me something like `n.setup()` or `n.init()` would be easier to grasp, I think. **Edit**: A `n.start()` might also be a good choice.",
            "created_at": "2025-07-28T08:32:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3126132295",
            "id": 3126132295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM66VP5H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3126132295/reactions"
            },
            "updated_at": "2025-07-28T14:50:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3126132295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What would be the better name? For me something like `n.setup()` or `n.init()` would be easier to grasp, I think. **Edit**: A `n.start()` might also be a good choice.\r\n\r\n`new_session` is the right name, but that's already taken 😅 \r\n\r\nidk, maybe nothing needs to change, because contributors can find `n.new_session()` ...",
            "created_at": "2025-07-28T20:16:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3129406690",
            "id": 3129406690,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM66hvTi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3129406690/reactions"
            },
            "updated_at": "2025-07-28T20:16:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3129406690",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I rebased on `master` and cleaned up commit history a bit (separating fixes/features with their description from tests).\r\n\r\nThere is only `update()` tests left, which are the trickiest ones.\r\n\r\n> > It looks like the plugin is writing to stdout and this is showing up in the test report?\r\n> \r\n> Yes, I also did notice that, but not sure if that was the problem. It might require using `vim.api.nvim_echo()` instead of `print()` to show progress report, but not sure.\r\n\r\nUsing `nvim_echo()` did fix this *and* it has extra benefit of allowing to colorize progress messages. I went with the [following coloring](https://github.com/neovim/neovim/pull/35052/commits/fdc123e5508fae4bbc5ccefe9953d8ea6d3315be) which looks like this:\r\n\r\nhttps://github.com/user-attachments/assets/898e512e-a3f5-428b-bc61-725ec46ed479\r\n\r\nI think *some* colors in progress messages are useful. Coloring source and progress percentage seems like a good idea, but let me know if this is too much.",
            "created_at": "2025-07-29T18:14:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3133557865",
            "id": 3133557865,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM66xkxp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3133557865/reactions"
            },
            "updated_at": "2025-07-29T18:15:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3133557865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Updated formatting of progress messages to use `vim.pack:` as prefix. Also dropped `:` after percent of progress since it feels awkward with two `:`. It now looks like this:\r\n\r\n<img width=\"2880\" height=\"1734\" alt=\"screenshot_2025-07-30_21:11:41\" src=\"https://github.com/user-attachments/assets/83836ad2-be2d-4b67-af11-31f793500864\" />\r\n\r\nAlso:\r\n- Changed how newer versions are suggested (based purely on semver comparison instead of from Git history).\r\n- I think I found happy medium for testing overall look of confirmation buffer through screenshot. Although highlighting testing is more explicit, it required some manipulation to hide dynamically constructed paths (both for source repo and installed plugins) and commit hashes (as they are cleanly created for each file testing). I though about not showing full paths in confirmation buffer, but I think it is important in order to be able to `gf` and `gx` into file path or link.\r\n\r\n    Let me know if I did something wrong and there is a more preferred way to do screenshot testing. I do not plan to add more here and make the rest of the tests through text comparison.",
            "created_at": "2025-07-30T18:20:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3137390768",
            "id": 3137390768,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM67AMiw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3137390768/reactions"
            },
            "updated_at": "2025-07-30T18:20:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3137390768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this is finally ready to be merged: commit history is cleaned up and rebased on `master` (to finally have passing `oldtest` tests).",
            "created_at": "2025-08-02T12:29:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/35052#issuecomment-3146474748",
            "id": 3146474748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
            "node_id": "IC_kwDOAPphoM67i2T8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146474748/reactions"
            },
            "updated_at": "2025-08-02T12:29:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3146474748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/35052/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/35052/commits",
    "created_at": "2025-07-24T14:19:35Z",
    "diff_url": "https://github.com/neovim/neovim/pull/35052.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:pack-tests",
        "ref": "pack-tests",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2025-08-03T11:16:57Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 326808,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2025-08-03T11:17:02Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6e2720090130f65e244a42a595a274dd5bad3d37",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/35052",
    "id": 2692172033,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/35052",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 110418643,
            "name": "test",
            "node_id": "MDU6TGFiZWwxMTA0MTg2NDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/test"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        },
        {
            "color": "bfd4f2",
            "default": false,
            "description": "vim.pack, start/opt packages, 'packpath'",
            "id": 8889050758,
            "name": "packages",
            "node_id": "LA_kwDOAPphoM8AAAACEdQmhg",
            "url": "https://api.github.com/repos/neovim/neovim/labels/packages"
        }
    ],
    "locked": false,
    "merge_commit_sha": "93f5bd0caf9037f95ee77288bfd424008bc3a14b",
    "merged_at": "2025-08-02T23:35:42Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6gd0kB",
    "number": 35052,
    "patch_url": "https://github.com/neovim/neovim/pull/35052.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/35052/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6e2720090130f65e244a42a595a274dd5bad3d37",
    "title": "test(pack): add `vim.pack` tests",
    "updated_at": "2025-08-02T23:35:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/35052",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}