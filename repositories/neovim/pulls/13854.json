{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/13854/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/13854/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/13854"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/13854"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/13854/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6358,
            "forks_count": 6358,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 2001,
            "open_issues_count": 2001,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-10-14T02:23:27Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 347842,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 93440,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-10-14T02:23:32Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 93440,
            "watchers_count": 93440,
            "web_commit_signoff_required": false
        },
        "sha": "cb15055c294e6ebb9b2a65041cbff0a79cd3e69e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This pr adds a new option `completefilterfunc` (or `cff`), and a new api function for insert completion: `vim.api.nvim_complete(colnr, matches, opts)`.\r\n\r\n`completefilterfunc` is a function with the signature\r\n\r\n`function(prefix, match) ... return score end`,\r\n\r\nwhere a higher score indicates a better match, and a score of 0 removes the match from the completion menu.\r\n\r\n`nvim_complete` is basically `complete()`, but with an optional argument `filterfunc`. `filterfunc` can either be a lua function\r\nor a string referencing a vimscript function, and overrides the `completefilterfunc` option for this completion only. This is so that different plugins can use different fuzzy completion functions.\r\n\r\nHere's a demo of it in action:\r\n\r\n![filtering](https://user-images.githubusercontent.com/36219739/106374413-41e86600-6338-11eb-9aaf-e86019b785f9.gif)",
    "closed_at": "2025-10-13T05:39:47Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567376071"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376071"
                }
            },
            "author_association": "MEMBER",
            "body": "we could add `add = true` for `complete_add()` behavior",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T06:51:50Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567376071",
            "id": 567376071,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM3NjA3MQ==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2951,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579859911,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376071/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567376145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376145"
                }
            },
            "author_association": "MEMBER",
            "body": "the canonical pattern is `filterfunc = v->data.luaref; v->data.luaref = LUA_NOREF`",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T06:52:50Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+  extern LuaRef *user_filterfunc;\n+  extern LuaRef *active_filterfunc;\n+  LuaRef filterfunc;\n+\n+  if (matches.type != kObjectTypeArray) {\n+    api_set_error(err, kErrorTypeValidation,\n+              \"wrong type\");\n+  }\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeValidation,\n+            \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed())\n+      goto error;\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")){\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                \"expected lua function\");\n+        goto error;\n+      }\n+      filterfunc = api_new_luaref(v->data.luaref);",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567376145",
            "id": 567376145,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM3NjE0NQ==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2912,
            "original_position": 69,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579859971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567376423"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376423"
                }
            },
            "author_association": "MEMBER",
            "body": "declare these in `edit.h` instead as `EXTERN LuaRef global_filterfunc INIT(= NO_REF)`, then it is initialized once but available by including `edit.h` anywhere.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T06:56:00Z",
            "diff_hunk": "@@ -150,6 +154,22 @@ struct compl_S {\n   int cp_number;                // sequence number\n };\n \n+// Structure that stores the score of each completion entry\n+// Used to sort the pum items.\n+typedef struct compl_score_S compl_score_T;\n+struct compl_score_S {\n+  compl_T   *compl;\n+  double score;\n+};\n+\n+// lua functions used to filter completion matches\n+// global_filterfunc is used for all completion sources,\n+// while user_filterfunc is only used to filter matches\n+// from vim.api.nvim_complete().\n+LuaRef *global_filterfunc = NULL;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567376423",
            "id": 567376423,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM3NjQyMw==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 169,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 579860124,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376423/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376423",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567376560"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376560"
                }
            },
            "author_association": "MEMBER",
            "body": "what's the point of the pointer indirection? LuaRef is already a reference (integer index into the registry of values)",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T06:57:30Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+  extern LuaRef *user_filterfunc;\n+  extern LuaRef *active_filterfunc;\n+  LuaRef filterfunc;\n+\n+  if (matches.type != kObjectTypeArray) {\n+    api_set_error(err, kErrorTypeValidation,\n+              \"wrong type\");\n+  }\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeValidation,\n+            \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed())\n+      goto error;\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")){\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                \"expected lua function\");\n+        goto error;\n+      }\n+      filterfunc = api_new_luaref(v->data.luaref);\n+      user_filterfunc = xmalloc(sizeof(LuaRef));",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567376560",
            "id": 567376560,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM3NjU2MA==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2913,
            "original_position": 70,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579860201,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376560/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567376716"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376716"
                }
            },
            "author_association": "MEMBER",
            "body": "do we intend `matches` to change type later? because otherwise we can just declare `Array` in the arg list",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T06:58:43Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+  extern LuaRef *user_filterfunc;\n+  extern LuaRef *active_filterfunc;\n+  LuaRef filterfunc;\n+\n+  if (matches.type != kObjectTypeArray) {",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567376716",
            "id": 567376716,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM3NjcxNg==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2882,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579860259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376716/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567376716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567389762"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389762"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes that's a much better way of doing this. I only recently realized that LuaRefs are just integers",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T08:43:11Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+  extern LuaRef *user_filterfunc;\n+  extern LuaRef *active_filterfunc;\n+  LuaRef filterfunc;\n+\n+  if (matches.type != kObjectTypeArray) {\n+    api_set_error(err, kErrorTypeValidation,\n+              \"wrong type\");\n+  }\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeValidation,\n+            \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed())\n+      goto error;\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")){\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                \"expected lua function\");\n+        goto error;\n+      }\n+      filterfunc = api_new_luaref(v->data.luaref);\n+      user_filterfunc = xmalloc(sizeof(LuaRef));",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567389762",
            "id": 567389762,
            "in_reply_to_id": 567376560,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM4OTc2Mg==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2913,
            "original_position": 70,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579868807,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389762/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567389829"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389829"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I just took matches to be an object just for convenience, since we can then just use `object_to_vim` to convert to a vim list.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T08:43:43Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+  extern LuaRef *user_filterfunc;\n+  extern LuaRef *active_filterfunc;\n+  LuaRef filterfunc;\n+\n+  if (matches.type != kObjectTypeArray) {",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567389829",
            "id": 567389829,
            "in_reply_to_id": 567376716,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM4OTgyOQ==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2882,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579868851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389829/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567389971"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389971"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "This is helpful, thanks. I'm still very new to C, so I'm not very knowledgeable about things like this.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T08:44:59Z",
            "diff_hunk": "@@ -150,6 +154,22 @@ struct compl_S {\n   int cp_number;                // sequence number\n };\n \n+// Structure that stores the score of each completion entry\n+// Used to sort the pum items.\n+typedef struct compl_score_S compl_score_T;\n+struct compl_score_S {\n+  compl_T   *compl;\n+  double score;\n+};\n+\n+// lua functions used to filter completion matches\n+// global_filterfunc is used for all completion sources,\n+// while user_filterfunc is only used to filter matches\n+// from vim.api.nvim_complete().\n+LuaRef *global_filterfunc = NULL;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567389971",
            "id": 567389971,
            "in_reply_to_id": 567376423,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM4OTk3MQ==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 169,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 579868980,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389971/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567389971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567390148"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567390148"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I tried to take `func` to be an Object instead, but when I do that, I keep getting these errors `cannot convert given type` whenever I try to pass in a function.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T08:46:03Z",
            "diff_hunk": "@@ -2851,3 +2852,103 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+\n+  if (matches.type != kObjectTypeArray) {\n+    api_set_error(err, kErrorTypeValidation,\n+              \"wrong type\");\n+  }\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+            \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed())\n+      goto error;\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")){\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                \"expected lua function\");\n+        goto error;\n+      }\n+      active_filterfunc = user_filterfunc = v->data.luaref;\n+      v->data.luaref = LUA_NOREF;\n+    } else {\n+      api_set_error(err, kErrorTypeValidation,\n+              \"undexpected key\");\n+      goto error;\n+    }\n+  }\n+\n+  object_to_vim(matches, &tv, err);\n+  if ERROR_SET(err){\n+      goto error;\n+  }\n+\n+  set_completion((colnr_T)startcol - 1, tv.vval.v_list);\n+\n+error:\n+  tv_clear(&tv);\n+\n+  String ret = STRING_INIT;\n+  return ret;\n+}\n+\n+///\n+/// Register a lua function for filtering completion matches.\n+/// The function must take in two arguments: the prefix (the\n+/// currently typed text), and the text for a completion entry, and\n+/// returns a float. Higher return values imply a better match, and a\n+/// return value of 0 removes the entry from being shown.\n+/// To remove the currently registered function, call the function\n+/// with a nil value.\n+///\n+/// @param func: function to register for filtering.\n+///\n+void nvim_register_filterfunc(LuaRef func, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567390148",
            "id": 567390148,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM5MDE0OA==",
            "original_commit_id": "43a5d50256d17314ee9f26df6a8d3f0acf862c09",
            "original_line": 3035,
            "original_position": 100,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579869072,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567390148/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567390148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567391605"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567391605"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "For some reason, pressing backspace cancels `complete()` based completion, instead of simply refreshing the list of candidates. The test in test_popup.vim references changing this behavior as a todo, so I thought I'd just do a drive by change.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T08:51:35Z",
            "diff_hunk": "@@ -3311,7 +3465,7 @@ static int ins_compl_bs(void)\n   // Respect the 'backspace' option.\n   if ((int)(p - line) - (int)compl_col < 0\n       || ((int)(p - line) - (int)compl_col == 0\n-          && ctrl_x_mode != CTRL_X_OMNI) || ctrl_x_mode == CTRL_X_EVAL",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567391605",
            "id": 567391605,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM5MTYwNQ==",
            "original_commit_id": "306ed7acd8209280f19026ada62b4ee29d49179e",
            "original_line": 3314,
            "original_position": 460,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 579869072,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567391605/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567391605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567403512"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403512"
                }
            },
            "author_association": "MEMBER",
            "body": "you can do this anyway by using `ARRAY_OBJ` macro. Better to use `Array` in signature to get correct metadata.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T10:22:20Z",
            "diff_hunk": "@@ -2851,3 +2852,117 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+  extern LuaRef *user_filterfunc;\n+  extern LuaRef *active_filterfunc;\n+  LuaRef filterfunc;\n+\n+  if (matches.type != kObjectTypeArray) {",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567403512",
            "id": 567403512,
            "in_reply_to_id": 567376716,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQwMzUxMg==",
            "original_commit_id": "5587cebb5c5551b0c64480a5d8c7907c23ffd884",
            "original_line": 2882,
            "original_position": 39,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579879316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403512/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567403642"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403642"
                }
            },
            "author_association": "MEMBER",
            "body": "yes this should be a `LuaRef`. In this case we have to use `api_copy_luaref` for now.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T10:23:35Z",
            "diff_hunk": "@@ -2851,3 +2852,103 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts,\n error:\n   clear_provider(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+//\n+// todo: completefunc with refresh: always\n+// todo: figure out what to do with ctrl_e and ctrl_l\n+// todo: what to do if filterfunc != NULL AND completion entry\n+// has icase/equal set.\n+String nvim_complete(Integer startcol,\n+                   Object matches,\n+                   DictionaryOf(LuaRef) opts,\n+                   Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+\n+  if (matches.type != kObjectTypeArray) {\n+    api_set_error(err, kErrorTypeValidation,\n+              \"wrong type\");\n+  }\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+            \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed())\n+      goto error;\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")){\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                \"expected lua function\");\n+        goto error;\n+      }\n+      active_filterfunc = user_filterfunc = v->data.luaref;\n+      v->data.luaref = LUA_NOREF;\n+    } else {\n+      api_set_error(err, kErrorTypeValidation,\n+              \"undexpected key\");\n+      goto error;\n+    }\n+  }\n+\n+  object_to_vim(matches, &tv, err);\n+  if ERROR_SET(err){\n+      goto error;\n+  }\n+\n+  set_completion((colnr_T)startcol - 1, tv.vval.v_list);\n+\n+error:\n+  tv_clear(&tv);\n+\n+  String ret = STRING_INIT;\n+  return ret;\n+}\n+\n+///\n+/// Register a lua function for filtering completion matches.\n+/// The function must take in two arguments: the prefix (the\n+/// currently typed text), and the text for a completion entry, and\n+/// returns a float. Higher return values imply a better match, and a\n+/// return value of 0 removes the entry from being shown.\n+/// To remove the currently registered function, call the function\n+/// with a nil value.\n+///\n+/// @param func: function to register for filtering.\n+///\n+void nvim_register_filterfunc(LuaRef func, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567403642",
            "id": 567403642,
            "in_reply_to_id": 567390148,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQwMzY0Mg==",
            "original_commit_id": "43a5d50256d17314ee9f26df6a8d3f0acf862c09",
            "original_line": 3035,
            "original_position": 100,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 579879430,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403642/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403642",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567403840"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403840"
                }
            },
            "author_association": "MEMBER",
            "body": "instead of deleting the test, if we fixed the behavior we should test the new better behavior.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T10:25:34Z",
            "diff_hunk": "@@ -51,18 +51,6 @@ func Test_popup_complete()\n   call assert_equal([\"August\"], getline(1,2))\n   %d\n \n-  \" <BS> - Delete one character from the inserted text (state: 1)\n-  \" TODO: This should not end the completion, but it does.\n-  \" This should according to the documentation:\n-  \" January\n-  \" but instead, this does\n-  \" Januar\f\n-  \" (idea is, C-L inserts the match from the popup menu\n-  \" but if the menu is closed, it will insert the character <c-l>\n-  call feedkeys(\"aJ\\<f5>\\<bs>\\<c-l>\\<esc>\", 'tx')\n-  call assert_equal([\"Januar\f\"], getline(1,2))",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567403840",
            "id": 567403840,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQwMzg0MA==",
            "original_commit_id": "306ed7acd8209280f19026ada62b4ee29d49179e",
            "original_line": 63,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/testdir/test_popup.vim",
            "position": 1,
            "pull_request_review_id": 579879582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403840/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r567403961"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403961"
                }
            },
            "author_association": "MEMBER",
            "body": "is this issue still in vim? then it could make sense to break this out to a separate PR, so it is easier to backport it to vim :)",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-01-31T10:26:40Z",
            "diff_hunk": "@@ -3311,7 +3465,7 @@ static int ins_compl_bs(void)\n   // Respect the 'backspace' option.\n   if ((int)(p - line) - (int)compl_col < 0\n       || ((int)(p - line) - (int)compl_col == 0\n-          && ctrl_x_mode != CTRL_X_OMNI) || ctrl_x_mode == CTRL_X_EVAL",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r567403961",
            "id": 567403961,
            "in_reply_to_id": 567391605,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQwMzk2MQ==",
            "original_commit_id": "306ed7acd8209280f19026ada62b4ee29d49179e",
            "original_line": 3314,
            "original_position": 460,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 579879662,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403961/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/567403961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r568317445"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/568317445"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Makes sense. I've deleted the change",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-02-02T04:37:51Z",
            "diff_hunk": "@@ -3311,7 +3465,7 @@ static int ins_compl_bs(void)\n   // Respect the 'backspace' option.\n   if ((int)(p - line) - (int)compl_col < 0\n       || ((int)(p - line) - (int)compl_col == 0\n-          && ctrl_x_mode != CTRL_X_OMNI) || ctrl_x_mode == CTRL_X_EVAL",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r568317445",
            "id": 568317445,
            "in_reply_to_id": 567391605,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODMxNzQ0NQ==",
            "original_commit_id": "306ed7acd8209280f19026ada62b4ee29d49179e",
            "original_line": 3314,
            "original_position": 460,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 580979193,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/568317445/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/568317445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r569198454"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/569198454"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Macos, Linux, and Windows implementations of qsort all have different behaviors for when two items have the same score (Linux uses mergesort under the hood, which is stable, while MacOS and Windows do not). So to make sure that we retain the original order of items for consistency and ease of testing, I have to add this annoying order field to the struct.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-02-03T07:56:40Z",
            "diff_hunk": "@@ -2699,120 +2753,220 @@ static void trigger_complete_changed_event(int cur)\n   tv_dict_clear(v_event);\n }\n \n-/// Show the popup menu for the list of matches.\n-/// Also adjusts \"compl_shown_match\" to an entry that is actually displayed.\n-void ins_compl_show_pum(void)\n+// comparator function for use in qsort.\n+static int compare_scores(const void *a, const void *b)\n+{\n+  double val = ((compl_score_T *)b)->score - ((compl_score_T *)a)->score;\n+  if (val < 0) {\n+    return -1;\n+  } else if (val > 0) {\n+      return 1;\n+  } else {\n+    // qsort is not stable: we don't want to flip two items that have\n+    // the same score.\n+    return ((compl_score_T *)a)->order - ((compl_score_T *)b)->order;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r569198454",
            "id": 569198454,
            "line": 2859,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE5ODQ1NA==",
            "original_commit_id": "02ecc7c8414a34ca259e999b7d5d3c40d4be3e54",
            "original_line": 2859,
            "original_position": 131,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 190,
            "pull_request_review_id": 582085584,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/569198454/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/569198454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r569214908"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/569214908"
                }
            },
            "author_association": "MEMBER",
            "body": "well qsort() doesn't promise anymore than the specs do (even glibc could change the implementation later). If we want more control over sorting we need to include our own sort algorithm, maybe https://github.com/patperry/timsort  ",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-02-03T08:25:32Z",
            "diff_hunk": "@@ -2699,120 +2753,220 @@ static void trigger_complete_changed_event(int cur)\n   tv_dict_clear(v_event);\n }\n \n-/// Show the popup menu for the list of matches.\n-/// Also adjusts \"compl_shown_match\" to an entry that is actually displayed.\n-void ins_compl_show_pum(void)\n+// comparator function for use in qsort.\n+static int compare_scores(const void *a, const void *b)\n+{\n+  double val = ((compl_score_T *)b)->score - ((compl_score_T *)a)->score;\n+  if (val < 0) {\n+    return -1;\n+  } else if (val > 0) {\n+      return 1;\n+  } else {\n+    // qsort is not stable: we don't want to flip two items that have\n+    // the same score.\n+    return ((compl_score_T *)a)->order - ((compl_score_T *)b)->order;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r569214908",
            "id": 569214908,
            "in_reply_to_id": 569198454,
            "line": 2859,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTIxNDkwOA==",
            "original_commit_id": "02ecc7c8414a34ca259e999b7d5d3c40d4be3e54",
            "original_line": 2859,
            "original_position": 131,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 190,
            "pull_request_review_id": 582106290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/569214908/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-02-06T02:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/569214908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715575649"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715575649"
                }
            },
            "author_association": "MEMBER",
            "body": "- this is just a \"set\" not \"register\", so `nvim_set_complete_filter_func`\r\n- instead of this special-case API function, can we add a 'completefilterfunc' option (analogous to the existing 'completefunc' option)?  https://github.com/neovim/neovim/issues/12620\r\n    - it's worth the trouble, to avoid another quasi-options interface.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-24T12:37:30Z",
            "diff_hunk": "@@ -2937,3 +2938,106 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts, Erro\n error:\n   decor_provider_clear(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion.\n+String nvim_complete(Integer startcol,\n+                     Array matches,\n+                     DictionaryOf(LuaRef) opts,\n+                     Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed(curbuf)) {\n+      goto error;\n+  }\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")) {\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected lua function\");\n+        goto error;\n+      }\n+      active_filterfunc = user_filterfunc = v->data.luaref;\n+      v->data.luaref = LUA_NOREF;\n+    } else if (strequal(k.data, \"exact\")) {\n+      if (v->type != kObjectTypeBoolean) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected boolean\");\n+        goto error;\n+      }\n+      if (v->data.boolean) {\n+        active_filterfunc = LUA_NOREF;\n+      }\n+    } else {\n+      api_set_error(err, kErrorTypeValidation,\n+                    \"unexpected key\");\n+      goto error;\n+    }\n+  }\n+\n+  object_to_vim(ARRAY_OBJ(matches), &tv, err);\n+  if ERROR_SET(err) {\n+      goto error;\n+  }\n+\n+  set_completion((colnr_T)startcol - 1, tv.vval.v_list);\n+\n+error:\n+  tv_clear(&tv);\n+\n+  String ret = STRING_INIT;\n+  return ret;\n+}\n+\n+///\n+/// Register a lua function for filtering completion matches.\n+/// The function must take in two arguments: the prefix (the\n+/// currently typed text), and the text for a completion entry, and\n+/// returns a float. Higher return values imply a better match, and a\n+/// return value of 0 removes the entry from being shown.\n+/// To remove the currently registered function, call the function\n+/// with a nil value.\n+///\n+/// @param func: function to register for filtering.\n+///\n+void nvim_register_filterfunc(LuaRef func, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715575649",
            "id": 715575649,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qptFh",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 3035,
            "original_position": 103,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 763028397,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715575649/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-24T13:06:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715575649",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715577800"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715577800"
                }
            },
            "author_association": "MEMBER",
            "body": "missing `@return` doc",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-24T12:40:39Z",
            "diff_hunk": "@@ -2937,3 +2938,106 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts, Erro\n error:\n   decor_provider_clear(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion.",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715577800",
            "id": 715577800,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qptnI",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 2954,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 763031281,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715577800/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-24T12:40:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715577800",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715578603"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715578603"
                }
            },
            "author_association": "MEMBER",
            "body": "use common prefixes. `ins_compl_` looks like what other related functions use.\r\n```suggestion\r\nstatic void ins_compl_sort(int num_items, compl_score_T *scores)\r\n```",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-24T12:41:43Z",
            "diff_hunk": "@@ -2738,124 +2792,231 @@ static void trigger_complete_changed_event(int cur)\n   tv_dict_clear(v_event);\n }\n \n-/// Show the popup menu for the list of matches.\n-/// Also adjusts \"compl_shown_match\" to an entry that is actually displayed.\n-void ins_compl_show_pum(void)\n+// comparator function for use in qsort.\n+static int compare_scores(const void *a, const void *b)\n+{\n+  double val = ((compl_score_T *)b)->score - ((compl_score_T *)a)->score;\n+  if (val < 0) {\n+    return -1;\n+  } else if (val > 0) {\n+      return 1;\n+  } else {\n+    // qsort is not stable: we don't want to flip two items that have\n+    // the same score.\n+    return ((compl_score_T *)a)->order - ((compl_score_T *)b)->order;\n+  }\n+}\n+\n+// sort the linked list of completion items based on the scores\n+// in the scores array.\n+static void sort_completions(int num_items, compl_score_T *scores)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715578603",
            "id": 715578603,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qptzr",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 2812,
            "original_position": 122,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 763032303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715578603/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-24T12:41:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715578603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715588018"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715588018"
                }
            },
            "author_association": "MEMBER",
            "body": "would be nice if these are grouped a `compl_filter` struct. Then all references look like `compl_filter.user_func`, etc.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-24T12:54:51Z",
            "diff_hunk": "@@ -12,6 +13,14 @@\n #define CPT_INFO        3   // \"info\"\n #define CPT_COUNT       4   // Number of entries\n \n+// lua functions used to filter completion matches\n+// global_filterfunc is used for all completion sources,\n+// while user_filterfunc is only used to filter matches\n+// from vim.api.nvim_complete().\n+EXTERN LuaRef global_filterfunc INIT(= LUA_NOREF);\n+EXTERN LuaRef user_filterfunc INIT(= LUA_NOREF);\n+EXTERN LuaRef active_filterfunc INIT(= LUA_NOREF);",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715588018",
            "id": 715588018,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qpwGy",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 22,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/edit.h",
            "position": 1,
            "pull_request_review_id": 763044582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715588018/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-24T12:54:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715588018",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715798536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715798536"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Making it an option does sound better, but I'm not sure how this would interact with the local 'filterfunc' option specified in `vim.api.nvim_complete`, since one would be a string referencing a viml function (or a lua function via `v:lua`), and the other would be a LuaRef. If possible, I'd like to avoid passing unions of viml funcref and luarefs around. Do you have any suggestions regarding this?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-24T17:45:09Z",
            "diff_hunk": "@@ -2937,3 +2938,106 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts, Erro\n error:\n   decor_provider_clear(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion.\n+String nvim_complete(Integer startcol,\n+                     Array matches,\n+                     DictionaryOf(LuaRef) opts,\n+                     Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed(curbuf)) {\n+      goto error;\n+  }\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")) {\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected lua function\");\n+        goto error;\n+      }\n+      active_filterfunc = user_filterfunc = v->data.luaref;\n+      v->data.luaref = LUA_NOREF;\n+    } else if (strequal(k.data, \"exact\")) {\n+      if (v->type != kObjectTypeBoolean) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected boolean\");\n+        goto error;\n+      }\n+      if (v->data.boolean) {\n+        active_filterfunc = LUA_NOREF;\n+      }\n+    } else {\n+      api_set_error(err, kErrorTypeValidation,\n+                    \"unexpected key\");\n+      goto error;\n+    }\n+  }\n+\n+  object_to_vim(ARRAY_OBJ(matches), &tv, err);\n+  if ERROR_SET(err) {\n+      goto error;\n+  }\n+\n+  set_completion((colnr_T)startcol - 1, tv.vval.v_list);\n+\n+error:\n+  tv_clear(&tv);\n+\n+  String ret = STRING_INIT;\n+  return ret;\n+}\n+\n+///\n+/// Register a lua function for filtering completion matches.\n+/// The function must take in two arguments: the prefix (the\n+/// currently typed text), and the text for a completion entry, and\n+/// returns a float. Higher return values imply a better match, and a\n+/// return value of 0 removes the entry from being shown.\n+/// To remove the currently registered function, call the function\n+/// with a nil value.\n+///\n+/// @param func: function to register for filtering.\n+///\n+void nvim_register_filterfunc(LuaRef func, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715798536",
            "id": 715798536,
            "in_reply_to_id": 715575649,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qqjgI",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 3035,
            "original_position": 103,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 763333882,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715798536/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-24T17:45:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715798536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715803168"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715803168"
                }
            },
            "author_association": "MEMBER",
            "body": "> since one would be a string referencing a viml function (or a lua function via `v:lua`), and the other would be a LuaRef.\r\n\r\nno, the idea is that options could support Lua functions.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-24T17:52:48Z",
            "diff_hunk": "@@ -2937,3 +2938,106 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts, Erro\n error:\n   decor_provider_clear(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion.\n+String nvim_complete(Integer startcol,\n+                     Array matches,\n+                     DictionaryOf(LuaRef) opts,\n+                     Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed(curbuf)) {\n+      goto error;\n+  }\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")) {\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected lua function\");\n+        goto error;\n+      }\n+      active_filterfunc = user_filterfunc = v->data.luaref;\n+      v->data.luaref = LUA_NOREF;\n+    } else if (strequal(k.data, \"exact\")) {\n+      if (v->type != kObjectTypeBoolean) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected boolean\");\n+        goto error;\n+      }\n+      if (v->data.boolean) {\n+        active_filterfunc = LUA_NOREF;\n+      }\n+    } else {\n+      api_set_error(err, kErrorTypeValidation,\n+                    \"unexpected key\");\n+      goto error;\n+    }\n+  }\n+\n+  object_to_vim(ARRAY_OBJ(matches), &tv, err);\n+  if ERROR_SET(err) {\n+      goto error;\n+  }\n+\n+  set_completion((colnr_T)startcol - 1, tv.vval.v_list);\n+\n+error:\n+  tv_clear(&tv);\n+\n+  String ret = STRING_INIT;\n+  return ret;\n+}\n+\n+///\n+/// Register a lua function for filtering completion matches.\n+/// The function must take in two arguments: the prefix (the\n+/// currently typed text), and the text for a completion entry, and\n+/// returns a float. Higher return values imply a better match, and a\n+/// return value of 0 removes the entry from being shown.\n+/// To remove the currently registered function, call the function\n+/// with a nil value.\n+///\n+/// @param func: function to register for filtering.\n+///\n+void nvim_register_filterfunc(LuaRef func, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715803168",
            "id": 715803168,
            "in_reply_to_id": 715575649,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qqkog",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 3035,
            "original_position": 103,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 763339930,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715803168/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-24T17:52:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715803168",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r715973990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/715973990"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I've made 'completefilterfunc' an option now.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-09-25T01:57:18Z",
            "diff_hunk": "@@ -2937,3 +2938,106 @@ void nvim_set_decoration_provider(Integer ns_id, DictionaryOf(LuaRef) opts, Erro\n error:\n   decor_provider_clear(p);\n }\n+\n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |nvim_register_filterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion.\n+String nvim_complete(Integer startcol,\n+                     Array matches,\n+                     DictionaryOf(LuaRef) opts,\n+                     Error *err)\n+  FUNC_API_SINCE(7)\n+{\n+  typval_T tv;\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed(curbuf)) {\n+      goto error;\n+  }\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+\n+    if (strequal(k.data, \"filterfunc\")) {\n+      if (v->type != kObjectTypeLuaRef) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected lua function\");\n+        goto error;\n+      }\n+      active_filterfunc = user_filterfunc = v->data.luaref;\n+      v->data.luaref = LUA_NOREF;\n+    } else if (strequal(k.data, \"exact\")) {\n+      if (v->type != kObjectTypeBoolean) {\n+        api_set_error(err, kErrorTypeValidation,\n+                      \"expected boolean\");\n+        goto error;\n+      }\n+      if (v->data.boolean) {\n+        active_filterfunc = LUA_NOREF;\n+      }\n+    } else {\n+      api_set_error(err, kErrorTypeValidation,\n+                    \"unexpected key\");\n+      goto error;\n+    }\n+  }\n+\n+  object_to_vim(ARRAY_OBJ(matches), &tv, err);\n+  if ERROR_SET(err) {\n+      goto error;\n+  }\n+\n+  set_completion((colnr_T)startcol - 1, tv.vval.v_list);\n+\n+error:\n+  tv_clear(&tv);\n+\n+  String ret = STRING_INIT;\n+  return ret;\n+}\n+\n+///\n+/// Register a lua function for filtering completion matches.\n+/// The function must take in two arguments: the prefix (the\n+/// currently typed text), and the text for a completion entry, and\n+/// returns a float. Higher return values imply a better match, and a\n+/// return value of 0 removes the entry from being shown.\n+/// To remove the currently registered function, call the function\n+/// with a nil value.\n+///\n+/// @param func: function to register for filtering.\n+///\n+void nvim_register_filterfunc(LuaRef func, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r715973990",
            "id": 715973990,
            "in_reply_to_id": 715575649,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4qrOVm",
            "original_commit_id": "1b03518215c566a58f8a61fbd101c842bffd20c8",
            "original_line": 3035,
            "original_position": 103,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 763550770,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715973990/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-09-25T01:57:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/715973990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723303383"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723303383"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ndescribe(\"fuzzy completion: completefilterfunc, nvim_complete\", function()\r\n```",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T13:56:33Z",
            "diff_hunk": "@@ -1194,3 +1194,271 @@ describe('completion', function()\n     feed('<esc>')\n   end)\n end)\n+\n+describe(\"fuzzy completion\", function()",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723303383",
            "id": 723303383,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHLvX",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 1198,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/functional/editor/completion_spec.lua",
            "position": 1,
            "pull_request_review_id": 772740709,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723303383/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T13:56:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723303383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723305712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723305712"
                }
            },
            "author_association": "MEMBER",
            "body": "I would expect pretty quickly that users would want this to be buffer-local option instead of global. Any reason not to?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T13:58:49Z",
            "diff_hunk": "@@ -444,6 +444,13 @@ return {\n       varname='p_cfu',\n       defaults={if_true=\"\"}\n     },\n+    {\n+      full_name='completefilterfunc', abbreviation='cff',\n+      short_desc=N_(\"function to filter completion matches\"),\n+      type='string', scope={'global'},",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723305712",
            "id": 723305712,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHMTw",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 450,
            "original_position": 7,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": 1,
            "pull_request_review_id": 772743953,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723305712/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T13:58:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723305712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723309257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723309257"
                }
            },
            "author_association": "MEMBER",
            "body": "should it also affect 'omnifunc' (optionally)? ",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:02:15Z",
            "diff_hunk": "@@ -1392,6 +1392,22 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tbased expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n \t|i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n \n+\t\t\t\t\t\t*'completefilterfunc'* *'cff'*\n+'completefilterfunc' 'cff' string (default: empty)\n+\tThis option specifies a function to be used for filtering insert\n+\tmode completion entries. The function must have the signature",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723309257",
            "id": 723309257,
            "line": 1399,
            "node_id": "PRRC_kwDOAPphoM4rHNLJ",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 1399,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 8,
            "pull_request_review_id": 772748941,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723309257/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:02:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723309257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723310929"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723310929"
                }
            },
            "author_association": "MEMBER",
            "body": "single-quotes in vim :help docs have a special meaning, they always refer to editor options.\r\n```suggestion\r\n\twhere \"entry\" is a completion candidate, \"prefix\" is the text\r\n```",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:04:01Z",
            "diff_hunk": "@@ -1392,6 +1392,22 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tbased expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n \t|i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n \n+\t\t\t\t\t\t*'completefilterfunc'* *'cff'*\n+'completefilterfunc' 'cff' string (default: empty)\n+\tThis option specifies a function to be used for filtering insert\n+\tmode completion entries. The function must have the signature\n+\n+\t\tfunction(prefix, entry),\n+\n+\twhere 'entry' is a completion candidate, 'prefix' is the text",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723310929",
            "id": 723310929,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHNlR",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 1402,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 1,
            "pull_request_review_id": 772751445,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723310929/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:04:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723310929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723314341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723314341"
                }
            },
            "author_association": "MEMBER",
            "body": "For reference, what are the reasons for adding this API function instead of augmenting the existing `complete()`?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:07:26Z",
            "diff_hunk": "@@ -2882,3 +2883,85 @@ Array nvim_get_mark(String name, Error *err)\n   return rv;\n }\n \n+///\n+/// Set matches and start insert completion: see |complete()|.",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723314341",
            "id": 723314341,
            "line": 3104,
            "node_id": "PRRC_kwDOAPphoM4rHOal",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 3104,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 14,
            "pull_request_review_id": 772756384,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723314341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:07:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723314341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723315445"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723315445"
                }
            },
            "author_association": "MEMBER",
            "body": "this seems pretty janky, is it avoidable?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:08:26Z",
            "diff_hunk": "@@ -2882,3 +2883,85 @@ Array nvim_get_mark(String name, Error *err)\n   return rv;\n }\n \n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |completefilterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion. Note that only\n+///                     one of this option and 'filterfunc' can be set.\n+/// @return The empty string. To prevent this function from inserting\n+/// a 0 character into the buffer, wrap nvim_complete around another",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723315445",
            "id": 723315445,
            "line": 3114,
            "node_id": "PRRC_kwDOAPphoM4rHOr1",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 3114,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 24,
            "pull_request_review_id": 772757817,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723315445/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:08:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723315445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723317409"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723317409"
                }
            },
            "author_association": "MEMBER",
            "body": "is \"exact\" really needed, or is it trivial to mimic it with a function?\r\nWould avoid this extra documentation/logic.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:10:15Z",
            "diff_hunk": "@@ -2882,3 +2883,85 @@ Array nvim_get_mark(String name, Error *err)\n   return rv;\n }\n \n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |completefilterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion. Note that only\n+///                     one of this option and 'filterfunc' can be set.\n+/// @return The empty string. To prevent this function from inserting\n+/// a 0 character into the buffer, wrap nvim_complete around another\n+/// function: see |complete()| for more details.\n+String nvim_complete(Integer startcol,\n+                     Array matches,\n+                     Dict(completion) *opts,\n+                     Error *err)\n+  FUNC_API_SINCE(8)\n+{\n+  typval_T tv;\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed(curbuf)) {\n+      goto error;\n+  }\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  if (HAS_KEY(opts->exact) && HAS_KEY(opts->filterfunc)) {\n+    api_set_error(err, kErrorTypeValidation,\n+                  \"cannot set both 'filterfunc' and 'exact'\");",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723317409",
            "id": 723317409,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHPKh",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 2930,
            "original_position": 55,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 772760470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723317409/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723317409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723329556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723329556"
                }
            },
            "author_association": "MEMBER",
            "body": "There is `CallbackType` and `LuaCallable` but I'm not sure if they fit in this PR easily. I guess this is fine for now.\r\n\r\n@bfredl @tjdevries  do we have a generalized \"funcref\" container that can hold a lua/vimscript function? Would `CallbackType` fit here?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:21:42Z",
            "diff_hunk": "@@ -22,6 +23,29 @@ typedef enum {\n   CP_FAST = 32,          // use fast_breakcheck instead of os_breakcheck\n } cp_flags_T;\n \n+// Function for use in filtering completion entries.\n+// Can either be a string referencing a viml function,\n+// a LuaRef to a lua function, or a flag reverting back\n+// to exact prefix matching.\n+typedef enum {\n+  kFuncTypeString,\n+  kFuncTypeLuaRef,\n+  kFuncTypeExact,\n+  kFuncTypeNil\n+} FuncType;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723329556",
            "id": 723329556,
            "line": 33,
            "node_id": "PRRC_kwDOAPphoM4rHSIU",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 33,
            "original_position": 21,
            "original_start_line": null,
            "path": "src/nvim/edit.h",
            "position": 19,
            "pull_request_review_id": 772776671,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723329556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:21:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723329556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723338635"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723338635"
                }
            },
            "author_association": "MEMBER",
            "body": "`<float.h>` has `DBL_MAX` but maybe we should define this to something less system-specific. Is there a need for a rank higher than  99999?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:30:41Z",
            "diff_hunk": "@@ -90,6 +94,8 @@\n #define CTRL_X_MODE_LINE_OR_EVAL(m) \\\n   ((m) == CTRL_X_WHOLE_LINE || (m) == CTRL_X_EVAL)\n \n+#define DOUBLE_MAX 1.79769e+308",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723338635",
            "id": 723338635,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHUWL",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 97,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 772789417,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723338635/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:30:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723338635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723340051"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723340051"
                }
            },
            "author_association": "MEMBER",
            "body": "is it much trouble to extract this to a separate function, e.g. `ins_compl_match_fuzzy`",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:32:04Z",
            "diff_hunk": "@@ -2468,13 +2486,86 @@ static int ins_compl_add(char_u *const str, int len, char_u *const fname,\n ///\n /// @param  match  completion match\n /// @param  str    character string to check\n-/// @param  len    length of \"str\"\n-static bool ins_compl_equal(compl_T *match, char_u *str, size_t len)\n+/// @param  len    lenth of \"str\"\n+///\n+/// @return The matching score: 0 means no match, any other value\n+/// implies a match, with higher scores indicating more matching.\n+static double ins_compl_match(compl_T *match, char_u *str, size_t len)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   if (match->cp_flags & CP_EQUAL) {\n     return true;\n   }\n+\n+  // default to local filterfunc if it exists; otherwise,\n+  // fall back to the 'completefilterfunc' option.\n+  compl_filterfunc_T filter_func = local_filter_func;\n+  if (filter_func.type == kFuncTypeNil) {\n+    if (STRLEN(p_cff)) {\n+      filter_func.type = kFuncTypeString;\n+      filter_func.data.name = vim_strsave(p_cff);\n+    }\n+  }\n+\n+  if (filter_func.type != kFuncTypeExact && filter_func.type != kFuncTypeNil) {",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723340051",
            "id": 723340051,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHUsT",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 2511,
            "original_position": 80,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 772791428,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723340051/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:32:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723340051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723342351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723342351"
                }
            },
            "author_association": "MEMBER",
            "body": "usual pattern in the codebase is to compare `compl_leader[0] == NUL`",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-06T14:34:21Z",
            "diff_hunk": "@@ -3791,7 +3984,7 @@ static bool ins_compl_prep(int c)\n       // but only do this, if the Popup is still visible\n       if (c == Ctrl_E) {\n         ins_compl_delete();\n-        if (compl_leader != NULL) {\n+        if (compl_leader != NULL && STRNCMP(compl_leader, \"\", 1) != 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723342351",
            "id": 723342351,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rHVQP",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 3987,
            "original_position": 517,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 772794663,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723342351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-06T14:34:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723342351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723790709"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723790709"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I set it to global because I couldn't get a local option to compile, but I think I figured it out now.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-07T01:50:26Z",
            "diff_hunk": "@@ -444,6 +444,13 @@ return {\n       varname='p_cfu',\n       defaults={if_true=\"\"}\n     },\n+    {\n+      full_name='completefilterfunc', abbreviation='cff',\n+      short_desc=N_(\"function to filter completion matches\"),\n+      type='string', scope={'global'},",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723790709",
            "id": 723790709,
            "in_reply_to_id": 723305712,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rJCt1",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 450,
            "original_position": 7,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": 1,
            "pull_request_review_id": 773369985,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723790709/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-07T01:50:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723790709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723790772"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723790772"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Currently, it does affect omnifunc completion.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-07T01:50:40Z",
            "diff_hunk": "@@ -1392,6 +1392,22 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tbased expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n \t|i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n \n+\t\t\t\t\t\t*'completefilterfunc'* *'cff'*\n+'completefilterfunc' 'cff' string (default: empty)\n+\tThis option specifies a function to be used for filtering insert\n+\tmode completion entries. The function must have the signature",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723790772",
            "id": 723790772,
            "in_reply_to_id": 723309257,
            "line": 1399,
            "node_id": "PRRC_kwDOAPphoM4rJCu0",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 1399,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 8,
            "pull_request_review_id": 773370060,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723790772/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-07T01:50:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723790772",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723792113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792113"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Having the opts dictionary allows for better extensibility without adding a bunch of new vimscript functions. In the future, I'd like to expose more of the completion list via this api function, so that plugins can add or remove matches (like 'complete_add', but for stuff besides 'completefunc') . In addition, having it be an api function is more ergonomic as plugins can just directly pass a lua function as 'filterfunc' instead of resorting to 'v:lua'.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-07T01:55:26Z",
            "diff_hunk": "@@ -2882,3 +2883,85 @@ Array nvim_get_mark(String name, Error *err)\n   return rv;\n }\n \n+///\n+/// Set matches and start insert completion: see |complete()|.",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723792113",
            "id": 723792113,
            "in_reply_to_id": 723314341,
            "line": 3104,
            "node_id": "PRRC_kwDOAPphoM4rJDDx",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 3104,
            "original_position": 13,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 14,
            "pull_request_review_id": 773371708,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792113/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-07T01:55:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723792403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792403"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I tried having the function returning void, but that ended up inserting the string \"null\" into the buffer. I updated the docs with more ways to get around this: wrapping 'nvim_complete' in another function, calling it via 'luaeval', or using a `<cmd>` mapping.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-07T01:56:32Z",
            "diff_hunk": "@@ -2882,3 +2883,85 @@ Array nvim_get_mark(String name, Error *err)\n   return rv;\n }\n \n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |completefilterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion. Note that only\n+///                     one of this option and 'filterfunc' can be set.\n+/// @return The empty string. To prevent this function from inserting\n+/// a 0 character into the buffer, wrap nvim_complete around another",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723792403",
            "id": 723792403,
            "in_reply_to_id": 723315445,
            "line": 3114,
            "node_id": "PRRC_kwDOAPphoM4rJDIT",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 3114,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 24,
            "pull_request_review_id": 773372070,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792403/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-07T01:56:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792403",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723792538"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792538"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Set it to 999999, and noted the max in the documentation.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-07T01:56:59Z",
            "diff_hunk": "@@ -90,6 +94,8 @@\n #define CTRL_X_MODE_LINE_OR_EVAL(m) \\\n   ((m) == CTRL_X_WHOLE_LINE || (m) == CTRL_X_EVAL)\n \n+#define DOUBLE_MAX 1.79769e+308",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723792538",
            "id": 723792538,
            "in_reply_to_id": 723338635,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rJDKa",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 97,
            "original_position": 22,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": 1,
            "pull_request_review_id": 773372218,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792538/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-07T01:56:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723792538",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r723793560"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/723793560"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Exact prefix matching can be emulated with the following function:\r\n\r\n```lua\r\nfunction(prefix, match)\r\n  return prefix == match:sub(1, #prefix) and 1 or 0\r\nend\r\n```\r\n\r\nI'm open to removing the 'exact' keyword if you don't think it's needed.",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-07T02:00:23Z",
            "diff_hunk": "@@ -2882,3 +2883,85 @@ Array nvim_get_mark(String name, Error *err)\n   return rv;\n }\n \n+///\n+/// Set matches and start insert completion: see |complete()|.\n+///\n+/// @param startcol: Byte offset where the completed text starts.\n+///                     Any text between startcol and the current\n+///                     cursor col is replaced by the completion.\n+/// @param matches: A list of string matches.\n+/// @param opts: Dictionary. Possible keys:\n+///                 filterfunc: function used for filtering the\n+///                     matches. See |completefilterfunc|.\n+///                 exact: boolean value. If true, disables fuzzy\n+///                     finding and reverts to default exact prefix\n+///                     matching for this completion. Note that only\n+///                     one of this option and 'filterfunc' can be set.\n+/// @return The empty string. To prevent this function from inserting\n+/// a 0 character into the buffer, wrap nvim_complete around another\n+/// function: see |complete()| for more details.\n+String nvim_complete(Integer startcol,\n+                     Array matches,\n+                     Dict(completion) *opts,\n+                     Error *err)\n+  FUNC_API_SINCE(8)\n+{\n+  typval_T tv;\n+\n+  if ((State & INSERT) == 0) {\n+    api_set_error(err, kErrorTypeException,\n+                  \"complete() can only be used in Insert mode\");\n+    goto error;\n+  }\n+\n+  // Check for undo allowed here, because if something was already inserted\n+  // the line was already saved for undo and this check isn't done.\n+  if (!undo_allowed(curbuf)) {\n+      goto error;\n+  }\n+\n+  if (startcol <= 0) {\n+      goto error;\n+  }\n+\n+  if (HAS_KEY(opts->exact) && HAS_KEY(opts->filterfunc)) {\n+    api_set_error(err, kErrorTypeValidation,\n+                  \"cannot set both 'filterfunc' and 'exact'\");",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r723793560",
            "id": 723793560,
            "in_reply_to_id": 723317409,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4rJDaY",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 2930,
            "original_position": 55,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 1,
            "pull_request_review_id": 773373460,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723793560/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-07T02:03:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/723793560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r724639000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/724639000"
                }
            },
            "author_association": "MEMBER",
            "body": "Whatever we end up using here is likely what we'll do for #15944 as well",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-08T01:30:48Z",
            "diff_hunk": "@@ -22,6 +23,29 @@ typedef enum {\n   CP_FAST = 32,          // use fast_breakcheck instead of os_breakcheck\n } cp_flags_T;\n \n+// Function for use in filtering completion entries.\n+// Can either be a string referencing a viml function,\n+// a LuaRef to a lua function, or a flag reverting back\n+// to exact prefix matching.\n+typedef enum {\n+  kFuncTypeString,\n+  kFuncTypeLuaRef,\n+  kFuncTypeExact,\n+  kFuncTypeNil\n+} FuncType;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r724639000",
            "id": 724639000,
            "in_reply_to_id": 723329556,
            "line": 33,
            "node_id": "PRRC_kwDOAPphoM4rMR0Y",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 33,
            "original_position": 21,
            "original_start_line": null,
            "path": "src/nvim/edit.h",
            "position": 19,
            "pull_request_review_id": 774522336,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/724639000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-08T01:30:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/724639000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r724659037"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/724659037"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "If this vimscript/lua callable struct is going to be used elsewhere in the future, it might be a good idea to remove the 'exact' key, since that doesn't really fit in well with the concept of a generalized \"callable\" struct",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-08T02:37:32Z",
            "diff_hunk": "@@ -22,6 +23,29 @@ typedef enum {\n   CP_FAST = 32,          // use fast_breakcheck instead of os_breakcheck\n } cp_flags_T;\n \n+// Function for use in filtering completion entries.\n+// Can either be a string referencing a viml function,\n+// a LuaRef to a lua function, or a flag reverting back\n+// to exact prefix matching.\n+typedef enum {\n+  kFuncTypeString,\n+  kFuncTypeLuaRef,\n+  kFuncTypeExact,\n+  kFuncTypeNil\n+} FuncType;",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r724659037",
            "id": 724659037,
            "in_reply_to_id": 723329556,
            "line": 33,
            "node_id": "PRRC_kwDOAPphoM4rMWtd",
            "original_commit_id": "ffd3b8e6912f5c83c5cad062e1a6c40bebcd6641",
            "original_line": 33,
            "original_position": 21,
            "original_start_line": null,
            "path": "src/nvim/edit.h",
            "position": 19,
            "pull_request_review_id": 774545220,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/724659037/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-08T02:37:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/724659037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/13854#discussion_r734205504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/13854"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/734205504"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't the `Local` be lowercase?",
            "commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "created_at": "2021-10-22T03:10:49Z",
            "diff_hunk": "@@ -1392,6 +1392,23 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tbased expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n \t|i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n \n+\t\t\t\t\t\t*'completefilterfunc'* *'cff'*\n+'completefilterfunc' 'cff' string (default: empty)\n+\t\t\tLocal to buffer",
            "html_url": "https://github.com/neovim/neovim/pull/13854#discussion_r734205504",
            "id": 734205504,
            "line": 1397,
            "node_id": "PRRC_kwDOAPphoM4rwxZA",
            "original_commit_id": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
            "original_line": 1397,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 6,
            "pull_request_review_id": 786391733,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/734205504/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-10-22T03:10:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/734205504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Questions:\r\n- Is `filterfunc` always global? is it possible to be for only a buffer?\r\n- Can `filterfunc` be a string, and therefore a vimL funcref?\r\n- Can `filterfunc` be set / should it be?\r\n- How will this interact with `complete_add` and other related completion items?\r\n\r\nI will think some more on this as well. I am excited about this possibility :)\r\n",
            "created_at": "2021-02-01T21:14:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-771162744",
            "id": 771162744,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE2Mjc0NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771162744/reactions"
            },
            "updated_at": "2021-02-01T21:14:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771162744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is filterfunc always global? is it possible to be for only a buffer?\r\n\r\nfilterfunc is global, and I'm actually not so sure whether having it be buffer local is actually useful. To me, the much more useful thing to have would be a way to register different filterfuncs for each completion source, ie. a different filterfunc for built in files completion, another one for tag completion, etc. But that work I think can be delegated to a follow up pr.\r\n\r\n> Can filterfunc be a string, and therefore a vimL funcref?\r\n\r\nYeah, this would be good to have. For now, the filterfunc api is lua only, to avoid the extra complexities introduced by having to check whether filterfunc is a lua or viml function, and the different ways for calling them from c code, etc. For now, as a workaround, you can use `vim.fn` to pass a vimscript function.\r\n\r\n> Can filterfunc be set / should it be?\r\n\r\nDown the line, if we allow filterfunc to be a vimscript function, I don't see why not. However, we should consider what setting the option would look like, especially if down the line we allow for multiple filterfuncs, each registered to a different completion source.",
            "created_at": "2021-02-02T04:30:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-771350936",
            "id": 771350936,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTM1MDkzNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771350936/reactions"
            },
            "updated_at": "2021-02-02T04:30:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771350936",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl \r\nThere is one edge case that might merit more discussion. Sometimes, when starting completion, `compl_leader` will be set to `NULL`, meaning that no sorting/filtering is done. That means that the matches will be shown in their original order, and the user has to type a key in order to actually activate sorting/filtering. This may be a bit jarring for the user, since typing a key may cause the entire completion list to change suddenly. Do you think that this behavior is fine to keep, or should we change it?",
            "created_at": "2021-02-02T07:16:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-771423170",
            "id": 771423170,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTQyMzE3MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771423170/reactions"
            },
            "updated_at": "2021-02-02T07:16:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771423170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@chentau Hmm I think it should always call the sort function, it it is not too hard to implement.",
            "created_at": "2021-02-02T08:41:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-771468349",
            "id": 771468349,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTQ2ODM0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771468349/reactions"
            },
            "updated_at": "2021-02-02T08:41:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/771468349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Could there also be a way to disable filtering and sorting all together but also still allow the user to type while the completion just stays? This can help with plugins that repeatedly call `vim.api.nvim_complete` and want to filter and sort the matches themselves. If vim and the completion plugin are both sorting this can cause flickering. This doesn't work with the regular `complete` because typing will cause the menu to go away and also cause flickering. Currently this can be done with setting the filter function to always return a number other than 0 but there should be an option to do this.",
            "created_at": "2021-02-04T20:50:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773595678",
            "id": 773595678,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzU5NTY3OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773595678/reactions"
            },
            "updated_at": "2021-02-04T20:50:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773595678",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Example using the work around to set filterfunc to\r\n```lua\r\nvim.api.nvim_register_filterfunc(function() return 1 end)\r\n```\r\nwill produce this behavior:\r\n![completion_menu](https://user-images.githubusercontent.com/61095988/106954247-85105380-6701-11eb-97e7-d85bf8acd7ee.gif)\r\nHaving an option to disable filtering should result in the same behavior.",
            "created_at": "2021-02-04T20:59:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773599986",
            "id": 773599986,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzU5OTk4Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773599986/reactions"
            },
            "updated_at": "2021-02-04T20:59:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773599986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@oberblastmeister \r\n\r\nIf a plugin wants to take over filtering and sorting from the user, it can just specify the `filterfunc` key of the opts dict like so:\r\n\r\n`vim.api.nvim_complete(1, my_completion_entries, {filterfunc = my_custom_filter})`.\r\n\r\n`my_custom_filter` will automatically override the currently active filterfunc until completion stops.",
            "created_at": "2021-02-04T21:04:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773602469",
            "id": 773602469,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzYwMjQ2OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773602469/reactions"
            },
            "updated_at": "2021-02-04T21:04:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773602469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "tldr: the plugin sorts internally, not using filterfunc to make the menu smoother. this collides with filterfunc causing flickering. disabling filterfunc removes flickering. currently i disable it by doing\r\n```lua\r\nvim.api.nvim_register_filterfunc(function(prefix, _) return 1 end)\r\n```\r\n\r\nI understand. I am asking if there is a way to disable it. For example I am working on a plugin that calls complete on insert change and will *internally* sort and then display those using `complete`. I am trying to disable the filterfunc and instead sorting internally. This is why I am trying to disable it as not doing so can cause flickering. This is an example of the plugin:\r\n![auto_completion](https://user-images.githubusercontent.com/61095988/106955675-89d60700-6703-11eb-928b-76b29695df29.gif)\r\nAs you can see the completion menu is following the cursor and will update the position when the cursor changes while using filterfunc the menu will not follow the cursor, it will only filter. Not disabling the filterfunc causes flickering (im not sure if you can see it in the gif but it is really noticeable):\r\n![flickery](https://user-images.githubusercontent.com/61095988/106956075-11237a80-6704-11eb-87a8-c2145418d30d.gif)\r\n\r\n",
            "created_at": "2021-02-04T21:16:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773608831",
            "id": 773608831,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzYwODgzMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773608831/reactions"
            },
            "updated_at": "2021-02-04T21:20:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773608831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It's probably a good idea to allow `nil` in the opts argument, so that `vim.api.nvim_complete(1, matches, {filterfunc=nil})` reverts back to the default behavior of exact prefix matching. As far as I can tell (I may be wrong), the flicker is caused by when there is already a popup visible that then gets reset by calling `nvim_complete` again. Another option is to have a filterfunc that shows all candidates when starting completion, but then shuts down the popupmenu after a letter is typed, leaving it up to the plugin to call `nvim_complete` again:\r\n\r\n```lua\r\nfilterfunc = function(prefix, match)\r\n  if prefix == \"\" then -- completion just started\r\n    return 1\r\n  else -- user has typed a letter: treat everything as non-matching so popupmenu doesn't show\r\n    return 0\r\n  end\r\nend\r\n```\r\n\r\nAlternatively, you could also look into using `completefunc` with `refresh: always`, in which case vim delegates all control over fetching candidates, filtering, and sorting to the `completefunc`.\r\n\r\nIn general, though, I'm not the biggest fan of plugins triggering and re-triggering completion, since it causes these awkward flashes where the pum is being opened and closed repeatedly. I think a better idea is to add api functions to manipulate the internal list of current matches, something like: `vim.api.nvim_compl_add_matches, vim.api.nvim_compl_clear_matches`, etc.\r\nThen, a plugin can simply start completion once, and then add and delete matches on `InsertChange` while leaving all display logic up to vim.",
            "created_at": "2021-02-04T23:44:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773677477",
            "id": 773677477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzY3NzQ3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773677477/reactions"
            },
            "updated_at": "2021-02-04T23:44:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773677477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Allowing filterfunc to be nil is a good idea but what I am proposing is to disable any filterer, even the default exact prefix matching. The result of this should be that the user is typing but nothing is happening on the completion popup like [above](https://github.com/neovim/neovim/pull/13854#issuecomment-773599986). The option can be called `frozen`.\r\n\r\nYou are partially correct about the flickering. The cause of the flickering is vim trying to filter and then the plugin displaying the results through `nvim_complete`. Allowing to disable filtering would fix this. Calling `nvim_complete` multiple times by itself will not cause flickering. What does cause flickering is when nvim tries to filter but the plugin is also trying to filter. Shutting the popup menu after a key is typed is even worse for flickering because the menu will leave and then the plugin will open the menu again. (this is also the default behavior for the vim function `complete`).\r\n\r\nThe plugin uses dynamic results every time something is typed and also uses a fuzzy matcher. As I understand filter that this pr proposes can only narrow down results. The fuzzy matcher does not necessarily narrow down matches on each key press, it could add more matches. Then we have to call `nvim_complete` again which is very important to not flicker, which can be alleviated by allowing to disable the filterer. I think that this pr is very cool but I think that it should allow the filterfunc to be disabled to allow more extensibility and different ways of doing completion for plugins.\r\n\r\nI understand the concern of a plugin triggering completion multiple times but it doesn't actually cause flickering if the filterer can be delegated to either vim or the plugin, in this case allowing the vim filterer to be disabled.",
            "created_at": "2021-02-05T02:18:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773735263",
            "id": 773735263,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzczNTI2Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773735263/reactions"
            },
            "updated_at": "2021-02-05T02:18:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773735263",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@oberblastmeister \r\nHm I think I get what you're saying. For me though, I think that the solution (a filterfunc that just returns 1) seems perfectly fine to me, and I don't know if it would actually be useful to add it as an a boolean argument.\r\nFor one, I don't know if frozen behavior would be so commonly used (besides your plugin, ofc), as many other plugins wanting similar behavior may instead choose to use `completefunc` with `refresh: always`. And most users would probably not use such a feature for built in completion. Secondly, the fix of setting filterfunc to be a function returning 1 only seems simple and easy enough that it wouldn't save that much effort to instead have something like `frozen = true`.",
            "created_at": "2021-02-05T03:38:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-773764774",
            "id": 773764774,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3Mzc2NDc3NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773764774/reactions"
            },
            "updated_at": "2021-02-05T03:38:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/773764774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@chentau thank you for your explanation. I guess returning one from a function will work. I am wondering about performance though because vim should still be trying to sort the list even though they are all one which seems unnecessary. Also I don't think just this plugin will make use of that feature because there are a plethora of plugins that auto-trigger completion like `completion-nvim`, `coc.nvim`, `kok.nvim`, `compe-nvim` that all might benefit.\r\n\r\nEdit: I realized that setting `equal=1` in the `complete-items` also disables filtering. A separate option might not be useful as there are already many ways to disable it. (but im still worried about performance though)",
            "created_at": "2021-02-05T13:23:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-774030504",
            "id": 774030504,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDAzMDUwNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774030504/reactions"
            },
            "updated_at": "2021-02-05T22:22:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774030504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `vim.api.nvim_complete(1, my_completion_entries, {filterfunc = my_custom_filter})`.\r\n\r\nI think doing `filterfunc = false` would be a good way to signal that you don't want to do anything internally. (note: `filterfunc = nil` doesn't do anything in Lua).\r\n\r\nI think there are some other APIs @oberblastmeister is talking about that could be very useful for us on rofl.nvim ( which is why I assume you're here @oberblastmeister  :laughing: ) that hopefully can make async filling of the completion list possible and easier for external plugins.\r\n\r\nI'll think some more about what else is happening here. :)\r\n\r\n\r\n\r\n",
            "created_at": "2021-02-05T22:09:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-774315129",
            "id": 774315129,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDMxNTEyOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774315129/reactions"
            },
            "updated_at": "2021-02-05T22:09:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774315129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tjdevries haha yes this was for the beloved rofl.nvim :smile: `filter_func = false` would be nice because even though you set the filterfunc to `function() return 1 end` it might be slower, telling the api to stop filtering might be good.",
            "created_at": "2021-02-05T22:22:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-774320132",
            "id": 774320132,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDMyMDEzMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774320132/reactions"
            },
            "updated_at": "2021-02-05T22:22:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774320132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tjdevries @bfredl  This is ready for review again. I'll squash and rebase after this looks ready to merge, and we've decided on how to address the raised comments.",
            "created_at": "2021-02-06T02:33:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-774382905",
            "id": 774382905,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDM4MjkwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774382905/reactions"
            },
            "updated_at": "2021-02-06T02:33:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774382905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "When I call complete in quick succession neovim is crashing\r\n`free(): invalid pointer zsh: abort (core dumped)`\r\n\r\nThis is the output of `coredumpctl -1 gdb`\r\n```\r\n           PID: 244187 (nvim)\r\n           UID: 1000 (brian)\r\n           GID: 1000 (brian)\r\n        Signal: 6 (ABRT)\r\n     Timestamp: Fri 2021-02-05 21:44:05 EST (1min 20s ago)\r\n  Command Line: ./build/bin/nvim /home/brian/projects/syn/syn.json\r\n    Executable: /home/brian/projects/chentau_neovim/build/bin/nvim\r\n Control Group: /user.slice/user-1000.slice/session-2.scope\r\n          Unit: session-2.scope\r\n         Slice: user-1000.slice\r\n       Session: 2\r\n     Owner UID: 1000 (brian)\r\n       Boot ID: 40b88ab5904e4b1185dc0cac870cf0a6\r\n    Machine ID: e7354646947746d99a794a0413935caf\r\n      Hostname: oberblastmeister\r\n       Storage: /var/lib/systemd/coredump/core.nvim.1000.40b88ab5904e4b1185dc0cac870cf0a6.244187.1612579445000000.zst\r\n       Message: Process 244187 (nvim) of user 1000 dumped core.\r\n\r\n                Stack trace of thread 244187:\r\n                #0  0x00007f54afa84615 raise (libc.so.6 + 0x3d615)\r\n                #1  0x00007f54afa6d862 abort (libc.so.6 + 0x26862)\r\n                #2  0x00007f54afac65e8 __libc_message (libc.so.6 + 0x7f5e8)\r\n                #3  0x00007f54aface27a malloc_printerr (libc.so.6 + 0x8727a)\r\n                #4  0x00007f54afacf64c _int_free (libc.so.6 + 0x8864c)\r\n                #5  0x00005599c3661871 n/a (/home/brian/projects/chentau_neovim/build/bin/nvim + 0x329871)\r\n                #6  0x0000000000000008 n/a (n/a + 0x0)\r\n```",
            "created_at": "2021-02-06T02:47:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-774384926",
            "id": 774384926,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDM4NDkyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774384926/reactions"
            },
            "updated_at": "2021-02-06T02:47:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/774384926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/61095988?v=4",
                "events_url": "https://api.github.com/users/oberblastmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/oberblastmeister/followers",
                "following_url": "https://api.github.com/users/oberblastmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/oberblastmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oberblastmeister",
                "id": 61095988,
                "login": "oberblastmeister",
                "node_id": "MDQ6VXNlcjYxMDk1OTg4",
                "organizations_url": "https://api.github.com/users/oberblastmeister/orgs",
                "received_events_url": "https://api.github.com/users/oberblastmeister/received_events",
                "repos_url": "https://api.github.com/users/oberblastmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oberblastmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oberblastmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oberblastmeister",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Let us know if you have any questions / need help with something!",
            "created_at": "2021-02-20T03:37:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-782551464",
            "id": 782551464,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjU1MTQ2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/782551464/reactions"
            },
            "updated_at": "2021-02-20T03:37:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/782551464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tjdevries  I think this PR is mostly ready, save for maybe even more tests; I'm just waiting for another round of review from @bfredl , although 0.5 things probably take priority over this. I haven't noticed any crashes.",
            "created_at": "2021-02-20T05:59:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-782567367",
            "id": 782567367,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjU2NzM2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/782567367/reactions"
            },
            "updated_at": "2021-02-20T05:59:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/782567367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "see also:\r\n\r\n- https://github.com/neovim/neovim/pull/8184\r\n- https://github.com/neovim/neovim/issues/12620\r\n- https://github.com/neovim/neovim/pull/12995\r\n",
            "created_at": "2021-09-24T13:04:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-926608570",
            "id": 926608570,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM43Ouy6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/926608570/reactions"
            },
            "updated_at": "2021-09-24T13:06:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/926608570",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Was this more along the lines of what you were thinking?",
            "created_at": "2021-09-25T01:57:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-926993431",
            "id": 926993431,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM43QMwX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/926993431/reactions"
            },
            "updated_at": "2021-09-25T01:57:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/926993431",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl @justinmk Sorry for the multiple pings, but do either of you have time to take a look at this PR and see what it still needs?",
            "created_at": "2021-10-06T01:49:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-935238492",
            "id": 935238492,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM43vptc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/935238492/reactions"
            },
            "updated_at": "2021-10-06T01:49:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/935238492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk  Do you mind reviewing again? I ended up removing the `exact` keyword, because its behavior can be emulated with a one line function and also partly so the \"callable container\" struct can be more generalizable. Overall, I think this PR is getting pretty close to being ready to merge.",
            "created_at": "2021-10-12T05:43:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-940682592",
            "id": 940682592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM44Ea1g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/940682592/reactions"
            },
            "updated_at": "2021-10-12T05:59:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/940682592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Maybe the `'completefilterfunc'` option also needs to be documented in `vim_diff.txt`.",
            "created_at": "2021-10-22T03:05:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-949248881",
            "id": 949248881,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM44lGNx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/949248881/reactions"
            },
            "updated_at": "2021-10-22T04:15:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/949248881",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Inferring from the code, calling `complete()` or `nvim_complete()` without `filterfunc` in the middle of a `nvim_complete()` completion with `filterfunc` doesn't reset the local filterfunc. Is this intended?",
            "created_at": "2021-10-22T04:09:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-949270182",
            "id": 949270182,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM44lLam",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/949270182/reactions"
            },
            "updated_at": "2021-10-22T04:09:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/949270182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@chentau do you have plans to pick this back up? I would really like to see this through and I'm considering picking it up to try and get it merged. Any thoughts?",
            "created_at": "2022-04-02T14:19:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-1086650524",
            "id": 1086650524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM5AxPic",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1086650524/reactions"
            },
            "updated_at": "2022-04-02T14:19:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1086650524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/108725?v=4",
                "events_url": "https://api.github.com/users/fsouza/events{/privacy}",
                "followers_url": "https://api.github.com/users/fsouza/followers",
                "following_url": "https://api.github.com/users/fsouza/following{/other_user}",
                "gists_url": "https://api.github.com/users/fsouza/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fsouza",
                "id": 108725,
                "login": "fsouza",
                "node_id": "MDQ6VXNlcjEwODcyNQ==",
                "organizations_url": "https://api.github.com/users/fsouza/orgs",
                "received_events_url": "https://api.github.com/users/fsouza/received_events",
                "repos_url": "https://api.github.com/users/fsouza/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fsouza/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fsouza/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fsouza",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The PR as it currently stands is almost ready for merge. However, my current goal is to rework this PR into something that fits in with what I proposed in #16488, which is more general and is preferable (in my opinion) to adding a new option - so I think I wouldn't recommend just rebasing and trying to push this version through. If you're willing to start work on the issue I linked, I'd be happy to help out and work together, but otherwise, you might have to wait until the summer, which is when I'll have more time.",
            "created_at": "2022-04-02T16:08:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-1086669727",
            "id": 1086669727,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM5AxUOf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1086669727/reactions"
            },
            "updated_at": "2022-04-02T16:08:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1086669727",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The PR as it currently stands is almost ready for merge. However, my current goal is to rework this PR into something that fits in with what I proposed in #16488, which is more general and is preferable (in my opinion) to adding a new option - so I think I wouldn't recommend just rebasing and trying to push this version through. If you're willing to start work on the issue I linked, I'd be happy to help out and work together, but otherwise, you might have to wait until the summer, which is when I'll have more time.\n\nOh I had completely forgotten about that issue. I think that's more work that I'd be able to put on and the summer is just around the corner, so I can definitely wait. I'll keep an eye on that issue and help with whatever I can. Thank you!",
            "created_at": "2022-04-02T20:19:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-1086715892",
            "id": 1086715892,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM5Axff0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1086715892/reactions"
            },
            "updated_at": "2022-04-02T20:19:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1086715892",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/108725?v=4",
                "events_url": "https://api.github.com/users/fsouza/events{/privacy}",
                "followers_url": "https://api.github.com/users/fsouza/followers",
                "following_url": "https://api.github.com/users/fsouza/following{/other_user}",
                "gists_url": "https://api.github.com/users/fsouza/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fsouza",
                "id": 108725,
                "login": "fsouza",
                "node_id": "MDQ6VXNlcjEwODcyNQ==",
                "organizations_url": "https://api.github.com/users/fsouza/orgs",
                "received_events_url": "https://api.github.com/users/fsouza/received_events",
                "repos_url": "https://api.github.com/users/fsouza/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fsouza/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fsouza/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fsouza",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "matchfuzzy() is somewhat related https://github.com/vim/vim/pull/6932",
            "created_at": "2022-05-04T01:11:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-1116846299",
            "id": 1116846299,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM5Ckbjb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116846299/reactions"
            },
            "updated_at": "2022-05-04T01:11:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1116846299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`:help fuzzy-matching` is related.\r\n\r\nA completion filter function might still be relevant but should start a new PR.",
            "created_at": "2025-10-13T05:39:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/13854#issuecomment-3395929189",
            "id": 3395929189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
            "node_id": "IC_kwDOAPphoM7KacRl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3395929189/reactions"
            },
            "updated_at": "2025-10-13T05:39:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/3395929189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/13854/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/13854/commits",
    "created_at": "2021-01-31T04:43:17Z",
    "diff_url": "https://github.com/neovim/neovim/pull/13854.diff",
    "draft": true,
    "head": {
        "label": "chentoast:ins_completion_api",
        "ref": "ins_completion_api",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/chentoast/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/chentoast/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/chentoast/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/chentoast/neovim/branches{/branch}",
            "clone_url": "https://github.com/chentoast/neovim.git",
            "collaborators_url": "https://api.github.com/repos/chentoast/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/chentoast/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/chentoast/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/chentoast/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/chentoast/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/chentoast/neovim/contributors",
            "created_at": "2020-12-22T01:47:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/chentoast/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/chentoast/neovim/downloads",
            "events_url": "https://api.github.com/repos/chentoast/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/chentoast/neovim/forks",
            "full_name": "chentoast/neovim",
            "git_commits_url": "https://api.github.com/repos/chentoast/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/chentoast/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/chentoast/neovim/git/tags{/sha}",
            "git_url": "git://github.com/chentoast/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/chentoast/neovim/hooks",
            "html_url": "https://github.com/chentoast/neovim",
            "id": 323492270,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/chentoast/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/chentoast/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/chentoast/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/chentoast/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/chentoast/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/chentoast/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/chentoast/neovim/merges",
            "milestones_url": "https://api.github.com/repos/chentoast/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMjM0OTIyNzA=",
            "notifications_url": "https://api.github.com/repos/chentoast/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
                "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
                "followers_url": "https://api.github.com/users/chentoast/followers",
                "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
                "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chentoast",
                "id": 36219739,
                "login": "chentoast",
                "node_id": "MDQ6VXNlcjM2MjE5NzM5",
                "organizations_url": "https://api.github.com/users/chentoast/orgs",
                "received_events_url": "https://api.github.com/users/chentoast/received_events",
                "repos_url": "https://api.github.com/users/chentoast/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chentoast",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/chentoast/neovim/pulls{/number}",
            "pushed_at": "2022-09-05T15:52:16Z",
            "releases_url": "https://api.github.com/repos/chentoast/neovim/releases{/id}",
            "size": 177391,
            "ssh_url": "git@github.com:chentoast/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/chentoast/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/chentoast/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/chentoast/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/chentoast/neovim/subscription",
            "svn_url": "https://github.com/chentoast/neovim",
            "tags_url": "https://api.github.com/repos/chentoast/neovim/tags",
            "teams_url": "https://api.github.com/repos/chentoast/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/chentoast/neovim/git/trees{/sha}",
            "updated_at": "2021-10-05T22:45:52Z",
            "url": "https://api.github.com/repos/chentoast/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
            "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
            "followers_url": "https://api.github.com/users/chentoast/followers",
            "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
            "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/chentoast",
            "id": 36219739,
            "login": "chentoast",
            "node_id": "MDQ6VXNlcjM2MjE5NzM5",
            "organizations_url": "https://api.github.com/users/chentoast/orgs",
            "received_events_url": "https://api.github.com/users/chentoast/received_events",
            "repos_url": "https://api.github.com/users/chentoast/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/chentoast",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/13854",
    "id": 564582081,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/13854",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "Nvim built-in (omni)completion",
            "id": 3214348835,
            "name": "completion",
            "node_id": "MDU6TGFiZWwzMjE0MzQ4ODM1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/completion"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTY0NTgyMDgx",
    "number": 13854,
    "patch_url": "https://github.com/neovim/neovim/pull/13854.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/13854/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6e23df9b42bf88c25e64ba61aa3a45ba4ad2853b",
    "title": "feat: add option `completefilterfunc` for fuzzy completion",
    "updated_at": "2025-10-13T05:39:48Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/13854",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/36219739?v=4",
        "events_url": "https://api.github.com/users/chentoast/events{/privacy}",
        "followers_url": "https://api.github.com/users/chentoast/followers",
        "following_url": "https://api.github.com/users/chentoast/following{/other_user}",
        "gists_url": "https://api.github.com/users/chentoast/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chentoast",
        "id": 36219739,
        "login": "chentoast",
        "node_id": "MDQ6VXNlcjM2MjE5NzM5",
        "organizations_url": "https://api.github.com/users/chentoast/orgs",
        "received_events_url": "https://api.github.com/users/chentoast/received_events",
        "repos_url": "https://api.github.com/users/chentoast/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chentoast/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chentoast/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chentoast",
        "user_view_type": "public"
    }
}