{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31837/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31837/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31837"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31837"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31837/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/81f4f9abe5f24df6424609f3eb44e419b587d575"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5856,
            "forks_count": 5856,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1849,
            "open_issues_count": 1849,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-02-11T02:06:45Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 307849,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 86062,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-02-11T02:12:27Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 86062,
            "watchers_count": 86062,
            "web_commit_signoff_required": false
        },
        "sha": "a9cdf76e3a142c78b2b5da58c428e15e31cb0a15",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "### Problem\r\nThe UI multigrid protocol does not include enough information to render the UI like the TUI. Both the rendering order and position information are missing.  Furthermore, the lack of position information breaks basic functionality like `screenchar(), screenstring() and getmousepos()`, so many plugins are broken. Especially, the lack of mouse support is quite embarrassing for a GUI and have bothered the Neovide maintainers for a long time.\r\n\r\n### Solution\r\nPartially run the compositor, and include the compositor information in the protocol, `compindex`, `abs_row`, and `abs_col` are included. You can also pass grid 0 to `nvim_input_mouse`, to let nvim determine the grid. \r\n\r\nThe usage of this information is optional, and UIs are still allowed to position the floating windows as they like. But in that case, they still have to pass the grid id to `nvim_input_mouse`, and of course `getmousepos()` and similar does not work in that case.\r\n\r\nIn order to be able to test this, a new test variable `NVIM_TEST_FORCE_MULTIGRID` has been added. This forces `nvim` to run with multigrid enabled, but the code in `screen.lua` emulates the non-multigrid mode, so that almost the whole test suite can be run. Note that this is a manual option for now, but I suppose it could be added to the CI at some point. The whole test suite passes with `NVIM_TEST_FORCE_MULTIGRID=1`, but some tests are disabled due to the following known bugs: #24802, #31811,  #24705. Additionally, there's an unreported bug that the multgrid UI fails to resize when a message is showing.\r\n\r\nAnd some minor behaviour differences have been dealt with using conditionals. For example, in multigrid the cursor moves when the window is moved, while it stays in place in the TUI. And the TUI clears the command-line when it's resized in one of the tests, which to me looks like a bug.\r\n\r\nSome additional test framework fixes were also done:\r\n* make testing of ext_cmdline optional\r\n* reset of cmdline abort state only when the expectation has finished\r\n\r\n\r\nThese changes also lay the foundation for running both multigrid and non-multigrid at the same time, or even to deprecate everything else than multigrid in the future. I'm not sure what's missing, I have not tested, but to me it looks very close. Almost all the multigrid specific code is now a simple `if ui_has(kUIMultigrid)` rather than `if/else`. One difference is `ext_cmdline`, which reports different grid ids and offsets depending on if multigrid is enabled or not. I did not want to fix that, since it's a breaking change.\r\n\r\nThis has been tested on the Neovide side here: https://github.com/neovide/neovide/pull/2919\r\n\r\n* fixes https://github.com/neovim/neovim/issues/30586\r\n* fixes https://github.com/neovim/neovim/issues/30581\r\n* fixes https://github.com/neovim/neovim/issues/29135\r\n* fixes https://github.com/neovim/neovim/issues/27181\r\n* fixes https://github.com/neovim/neovim/issues/24801\r\n\r\n\r\nOther attempts to partially fix some of these issuses\r\n* https://github.com/neovim/neovim/pull/31788\r\n* https://github.com/neovim/neovim/pull/29316",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1901976299"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901976299"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Couldn't the anchor position be updated when the anchor moves, instead of providing screen col/row? Isn't that the same thing?",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T16:51:15Z",
            "diff_hunk": "@@ -610,12 +610,31 @@ tabs.\n \tsize). If the window was previously hidden, it should now be shown\n \tagain.\n \n-[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex] ~\n-\tDisplay or reconfigure floating window `win`. The window should be\n-\tdisplayed above another grid `anchor_grid` at the specified position\n-\t`anchor_row` and `anchor_col`. For the meaning of `anchor` and more details\n-\tof positioning, see |nvim_open_win()|. `mouse_enabled` is true if the\n-\twindow can receive mouse events.\n+[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex, compindex, screen_row, screen_col] ~\n+\tDisplay or reconfigure floating window `win`.\n+\n+\tThere are two alternative ways of positioning the window\n+\t  -  Manually - The window should be displayed above another grid\n+\t     `anchor_grid` at the specified position `anchor_row` and\n+\t     `anchor_col`. For the meaning of `anchor` and more details of\n+\t     positioning, see |nvim_open_win()|. NOTE: you have to manually\n+\t     ensure that the window fits the screen, possibly by further\n+\t     reposition it. Ignore `screen_row` and `screen_col` in this case.\n+\t  - Let nvim take care of the positioning - You can ignore `anchor`",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1901976299",
            "id": 1901976299,
            "line": 623,
            "node_id": "PRRC_kwDOAPphoM5xXdrr",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 623,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 20,
            "pull_request_review_id": 2529404547,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901976299/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T17:32:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901976299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1901977611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901977611"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`nvim_open_win` documents the zindex for msg win and some other elements to be static:\r\n\r\n```\r\n                   • zindex: Stacking order. floats with higher `zindex` go on\r\n                    top on floats with lower indices. Must be larger than\r\n                    zero. The following screen elements have hard-coded\r\n                    z-indices:\r\n                    • 100: insert completion popupmenu\r\n                    • 200: message scrollback\r\n                    • 250: cmdline completion popupmenu (when\r\n                      wildoptions+=pum) The default value for floats are 50.\r\n                      In general, values below 100 are recommended, unless\r\n                      there is a good reason to overshadow builtin elements.\r\n```\r\n\r\nCould the zindex be omitted?",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T16:52:52Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1901977611",
            "id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xXeAL",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529404547,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901977611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T17:32:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1901977611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902020713"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902020713"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Not exactly, the anchor always represents the position that the user requested in `nvim_open_win`, while the absolute position can be offset from that. That's normally done by nvim, when the window would go out of the screen. \r\n\r\nSome UIs, might want to use the anchor exactly, while others don't. One example where they let it overflow is https://github.com/akiyosi/goneovim, if you look at the frontpage.\r\n\r\nIn Neovide, we don't want that, and before these changes, we copied the behaviour and implemented it here https://github.com/neovide/neovide/pull/2029. But it's still not perfect, see this comment for example https://github.com/neovide/neovide/issues/2502#issuecomment-2083173795\r\n\r\n",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T17:45:08Z",
            "diff_hunk": "@@ -610,12 +610,31 @@ tabs.\n \tsize). If the window was previously hidden, it should now be shown\n \tagain.\n \n-[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex] ~\n-\tDisplay or reconfigure floating window `win`. The window should be\n-\tdisplayed above another grid `anchor_grid` at the specified position\n-\t`anchor_row` and `anchor_col`. For the meaning of `anchor` and more details\n-\tof positioning, see |nvim_open_win()|. `mouse_enabled` is true if the\n-\twindow can receive mouse events.\n+[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex, compindex, screen_row, screen_col] ~\n+\tDisplay or reconfigure floating window `win`.\n+\n+\tThere are two alternative ways of positioning the window\n+\t  -  Manually - The window should be displayed above another grid\n+\t     `anchor_grid` at the specified position `anchor_row` and\n+\t     `anchor_col`. For the meaning of `anchor` and more details of\n+\t     positioning, see |nvim_open_win()|. NOTE: you have to manually\n+\t     ensure that the window fits the screen, possibly by further\n+\t     reposition it. Ignore `screen_row` and `screen_col` in this case.\n+\t  - Let nvim take care of the positioning - You can ignore `anchor`",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902020713",
            "id": 1902020713,
            "in_reply_to_id": 1901976299,
            "line": 623,
            "node_id": "PRRC_kwDOAPphoM5xXohp",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 623,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 20,
            "pull_request_review_id": 2529478363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902020713/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T17:45:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902020713",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902029262"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902029262"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Both are important for Neovide, we use the z-index to group the windows into something that resembles a single layer, the telescope UI is a great example of that. The `compindex` on the other hand defines the actual order of windows with the same z-index.\r\n\r\nThis was done https://github.com/neovide/neovide/pull/2612, follow he links from here to see what the issues where.\r\n\r\nYou can ignore the z-index, and just use `compindex` if you don't need special handling like that. In that case, you can perfectly emulate the terminal by first rendering the main grid, then all floating windows in `compindex` order. But let each cell overwrite any other floating window cells at the same location. Then finally do a blending pass between the floating windows and the main grid.\r\n\r\nJust using the z-index could cause of all kinds of issues, with windows being behind each other, when they should not. One example is this https://github.com/neovide/neovide/issues/2624, ",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T17:56:21Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902029262",
            "id": 1902029262,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xXqnO",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529492131,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902029262/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T17:56:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902029262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902038837"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902038837"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Not exactly, the anchor always represents the position that the user requested in nvim_open_win, while the absolute position can be offset from that. That's normally done by nvim, when the window would go out of the screen.\r\n\r\nDoes the anchor position reported to GUIs have to be the position that was requested? Floating windows overflowing is another topic, but feature parity between GUIs and the TUI should probably exist.\r\n\r\n> One example where they let it overflow is https://github.com/akiyosi/goneovim, if you look at the frontpage.\r\n\r\nIsn't that the external window, not a floating window that overflows?",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T18:05:17Z",
            "diff_hunk": "@@ -610,12 +610,31 @@ tabs.\n \tsize). If the window was previously hidden, it should now be shown\n \tagain.\n \n-[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex] ~\n-\tDisplay or reconfigure floating window `win`. The window should be\n-\tdisplayed above another grid `anchor_grid` at the specified position\n-\t`anchor_row` and `anchor_col`. For the meaning of `anchor` and more details\n-\tof positioning, see |nvim_open_win()|. `mouse_enabled` is true if the\n-\twindow can receive mouse events.\n+[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex, compindex, screen_row, screen_col] ~\n+\tDisplay or reconfigure floating window `win`.\n+\n+\tThere are two alternative ways of positioning the window\n+\t  -  Manually - The window should be displayed above another grid\n+\t     `anchor_grid` at the specified position `anchor_row` and\n+\t     `anchor_col`. For the meaning of `anchor` and more details of\n+\t     positioning, see |nvim_open_win()|. NOTE: you have to manually\n+\t     ensure that the window fits the screen, possibly by further\n+\t     reposition it. Ignore `screen_row` and `screen_col` in this case.\n+\t  - Let nvim take care of the positioning - You can ignore `anchor`",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902038837",
            "id": 1902038837,
            "in_reply_to_id": 1901976299,
            "line": 623,
            "node_id": "PRRC_kwDOAPphoM5xXs81",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 623,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 20,
            "pull_request_review_id": 2529508320,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902038837/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T18:05:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902038837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902047152"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902047152"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "But the zindex is static. I've hard coded zindex for msg window and popupmenu in gnvim based on the `nvim_open_win` docs.\r\n\r\ngnvim just renders the windows on top of each other after sorting by zindex. Not sure what there is to achieve by composing them into single layer. Some uniform shadows I assume?\r\n\r\nFrom the linked issue:\r\n> nvim-tree displays a window containing a file selector; when configured to be floating and offset from the upper left corner: typing g? displays another \"help\" window listing nvim-tree's keymaps. Prior to Neovim 0.10.0, this help window appeared alone. Since 0.10.0 the help window appears behind the file selector window and is thus unusable. See context below for conditions.\r\n\r\nAren't floating windows from a single plugin with conflicting z index a bug of the plugin? Fixing that in a GUI doesn't sound right.",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T18:16:37Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902047152",
            "id": 1902047152,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xXu-w",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529521772,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902047152/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T18:16:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902047152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902048924"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902048924"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Does the anchor position reported to GUIs have to be the position that was requested? Floating windows overflowing is another topic, but feature parity between GUIs and the TUI should probably exist.\r\n\r\nIt probably does, or it's a breaking change. It would require negative anchors to deal with situations like these https://github.com/neovide/neovide/issues/1641 (that case is just barely enough to fit in the window, but one column to the left and it would overflow. Also, if the UI render those with a smaller font, then it probably don't need to move.\r\n\r\n> Isn't that the external window, not a floating window that overflows?\r\n\r\nIt could be, but the UI protocol allows the same thing with for floating windows. ",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T18:19:03Z",
            "diff_hunk": "@@ -610,12 +610,31 @@ tabs.\n \tsize). If the window was previously hidden, it should now be shown\n \tagain.\n \n-[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex] ~\n-\tDisplay or reconfigure floating window `win`. The window should be\n-\tdisplayed above another grid `anchor_grid` at the specified position\n-\t`anchor_row` and `anchor_col`. For the meaning of `anchor` and more details\n-\tof positioning, see |nvim_open_win()|. `mouse_enabled` is true if the\n-\twindow can receive mouse events.\n+[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex, compindex, screen_row, screen_col] ~\n+\tDisplay or reconfigure floating window `win`.\n+\n+\tThere are two alternative ways of positioning the window\n+\t  -  Manually - The window should be displayed above another grid\n+\t     `anchor_grid` at the specified position `anchor_row` and\n+\t     `anchor_col`. For the meaning of `anchor` and more details of\n+\t     positioning, see |nvim_open_win()|. NOTE: you have to manually\n+\t     ensure that the window fits the screen, possibly by further\n+\t     reposition it. Ignore `screen_row` and `screen_col` in this case.\n+\t  - Let nvim take care of the positioning - You can ignore `anchor`",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902048924",
            "id": 1902048924,
            "in_reply_to_id": 1901976299,
            "line": 623,
            "node_id": "PRRC_kwDOAPphoM5xXvac",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 623,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 20,
            "pull_request_review_id": 2529524424,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902048924/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T18:19:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902048924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902059367"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902059367"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Ah you mean for this specific call, for the messages, yes it's static, but it could change and new types could be added, so I don't see any reason not to provide it. And it's also possible to read it wrong, like I apparently have done https://github.com/neovide/neovide/pull/2919/files#diff-bc5a2092e5f015050e56c3182e33339f6dd6e456dc07e8a4dd7db8c10ab85980R489\r\n\r\n> gnvim just renders the windows on top of each other after sorting by zindex. Not sure what there is to achieve by composing them into single layer. Some uniform shadows I assume?\r\n\r\nYes, correct blending, including shadows, the prime example is here \r\n![image](https://github.com/user-attachments/assets/d5f0005c-9811-47e7-84cc-9b7819cceb9b)\r\nvs\r\n![image](https://github.com/user-attachments/assets/815b3d9a-e2e5-49f3-bea4-18be19d26bf2)\r\n\r\nWe requested mui to change the rendering to be done int the same way as many other plugins like telescope here https://github.com/MunifTanjim/nui.nvim/issues/372\r\n\r\nWithout this special case, we need many more highlight attributes, and a wide adaptation of it in the whole plugin echo system. Using an existing convention, just made more sense in our opinion since most plugin authors care about the TUI only.\r\n\r\n> Aren't floating windows from a single plugin with conflicting z index a bug of the plugin? Fixing that in a GUI doesn't sound right.\r\n\r\nPerhaps, in that case, but all those bugs are reported to us because the author only test the TUI, so it's much better to be consistent.\r\n",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T18:33:40Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902059367",
            "id": 1902059367,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xXx9n",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529541379,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902059367/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T18:33:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902059367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902067927"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902067927"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> It could be, but the UI protocol allows the same thing with for floating windows.\r\n\r\nThe source of that:\r\n> https://github.com/neovim/neovim/issues/24801#issuecomment-1718455002\r\n\r\nWhich means that everyone that *don't* want that have to handle their own positions currently.",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T18:45:52Z",
            "diff_hunk": "@@ -610,12 +610,31 @@ tabs.\n \tsize). If the window was previously hidden, it should now be shown\n \tagain.\n \n-[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex] ~\n-\tDisplay or reconfigure floating window `win`. The window should be\n-\tdisplayed above another grid `anchor_grid` at the specified position\n-\t`anchor_row` and `anchor_col`. For the meaning of `anchor` and more details\n-\tof positioning, see |nvim_open_win()|. `mouse_enabled` is true if the\n-\twindow can receive mouse events.\n+[\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex, compindex, screen_row, screen_col] ~\n+\tDisplay or reconfigure floating window `win`.\n+\n+\tThere are two alternative ways of positioning the window\n+\t  -  Manually - The window should be displayed above another grid\n+\t     `anchor_grid` at the specified position `anchor_row` and\n+\t     `anchor_col`. For the meaning of `anchor` and more details of\n+\t     positioning, see |nvim_open_win()|. NOTE: you have to manually\n+\t     ensure that the window fits the screen, possibly by further\n+\t     reposition it. Ignore `screen_row` and `screen_col` in this case.\n+\t  - Let nvim take care of the positioning - You can ignore `anchor`",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902067927",
            "id": 1902067927,
            "in_reply_to_id": 1901976299,
            "line": 623,
            "node_id": "PRRC_kwDOAPphoM5xX0DX",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 623,
            "original_position": 20,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 20,
            "pull_request_review_id": 2529555534,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902067927/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T18:45:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902067927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902071567"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902071567"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Shadows based on zindex would still be quite implicit feature. I think it (shadows) should be a window property. Are there other features that _require_ compindex at the moment to function correctly?\r\n\r\n> Perhaps, in that case, but all those bugs are reported to us because the author only test the TUI, so it's much better to be consistent.\r\n\r\nI can imagine that similar thing happens to the neovim project too...",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T18:51:06Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902071567",
            "id": 1902071567,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xX08P",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529561423,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902071567/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T18:51:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902071567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4594126?v=4",
                "events_url": "https://api.github.com/users/vhakulinen/events{/privacy}",
                "followers_url": "https://api.github.com/users/vhakulinen/followers",
                "following_url": "https://api.github.com/users/vhakulinen/following{/other_user}",
                "gists_url": "https://api.github.com/users/vhakulinen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vhakulinen",
                "id": 4594126,
                "login": "vhakulinen",
                "node_id": "MDQ6VXNlcjQ1OTQxMjY=",
                "organizations_url": "https://api.github.com/users/vhakulinen/orgs",
                "received_events_url": "https://api.github.com/users/vhakulinen/received_events",
                "repos_url": "https://api.github.com/users/vhakulinen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vhakulinen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vhakulinen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vhakulinen",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902086007"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902086007"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Are there other features that require compindex at the moment to function correctly?\r\n\r\nWell, assuming that for example telescope fixes their UI (which they didn't for one and a half year https://github.com/nvim-telescope/telescope.nvim/issues/2603), to compose it of elements without any overlap, then perhaps not. It also makes things complex, for example the Noice command line above currently consists of two floats with the same z-index. Doing it \"correctly\", would require 5 (and this is a really simple example). Also, if you compose the window like that, things like mouse input also gets much harder. You could argue that they could use standard Neovim borders, but the UI also have some special borders, so that's not an option. \r\n\r\nBut the issue is really that Neovide, don't have any sort of power to set new standards across the plugin ecosystem. And, so far, we have got very little help from the Neovim core team to slowly move towards that goal, thus pushing for this, which at least makes things work properly in short term. \r\n\r\nWe also don't want to set our own standards, which require Neovide compatible plugins, or even special cases for Neovide. At least not for standard plugins.",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T19:11:10Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902086007",
            "id": 1902086007,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xX4d3",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529585713,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902086007/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T19:11:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902086007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902109046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902109046"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> Are there other features that require compindex at the moment to function correctly?\r\n\r\nContinuing on this.\r\nThe `screenstring()` and similar need to be completely removed and replaced by some alternative if needed. And that UIs always have to provide the mouse coordinates like before and `getmousepos` is removed and replaced by something that only returns window coordinates. But then, what about other elements that don't have neovim assigned window? Or perhaps, make a breaking change, and require the UIs to provide an absolute coordinate in addition to relative ones for `nvim_input_mouse`\r\n\r\nWithout `compindex` the above functions would just behave randomly, dependent on what order Neovim internally use for the windows, and what the UI use.\r\n\r\nBTW, one use case of `screenstring` I can think of, is to be able to select anything, people often complain about that they can't select stuff from the command line with the mouse for example. An UI could implement it without, although it is quite tricky. But with `screenstring`  it could be implemented even for the TUI by a plugin.",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T19:43:31Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902109046",
            "id": 1902109046,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xX-F2",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529623884,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902109046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T19:43:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902109046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31837#discussion_r1902233310"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31837"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902233310"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "BTW, support for windows with the same z-index seems to be something that was deliberately added in the very first implementation of floats, here https://github.com/neovim/neovim/pull/6619. \r\n\r\nThis piece of code makes sure that any window, that the cursor moves to, stays on top of others. And, yes in Neovide we try to mimic that, otherwise some windows that should be visible will be hidden. https://github.com/neovim/neovim/blob/a09c7a5d57ba2aca58fbc00e0b04a1437555a3c0/src/nvim/ui_compositor.c#L281-L293",
            "commit_id": "81f4f9abe5f24df6424609f3eb44e419b587d575",
            "created_at": "2025-01-03T23:24:55Z",
            "diff_hunk": "@@ -628,7 +647,7 @@ tabs.\n [\"win_close\", grid] ~\n \tClose the window.\n \n-[\"msg_set_pos\", grid, row, scrolled, sep_char] ~\n+[\"msg_set_pos\", grid, row, scrolled, sep_char, zindex, compindex] ~",
            "html_url": "https://github.com/neovim/neovim/pull/31837#discussion_r1902233310",
            "id": 1902233310,
            "in_reply_to_id": 1901977611,
            "line": 650,
            "node_id": "PRRC_kwDOAPphoM5xYcbe",
            "original_commit_id": "295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46",
            "original_line": 650,
            "original_position": 43,
            "original_start_line": null,
            "path": "runtime/doc/ui.txt",
            "position": 43,
            "pull_request_review_id": 2529823046,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902233310/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2025-01-03T23:24:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1902233310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> The UI multigrid protocol does not include enough information to render the UI like the TUI. \r\n\r\nThis is expected behavior as the entire point of the multigrid _mode_ is to allow UI states that cannot even be rendered by the TUI (the current implementation/iteration) in the first place.\r\n\r\nThus \"Partially run the compositor\" in multigrid mode is going to be a recipe for unmitigated disaster.  It might work by accident when a single UI is in full control in an artificial test scenario but it is going to be impossible to specify and maintain expectations when using multiple UI:s simultaneously and doing further refactors to the UI subsystem without going insane.\r\n\r\nLuckily there is another path. There is an undocumented UI option called `_debug_float` which we can stabilize as a public option. This uses the same protocol encoding as multigrid but actually keeps neovim in single-grid mode, and exposes the exact _inputs_ to the compositor, without making the behavior of the compositor itself ossified part of the public protocol . But this will be with the understanding that it is a separate mode from running neovim in the fully multigrid mode and the windowing extensions it enables will not be possible. ",
            "created_at": "2025-01-02T21:09:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2568381402",
            "id": 2568381402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZFmPa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568381402/reactions"
            },
            "updated_at": "2025-01-02T21:09:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568381402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`debug_float` looks like a no-op https://github.com/search?q=repo%3Aneovim%2Fneovim%20debug_float&type=code\r\n\r\nAnd searching for  `kUIFloatDebug` gives this https://github.com/search?q=repo%3Aneovim%2Fneovim%20kUIFloatDebug&type=code\r\n\r\nIt just skips attaching the compositor, which is the opposite of what we need. Besides, this PR does not attach the compositor either, it just runs the layout part of it.",
            "created_at": "2025-01-02T21:18:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2568390736",
            "id": 2568390736,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZFohQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568390736/reactions"
            },
            "updated_at": "2025-01-02T21:45:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568390736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I hope you didn't think that it was going to run both multigrid and non-multigrid from the same client, I'm of course talking about two different clients, like a TUI and Neovide attached to the same instance, combined with plugins that also use the UI plugin in either mode,  which I believe is requested here https://github.com/neovim/neovim/issues/31726 \r\n\r\nBut in any case, that's not what this PR does, it just makes it easier to add in the future if desired.",
            "created_at": "2025-01-02T21:58:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2568431895",
            "id": 2568431895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZFykX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568431895/reactions"
            },
            "updated_at": "2025-01-02T21:58:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568431895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "ok, perhaps put in a better way: anything which we expect to happen in multigrid mode should not be a part of the compositor.  These are two mutually exclusive modes of operation. Some of the changes you want can still can be done, because they can usefully be thought of **breaking out** functionality from the compositor and instead making them part of nvim core (i e the code which does not care about if we are in single-grid or multigrid mode). \r\n\r\nThe best example of that from this PR would be the absolute windowing order, including breaking all ties between windows of the same z-index. This would be thought then as decisions now done by core UI (i e ui.c and api/ui.c), not anything done by the compositor. \r\n\r\n> In order to be able to test this, a new test variable NVIM_TEST_FORCE_MULTIGRID has been added. This forces nvim to run with multigrid enabled, but the code in screen.lua emulates the non-multigrid mode, so that almost the whole test suite can be run. \r\n\r\nBut this is an example of something which is an anti-pattern, and would block useful refactors and functionality down the line. The point of the multigrid mode is allowing things which cannot be gracefully be reduced to singe-grid rendering, at least not in a remotely back-wards compatible way (as a side note \"TUI2\" which natively runs in ext_multigrid would be interesting, but a very different thing and something which is interesting just because it is allowed to do very different things than the existing TUI)\r\n",
            "created_at": "2025-01-03T10:08:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2568981953",
            "id": 2568981953,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZH43B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568981953/reactions"
            },
            "updated_at": "2025-01-03T10:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568981953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This is expected behavior as the entire point of the multigrid mode is to allow UI states that cannot even be rendered by the TUI (the current implementation/iteration) in the first place.\r\n\r\nI have to disagree here, Neovide (a project with over 10000 stars on Github) has been using it for emulating the TUI with additional purely visual effects to a great success (except for a few problems, for example the ones mentioned in the description). \r\n\r\nThe multigrid mode is critical to make this work and provides at least the following features\r\n* It provides viewport and scrolling information, which lets us implement smooth scrolling (the killer feature of Neovide IMO)\r\n* It provides us individual position and content information,\r\n  * It lets us do some optional visual animations of the window positions\r\n  * It lets us do proper transparency blending, but that could be improved with more Neovim support https://github.com/neovim/neovim/issues/24472\r\n\r\nWithout these features, the whole concept of Neovide fails. No one would use it, if it's just a terminal, without being an actual terminal.\r\n\r\nThe documentation also disagrees\r\n> The multigrid extension gives UIs more control over how windows are displayed:\r\nUIs receive updates on a separate grid for each window.\r\nUIs **can** set the grid size independently of how much space the window occupies on the global layout. So the UI could use a different font size per-window. Or reserve space around the border of the window for its own elements, such as scrollbars from the UI toolkit.\r\nA dedicated grid is used for messages, which may scroll over the window area. (Alternatively [ui-messages](https://neovim.io/doc/user/ui.html#ui-messages) can be used).\r\n**By default**, the grid size is handled by Nvim and set to the outer grid size (i.e. the size of the window frame in Nvim) whenever the split is created. Once a UI sets a grid size, Nvim does not handle the size for that grid and the UI must change the grid size whenever the outer size is changed. **To delegate grid-size handling back to Nvim**, request the size (0, 0).\r\nA window can be hidden and redisplayed without its grid being deallocated. This can happen multiple times for the same window, for instance when switching tabs.\r\n\r\nNowhere does it say that UIs have to handle all the sizing and positioning manually, not even here:\r\n> [\"win_float_pos\", grid, win, anchor, anchor_grid, anchor_row, anchor_col, mouse_enabled, zindex]\r\nDisplay or reconfigure floating window win. The window should be displayed above another grid anchor_grid at the specified position anchor_row and anchor_col. For the meaning of anchor and more details of positioning, see [nvim_open_win()](https://neovim.io/doc/user/api.html#nvim_open_win()). mouse_enabled is true if the window can receive mouse events.\r\n\r\nIt's only after you have implemented the protocol, that you discover that [it's not the case](https://github.com/neovim/neovim/issues/24801)\r\n\r\n> Thus \"Partially run the compositor\" in multigrid mode is going to be a recipe for unmitigated disaster. It might work by accident when a single UI is in full control in an artificial test scenario but it is going to be impossible to specify and maintain expectations when using multiple UI:s simultaneously and doing further refactors to the UI subsystem without going insane.\r\n\r\nWell, I tested to launch TUI nvim with these changes, using `nvim --listen localhost:1337`, then connect Neovide (https://github.com/neovide/neovide/pull/2919) with multigrid to it (`neovide --server localhost:1337`). Then controlling the TUI with the keyboard and mosue input from Neovide. \r\n\r\nThe TUI renders and responds without any glitches as far as I can see. The Neovide main grid is working fine, but for some reason `win_float_pos` events are not delivered, so the floats don't work.  But they can still be interacted with by the mouse and clicking at the correct location from Neovide, even with `nvim-scrollview`, which is completely broken in Neovide without this PR . The smooth scrolling also has problems. But connecting two instances to the same server has never worked in multigrid, so there's some work left to do there, and I also think these are related (https://github.com/neovim/neovim/issues/30582, https://github.com/neovim/neovim/issues/30583). But as mentioned, that's something for the future, and not the priority here. From my already quite extensive studying of the Neovim UI code, I see almost zero problems with fixing that, and the additional changes needed would be quite minimal. Yes, GUIs that takes care of the positioning themselves will cause problems, but I don't see how that's preventing anything, they have to do something special to even be compatible with itself when connecting two instances.\r\n\r\n> in a better way: anything which we expect to happen in multigrid mode should not be a part of the compositor. These are two mutually exclusive modes of operation. Some of the changes you want can still can be done, because they can usefully be thought of breaking out functionality from the compositor and instead making them part of nvim core (i e the code which does not care about if we are in single-grid or multigrid mode).\r\n\r\n> The best example of that from this PR would be the absolute windowing order, including breaking all ties between windows of the same z-index. This would be thought then as decisions now done by core UI (i e ui.c and api/ui.c), not anything done by the compositor.\r\n\r\nThat's just a code organization change then, that code can easily be moved out of the compositor if that's preferred. And `comp_index` renamed to something else. In my opinion a compositor also deals with positioning the windows and the sort order of them. But that's just semantics, and to be precise in multigrid Neovim only handles part of the composition, the rest is dealt with by the UI itself. In any case that change would also make this PR almost impossible to review, so it should be done separately IMO. Now when the code stays in place, you can actually see that the changes to the c code are fairly minimal. And nearly all changes are done outside the compositor. Only the additional boolean, `composition_updated`, has been added and a small fix for `ui_comp_get_grid_at_coord` to deal with the multigrid mode.\r\n\r\nTo actually duplicate the code would make zero sense, all functions would look identical, except that `compose_area` and `compose_line` are never called. But that's already the case in this PR (unless a non-multigrid UI is *also* connected. That and the id allocation of the main grid (splits for example), is the only differences between the modes. And the id allocation is something that should be refactored at some point IMO, to make the regular grid a strict susbset of the multigrid mode. Non-multigrid would just send `grid 1`, which is the fully composed screen. While multigrid UIs would receive everything else.\r\n\r\nSpecification-wise it's already a subset, as demonstrated by the code in `screen.lua` in this PR, it's able to process multigrid events and compose a screen that perfectly represents what non-multgrid UI would receive. And the documentation only adds extra events, without specifying any change of behaviour. \r\n\r\nAnother alternative implementation, which would also change a lot, would be to make an internal multigrid client, that just does the same work as the changes I did to `screen.lua` and sends composed grid to non-multigrid clients.\r\n\r\n> But this is an example of something which is an anti-pattern, and would block useful refactors and functionality down the line. \r\n\r\nAn antipattern as opposed to modify hundreds, if not thousands of tests to get a proper coverage for the multigrid mode? The multigrid test coverage is very poor at the moment, and I saw this way as the best way to not only make sure that I test the correct thing, and that there are no regressions anywhere. Furthermore, the multigrid tests are much more fragile than the regular tests, which just check the screen output and don't care about what the protocol sends. So, if you do some refactoring that changes the composition index for example, all multigrid specific tests need to be changed, while the regular tests don't, as long as the screen output is the same.\r\n\r\n> The point of the multigrid mode is allowing things which cannot be gracefully be reduced to singe-grid rendering, at least not in a remotely back-wards compatible way (as a side note \"TUI2\" which natively runs in ext_multigrid would be interesting, but a very different thing and something which is interesting just because it is allowed to do very different things than the existing TUI)\r\n\r\nThese changes don't change the behaviour of any existing multigrid or single-grid test, and I don't see why it would be different in the future. Yes, some tests are currently failing when forced multigrid is used, so doing `screen.lua` based composition with the core running in multigrid. But all of those are existing bugs that we observe in Neovide as well, or they are so minor that it's not worth fixing. Once those are fixed, then tests that are failing, are most likely real failures that would break multigrid clients.\r\n\r\nIf you want to test things that are only supported in multi-grid, then you make a multigrid specific test, just like the tests for external windows for example. But otherwise, everything supported in single grid should be supported in multigrid as well.\r\n\r\nAnd the flag is added to the CI for additional tests, you ensure that nothing breaks. Of course, if something in the core composition changes, then `screen.lua` needs to be updated as well, but if you make breaking changes like that, then all clients (both multigrid and non-multigrid ones) break in the same way.\r\n\r\n\r\n\r\n",
            "created_at": "2025-01-03T15:28:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2569399877",
            "id": 2569399877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZJe5F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569399877/reactions"
            },
            "updated_at": "2025-01-03T15:32:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569399877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@qvacua ([vimr](https://github.com/qvacua/vimr)), @akiyosi ([goneovim](https://github.com/akiyosi/goneovim)), @equalsraf ([neovim-qt](https://github.com/equalsraf/neovim-qt)), @vhakulinen ([gnvim)](https://github.com/vhakulinen/gnvim), @yatli ([fvim](https://github.com/yatli/fvim))\r\n\r\nYou are the other GUIs, with over 1000 stars on Github. So, it would be nice to get some input and perhaps some testing from you as well. Other GUI implementers are of course also welcome to comment.",
            "created_at": "2025-01-03T15:48:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2569445446",
            "id": 2569445446,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZJqBG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569445446/reactions"
            },
            "updated_at": "2025-01-03T15:48:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569445446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Only broken thing that I've personally noticed (w.r.t the topics of this PR) is that floating window positions aren't updated at times when I would've expected them to be updated (by nvim). I haven't figured this one out yet, except that one case was a bug in gnvim (https://github.com/vhakulinen/gnvim/commit/24e8a74e76ff8f62ea2f98e3c363efb48d489e46). I suspect that similar issue exists with neovide, based on this issue on fidget.nvim: https://github.com/j-hui/fidget.nvim/issues/228\r\n\r\nOne example where this happens is this https://github.com/neovide/neovide/issues/1641\r\n\r\n> W.r.t. compindex. When is the zindex not enough?\r\nI answered to the code comment\r\n\r\n> Couldn't functions that operate on screen positions be deprecated? Those cant truly function cross UIs, can they? Not unless they proxy the call to the UIs behind the scenes.\r\n\r\nPerhaps, but it's used in the wild as of today, for example here https://github.com/neovide/neovide/issues/2569#issuecomment-2132168195\r\n\r\nThe same with getting the mouse position. I provided an alternative here https://github.com/neovim/neovim/issues/27181#issuecomment-1908796946, but that too have a lot of problems.\r\n\r\nFurthermore, a scroll bar for example should still work, if you move out of the window that activated it.\r\n\r\n>...they still have to pass the grid id to nvim_input_mouse...\r\n> Isn't that what you are supposed to do?\r\n\r\nWith these changes if you only use the absolute coordinates given, then you can provide 0. But if you move the windows yourself, render in custom order, or even just use the anchor information directly you need to provide the grid id, because neovim can't know where the window is.\r\n\r\nNOTE: that in order to do it perfectly (like the TUI does), you need to detect if the window has a winbar or not. You can use the margins to detect borders, and click the window below, but the margin is also set when there's a winbar, and when that is clicked, you should report the grid id of the window.\r\n",
            "created_at": "2025-01-03T18:10:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2569628324",
            "id": 2569628324,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZKWqk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569628324/reactions"
            },
            "updated_at": "2025-01-03T18:10:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569628324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@fredizzimo: VimR does not use multigrid. It just renders whatever Neovim tells it to render, thus, I am not aware of any insufficiencies/issues with multigrid or the needs UIs with more elaborate visual elements have. That said, my two cents: From a high-level point of view, https://github.com/neovim/neovim/pull/31837#issuecomment-2568381402 makes sense to me: When using multigrid, my understanding is that the UIs should do the composition. If Neovim does not yet provide enough information for UIs to do that correctly, I guess, as @bfredl said, Neovim could provide the inputs for its compositor to the clients or something similar. Multigrid call returning (partial?) result of Neovim's compositor does not seem to be the right way to me.",
            "created_at": "2025-01-04T13:03:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2571282281",
            "id": 2571282281,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZQqdp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571282281/reactions"
            },
            "updated_at": "2025-01-04T13:03:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571282281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/460034?v=4",
                "events_url": "https://api.github.com/users/qvacua/events{/privacy}",
                "followers_url": "https://api.github.com/users/qvacua/followers",
                "following_url": "https://api.github.com/users/qvacua/following{/other_user}",
                "gists_url": "https://api.github.com/users/qvacua/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/qvacua",
                "id": 460034,
                "login": "qvacua",
                "node_id": "MDQ6VXNlcjQ2MDAzNA==",
                "organizations_url": "https://api.github.com/users/qvacua/orgs",
                "received_events_url": "https://api.github.com/users/qvacua/received_events",
                "repos_url": "https://api.github.com/users/qvacua/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/qvacua/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/qvacua/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/qvacua",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Neovim could provide the inputs for its compositor to the clients or something similar\r\n\r\nThat's exactly what this PR does. I'm just not sure how it could do that without running the actual same logic.\r\n\r\nRemember, the logic is complex and filled with special cases, like any window that is entered should be brought to the top of it's zindex.",
            "created_at": "2025-01-04T15:35:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2571335505",
            "id": 2571335505,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZQ3dR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571335505/reactions"
            },
            "updated_at": "2025-01-04T15:35:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571335505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Multigrid UI:s are absolutely supposed do their own position calculations and have done so just fine for 6 years. Not sure what the point is to write retcon fiction about this.\r\n\r\nAnd yes, it is of course perfectly reasonable to use ext_multigrid to deliver a TUI-like _user experience_. The problem is when we somehow make the jump to imply screen-cell-for-screen-cell, bug-for-bug, legacy-feature-for-legacy-feature identical behavior with the `ext_multigrid=false` mode (metonymously \"nvim in the TUI\" as using the TUI implies it). \r\n\r\nThis is why I think the distinction I made above still stands. We can absolutely make core nvim emit _more information_ which makes the life of GUI:s like Neovide easier. We could even stretch this so far as emit the result of the calculations the compositor _would have done_ for absolute, monospace-grid assuming, positioning. This sharing of information will still not guarantee identical behavior, as you noted yourself the popupmenu could go out-of-bounds of the TUI-like grid as these checks are disabled etc (it does not somehow disappear with disabling nvim_ui_resize_grid ) .\r\n\r\nThe amount of tests is completely irrelevant if we are testing for the wrong thing. We will not add a large batch of tests mandating that multigrid reproduces the current single-grid behaviors exactly, at least not at this point in time where this explicitly mandates one specific single-grid \"frontend\" (i e the _current_ compositor behavior).  On the contrary, multigrid even when used for \"single-grid like\" UI:s in no way shape or form meant to be restricted to deliver one identical or even remotely close to \"TUI 1.0\" . For instance TUI2 could be made to be able display different viewports for multiple TUI:s attached to the same server. The priority for previous and all further development of the multigrid mode is to enable these new things. If behavior identical to existing TUI is desired we already have a completely fine mechanism: using `ext_multigrid=false` . ",
            "created_at": "2025-01-04T19:30:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2571390685",
            "id": 2571390685,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZRE7d",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571390685/reactions"
            },
            "updated_at": "2025-01-04T19:30:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571390685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This PR makes multigrid 99% compatible with the TUI after the following three (serious) bugs are fixed, non of them related to this PR at all\r\n*  https://github.com/neovim/neovim/issues/24802\r\n*  https://github.com/neovim/neovim/issues/31811\r\n*  https://github.com/neovim/neovim/issues/24705, \r\n\r\nAs for the rest, all detected due to proper testing, some TUI bugs and some multigrid issues unrelated to this PR\r\n* This looks like a TUI bug, the cursor should probably move with the window there too https://github.com/neovim/neovim/blob/295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46/test/functional/api/vim_spec.lua#L5281\r\n*  this also looks like a TUI bug https://github.com/neovim/neovim/blob/295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46/test/functional/legacy/cmdline_spec.lua#L180\r\n*  this is an unreported multigrid bug, not related to the PR https://github.com/neovim/neovim/blob/295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46/test/functional/lua/ui_event_spec.lua#L200\r\n*  another unrelated unreported multigrid bug https://github.com/neovim/neovim/blob/295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46/test/functional/ui/float_spec.lua#L8957\r\n*  here you could argue that both are correct and that it doesn't really matter https://github.com/neovim/neovim/blob/295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46/test/functional/ui/popupmenu_spec.lua#L2581\r\n* here again, I think the multigrid case is correct  https://github.com/neovim/neovim/blob/295f0f8d2717f4a64dbbad7ff6c8b8ab4204ee46/test/functional/ui/screen_basic_spec.lua#L661\r\n",
            "created_at": "2025-01-04T22:17:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2571425736",
            "id": 2571425736,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6ZRNfI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571425736/reactions"
            },
            "updated_at": "2025-01-04T22:18:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2571425736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk \r\n\r\nIs there any way we can proceed with this? I have been given no concrete options what needs to be done. And properly working mouse support is critical for a GUI like Neovide, so I would like to get it done sooner rather than later.\r\n\r\nMy view is that a multigrid UI should be functionally no different than a TUI, unless the GUI decides to move or resize the windows, or use external windows. Ans this PR brings us very close, with few non-breaking changes.\r\n\r\nIf we further allow Neovim to internally always work with multiple grids, which are just composed then together to a single grid before sending, it would remove almost all of the multigrid special cases from the code. But that's a much bigger and perhaps controversial change. So it's not done here.  ",
            "created_at": "2025-02-06T01:08:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/31837#issuecomment-2638378025",
            "id": 2638378025,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
            "node_id": "IC_kwDOAPphoM6dQnQp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2638378025/reactions"
            },
            "updated_at": "2025-02-06T01:22:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2638378025",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31837/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31837/commits",
    "created_at": "2025-01-02T20:16:29Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31837.diff",
    "draft": false,
    "head": {
        "label": "fredizzimo:multigrid-composition",
        "ref": "multigrid-composition",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/fredizzimo/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/fredizzimo/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/fredizzimo/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/fredizzimo/neovim/branches{/branch}",
            "clone_url": "https://github.com/fredizzimo/neovim.git",
            "collaborators_url": "https://api.github.com/repos/fredizzimo/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/fredizzimo/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/fredizzimo/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/fredizzimo/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/fredizzimo/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/fredizzimo/neovim/contributors",
            "created_at": "2021-07-09T10:07:26Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/fredizzimo/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/fredizzimo/neovim/downloads",
            "events_url": "https://api.github.com/repos/fredizzimo/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/fredizzimo/neovim/forks",
            "full_name": "fredizzimo/neovim",
            "git_commits_url": "https://api.github.com/repos/fredizzimo/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/fredizzimo/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/fredizzimo/neovim/git/tags{/sha}",
            "git_url": "git://github.com/fredizzimo/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/fredizzimo/neovim/hooks",
            "html_url": "https://github.com/fredizzimo/neovim",
            "id": 384397538,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/fredizzimo/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/fredizzimo/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/fredizzimo/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/fredizzimo/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/fredizzimo/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/fredizzimo/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/fredizzimo/neovim/merges",
            "milestones_url": "https://api.github.com/repos/fredizzimo/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzODQzOTc1Mzg=",
            "notifications_url": "https://api.github.com/repos/fredizzimo/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/fredizzimo/neovim/pulls{/number}",
            "pushed_at": "2025-02-10T11:20:40Z",
            "releases_url": "https://api.github.com/repos/fredizzimo/neovim/releases{/id}",
            "size": 301787,
            "ssh_url": "git@github.com:fredizzimo/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/fredizzimo/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/fredizzimo/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/fredizzimo/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/fredizzimo/neovim/subscription",
            "svn_url": "https://github.com/fredizzimo/neovim",
            "tags_url": "https://api.github.com/repos/fredizzimo/neovim/tags",
            "teams_url": "https://api.github.com/repos/fredizzimo/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/fredizzimo/neovim/git/trees{/sha}",
            "updated_at": "2021-07-09T10:07:27Z",
            "url": "https://api.github.com/repos/fredizzimo/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "81f4f9abe5f24df6424609f3eb44e419b587d575",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
            "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
            "followers_url": "https://api.github.com/users/fredizzimo/followers",
            "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
            "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/fredizzimo",
            "id": 9946255,
            "login": "fredizzimo",
            "node_id": "MDQ6VXNlcjk5NDYyNTU=",
            "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
            "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
            "repos_url": "https://api.github.com/users/fredizzimo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/fredizzimo",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31837",
    "id": 2258370826,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31837",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        }
    ],
    "locked": false,
    "merge_commit_sha": "52f7396a54c24e0d4694480aa33eec583450d4d5",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6GnAEK",
    "number": 31837,
    "patch_url": "https://github.com/neovim/neovim/pull/31837.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31837/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/81f4f9abe5f24df6424609f3eb44e419b587d575",
    "title": "feat(ui): include compositor info with multigrid",
    "updated_at": "2025-02-08T10:09:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31837",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo",
        "user_view_type": "public"
    }
}