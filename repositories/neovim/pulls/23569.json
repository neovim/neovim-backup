{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23569/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23569/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/23569"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23569"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23569/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/7cf9e3dea2791b865cbab3dc9288ebe66fcfb445"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 6078,
            "forks_count": 6078,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1941,
            "open_issues_count": 1941,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-05-13T02:35:42Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 322833,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 89461,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-05-13T02:46:10Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 89461,
            "watchers_count": 89461,
            "web_commit_signoff_required": false
        },
        "sha": "3b58d93aaeaea363ff1066fc791f5d8af1946218",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "[Request for Comment]\r\n@lewis6991 \r\n@bfredl \r\n@sakhnik \r\n@zeertzjq \r\n\r\nFrom the author of the linematch alignment algorithm, I bring you charmatch!\r\n\r\nbefore:\r\n![before](https://github.com/neovim/neovim/assets/32371757/d8e32883-2457-4ec2-b4d1-ef62fe6f587f)\r\n\r\nafter:\r\n![after](https://github.com/neovim/neovim/assets/32371757/11030c41-5f1e-4f94-8738-455f39261acd)\r\n\r\ncharmatch leverages the existing linematch algorithm to perform a similar diff optimization for highlighting of modified characters between lines of buffers in diff mode.\r\n\r\nThe result of the charmatch algorithm is similarly a set of decisions represented by integers. these integers are then parsed to produce an array containing the highlighting information for a diff hunk.\r\n\r\nThe results are stored as so for a diff of these two files:\r\n```\r\n----------------\r\n| A    | AZBZC |\r\n| B    |       |\r\n| C    |       |\r\n----------------\r\n```\r\n![arrayexample](https://github.com/neovim/neovim/assets/32371757/cc88e775-7d9b-4a46-a816-7368a34b2c27)\r\n\r\nHere I represent \\n 'newline' as 'n' for the purposes of this diagram.\r\n\r\n```\r\ndiff_T->charmatchp\r\nbuf 0 start\r\n|     buf 1 start\r\n|     |\r\nAnBnCnAZBZCn\r\n000000010100\r\n```\r\n\r\nThe newline characters are used in calculation of the highlight grouping, as newlines will always break a highlight group\r\n\r\nThe grouping optimization will attempt to create a highlight solution with the smallest amount of groups (marked highlighted, marked not highlighted) possible, explained more further down.\r\n\r\nThe array stores '1's to indicate highlighted, and 0's to represent not highlighted.\r\n\r\nThis array is unique to each diff hunk (`diff_T`), and is stored in an added array pointer for `diff_T` struct\r\n\r\n```c\r\ntypedef struct diffblock_S diff_T;\r\nstruct diffblock_S {\r\n  ...\r\n  size_t n_charmatch;\r\n  int* charmatchp; // values for charmatch\r\n};\r\n```\r\n\r\nThe charmatch alignment algorithm is ran once a diff hunk is scrolled into view.\r\n\r\nthe diffoption chardiff is given with a number like so:\r\n```\r\nset diffopt+=chardiff:10\r\n```\r\nthe number specifies the summation of the length of the text to be diffed.\r\nit will first try to character wise diff all of the lines of the two (or more) diff blocks, if that exceeds the limit, it will then attempt to diff them matching line-wise. Pictures here illustrate:\r\n![10](https://github.com/neovim/neovim/assets/32371757/285b6b48-d04f-469a-9a1b-f19e639fb0db)\r\n![23](https://github.com/neovim/neovim/assets/32371757/670a1bb0-652e-443f-b7f0-37bf2b9ebbdc)\r\n![100](https://github.com/neovim/neovim/assets/32371757/9b541504-b9f4-441d-aa8f-017547a225c4)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875173"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875173"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Maybe we should free decisions after the loop?",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-06-25T01:56:58Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875173",
            "id": 1651875173,
            "line": 2231,
            "node_id": "PRRC_kwDOAPphoM5idZ1l",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2274,
            "original_position": 252,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 253,
            "pull_request_review_id": 2137153290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875173/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-25T01:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875238"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "should we free iwhite_index_offset after the block?",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-06-25T01:57:07Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1651875238",
            "id": 1651875238,
            "line": 2236,
            "node_id": "PRRC_kwDOAPphoM5idZ2m",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2279,
            "original_position": 256,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 258,
            "pull_request_review_id": 2137153290,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875238/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-25T01:59:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1651875238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1681295?v=4",
                "events_url": "https://api.github.com/users/ray-x/events{/privacy}",
                "followers_url": "https://api.github.com/users/ray-x/followers",
                "following_url": "https://api.github.com/users/ray-x/following{/other_user}",
                "gists_url": "https://api.github.com/users/ray-x/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ray-x",
                "id": 1681295,
                "login": "ray-x",
                "node_id": "MDQ6VXNlcjE2ODEyOTU=",
                "organizations_url": "https://api.github.com/users/ray-x/orgs",
                "received_events_url": "https://api.github.com/users/ray-x/received_events",
                "repos_url": "https://api.github.com/users/ray-x/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ray-x/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ray-x/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ray-x",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1667814328"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667814328"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "yes, you are right that is a memory leak. fixed",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-07-08T00:30:06Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1667814328",
            "id": 1667814328,
            "in_reply_to_id": 1651875173,
            "line": 2231,
            "node_id": "PRRC_kwDOAPphoM5jaNO4",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2274,
            "original_position": 252,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 253,
            "pull_request_review_id": 2161986195,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667814328/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-08T00:30:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667814328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1667819343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667819343"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "fixed",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-07-08T00:39:14Z",
            "diff_hunk": "@@ -2076,28 +2105,166 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++; // increment the total characters counter\n+          if (*p == '\\n') { lines--; }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+    // allocate array for index mapping of result array\n+    iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    for (size_t i = 0; i < total_chars_length; i++) {\n+      iwhite_index_offset[i] = 99;\n+    }\n+  }\n+  if (diff_allignment == WORDMATCH) {\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset[i][j] = 99;\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;\n+    size_t j = 0, k = 0, lines = (size_t)diff_lines[i], w = result_diff_start_pos[i];\n+    while (lines > 0) {\n+      if (iwhite ? (diffbufs[i][j] != ' ' && diffbufs[i][j] != '\\t') : 1) {\n+        if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+          // a character which is not a blank\n+          if (diff_allignment == WORDMATCH) {\n+            if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+              word_offset[i][diff_length[i]] = k;\n+              diff_length[i]++;\n+              total_word_count++;\n+            }\n+            word_offset_size[i][diff_length[i] - 1]++;\n+            cls = utf_class(diffbufs[i][j]);\n+          } else {\n+            // we are matching characters, not words\n+            diff_length[i]++;\n+          }\n+          if (iwhite) {\n+            iwhite_index_offset[w++] = j - k;\n+          }\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      } else if (diff_allignment == WORDMATCH) {\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      }\n+      if (diffbufs[i][j++] == '\\n') { lines--; }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int)); // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1; // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      int *decisions = NULL;\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0; // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs, &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          // write to result\n+          // is it a comparison\n+          // check for if this is a 'newline'\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0; k < (diff_allignment == WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }\n+                word_offset_result_index[j]++;\n+                break;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1667819343",
            "id": 1667819343,
            "in_reply_to_id": 1651875238,
            "line": 2236,
            "node_id": "PRRC_kwDOAPphoM5jaOdP",
            "original_commit_id": "4e0884a06cd6e77690fa68f82d5e83b80bc87d39",
            "original_line": 2279,
            "original_position": 256,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 258,
            "pull_request_review_id": 2161995300,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667819343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-08T00:39:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1667819343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1766559452"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766559452"
                }
            },
            "author_association": "MEMBER",
            "body": "this could probably benefit from a docstring at this point. \r\n\r\ntypo?\r\n\r\n```suggestion\r\nstatic void run_alignment_algorithm(diff_T *dp, diff_alignment_T diff_alignment)\r\n```",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-19T10:10:15Z",
            "diff_hunk": "@@ -2044,13 +2064,23 @@ static void apply_linematch_results(diff_T *dp, size_t decisions_length, const i\n   dp->is_linematched = true;\n }\n \n-static void run_linematch_algorithm(diff_T *dp)\n+static void run_alignment_algorithm(diff_T *dp, diff_allignment_T diff_allignment)",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1766559452",
            "id": 1766559452,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5pS47c",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2067,
            "original_position": 84,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": null,
            "pull_request_review_id": 2315066418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766559452/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-19T10:10:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766559452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1766563831"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766563831"
                }
            },
            "author_association": "MEMBER",
            "body": "this for-loop is nearly identical to the one above. is there any opportunity for deduplication of the code in this PR, without over-abstracting things? that will help in the future.",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-19T10:13:00Z",
            "diff_hunk": "@@ -2062,28 +2092,216 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++;  // increment the total characters counter\n+          if (*p == '\\n') {\n+            lines--;\n+          }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  // allocate all the memory we will need to keep track of tokens positions and their respective\n+  // lengths. For word matching, this is the 'word' as vim defines it, for character matching, the\n+  // token is the one or more 8 bit 'chars' that make up a utf character\n+  if (diff_allignment == WORDMATCH || diff_allignment == CHARMATCH) {\n+    // are we ignoring whitespace in the comparison?\n+    if (iwhite) {\n+      // allocate array for index mapping of result array\n+      iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    }\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  // calculate the token lengths and white space offset and pre process the contents of the diffs to\n+  // remove white space if necessary\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;  // keep track of what type of character this is, to determine when we are\n+                        // moving to a different word\n+\n+    size_t j = 0;  // j will iterate over each character in each of the diffs\n+\n+    size_t k = 0;  // k represents the index of the current character if there were no white spaces,\n+                   // so we will use k and j to calculate the white space offset and use it later to\n+                   // populate the final results for drawing to the screen\n+                   // if 'iwhite' is not used, k will always be the same as j\n+\n+    size_t lines = (size_t)diff_lines[i];  // we iterate over each line of this part of the diff\n+\n+    size_t w = result_diff_start_pos[i];  // keep track of the offset of all the characters without\n+                                          // any whitespace, so that we can ignore the white space\n+                                          // while calculating the diff, and then use this to\n+                                          // populate the results\n+    size_t cur_char_length = 0;\n+\n+    while (lines > 0) {\n+      if (iwhite && (diffbufs[i][j] == ' ' || diffbufs[i][j] == '\\t')) {\n+        // we are using 'iwhite' and this is a whitespace, so it will not be included as a token in\n+        // the diff algorithm\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      } else {\n+        // we have a character which is not a blank (or we are not using iwhite)\n+\n+        // how we determine when there is a new token depends on if this is chardiff or worddiff\n+        if (diff_allignment == WORDMATCH) {\n+          // WORDMATCH\n+          if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+            // this is a new token\n+            word_offset[i][diff_length[i]] = k;  // mark the offset of this without whitespace\n+            diff_length[i]++;  // this diff length has another token, so it gets longer\n+            total_word_count++;\n+          }\n+          cls = utf_class(diffbufs[i][j]);\n+          word_offset_size[i][diff_length[i] - 1]++;  // still the same class (iterating over the\n+                                                      // same type of word), so the current word\n+                                                      // length is getting longer\n+        } else if (diff_allignment == CHARMATCH) {\n+          // CHARMATCH\n+          if (cur_char_length == 0) {\n+            // get the length of current character\n+            if (diffbufs[i][j] == '\\n') {\n+              // this is the last character of the line\n+              cur_char_length = 1;\n+            } else {\n+              cur_char_length = (size_t)utfc_ptr2len((const char *const)&diffbufs[i][j]);\n+            }\n+            word_offset[i][diff_length[i]] = k;\n+            diff_length[i]++;\n+            total_word_count++;\n+            // the token size is the length of this utf character\n+            word_offset_size[i][diff_length[i] - 1] = cur_char_length;\n+          }\n+          cur_char_length--;\n+        }\n+        // if ignoring whitespace, keep track of the white space index\n+        if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+          // keep track of the index offset with ignoring whitespace to use when populating the results\n+          iwhite_index_offset[w++] = j - k;\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      }\n+      if (diffbufs[i][j++] == '\\n') {\n+        lines--;\n+      }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs,\n+                                                 &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int));  // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1;  // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0;  // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        int *decisions = NULL;\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs,\n+                                                     &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0;\n+                   k <\n+                   (diff_allignment ==\n+                    WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0;\n+                     k <\n+                     (diff_allignment ==\n+                      WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1766563831",
            "id": 1766563831,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5pS5_3",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2287,
            "original_position": 309,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": null,
            "pull_request_review_id": 2315073532,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766563831/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-19T10:13:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766563831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1766565223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766565223"
                }
            },
            "author_association": "MEMBER",
            "body": "this big block of processing produces a result. probably makes sense to extract it to a function? \r\n",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-19T10:14:10Z",
            "diff_hunk": "@@ -2062,28 +2092,216 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++;  // increment the total characters counter\n+          if (*p == '\\n') {\n+            lines--;\n+          }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  // allocate all the memory we will need to keep track of tokens positions and their respective\n+  // lengths. For word matching, this is the 'word' as vim defines it, for character matching, the\n+  // token is the one or more 8 bit 'chars' that make up a utf character\n+  if (diff_allignment == WORDMATCH || diff_allignment == CHARMATCH) {\n+    // are we ignoring whitespace in the comparison?\n+    if (iwhite) {\n+      // allocate array for index mapping of result array\n+      iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    }\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  // calculate the token lengths and white space offset and pre process the contents of the diffs to\n+  // remove white space if necessary\n+  for (size_t i = 0; i < ndiffs; i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1766565223",
            "id": 1766565223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5pS6Vn",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2140,
            "original_position": 159,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": null,
            "pull_request_review_id": 2315075923,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766565223/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-19T10:14:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766565223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1766566062"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766566062"
                }
            },
            "author_association": "MEMBER",
            "body": "this is another big block that probably can be extracted to a function.",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-19T10:14:46Z",
            "diff_hunk": "@@ -2647,6 +2878,97 @@ bool diff_find_change(win_T *wp, linenr_T lnum, int *startp, int *endp)\n   bool added = true;\n \n   linenr_T off = lnum - dp->df_lnum[idx];\n+  if (chardiff()) {",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1766566062",
            "id": 1766566062,
            "line": 2924,
            "node_id": "PRRC_kwDOAPphoM5pS6iu",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2881,
            "original_position": 390,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 432,
            "pull_request_review_id": 2315077309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766566062/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-19T10:14:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766566062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1766572078"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766572078"
                }
            },
            "author_association": "MEMBER",
            "body": "screen.expect now supports a feature that avoids redundant lines in the tests. it looks like this (add `*n` to the end of the line to repeat it `n` times)):\r\n\r\n```suggestion\r\n       {1:~                                                }│{1:~                                                 }|*14\r\n```\r\n\r\nplease use this where possible.\r\n\r\n",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-19T10:19:20Z",
            "diff_hunk": "@@ -1084,6 +1151,436 @@ something\n       end\n     )\n   end)\n+  describe('show a diff with charmatch enabled', function()\n+    before_each(function()\n+      local f1 = [[\n+abbcabbcdefghijklmnop\n+      ]]\n+      local f2 = [[\n+abca?bc\n+dfgh?ijl\n+mnop?\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('when the entire hunk is compared, cross-line', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^abca}{27:?}{4:bc                                    }│{7:  }{8:  1 }{4:a}{27:b}{4:bca}{27:b}{4:bcd}{27:e}{4:fghij}{27:k}{4:lmnop                       }|\n+       {7:  }{8:  2 }{4:dfgh}{27:?}{4:ijl                                   }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{4:mnop}{27:?}{4:                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:100                                                                          |\n+        ]])\n+      end)\n+    end)\n+    describe('when the single line is compared, cross-line', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:30<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^abca}{27:?}{4:bc                                    }│{7:  }{8:  1 }{4:a}{27:b}{4:bca}{27:b}{4:bc}{27:defghijklmnop}{4:                       }|\n+       {7:  }{8:  2 }{22:dfgh?ijl                                   }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:mnop?                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:30                                                                           |\n+        ]])\n+      end)\n+    end)\n+    describe('when the diff hunk and the single line are too long to run chardiff', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:10<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^ab}{27:ca?bc}{4:                                    }│{7:  }{8:  1 }{4:ab}{27:bcabbcdefghijklmnop}{4:                       }|\n+       {7:  }{8:  2 }{22:dfgh?ijl                                   }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:mnop?                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:10                                                                           |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with wordmatch enabled', function()\n+    before_each(function()\n+      local f1 = [[\n+wA w1 wB w1 w2 wC w3 w4\n+      ]]\n+      local f2 = [[\n+w1 w2\n+w2 w3\n+w4 w5\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+\n+    describe('when the entire hunk is compared, cross-line', function()\n+      it('display results', function()\n+        feed(':set diffopt+=worddiff:30<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA w1 wB }{4:w1 w2}{27: wC}{4: w3}{27: }{4:w4                     }|\n+       {7:  }{8:  2 }{27:w2}{4: w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{4:w4}{27: w5}{4:                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=worddiff:30                                                                           |\n+        ]])\n+      end)\n+      it('display results, with ignore white', function()\n+        feed(':set diffopt+=worddiff:20<cr>:set diffopt+=iwhiteall<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA}{4: }{27:w1}{4: }{27:wB}{4: w1 w2 }{27:wC}{4: w3 w4                     }|\n+       {7:  }{8:  2 }{27:w2}{4: w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{4:w4 }{27:w5}{4:                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+\n+    describe('when the single line is compared, cross-line', function()\n+      it('display results', function()\n+        feed(':set diffopt+=worddiff:20<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA w1 wB }{4:w1 w2}{27: wC w3 w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=worddiff:20                                                                           |\n+        ]])\n+      end)\n+      it('display results, with ignore white', function()\n+        feed(':set diffopt+=worddiff:15<cr>:set diffopt+=iwhiteall<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA}{4: }{27:w1}{4: }{27:wB}{4: w1 w2 }{27:wC}{4: }{27:w3}{4: }{27:w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+    describe('when the diff hunk and the single line are too long to run chardiff', function()\n+      it('display results', function()\n+        feed(':set diffopt+=worddiff:10<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w}{27:1 w2}{4:                                      }│{7:  }{8:  1 }{4:w}{27:A w1 wB w1 w2 wC w3 w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=worddiff:10                                                                           |\n+        ]])\n+      end)\n+      it('display results, with ignore white', function()\n+        feed(':set diffopt+=worddiff:10<cr>:set diffopt+=iwhiteall<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w}{27:1 w2}{4:                                      }│{7:  }{8:  1 }{4:w}{27:A w1 wB w1 w2 wC w3 w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with charmatch enabled, with and without ignore white', function()\n+    before_each(function()\n+      local f1 = [[\n+ababcabcdabcde\n+      ]]\n+      local f2 = [[\n+abc abcd abcde abcdef\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('normal comparison, including whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^ab}{27:c }{4:abc}{27:d }{4:abcd}{27:e }{4:abcde}{27:f}{4:                      }│{7:  }{8:  1 }{4:ababcabcdabcde                              }|\n+       {7:  }{8:  2 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:100                                                                          |\n+        ]])\n+      end)\n+    end)\n+    describe('ignore whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>:set diffopt+=iwhiteall<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^ab}{27:c}{4: abc}{27:d}{4: abcd}{27:e}{4: abcde}{27:f}{4:                      }│{7:  }{8:  1 }{4:ababcabcdabcde                              }|\n+       {7:  }{8:  2 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with charmatch enabled, with different UTF-8 character', function()\n+    before_each(function()\n+      local f1 = [[\n+aaaहaaa\n+      ]]\n+      local f2 = [[\n+aaaसaaa\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('normal comparison, including whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^aaa}{27:स}{4:a}{27:a}{4:a                                    }│{7:  }{8:  1 }{4:aaa}{27:ह}{4:a}{27:a}{4:a                                     }|\n+       {7:  }{8:  2 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:100                                                                          |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with charmatch enabled, with same UTF-8 character', function()\n+    before_each(function()\n+      local f1 = [[\n+aaaहaaa\n+      ]]\n+      local f2 = [[\n+aaaहaaa\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('normal comparison, including whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:+ }{8:  1 }{13:^+--  2 lines: aaaहaaa······················}│{7:+ }{8:  1 }{13:+--  2 lines: aaaहaaa·······················}|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1766572078",
            "id": 1766572078,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5pS8Au",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 1577,
            "original_position": 501,
            "original_start_line": 1563,
            "path": "test/functional/ui/linematch_spec.lua",
            "position": null,
            "pull_request_review_id": 2315087830,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766572078/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-19T10:19:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766572078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1766575099"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766575099"
                }
            },
            "author_association": "MEMBER",
            "body": "do we need new coverage for the changes to `lua/xdiff.c` ? I assume that is testable via `vim.diff` somehow, or some other Lua interface.",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-19T10:21:18Z",
            "diff_hunk": "@@ -803,6 +803,73 @@ void testFunction () {\n       ]])\n     end)\n   end)\n+  describe('setup a diff with 2 files and set linematch:30', function()",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1766575099",
            "id": 1766575099,
            "line": 806,
            "node_id": "PRRC_kwDOAPphoM5pS8v7",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 806,
            "original_position": 4,
            "original_start_line": null,
            "path": "test/functional/ui/linematch_spec.lua",
            "position": 4,
            "pull_request_review_id": 2315093276,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766575099/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-19T10:21:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1766575099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1768491076"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768491076"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "typo fixed and docstring added",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-20T12:17:41Z",
            "diff_hunk": "@@ -2044,13 +2064,23 @@ static void apply_linematch_results(diff_T *dp, size_t decisions_length, const i\n   dp->is_linematched = true;\n }\n \n-static void run_linematch_algorithm(diff_T *dp)\n+static void run_alignment_algorithm(diff_T *dp, diff_allignment_T diff_allignment)",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1768491076",
            "id": 1768491076,
            "in_reply_to_id": 1766559452,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5paQhE",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2067,
            "original_position": 84,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": null,
            "pull_request_review_id": 2318083112,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768491076/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-20T12:17:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768491076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1768569183"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768569183"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "for loops combined",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-20T12:53:14Z",
            "diff_hunk": "@@ -2062,28 +2092,216 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++;  // increment the total characters counter\n+          if (*p == '\\n') {\n+            lines--;\n+          }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  // allocate all the memory we will need to keep track of tokens positions and their respective\n+  // lengths. For word matching, this is the 'word' as vim defines it, for character matching, the\n+  // token is the one or more 8 bit 'chars' that make up a utf character\n+  if (diff_allignment == WORDMATCH || diff_allignment == CHARMATCH) {\n+    // are we ignoring whitespace in the comparison?\n+    if (iwhite) {\n+      // allocate array for index mapping of result array\n+      iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    }\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  // calculate the token lengths and white space offset and pre process the contents of the diffs to\n+  // remove white space if necessary\n+  for (size_t i = 0; i < ndiffs; i++) {\n+    int cls = INT_MIN;  // keep track of what type of character this is, to determine when we are\n+                        // moving to a different word\n+\n+    size_t j = 0;  // j will iterate over each character in each of the diffs\n+\n+    size_t k = 0;  // k represents the index of the current character if there were no white spaces,\n+                   // so we will use k and j to calculate the white space offset and use it later to\n+                   // populate the final results for drawing to the screen\n+                   // if 'iwhite' is not used, k will always be the same as j\n+\n+    size_t lines = (size_t)diff_lines[i];  // we iterate over each line of this part of the diff\n+\n+    size_t w = result_diff_start_pos[i];  // keep track of the offset of all the characters without\n+                                          // any whitespace, so that we can ignore the white space\n+                                          // while calculating the diff, and then use this to\n+                                          // populate the results\n+    size_t cur_char_length = 0;\n+\n+    while (lines > 0) {\n+      if (iwhite && (diffbufs[i][j] == ' ' || diffbufs[i][j] == '\\t')) {\n+        // we are using 'iwhite' and this is a whitespace, so it will not be included as a token in\n+        // the diff algorithm\n+        // we are ignoring whitespace and this is a whitespace ' ' or '\\t' reset the class definition\n+        cls = INT_MIN;\n+      } else {\n+        // we have a character which is not a blank (or we are not using iwhite)\n+\n+        // how we determine when there is a new token depends on if this is chardiff or worddiff\n+        if (diff_allignment == WORDMATCH) {\n+          // WORDMATCH\n+          if (utf_class(diffbufs[i][j]) != cls || diffbufs[i][j] == '\\n') {\n+            // this is a new token\n+            word_offset[i][diff_length[i]] = k;  // mark the offset of this without whitespace\n+            diff_length[i]++;  // this diff length has another token, so it gets longer\n+            total_word_count++;\n+          }\n+          cls = utf_class(diffbufs[i][j]);\n+          word_offset_size[i][diff_length[i] - 1]++;  // still the same class (iterating over the\n+                                                      // same type of word), so the current word\n+                                                      // length is getting longer\n+        } else if (diff_allignment == CHARMATCH) {\n+          // CHARMATCH\n+          if (cur_char_length == 0) {\n+            // get the length of current character\n+            if (diffbufs[i][j] == '\\n') {\n+              // this is the last character of the line\n+              cur_char_length = 1;\n+            } else {\n+              cur_char_length = (size_t)utfc_ptr2len((const char *const)&diffbufs[i][j]);\n+            }\n+            word_offset[i][diff_length[i]] = k;\n+            diff_length[i]++;\n+            total_word_count++;\n+            // the token size is the length of this utf character\n+            word_offset_size[i][diff_length[i] - 1] = cur_char_length;\n+          }\n+          cur_char_length--;\n+        }\n+        // if ignoring whitespace, keep track of the white space index\n+        if (iwhite && (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH)) {\n+          // keep track of the index offset with ignoring whitespace to use when populating the results\n+          iwhite_index_offset[w++] = j - k;\n+        }\n+        diffbufs[i][k++] = diffbufs[i][j];\n+      }\n+      if (diffbufs[i][j++] == '\\n') {\n+        lines--;\n+      }\n+    }\n+  }\n+\n   // we will get the output of the linematch algorithm in the format of an array\n   // of integers (*decisions) and the length of that array (decisions_length)\n-  int *decisions = NULL;\n-  const bool iwhite = (diff_flags & (DIFF_IWHITEALL | DIFF_IWHITE)) > 0;\n-  size_t decisions_length = linematch_nbuffers(diffbufs, diff_length, ndiffs, &decisions, iwhite);\n+  if (diff_allignment == LINEMATCH) {\n+    int *decisions = NULL;\n+    size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs,\n+                                                 &decisions, 0, NULL, NULL);\n+    apply_linematch_results(dp, decisions_length, decisions);\n+    xfree(decisions);\n+  } else if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+    dp->charmatchp = xmalloc(total_chars_length * sizeof(int));  // will hold results\n+    dp->n_charmatch = total_chars_length;\n+\n+    bool lim_exceeded = false;\n+    if (diff_allignment == CHARMATCH && total_chars_length > (size_t)chardiff_chars) {\n+      lim_exceeded = true;\n+    } else if (diff_allignment == WORDMATCH && total_word_count > (size_t)worddiff_words) {\n+      lim_exceeded = true;\n+    }\n+\n+    if (lim_exceeded == true) {\n+      // do not run charmatch on the entire diff block\n+      // we will attempt to run charmatch on the individual lines later\n+      // for now, just initialize the result memory\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = -1;  // -1 indicates that algorithm has not yet ran\n+      }\n+    } else {\n+      for (size_t i = 0; i < total_chars_length; i++) {\n+        dp->charmatchp[i] = 0;  // default to not highlighted\n+      }\n+\n+      // check is this a line that does not exist in other buffers?\n+      // if so, highlight it as a 'newline', and we don't need to run the algorithm\n+      bool newline = true;\n+      for (size_t i = 0, c = 0; i < ndiffs; i++) {\n+        if (diff_length[i] > 0) {\n+          c++;\n+        }\n+        if (c > 1) {\n+          newline = false;\n+          break;\n+        }\n+      }\n+\n+      if (newline == true) {\n+        for (size_t i = 0; i < total_chars_length; i++) {\n+          dp->charmatchp[i] = 2;\n+        }\n+      } else {\n+        int *decisions = NULL;\n+        size_t decisions_length = linematch_nbuffers((const char **)diffbufs, diff_length, ndiffs,\n+                                                     &decisions, 1, word_offset, word_offset_size);\n+        for (size_t i = 0; i < decisions_length; i++) {\n+          if (decisions[i] == (pow(2, (double)ndiffs) - 1)) {\n+            // it's a comparison of all the buffers (don't highlight)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              for (size_t k = 0;\n+                   k <\n+                   (diff_allignment ==\n+                    WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                size_t l = result_diff_start_pos[j]++;\n+                dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 0;\n+              }\n+              word_offset_result_index[j]++;\n+            }\n+          } else {\n+            // it's a skip in a single buffer (highlight as changed)\n+            for (size_t j = 0; j < ndiffs; j++) {\n+              if (decisions[i] & (1 << j)) {\n+                for (size_t k = 0;\n+                     k <\n+                     (diff_allignment ==\n+                      WORDMATCH ? word_offset_size[j][word_offset_result_index[j]] : 1); k++) {\n+                  size_t l = result_diff_start_pos[j]++;\n+                  dp->charmatchp[iwhite_index_offset ? iwhite_index_offset[l] + l : l] = 1;\n+                }",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1768569183",
            "id": 1768569183,
            "in_reply_to_id": 1766563831,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5pajlf",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2287,
            "original_position": 309,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": null,
            "pull_request_review_id": 2318197920,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768569183/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-20T12:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768569183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1768856940"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768856940"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "moved to separate function",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-20T15:54:33Z",
            "diff_hunk": "@@ -2062,28 +2092,216 @@ static void run_linematch_algorithm(diff_T *dp)\n       // we add it to the array of char*, diffbufs\n       diffbufs[ndiffs] = diffbufs_mm[ndiffs].ptr;\n \n-      // keep track of the length of this diff block to pass it to the linematch\n-      // algorithm\n-      diff_length[ndiffs] = dp->df_count[i];\n+      diff_lines[ndiffs] = dp->df_count[i];\n+      if (diff_allignment == CHARMATCH || diff_allignment == WORDMATCH) {\n+        // before removing whitespace for charmatch\n+        result_diff_start_pos[ndiffs] = total_chars_length;\n+        // get the length of each of the diffs\n+        int lines = dp->df_count[i];\n+        const char *p = diffbufs[ndiffs];\n+        while (lines) {\n+          total_chars_length++;  // increment the total characters counter\n+          if (*p == '\\n') {\n+            lines--;\n+          }\n+          p++;\n+        }\n+      } else if (diff_allignment == LINEMATCH) {\n+        // LINEMATCH\n+        // keep track of the length of this diff block to pass it to the linematch\n+        // algorithm\n+        diff_length[ndiffs] = dp->df_count[i];\n+      }\n \n       // increment the amount of diff buffers we are passing to the algorithm\n       ndiffs++;\n     }\n   }\n \n+  // allocate all the memory we will need to keep track of tokens positions and their respective\n+  // lengths. For word matching, this is the 'word' as vim defines it, for character matching, the\n+  // token is the one or more 8 bit 'chars' that make up a utf character\n+  if (diff_allignment == WORDMATCH || diff_allignment == CHARMATCH) {\n+    // are we ignoring whitespace in the comparison?\n+    if (iwhite) {\n+      // allocate array for index mapping of result array\n+      iwhite_index_offset = xmalloc(total_chars_length * sizeof(size_t));\n+    }\n+    for (size_t i = 0; i < ndiffs; i++) {\n+      word_offset[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      word_offset_size[i] = xmalloc(total_chars_length * sizeof(size_t));\n+      for (size_t j = 0; j < total_chars_length; j++) {\n+        word_offset_size[i][j] = 0;\n+      }\n+    }\n+  }\n+  // calculate the token lengths and white space offset and pre process the contents of the diffs to\n+  // remove white space if necessary\n+  for (size_t i = 0; i < ndiffs; i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1768856940",
            "id": 1768856940,
            "in_reply_to_id": 1766565223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5pbp1s",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2140,
            "original_position": 159,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": null,
            "pull_request_review_id": 2318681711,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768856940/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-20T15:54:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1768856940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1778718197"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1778718197"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "moved to seperate function",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-09-27T14:28:41Z",
            "diff_hunk": "@@ -2647,6 +2878,97 @@ bool diff_find_change(win_T *wp, linenr_T lnum, int *startp, int *endp)\n   bool added = true;\n \n   linenr_T off = lnum - dp->df_lnum[idx];\n+  if (chardiff()) {",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1778718197",
            "id": 1778718197,
            "in_reply_to_id": 1766566062,
            "line": 2924,
            "node_id": "PRRC_kwDOAPphoM5qBRX1",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 2881,
            "original_position": 390,
            "original_start_line": null,
            "path": "src/nvim/diff.c",
            "position": 432,
            "pull_request_review_id": 2333901855,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1778718197/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-27T14:28:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1778718197",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1819725324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1819725324"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "all the duplicate lines are now using the *n",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-10-28T20:37:36Z",
            "diff_hunk": "@@ -1084,6 +1151,436 @@ something\n       end\n     )\n   end)\n+  describe('show a diff with charmatch enabled', function()\n+    before_each(function()\n+      local f1 = [[\n+abbcabbcdefghijklmnop\n+      ]]\n+      local f2 = [[\n+abca?bc\n+dfgh?ijl\n+mnop?\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('when the entire hunk is compared, cross-line', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^abca}{27:?}{4:bc                                    }│{7:  }{8:  1 }{4:a}{27:b}{4:bca}{27:b}{4:bcd}{27:e}{4:fghij}{27:k}{4:lmnop                       }|\n+       {7:  }{8:  2 }{4:dfgh}{27:?}{4:ijl                                   }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{4:mnop}{27:?}{4:                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:100                                                                          |\n+        ]])\n+      end)\n+    end)\n+    describe('when the single line is compared, cross-line', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:30<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^abca}{27:?}{4:bc                                    }│{7:  }{8:  1 }{4:a}{27:b}{4:bca}{27:b}{4:bc}{27:defghijklmnop}{4:                       }|\n+       {7:  }{8:  2 }{22:dfgh?ijl                                   }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:mnop?                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:30                                                                           |\n+        ]])\n+      end)\n+    end)\n+    describe('when the diff hunk and the single line are too long to run chardiff', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:10<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^ab}{27:ca?bc}{4:                                    }│{7:  }{8:  1 }{4:ab}{27:bcabbcdefghijklmnop}{4:                       }|\n+       {7:  }{8:  2 }{22:dfgh?ijl                                   }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:mnop?                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:10                                                                           |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with wordmatch enabled', function()\n+    before_each(function()\n+      local f1 = [[\n+wA w1 wB w1 w2 wC w3 w4\n+      ]]\n+      local f2 = [[\n+w1 w2\n+w2 w3\n+w4 w5\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+\n+    describe('when the entire hunk is compared, cross-line', function()\n+      it('display results', function()\n+        feed(':set diffopt+=worddiff:30<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA w1 wB }{4:w1 w2}{27: wC}{4: w3}{27: }{4:w4                     }|\n+       {7:  }{8:  2 }{27:w2}{4: w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{4:w4}{27: w5}{4:                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=worddiff:30                                                                           |\n+        ]])\n+      end)\n+      it('display results, with ignore white', function()\n+        feed(':set diffopt+=worddiff:20<cr>:set diffopt+=iwhiteall<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA}{4: }{27:w1}{4: }{27:wB}{4: w1 w2 }{27:wC}{4: w3 w4                     }|\n+       {7:  }{8:  2 }{27:w2}{4: w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{4:w4 }{27:w5}{4:                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+\n+    describe('when the single line is compared, cross-line', function()\n+      it('display results', function()\n+        feed(':set diffopt+=worddiff:20<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA w1 wB }{4:w1 w2}{27: wC w3 w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=worddiff:20                                                                           |\n+        ]])\n+      end)\n+      it('display results, with ignore white', function()\n+        feed(':set diffopt+=worddiff:15<cr>:set diffopt+=iwhiteall<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w1 w2                                      }│{7:  }{8:  1 }{27:wA}{4: }{27:w1}{4: }{27:wB}{4: w1 w2 }{27:wC}{4: }{27:w3}{4: }{27:w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+    describe('when the diff hunk and the single line are too long to run chardiff', function()\n+      it('display results', function()\n+        feed(':set diffopt+=worddiff:10<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w}{27:1 w2}{4:                                      }│{7:  }{8:  1 }{4:w}{27:A w1 wB w1 w2 wC w3 w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=worddiff:10                                                                           |\n+        ]])\n+      end)\n+      it('display results, with ignore white', function()\n+        feed(':set diffopt+=worddiff:10<cr>:set diffopt+=iwhiteall<cr>')\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^w}{27:1 w2}{4:                                      }│{7:  }{8:  1 }{4:w}{27:A w1 wB w1 w2 wC w3 w4}{4:                     }|\n+       {7:  }{8:  2 }{22:w2 w3                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  3 }{22:w4 w5                                      }│{7:  }{8:    }{23:--------------------------------------------}|\n+       {7:  }{8:  4 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with charmatch enabled, with and without ignore white', function()\n+    before_each(function()\n+      local f1 = [[\n+ababcabcdabcde\n+      ]]\n+      local f2 = [[\n+abc abcd abcde abcdef\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('normal comparison, including whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^ab}{27:c }{4:abc}{27:d }{4:abcd}{27:e }{4:abcde}{27:f}{4:                      }│{7:  }{8:  1 }{4:ababcabcdabcde                              }|\n+       {7:  }{8:  2 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:100                                                                          |\n+        ]])\n+      end)\n+    end)\n+    describe('ignore whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>:set diffopt+=iwhiteall<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^ab}{27:c}{4: abc}{27:d}{4: abcd}{27:e}{4: abcde}{27:f}{4:                      }│{7:  }{8:  1 }{4:ababcabcdabcde                              }|\n+       {7:  }{8:  2 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=iwhiteall                                                                             |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with charmatch enabled, with different UTF-8 character', function()\n+    before_each(function()\n+      local f1 = [[\n+aaaहaaa\n+      ]]\n+      local f2 = [[\n+aaaसaaa\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('normal comparison, including whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:  }{8:  1 }{4:^aaa}{27:स}{4:a}{27:a}{4:a                                    }│{7:  }{8:  1 }{4:aaa}{27:ह}{4:a}{27:a}{4:a                                     }|\n+       {7:  }{8:  2 }                                           │{7:  }{8:  2 }                                            |\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {3:Xtest-functional-diff-screen-1.2                  }{2:Xtest-functional-diff-screen-1                    }|\n+       :set diffopt+=chardiff:100                                                                          |\n+        ]])\n+      end)\n+    end)\n+  end)\n+  describe('show a diff with charmatch enabled, with same UTF-8 character', function()\n+    before_each(function()\n+      local f1 = [[\n+aaaहaaa\n+      ]]\n+      local f2 = [[\n+aaaहaaa\n+      ]]\n+      write_file(fname, f1, false)\n+      write_file(fname_2, f2, false)\n+      reread()\n+    end)\n+    describe('normal comparison, including whitespace', function()\n+      before_each(function()\n+        feed(':set diffopt+=chardiff:100<cr>')\n+      end)\n+      it('display results', function()\n+        screen:expect([[\n+       {7:+ }{8:  1 }{13:^+--  2 lines: aaaहaaa······················}│{7:+ }{8:  1 }{13:+--  2 lines: aaaहaaa·······················}|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|\n+       {1:~                                                }│{1:~                                                 }|",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1819725324",
            "id": 1819725324,
            "in_reply_to_id": 1766572078,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5sds4M",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 1577,
            "original_position": 501,
            "original_start_line": 1563,
            "path": "test/functional/ui/linematch_spec.lua",
            "position": null,
            "pull_request_review_id": 2400170677,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1819725324/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-28T20:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1819725324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23569#discussion_r1819727663"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23569"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1819727663"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "there is no additional functionality exposed to the lua with this pull request. the only difference is because the pre processing for the ignore white option now takes place before linematch_nbuffers, there is a whitespace processing which occurs in xdiff.c  now.",
            "commit_id": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
            "created_at": "2024-10-28T20:38:29Z",
            "diff_hunk": "@@ -803,6 +803,73 @@ void testFunction () {\n       ]])\n     end)\n   end)\n+  describe('setup a diff with 2 files and set linematch:30', function()",
            "html_url": "https://github.com/neovim/neovim/pull/23569#discussion_r1819727663",
            "id": 1819727663,
            "in_reply_to_id": 1766575099,
            "line": 806,
            "node_id": "PRRC_kwDOAPphoM5sdtcv",
            "original_commit_id": "931b3f0693cae6a5e1a055070d09712cc98501d4",
            "original_line": 806,
            "original_position": 4,
            "original_start_line": null,
            "path": "test/functional/ui/linematch_spec.lua",
            "position": 4,
            "pull_request_review_id": 2400174839,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1819727663/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-28T20:41:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1819727663",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Haven't read the full write-up yet, but can the grouping optimization be pulled into a separate PR?",
            "created_at": "2023-05-10T11:31:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1542026759",
            "id": 1542026759,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5b6XYH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542026759/reactions"
            },
            "updated_at": "2023-05-10T11:31:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542026759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I created a separate pull request for the grouping optimization https://github.com/neovim/neovim/pull/23611",
            "created_at": "2023-05-13T13:56:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1546658613",
            "id": 1546658613,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5cMCM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1546658613/reactions"
            },
            "updated_at": "2023-05-13T13:56:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1546658613",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "can someone point me to where in the source code a word definition (:set iskeyword / iskeyword=@,48-57,_,192-255 ) is used to increment the cursor positon? I've been trying to find it. I'd like to add some functionality for a word diff that uses the current \"iskeyword\" definition to define the word for a word-based diff, instead of character wise.",
            "created_at": "2023-05-23T19:25:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1560008179",
            "id": 1560008179,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5c-9Xz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560008179/reactions"
            },
            "updated_at": "2023-05-23T19:25:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1560008179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> where in the source code a word definition (:set iskeyword / iskeyword=@,48-57,_,192-255 ) is used to increment the cursor positon?\r\n\r\n[buf_init_chartab](https://github.com/neovim/neovim/blob/28f1f65bb30768db3423dc6eb39b2d75dfaba326/src/nvim/charset.c#L88) uses 'iskeyword' to set `g_chartab`, which is used by [vim_iswordc](https://github.com/neovim/neovim/blob/28f1f65bb30768db3423dc6eb39b2d75dfaba326/src/nvim/charset.c#L800) to decide a \"word\". Example of advancing over a `<word>`: https://github.com/neovim/neovim/blob/28f1f65bb30768db3423dc6eb39b2d75dfaba326/src/nvim/mapping.c#L610-L617",
            "created_at": "2023-06-05T02:02:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1575928350",
            "id": 1575928350,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5d7sIe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1575928350/reactions"
            },
            "updated_at": "2023-06-05T02:02:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1575928350",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The current version I have on this pull request works for word-diff and char-diff. It seems to be working fine, I'm planning to add a bunch tests for it and the code might be able to be simplified further or atleast move some things to functions to make it look cleaner\r\n\r\nword diff is activated with:\r\nset diffopt+=worddiff:100\r\nand char diff is activated with:\r\nset diffopt+=chardiff:100",
            "created_at": "2023-06-10T12:59:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-1585654395",
            "id": 1585654395,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM5egyp7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 9,
                "laugh": 0,
                "rocket": 0,
                "total_count": 9,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1585654395/reactions"
            },
            "updated_at": "2023-06-10T12:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1585654395",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 \r\nany chance of getting this character/word diff merged?",
            "created_at": "2024-06-13T13:45:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2165723214",
            "id": 2165723214,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BFlBO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165723214/reactions"
            },
            "updated_at": "2024-06-13T13:45:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165723214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "All of CI is failing so that needs to be addressed first.\r\n\r\nI'm also not fully sure what this even does. Can you update description and remove anything that's not needed.",
            "created_at": "2024-06-13T13:57:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2165756114",
            "id": 2165756114,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BFtDS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165756114/reactions"
            },
            "updated_at": "2024-06-13T13:57:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2165756114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for the reply @lewis6991 \r\n\r\nthe part in the description that is no longer relevant is the grouping optimization, which was already merged. I will remove that.\r\n\r\nso,  when you have two lines compared side by side in diff mode (whether linematch is enabled or not), the changed line will be highlighted from the start of the changed area to the end. So this is fine when there is one change per line. But when you get two changes on a line that are not adjacent, it highlights the whole unchanged area in between\r\nSo take for example this line:\r\nAAAAAAA\r\nchanged to \r\nBAAAAAAA\r\njust the B will be highlighted\r\nbut when I change it to \r\nBAAAAAAAB\r\nthe whole line will be highlighted, because the 'changed' area starts at the first change (the B on the left) and goes to the last change (the B on the right), this makes the highlight very not useful, because when I first glance at the highlight I see the entire line is changed, when I'd like to see just the two characters that have changed. So this is what the charmatch and wordmatch do, they highlight only the changed characters (or words with wordmatch) , instead of the whole line.\r\nThese pictures are still relevant to show what it is doing, they show charmatch enabled and disabled.\r\n\r\n![image](https://github.com/neovim/neovim/assets/32371757/c8a3a219-9736-49c2-96a0-8799aa48705e)\r\n![image](https://github.com/neovim/neovim/assets/32371757/043b3029-b8b1-445b-86cf-5f015c788bfe)\r\n",
            "created_at": "2024-06-14T12:26:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2167916634",
            "id": 2167916634,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BN8ha",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 4,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167916634/reactions"
            },
            "updated_at": "2024-06-14T12:28:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167916634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "description is modified to be up to date with the code (grouping optimization part removed)",
            "created_at": "2024-06-14T12:57:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2167982490",
            "id": 2167982490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BOMma",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167982490/reactions"
            },
            "updated_at": "2024-06-14T12:57:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2167982490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Don't forget the test failures; those are more important.",
            "created_at": "2024-06-14T13:11:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2168014113",
            "id": 2168014113,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6BOUUh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2168014113/reactions"
            },
            "updated_at": "2024-06-14T13:11:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2168014113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A few comments. Also, how will we handle internationalization/utf-8?\r\n\r\nI have not used international utf-8 characters much, I just tried it and seems to work fine. If the utf-8 character is more than 1 byte, it gets treated as multiple chars (of 1 byte each)  in the comparison. If there is an issue, we may have to treat the longer utf-8 character as a 'word', as is done in the worddiff feature.  But the end result seems to work fine. Do you have an example where it is not working?\r\n![image](https://github.com/neovim/neovim/assets/32371757/188361dd-0ad7-4a75-9a90-20dcd01634af)\r\nedit:\r\nI think I can see how if one of the 8 bit sections of a utf-8 char is the same as one of the 'normal' characters like 'a', 'b', 'c', then it would cause problems.\r\n",
            "created_at": "2024-06-30T02:26:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2198409066",
            "id": 2198409066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6DCQ9q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2198409066/reactions"
            },
            "updated_at": "2024-06-30T12:11:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2198409066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A few comments. Also, how will we handle internationalization/utf-8?\r\n\r\nI just put in a change to handle utf-8 characters as multiple character tokens so they are compared correctly, similar to how words are compared. I will put in some functional tests for it",
            "created_at": "2024-07-03T03:06:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2204979540",
            "id": 2204979540,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6DbVFU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 5,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2204979540/reactions"
            },
            "updated_at": "2024-07-03T03:06:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2204979540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I see the current CI check failure is a warning with the \"Cirrus CI / FreeBSD\" build can someone tell me what command I need to run to see all the warnings that will occur with this check? I'm on arch linux with gcc 14.1.1, and when I build with 'make' I'm not seeing any warnings, and I also tried CFLAGS=\"-Wall\" make",
            "created_at": "2024-07-24T20:38:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2248858062",
            "id": 2248858062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6GCtnO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2248858062/reactions"
            },
            "updated_at": "2024-07-24T20:38:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2248858062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looks like cirrus ci is green. You need to rebase on master though.",
            "created_at": "2024-07-25T14:10:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2250424283",
            "id": 2250424283,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6GIr_b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250424283/reactions"
            },
            "updated_at": "2024-07-25T14:10:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250424283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "rebased to master",
            "created_at": "2024-08-03T12:32:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2266698238",
            "id": 2266698238,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6HGxH-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2266698238/reactions"
            },
            "updated_at": "2024-08-03T12:32:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2266698238",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You need to run `make format` for the lint workflow to pass as well.",
            "created_at": "2024-08-07T13:28:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2273477360",
            "id": 2273477360,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6HgoLw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2273477360/reactions"
            },
            "updated_at": "2024-08-07T13:28:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2273477360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> You need to run `make format` for the lint workflow to pass as well.\r\n\r\nThank you @dundargoc I ran make format and pushed those changes.",
            "created_at": "2024-08-08T03:01:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2274861578",
            "id": 2274861578,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6Hl6IK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2274861578/reactions"
            },
            "updated_at": "2024-08-08T03:01:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2274861578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've reran ASAN and TSAN jobs multiple times now. I think these are real failures and not flakes.",
            "created_at": "2024-08-13T15:53:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2286587624",
            "id": 2286587624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6ISo7o",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2286587624/reactions"
            },
            "updated_at": "2024-08-13T15:53:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2286587624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": " > I've reran ASAN and TSAN jobs multiple times now. I think these are real failures and not flakes.\r\n\r\nI see the functional tests are failing in \"ubuntu asan clang functionaltest\" \r\n`FAILED   test/functional/ui/linematch_spec.lua @ 1172: Diff mode screen with 2 diffs open show a diff with charmatch enabled when the entire hunk is compared, cross-line display results`\r\nwhen I run \"make functionaltest\" locally, I am seeing those same tests are passing locally.\r\n\r\nand on the \"ubuntu tsan clang functionaltest\" I'm not sure what to make of this error:\r\n```\r\n$NVIM_LOG_FILE: /home/runner/work/neovim/neovim/build/.nvimlog\r\n(last 100 lines)\r\nERR 2024-08-13T16:00:41.163 T3291.20569.0 loop_close:170: uv_loop_close() hang?\r\n[--I] signal   0x555d065107b0\r\n[-AI] async    0x555d065105f8\r\n[RA-] timer    0x722800000000\r\n```\r\n\r\nany suggestion or insights?\r\n",
            "created_at": "2024-08-16T13:40:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2293534107",
            "id": 2293534107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6ItI2b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2293534107/reactions"
            },
            "updated_at": "2024-08-16T13:40:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2293534107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "```\r\n==================== File /home/runner/work/neovim/neovim/build/log/asan.30106 ====================\r\n= =================================================================\r\n= ==30106==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x503000005907 at pc 0x55de7f1fc36b bp 0x7ffc575ea730 sp 0x7ffc575ea728\r\n= READ of size 1 at 0x503000005907 thread T0\r\n=     #0 0x55de7f1fc36a in utfc_ptr2len /home/runner/work/neovim/neovim/src/nvim/mbyte.c:953:29\r\n=     #1 0x55de7e92cec6 in run_alignment_algorithm /home/runner/work/neovim/neovim/src/nvim/diff.c:2183:39\r\n=     #2 0x55de7e937459 in diff_find_change /home/runner/work/neovim/neovim/src/nvim/diff.c:2885:7\r\n=     #3 0x55de7e9717ad in win_line /home/runner/work/neovim/neovim/src/nvim/drawline.c:1146:11\r\n=     #4 0x55de7e9da4a7 in win_update /home/runner/work/neovim/neovim/src/nvim/drawscreen.c:2249:15\r\n=     #5 0x55de7e9bd52c in update_screen /home/runner/work/neovim/neovim/src/nvim/drawscreen.c:639:7\r\n=     #6 0x55de7f3cfc2f in normal_redraw /home/runner/work/neovim/neovim/src/nvim/normal.c:1355:5\r\n=     #7 0x55de7f3cdbe2 in normal_check /home/runner/work/neovim/neovim/src/nvim/normal.c:1457:5\r\n=     #8 0x55de7f91adb0 in state_enter /home/runner/work/neovim/neovim/src/nvim/state.c:40:35\r\n=     #9 0x55de7f359aa4 in normal_enter /home/runner/work/neovim/neovim/src/nvim/normal.c:520:3\r\n=     #10 0x55de7f0a5e60 in main /home/runner/work/neovim/neovim/src/nvim/main.c:661:3\r\n=     #11 0x7fa4aae29d8f in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n=     #12 0x7fa4aae29e3f in __libc_start_main csu/../csu/libc-start.c:392:3\r\n=     #13 0x55de7e4b4f64 in _start (/home/runner/work/neovim/neovim/build/bin/nvim+0xbebf64) (BuildId: 5d5340626e850e6027066653a3fd12d1fcf9c6ff)\r\n= \r\n= 0x503000005907 is located 0 bytes after 23-byte region [0x5030000058f0,0x503000005907)\r\n= allocated by thread T0 here:\r\n=     #0 0x55de7e54f19f in malloc (/home/runner/work/neovim/neovim/build/bin/nvim+0xc8619f) (BuildId: 5d5340626e850e6027066653a3fd12d1fcf9c6ff)\r\n=     #1 0x55de7f26b2f9 in try_malloc /home/runner/work/neovim/neovim/src/nvim/memory.c:99:15\r\n=     #2 0x55de7e950dbc in diff_write_buffer /home/runner/work/neovim/neovim/src/nvim/diff.c:771:15\r\n=     #3 0x55de7e92a497 in run_alignment_algorithm /home/runner/work/neovim/neovim/src/nvim/diff.c:2086:7\r\n=     #4 0x55de7e937459 in diff_find_change /home/runner/work/neovim/neovim/src/nvim/diff.c:2885:7\r\n=     #5 0x55de7e9717ad in win_line /home/runner/work/neovim/neovim/src/nvim/drawline.c:1146:11\r\n=     #6 0x55de7e9da4a7 in win_update /home/runner/work/neovim/neovim/src/nvim/drawscreen.c:2249:15\r\n=     #7 0x55de7e9bd52c in update_screen /home/runner/work/neovim/neovim/src/nvim/drawscreen.c:639:7\r\n=     #8 0x55de7f3cfc2f in normal_redraw /home/runner/work/neovim/neovim/src/nvim/normal.c:1355:5\r\n=     #9 0x55de7f3cdbe2 in normal_check /home/runner/work/neovim/neovim/src/nvim/normal.c:1457:5\r\n=     #10 0x55de7f91adb0 in state_enter /home/runner/work/neovim/neovim/src/nvim/state.c:40:35\r\n=     #11 0x55de7f359aa4 in normal_enter /home/runner/work/neovim/neovim/src/nvim/normal.c:520:3\r\n=     #12 0x55de7f0a5e60 in main /home/runner/work/neovim/neovim/src/nvim/main.c:661:3\r\n=     #13 0x7fa4aae29d8f in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n= \r\n= SUMMARY: AddressSanitizer: heap-buffer-overflow /home/runner/work/neovim/neovim/src/nvim/mbyte.c:953:29 in utfc_ptr2len\r\n= Shadow bytes around the buggy address:\r\n=   0x503000005680: fd fd fd fd fa fa fd fd fd fd fa fa fd fd fd fd\r\n=   0x503000005700: fa fa fd fd fd fd fa fa fd fd fd fd fa fa fd fd\r\n=   0x503000005780: fd fa fa fa fd fd fd fd fa fa fd fd fd fd fa fa\r\n=   0x503000005800: fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fd\r\n=   0x503000005880: fa fa fd fd fd fd fa fa fd fd fd fd fa fa 00 00\r\n= =>0x503000005900:[07]fa fa fa 00 00 06 fa fa fa 00 00 06 fa fa fa\r\n=   0x503000005980: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n=   0x503000005a00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n=   0x503000005a80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n=   0x503000005b00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n=   0x503000005b80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n= Shadow byte legend (one shadow byte represents 8 application bytes):\r\n=   Addressable:           00\r\n=   Partially addressable: 01 02 03 04 05 06 07 \r\n=   Heap left redzone:       fa\r\n=   Freed heap region:       fd\r\n=   Stack left redzone:      f1\r\n=   Stack mid redzone:       f2\r\n=   Stack right redzone:     f3\r\n=   Stack after return:      f5\r\n=   Stack use after scope:   f8\r\n=   Global redzone:          f9\r\n=   Global init order:       f6\r\n=   Poisoned by user:        f7\r\n=   Container overflow:      fc\r\n=   Array cookie:            ac\r\n=   Intra object redzone:    bb\r\n=   ASan internal:           fe\r\n=   Left alloca redzone:     ca\r\n=   Right alloca redzone:    cb\r\n= ==30106==ABORTING\r\n==================================================================================================\r\n```",
            "created_at": "2024-08-16T14:04:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2293573901",
            "id": 2293573901,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6ItSkN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2293573901/reactions"
            },
            "updated_at": "2024-08-16T14:04:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2293573901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I fixed a few memory leaks and an out of bounds read.",
            "created_at": "2024-08-29T16:16:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2318271046",
            "id": 2318271046,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6KLgJG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2318271046/reactions"
            },
            "updated_at": "2024-08-29T16:16:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2318271046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@dundargoc @lewis6991 \r\nI see that all the checks are passing. Is there still anything that needs to be fixed?",
            "created_at": "2024-09-10T18:43:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2341752559",
            "id": 2341752559,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6LlE7v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2341752559/reactions"
            },
            "updated_at": "2024-09-10T18:43:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2341752559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Pr is still in draft which is usually used to indicate it's not ready yet. I'll mark it ready for review now then assuiming it's ready to go.",
            "created_at": "2024-09-10T19:00:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2341792064",
            "id": 2341792064,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6LlOlA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2341792064/reactions"
            },
            "updated_at": "2024-09-10T19:00:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2341792064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry but I don't have enough time to review this PR, not do _I_ really want to support it. Unlike the line match PR, I don't think the value proposition is strong enough to offset the maintenance burden of the complexity added to the C code. Also unlike the line match PR, the enhancements here cannot be leveraged by other systems and only benefits the built in diff viewer, which lowers the value proposition further.\n\nThe line match PR also needed a fair amount of work on my end to get it into a mergable state; reducing the large amount of heap allocations etc, and I just don't have the time again to do that. Therefore another maintainer will need to step up to push this forward.\n\n---\n\nOn another note, since the line match PR went in I've read a few articles explaining how the standard diff algorithms work, which I think the line match code could largely benefit from. See https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/ for a very well written series of posts on how the Myers diff algorithm works and is implemented. Utilising some of the ideas from this might result in slightly different behaviour but would be a lot more efficient compared to what we have now.\n\nGoing forward these kinds of changes are probably best aimed at being merged into the xdiff lib, whether that be our vendored one, git's, or the gnu xdiff.",
            "created_at": "2024-09-10T19:26:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2341851077",
            "id": 2341851077,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6Llc_F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2341851077/reactions"
            },
            "updated_at": "2024-09-10T19:26:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2341851077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 \r\n>Unlike the line match PR, I don't think the value proposition is strong enough\r\n>to offset the maintenance burden of the complexity added to the C code. Also\r\n>unlike the line match PR, the enhancements here cannot be leveraged by other\r\n>systems and only benefits the built in diff viewer, which lowers the value\r\n>proposition further.\r\n\r\nuntil this pull request (or a pull request like it) is merged, neovim is\r\nmissing an important diff feature that many other text editors have (emacs, vs\r\ncode, jetbrains), the ability to show multiple highlighted regions on one line.\r\nThe value added for anyone who uses diffs to compare lines with multiple\r\nchanges seems pretty apparent to me.\r\n\r\n>On another note, since the line match PR went in I've read a few articles\r\n>explaining how the standard diff algorithms work, which I think the line match\r\n>code could largely benefit from. See\r\n>https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/ for a very\r\n>well written series of posts on how the Myers diff algorithm works and is\r\n>implemented. Utilising some of the ideas from this might result in slightly\r\n>different behaviour but would be a lot more efficient compared to what we have\r\n>now.\r\n\r\nI reviewed these articles briefly, and I see it looks like there may be a way\r\nto choose the path through the decision graph more efficiently, I would need to\r\ntake some more time to understand it.\r\n\r\n>Going forward these kinds of changes are probably best aimed at being merged\r\n>into the xdiff lib, whether that be our vendored one, git's, or the gnu xdiff.\r\n\r\nAny change merged to xdiff will not give the ability to see multiple\r\ndifferences on a line. The current line highlight calculation in\r\ndiff.c:diff_find_change is efficient but it is very simple. It starts assuming\r\ntwo lines are different, and it narrows down the different region one character\r\nat a time from the left and the right, while it finds the outer characters are\r\nmatching. So this code needs to be changed (as I did in this PR) if the user\r\nwill ever see multiple changed regions on a line.\r\n",
            "created_at": "2024-09-11T13:43:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2343718280",
            "id": 2343718280,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6Lsk2I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 8,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2343718280/reactions"
            },
            "updated_at": "2024-09-11T13:43:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2343718280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "While I agree with @lewis6991 's [sentiment](https://github.com/neovim/neovim/pull/23569#issuecomment-2341851077), so far @jwhite510 has been a reliable \"owner\" of this code, and if that continues, then this is worth having.\r\n\r\nBut the current PR makes a lot of changes that are spread around in many places, so if there is a regression, it's not clear how to \"turn off\" the risky codepaths. To help with that, a basic approach is to move major blocks of logic into separate functions instead of inline everything into a gigantic function. And to avoid redundant code wherever possible (without adding excessive indirection / over-abstracting).\r\n\r\nIt also looks like there are few docstrings on many of these functions. The non-obvious ones should have docstrings that give intuitive description of their purpose.",
            "created_at": "2024-09-19T10:22:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2360598177",
            "id": 2360598177,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6Ms96h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2360598177/reactions"
            },
            "updated_at": "2024-09-19T10:23:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2360598177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "Any news on that PR guys?\r\n\r\nI understand from the conversation above that @jwhite510 you've already done the heaviest work, and being a huge vimdiff user, I'm really eager to be able to use it.",
            "created_at": "2025-05-10T02:26:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/23569#issuecomment-2868236232",
            "id": 2868236232,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
            "node_id": "IC_kwDOAPphoM6q9c_I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868236232/reactions"
            },
            "updated_at": "2025-05-10T08:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2868236232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2276631?v=4",
                "events_url": "https://api.github.com/users/NicolasWebDev/events{/privacy}",
                "followers_url": "https://api.github.com/users/NicolasWebDev/followers",
                "following_url": "https://api.github.com/users/NicolasWebDev/following{/other_user}",
                "gists_url": "https://api.github.com/users/NicolasWebDev/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/NicolasWebDev",
                "id": 2276631,
                "login": "NicolasWebDev",
                "node_id": "MDQ6VXNlcjIyNzY2MzE=",
                "organizations_url": "https://api.github.com/users/NicolasWebDev/orgs",
                "received_events_url": "https://api.github.com/users/NicolasWebDev/received_events",
                "repos_url": "https://api.github.com/users/NicolasWebDev/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/NicolasWebDev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/NicolasWebDev/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/NicolasWebDev",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23569/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/23569/commits",
    "created_at": "2023-05-10T11:07:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/23569.diff",
    "draft": false,
    "head": {
        "label": "jwhite510:charmatch5",
        "ref": "charmatch5",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/jwhite510/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/jwhite510/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/jwhite510/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/jwhite510/neovim/branches{/branch}",
            "clone_url": "https://github.com/jwhite510/neovim.git",
            "collaborators_url": "https://api.github.com/repos/jwhite510/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/jwhite510/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/jwhite510/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/jwhite510/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/jwhite510/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/jwhite510/neovim/contributors",
            "created_at": "2021-03-27T20:08:15Z",
            "default_branch": "document_1",
            "deployments_url": "https://api.github.com/repos/jwhite510/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/jwhite510/neovim/downloads",
            "events_url": "https://api.github.com/repos/jwhite510/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/jwhite510/neovim/forks",
            "full_name": "jwhite510/neovim",
            "git_commits_url": "https://api.github.com/repos/jwhite510/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/jwhite510/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/jwhite510/neovim/git/tags{/sha}",
            "git_url": "git://github.com/jwhite510/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/jwhite510/neovim/hooks",
            "html_url": "https://github.com/jwhite510/neovim",
            "id": 352166879,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/jwhite510/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/jwhite510/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/jwhite510/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/jwhite510/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/jwhite510/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/jwhite510/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/jwhite510/neovim/merges",
            "milestones_url": "https://api.github.com/repos/jwhite510/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNTIxNjY4Nzk=",
            "notifications_url": "https://api.github.com/repos/jwhite510/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
                "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwhite510/followers",
                "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwhite510",
                "id": 32371757,
                "login": "jwhite510",
                "node_id": "MDQ6VXNlcjMyMzcxNzU3",
                "organizations_url": "https://api.github.com/users/jwhite510/orgs",
                "received_events_url": "https://api.github.com/users/jwhite510/received_events",
                "repos_url": "https://api.github.com/users/jwhite510/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwhite510",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/jwhite510/neovim/pulls{/number}",
            "pushed_at": "2024-10-28T20:37:03Z",
            "releases_url": "https://api.github.com/repos/jwhite510/neovim/releases{/id}",
            "size": 295963,
            "ssh_url": "git@github.com:jwhite510/neovim.git",
            "stargazers_count": 6,
            "stargazers_url": "https://api.github.com/repos/jwhite510/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/jwhite510/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/jwhite510/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/jwhite510/neovim/subscription",
            "svn_url": "https://github.com/jwhite510/neovim",
            "tags_url": "https://api.github.com/repos/jwhite510/neovim/tags",
            "teams_url": "https://api.github.com/repos/jwhite510/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/jwhite510/neovim/git/trees{/sha}",
            "updated_at": "2021-12-10T20:56:23Z",
            "url": "https://api.github.com/repos/jwhite510/neovim",
            "visibility": "public",
            "watchers": 6,
            "watchers_count": 6,
            "web_commit_signoff_required": false
        },
        "sha": "7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
            "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
            "followers_url": "https://api.github.com/users/jwhite510/followers",
            "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
            "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/jwhite510",
            "id": 32371757,
            "login": "jwhite510",
            "node_id": "MDQ6VXNlcjMyMzcxNzU3",
            "organizations_url": "https://api.github.com/users/jwhite510/orgs",
            "received_events_url": "https://api.github.com/users/jwhite510/received_events",
            "repos_url": "https://api.github.com/users/jwhite510/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/jwhite510",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/23569",
    "id": 1345201310,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23569",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 3010934759,
            "name": "diff",
            "node_id": "MDU6TGFiZWwzMDEwOTM0NzU5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diff"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5QLiSe",
    "number": 23569,
    "patch_url": "https://github.com/neovim/neovim/pull/23569.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/23569/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/7cf9e3dea2791b865cbab3dc9288ebe66fcfb445",
    "title": "charmatch / wordmatch - improved diff highlighting between adjacent lines",
    "updated_at": "2025-05-10T08:35:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/23569",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/32371757?v=4",
        "events_url": "https://api.github.com/users/jwhite510/events{/privacy}",
        "followers_url": "https://api.github.com/users/jwhite510/followers",
        "following_url": "https://api.github.com/users/jwhite510/following{/other_user}",
        "gists_url": "https://api.github.com/users/jwhite510/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jwhite510",
        "id": 32371757,
        "login": "jwhite510",
        "node_id": "MDQ6VXNlcjMyMzcxNzU3",
        "organizations_url": "https://api.github.com/users/jwhite510/orgs",
        "received_events_url": "https://api.github.com/users/jwhite510/received_events",
        "repos_url": "https://api.github.com/users/jwhite510/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jwhite510/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jwhite510/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jwhite510",
        "user_view_type": "public"
    }
}