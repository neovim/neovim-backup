{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27101/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27101/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27101"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27101"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27101/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/49f40f9e904ba1478aa807c12052acc070d29277"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5841,
            "forks_count": 5841,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1854,
            "open_issues_count": 1854,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-02-04T02:07:35Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 307298,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 85859,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-02-04T02:07:39Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 85859,
            "watchers_count": 85859,
            "web_commit_signoff_required": false
        },
        "sha": "b16b287b8f36a8e25b27f3009d7fdd0d39348894",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Add lua type annotations for LSP handler functions:\r\n\r\n- `vim.lsp.Handler`\r\n- `vim.lsp.RequestHandler` (see |lsp-request|)\r\n- `vim.lsp.ResponseHandler` (see |lsp-response|)\r\n- `vim.lsp.NotificationHandler` (see |lsp-notification|)\r\n\r\nThere are three types of LSP handlers: request handler, response\r\nhandler, and notification handler, having slightly different parameters\r\n(`result` v.s. `params`) and return types (returns something or no\r\nreturn expected). Previously, all the handler functions were all using\r\nthe same signature for response handler, and therefore had incorrect\r\nparameter names (e.g., `result` instead of `params`).\r\n\r\nLots of type checking warnings are fixed by adding handler-specific\r\ntype annotations for either `result` or `params`.\r\n\r\nDocumentation changes (doc/lsp.txt):\r\n\r\n- |lsp-method|: List the implemented handlers in `vim.lsp.handlers` with\r\n  the type of the handler (either request, response, or notification).\r\n\r\n- Add a new section |lsp-request|. Make data structure for LSP JSON-RPC\r\n  messages more explicit, for |lsp-response| and |lsp-notification|).\r\n\r\n- Update docs for |lsp-handler| to explain the three types of LSP\r\n  handlers, and clarify parameters and the correct meaning of return\r\n  values of LSP request handler functions: `result` and `error`.\r\n\r\n- Discuss and clarify the meaning of `vim.NIL` in LSP handlers.\r\n  NOTE: There appear to be a few places where the return value of LSP\r\n  handler is incorrect, which are marked as TODO.\r\n\r\nNote: `lsp.Handler` -> `vim.lsp.Handler` because handler functions are\r\nNvim-specific rather than a part of the LSP protocol.\r\n\r\nMinor improvements to tests:\r\n\r\n- handler_spec: be sure to clear the session, otherwise tests may fail\r\n  when executed solely.\r\n\r\n\r\n### Tasks remaining for this PR\r\n\r\n- [x] codeAction handler.\r\n- [ ] Check: `lsp.null` -> should be `nil` or `vim.NIL`?\r\n- [ ] Check: vim.Diagnostic v.s. lsp.Diagnostic #27420\r\n- [ ] lsp.DocumentDiagnosticReport: verify partial results\r\n\r\n### Relevant tasks, backlog for the future improvements \r\n\r\n\r\n- [x] LspProgress #23958\r\n   - [x] **Breaking change needed**: change field name `result` -> `params` #28632 \r\n- [ ] Document (or test) the behavior when a handler functions throws an error.\r\n- [ ] It's unclear `params` will have `vim.NIL` instead of `nil` when invoked via JSON-RPC.\r\n- [ ] Add more unit tests for handlers? (non-trivial work)\r\n- [ ] There are some suspicious errors or violation of |lsp-handler| specification, all marked as `TODO`. Such as returning a valid result when error. (Related: #16472) This might change the LSP behavior, so a thorough testing will be needed.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460376803"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460376803"
                }
            },
            "author_association": "MEMBER",
            "body": "Note this --- we probably had a wrong name for `LspProgress`. #23958 \r\n\r\nA breaking change (during 0.10-dev only) will be needed. Need to be handled in #23235",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T11:10:25Z",
            "diff_hunk": "@@ -16,68 +16,76 @@ local function err_message(...)\n   api.nvim_command('redraw')\n end\n \n---see: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_executeCommand\n+-- https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_executeCommand\n+---@type vim.lsp.ResponseHandler\n M[ms.workspace_executeCommand] = function(_, _, _, _)\n   -- Error handling is done implicitly by wrapping all handlers; see end of this file\n end\n \n---see: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#progress\n----@param result lsp.ProgressParams\n----@param ctx lsp.HandlerContext\n-M[ms.dollar_progress] = function(_, result, ctx)\n+-- https://microsoft.github.io/language-server-protocol/specifications/specification-current/#progress\n+---@param params lsp.ProgressParams\n+---@type vim.lsp.NotificationHandler\n+M[ms.dollar_progress] = function(_, params, ctx)\n   local client = vim.lsp.get_client_by_id(ctx.client_id)\n   if not client then\n     err_message('LSP[id=', tostring(ctx.client_id), '] client has shut down during progress update')\n+    -- TODO(wookayin): This is a notification handler so should be removed (after testing!) #16472\n     return vim.NIL\n   end\n   local kind = nil\n-  local value = result.value\n+  local value = params.value\n \n   if type(value) == 'table' then\n+    ---@cast value lsp.WorkDoneProgressBegin|lsp.WorkDoneProgressReport|lsp.WorkDoneProgressEnd\n     kind = value.kind\n     -- Carry over title of `begin` messages to `report` and `end` messages\n     -- So that consumers always have it available, even if they consume a\n     -- subset of the full sequence\n     if kind == 'begin' then\n-      client.progress.pending[result.token] = value.title\n+      client.progress.pending[params.token] = value.title\n     else\n-      value.title = client.progress.pending[result.token]\n+      value.title = client.progress.pending[params.token]\n       if kind == 'end' then\n-        client.progress.pending[result.token] = nil\n+        client.progress.pending[params.token] = nil\n       end\n     end\n   end\n \n-  client.progress:push(result)\n+  client.progress:push(params)\n \n   api.nvim_exec_autocmds('LspProgress', {\n     pattern = kind,\n     modeline = false,\n-    data = { client_id = ctx.client_id, result = result },\n+    -- TODO(wookayin): breaking change during 0.10-nightly, results -> params. Revise data again\n+    data = { client_id = ctx.client_id, result = params },",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460376803",
            "id": 1460376803,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XC5Tj",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 61,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1834661529,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460376803/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-25T05:10:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460376803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460379997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460379997"
                }
            },
            "author_association": "MEMBER",
            "body": "NOTE: not quite relevant changes; should be rebased after once #27102 is merged",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T11:16:44Z",
            "diff_hunk": "@@ -10,14 +23,8 @@ error('Cannot require a meta file')\n ---@field params? any\n ---@field version? integer\n \n+-- https://microsoft.github.io/language-server-protocol/specifications/specification-current/#responseMessage\n ---@class lsp.ResponseError\n----@field code integer\n+---@field code integer see `lsp.ErrorCodes` and `lsp.LSPErrorCodes`.\n ---@field message string\n ---@field data string|number|boolean|table[]|table|nil\n-\n---- @class lsp.DocumentFilter\n---- @field language? string\n---- @field scheme? string\n---- @field pattern? string\n-\n---- @alias lsp.RegisterOptions any | lsp.StaticRegistrationOptions | lsp.TextDocumentRegistrationOptions",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460379997",
            "id": 1460379997,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XC6Fd",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 23,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/_meta.lua",
            "position": null,
            "pull_request_review_id": 1834661529,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460379997/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T11:20:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460379997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460394725"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460394725"
                }
            },
            "author_association": "MEMBER",
            "body": "Without `vim.NIL` something bad will happen (#16472). But what #16472 says is still confusing to me -- should return `vim.NIL` on error? or `nil`?\r\n\r\nIt looks like some kind of ACK is sent to LSP, so apparently that a notification handler might needs to return `vim.NIL` to indicate a success; ~~as `vim.lsp.rpc` does not distinguish different types of handlers (Returning `nil` will be like an error, which is more consistent with the behavior of request handlers) Or this should be better handled in the `vim.lsp.rpc` core implementation now that we clearly follow the LSP protocol for handlers.~~\r\n\r\nUPDATE: In the current implementation, RPC handler ignores the return value of a notification handler.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T11:47:56Z",
            "diff_hunk": "@@ -16,68 +16,76 @@ local function err_message(...)\n   api.nvim_command('redraw')\n end\n \n---see: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_executeCommand\n+-- https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_executeCommand\n+---@type vim.lsp.ResponseHandler\n M[ms.workspace_executeCommand] = function(_, _, _, _)\n   -- Error handling is done implicitly by wrapping all handlers; see end of this file\n end\n \n---see: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#progress\n----@param result lsp.ProgressParams\n----@param ctx lsp.HandlerContext\n-M[ms.dollar_progress] = function(_, result, ctx)\n+-- https://microsoft.github.io/language-server-protocol/specifications/specification-current/#progress\n+---@param params lsp.ProgressParams\n+---@type vim.lsp.NotificationHandler\n+M[ms.dollar_progress] = function(_, params, ctx)\n   local client = vim.lsp.get_client_by_id(ctx.client_id)\n   if not client then\n     err_message('LSP[id=', tostring(ctx.client_id), '] client has shut down during progress update')\n+    -- TODO(wookayin): This is a notification handler so should be removed (after testing!) #16472",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460394725",
            "id": 1460394725,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XC9rl",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 32,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/handlers.lua",
            "position": null,
            "pull_request_review_id": 1834665479,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460394725/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T13:01:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460394725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460592735"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460592735"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  \"response\"     : LSP server sends a response to request made by client (Nvim)\r\n```",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:22:22Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460592735",
            "id": 1460592735,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDuBf",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 214,
            "original_position": 93,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460592735/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460592735",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460594282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460594282"
                }
            },
            "author_association": "MEMBER",
            "body": "It doesn't have to be done in this PR, but we could use the [metamodel](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/metaModel/metaModel.json) in the future to generate this table.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:25:32Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460594282",
            "id": 1460594282,
            "line": 162,
            "node_id": "PRRC_kwDOAPphoM5XDuZq",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 162,
            "original_position": 54,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 57,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460594282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460594282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460595272"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460595272"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm used to it, but it might be confusing for other users that we often exchange the role of the client and server in our docs. E.g.: In `vim.lsp.get_client_by_id` the client is the language server, not the editor.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:27:07Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460595272",
            "id": 1460595272,
            "line": 206,
            "node_id": "PRRC_kwDOAPphoM5XDupI",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 206,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 103,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460595272/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460595272",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460595985"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460595985"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nReturn values and error handling of |lsp-handler|:\r\n```",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:28:38Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460595985",
            "id": 1460595985,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDu0R",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 272,
            "original_position": 168,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460595985/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460595985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460596243"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596243"
                }
            },
            "author_association": "MEMBER",
            "body": "> (equivalent as returning `nil`, `nil`)\r\n\r\n??",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:29:13Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:\n+\n+    For |lsp-response| and |lsp-notification| handlers, there are no return values\n+    (equivalent as returning `nil`, `nil`).",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460596243",
            "id": 1460596243,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDu4T",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 275,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596243/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460596476"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596476"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    was handled successfully. Any null or void values in the result (the\r\n```",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:29:48Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:\n+\n+    For |lsp-response| and |lsp-notification| handlers, there are no return values\n+    (equivalent as returning `nil`, `nil`).\n+\n+    For |lsp-request| handlers, return either non-nil `result` (on success) or\n+    `error` (on failure), but not both.\n+\n+    Request handlers |lsp-request| should return a valid `result` object as\n+    specified in the LSP protocol, which will be sent back to the LSP server\n+    via JSON RPC (as a part of |lsp-response| message), indicating the request\n+    was handeled successfully. Any null or void values in the result (the",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460596476",
            "id": 1460596476,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDu78",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 283,
            "original_position": 179,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596476/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460596780"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596780"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we be consistent about using `null` vs `nil`?",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:30:23Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:\n+\n+    For |lsp-response| and |lsp-notification| handlers, there are no return values\n+    (equivalent as returning `nil`, `nil`).\n+\n+    For |lsp-request| handlers, return either non-nil `result` (on success) or\n+    `error` (on failure), but not both.\n+\n+    Request handlers |lsp-request| should return a valid `result` object as\n+    specified in the LSP protocol, which will be sent back to the LSP server\n+    via JSON RPC (as a part of |lsp-response| message), indicating the request\n+    was handeled successfully. Any null or void values in the result (the",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460596780",
            "id": 1460596780,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDvAs",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 283,
            "original_position": 179,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596780/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460596780",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460598024"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460598024"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    -- A debug message.\r\n```",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:32:48Z",
            "diff_hunk": "@@ -51,6 +51,8 @@ local constants = {\n     Info = 3,\n     -- A log message.\n     Log = 4,\n+    -- A deug message.",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460598024",
            "id": 1460598024,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDvUI",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 54,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/protocol.lua",
            "position": null,
            "pull_request_review_id": 1834715309,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460598024/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:33:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460598024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460601103"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460601103"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, great point! This is also in my TODO list --- `gen_lsp` already has the data and generates `vim.lsp.protocol.Methods`, so this should be an easy one. It can also help us detect human errors..\r\n(For the record, this table was manually editted and used as my task dashboard for touching all the handlers)",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:39:18Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460601103",
            "id": 1460601103,
            "in_reply_to_id": 1460594282,
            "line": 162,
            "node_id": "PRRC_kwDOAPphoM5XDwEP",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 162,
            "original_position": 54,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 57,
            "pull_request_review_id": 1834717078,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460601103/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:39:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460601103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460602257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460602257"
                }
            },
            "author_association": "MEMBER",
            "body": "Is the meaning unclear? What I menat is: in Lua, `local x, y = (function() end)()` assigns `nil` to both `x` and `y`.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:41:10Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:\n+\n+    For |lsp-response| and |lsp-notification| handlers, there are no return values\n+    (equivalent as returning `nil`, `nil`).",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460602257",
            "id": 1460602257,
            "in_reply_to_id": 1460596243,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDwWR",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 275,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834717337,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460602257/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:41:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460602257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460603593"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460603593"
                }
            },
            "author_association": "MEMBER",
            "body": "Good point, but I was intentional on `null` here because this refers to the `null` data type in the [LSP spec documentation](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_executeCommand). Maybe I should make it more clear. `nil` should refer to the `nil`  value in Lua language.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T18:43:39Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:\n+\n+    For |lsp-response| and |lsp-notification| handlers, there are no return values\n+    (equivalent as returning `nil`, `nil`).\n+\n+    For |lsp-request| handlers, return either non-nil `result` (on success) or\n+    `error` (on failure), but not both.\n+\n+    Request handlers |lsp-request| should return a valid `result` object as\n+    specified in the LSP protocol, which will be sent back to the LSP server\n+    via JSON RPC (as a part of |lsp-response| message), indicating the request\n+    was handeled successfully. Any null or void values in the result (the",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460603593",
            "id": 1460603593,
            "in_reply_to_id": 1460596780,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XDwrJ",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 283,
            "original_position": 179,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834717612,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460603593/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T18:43:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460603593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1460642988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460642988"
                }
            },
            "author_association": "MEMBER",
            "body": "OHHHH I got it. The way I read that is \"equivalent as returning `nil` (end of sentence here), `nil`\".\r\n\r\nMaybe \"equivalent as returning `nil, nil`\" would make it clearer that both `nil`s are being returned?",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-01-20T20:06:42Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):\n+(i)  that handle |lsp-response|s to requests made by Nvim to LSP server\n+     (Lua type: `vim.lsp.ResponseHandler`), or\n+(ii) that handle |lsp-request|s or |lsp-notification|s made by LSP server\n+     (Lua type: `vim.lsp.RequestHandler` or `vim.lsp.NotificationHandler`).\n+\n+Notifications (|lsp-notification|) made by Nvim, as opposed to requests, are\n+fire-and-forget: there is no response from LSP server, so they can't be\n+handled.\n+\n+Each type of the LSP handlers has the following signature (`vim.lsp.Handler`):\n+>\n+    vim.lsp.ResponseHandler:\n+        fun(err, result, ctx, config)\n+\n+    vim.lsp.NotificationHandler:\n+        fun(err, params, ctx, config)\n+\n+    vim.lsp.RequestHandler:\n+        fun(err, params, ctx, config): Result?, lsp.ResponseError?\n <\n     Parameters: ~\n-        - {err}     (table|nil) Error info dict, or `nil` if the request\n-                    completed.\n-        - {result}  (Result | Params | nil) `result` key of the |lsp-response| or\n-                    `nil` if the request failed.\n-        - {ctx}     (table) Table of calling state associated with the\n-                    handler, with these keys:\n-                    - {method}  (string) |lsp-method| name.\n-                    - {client_id} (number) |vim.lsp.client| identifier.\n-                    - {bufnr}   (Buffer) Buffer handle.\n-                    - {params}  (table|nil) Request parameters table.\n-                    - {version} (number) Document version at time of\n+        - {err}     (`lsp.LspResponseError?`) Error info table, or `nil` if\n+                    the request completed without errors.\n+        - {result}  (`Result`) readout of `result` key in the |lsp-response|,\n+                    or `nil` if the request failed (i.e. {err} `~= nil`); or\n+          {request} (`Params`) readout of `params` key in the |lsp-request| or\n+                    |lsp-notification|, or `nil` if the method does not\n+                    require params.\n+        - {ctx}     (`lsp.HandlerContext`) table of calling state associated\n+                    with the handler, with these keys:\n+                    - {method}  (`string`) |lsp-method| name.\n+                    - {client_id} (`number`) |vim.lsp.client| identifier.\n+                    - {bufnr}   (`number`) Buffer handle.\n+                    - {params}  (`table?`) Request parameters table.\n+                    - {version} (`number`) Document version at time of\n                                 request. Handlers can compare this to the\n                                 current document version to check if the\n                                 response is \"stale\". See also |b:changedtick|.\n-        - {config}  (table) Handler-defined configuration table, which allows\n+        - {config}  (`table`) Handler-defined configuration table, which allows\n                     users to customize handler behavior.\n                     For an example, see:\n                         |vim.lsp.diagnostic.on_publish_diagnostics()|\n                     To configure a particular |lsp-handler|, see:\n-                        |lsp-handler-configuration|\n+                        |lsp-handler-configuration| |vim.lsp.with()|\n \n-    Returns: ~\n-        Two values `result, err` where `err` is shaped like an RPC error: >\n+    Return (multiple): ~\n+        (`Result?`) `result` on successful request, or `nil` otherwise.\n+                         See |lsp-handler-return|\n+        (`lsp.ResponseError?`) `error` on unsuccessful request, or `nil` otherwise.\n+<\n+                                                          *lsp-handler-return*\n+Return values and Error handling of |lsp-handler|:\n+\n+    For |lsp-response| and |lsp-notification| handlers, there are no return values\n+    (equivalent as returning `nil`, `nil`).",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1460642988",
            "id": 1460642988,
            "in_reply_to_id": 1460596243,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XD6Ss",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 275,
            "original_position": 171,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1834725998,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460642988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T20:06:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460642988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1538019242"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538019242"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think it's a good idea to use `@type` on functions with `@param`, etc",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-03-25T17:59:26Z",
            "diff_hunk": "@@ -809,9 +808,11 @@ function M.code_action(options)\n   ---@type table<integer, vim.lsp.CodeActionResultEntry>\n   local results = {}\n \n+  --- Handler for textDocument/codeAction\n   ---@param err? lsp.ResponseError\n   ---@param result? (lsp.Command|lsp.CodeAction)[]\n   ---@param ctx lsp.HandlerContext\n+  ---@type vim.lsp.ResponseHandler",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1538019242",
            "id": 1538019242,
            "line": 865,
            "node_id": "PRRC_kwDOAPphoM5brE-q",
            "original_commit_id": "f677210876f77bb6b08cd468b60be38dcafdd2f2",
            "original_line": 865,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 36,
            "pull_request_review_id": 1958441368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538019242/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-25T17:59:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538019242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1538021196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538021196"
                }
            },
            "author_association": "MEMBER",
            "body": "here too",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-03-25T18:00:32Z",
            "diff_hunk": "@@ -258,9 +258,10 @@ end\n \n --- |lsp-handler| for the method `textDocument/codeLens`\n ---\n----@param err lsp.ResponseError?\n----@param result lsp.CodeLens[]\n----@param ctx lsp.HandlerContext\n+--- @param err lsp.ResponseError?\n+--- @param result lsp.CodeLens[]?\n+--- @param ctx lsp.HandlerContext\n+--- @type vim.lsp.ResponseHandler",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1538021196",
            "id": 1538021196,
            "line": 264,
            "node_id": "PRRC_kwDOAPphoM5brFdM",
            "original_commit_id": "f677210876f77bb6b08cd468b60be38dcafdd2f2",
            "original_line": 264,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/codelens.lua",
            "position": 10,
            "pull_request_review_id": 1958443520,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538021196/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-25T18:00:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538021196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1538046330"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538046330"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree. But `@param`'s are needed because they provide the most specific and useful type information, and I wanted to make it clear whether each handler function is either request, response, or notification handler. Any better idea? Probably somewhere in the docstring without annotations? Or we could simply drop that, which would be not necessarily needed.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-03-25T18:16:56Z",
            "diff_hunk": "@@ -809,9 +808,11 @@ function M.code_action(options)\n   ---@type table<integer, vim.lsp.CodeActionResultEntry>\n   local results = {}\n \n+  --- Handler for textDocument/codeAction\n   ---@param err? lsp.ResponseError\n   ---@param result? (lsp.Command|lsp.CodeAction)[]\n   ---@param ctx lsp.HandlerContext\n+  ---@type vim.lsp.ResponseHandler",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1538046330",
            "id": 1538046330,
            "in_reply_to_id": 1538019242,
            "line": 865,
            "node_id": "PRRC_kwDOAPphoM5brLl6",
            "original_commit_id": "f677210876f77bb6b08cd468b60be38dcafdd2f2",
            "original_line": 865,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 36,
            "pull_request_review_id": 1958472427,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538046330/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-25T18:16:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538046330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1538263069"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538263069"
                }
            },
            "author_association": "MEMBER",
            "body": "If you have to, I would use a different container for requests, responses and notifications (`resp`, `req` and `notif`?) and merge them as M at the end of the file.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-03-25T21:30:46Z",
            "diff_hunk": "@@ -809,9 +808,11 @@ function M.code_action(options)\n   ---@type table<integer, vim.lsp.CodeActionResultEntry>\n   local results = {}\n \n+  --- Handler for textDocument/codeAction\n   ---@param err? lsp.ResponseError\n   ---@param result? (lsp.Command|lsp.CodeAction)[]\n   ---@param ctx lsp.HandlerContext\n+  ---@type vim.lsp.ResponseHandler",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1538263069",
            "id": 1538263069,
            "in_reply_to_id": 1538019242,
            "line": 865,
            "node_id": "PRRC_kwDOAPphoM5bsAgd",
            "original_commit_id": "f677210876f77bb6b08cd468b60be38dcafdd2f2",
            "original_line": 865,
            "original_position": 27,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 36,
            "pull_request_review_id": 1958819502,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538263069/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-25T21:31:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1538263069",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1883599463"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1883599463"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "In  RPC libraries I'm familiar with, a `ClientConn`  (e.g.: https://github.com/grpc/grpc-go/blob/master/clientconn.go)  is an object that one can use to send messages to a server. The object represents a client, sending to a server.\r\n\r\nIn this light, I haven't really been confused by the Neovim naming.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-12-13T09:08:05Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1883599463",
            "id": 1883599463,
            "in_reply_to_id": 1460595272,
            "line": 206,
            "node_id": "PRRC_kwDOAPphoM5wRXJn",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 206,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 103,
            "pull_request_review_id": 2501786225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1883599463/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-13T09:08:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1883599463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27101#discussion_r1883923935"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27101"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1883923935"
                }
            },
            "author_association": "MEMBER",
            "body": "See also https://github.com/neovim/neovim/pull/31031#discussion_r1874415412 ; \"configs\" in particular overlap both client and server concepts.",
            "commit_id": "49f40f9e904ba1478aa807c12052acc070d29277",
            "created_at": "2024-12-13T13:17:19Z",
            "diff_hunk": "@@ -169,73 +170,130 @@ Requests and notifications defined by the LSP specification are referred to as\n They are also listed below. Note that handlers depend on server support: they\n won't run if your server doesn't support them.\n \n-- callHierarchy/incomingCalls\n-- callHierarchy/outgoingCalls\n-- textDocument/codeAction\n-- textDocument/completion\n-- textDocument/declaration*\n-- textDocument/definition\n-- textDocument/diagnostic\n-- textDocument/documentHighlight\n-- textDocument/documentSymbol\n-- textDocument/formatting\n-- textDocument/hover\n-- textDocument/implementation*\n-- textDocument/inlayHint\n-- textDocument/publishDiagnostics\n-- textDocument/rangeFormatting\n-- textDocument/references\n-- textDocument/rename\n-- textDocument/semanticTokens/full\n-- textDocument/semanticTokens/full/delta\n-- textDocument/signatureHelp\n-- textDocument/typeDefinition*\n-- window/logMessage\n-- window/showMessage\n-- window/showDocument\n-- window/showMessageRequest\n-- workspace/applyEdit\n-- workspace/configuration\n-- workspace/executeCommand\n-- workspace/inlayHint/refresh\n-- workspace/symbol\n-- workspace/workspaceFolders\n-\n-                                                                 *lsp-handler*\n-LSP handlers are functions that handle |lsp-response|s to requests made by Nvim\n-to the server. (Notifications, as opposed to requests, are fire-and-forget:\n-there is no response, so they can't be handled. |lsp-notification|)\n+  handler                                    type ~\n+  ------------------------------------------ -------------- ~\n+  $/progress                                 notification\n+  workspace/executeCommand                   response\n+  window/workDoneProgress/create             request\n+  window/showMessageRequest                  request\n+  client/registerCapability                  request\n+  client/unregisterCapability                request\n+  workspace/applyEdit                        request\n+  workspace/configuration                    request\n+  workspace/workspaceFolders                 request\n+  textDocument/publishDiagnostics            notification\n+  textDocument/diagnostic                    response\n+  textDocument/codeLens                      response\n+  textDocument/inlayHint                     response\n+  workspace/inlayHint/refresh                request\n+  textDocument/references                    response\n+  textDocument/documentSymbol                response\n+  workspace/symbol                           response\n+  textDocument/rename                        response\n+  textDocument/formatting                    response\n+  textDocument/rangeFormatting               response\n+  textDocument/completion                    response\n+  textDocument/hover                         response\n+  textDocument/declaration*                  response\n+  textDocument/definition                    response\n+  textDocument/implementation*               response\n+  textDocument/typeDefinition*               response\n+  textDocument/signatureHelp                 response\n+  textDocument/documentHighlight             response\n+  callHierarchy/incomingCalls                response\n+  callHierarchy/outgoingCalls                response\n+  window/logMessage                          notification\n+  window/showMessage                         notification\n+  window/showDocument                        request\n+  textDocument/semanticTokens/full           response\n+  textDocument/semanticTokens/full/delta     response\n+  workspace/semanticTokens/refresh           request\n+  textDocument/codeAction\n+\n+Legend (see |lsp-handler|): ~\n+  \"response\"     : LSP server sends a reponse to request made by client (Nvim)\n+  \"request\"      : LSP server sends a request to client (Nvim)\n+  \"notification\" : LSP server sends a notification to client (Nvim)\n \n-Each response handler has this signature: >\n \n-    function(err, result, ctx, config)\n+                                                                 *lsp-handler*\n+LSP handlers are functions executed on the Nvim's side (LSP client):",
            "html_url": "https://github.com/neovim/neovim/pull/27101#discussion_r1883923935",
            "id": 1883923935,
            "in_reply_to_id": 1460595272,
            "line": 206,
            "node_id": "PRRC_kwDOAPphoM5wSmXf",
            "original_commit_id": "b3273f6f8b145a84b3de2189d5c97f9a5391af0b",
            "original_line": 206,
            "original_position": 101,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": 103,
            "pull_request_review_id": 2502278146,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1883923935/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-12-13T13:17:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1883923935",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Rebased to the current master, fixing conflicts with other concurrent LSP-related works (e.g. #27376 #27420 #27427 #27443 #27753).  There are a few minor TODOs remaining for this PR to be ready to merge, will be addressed soon.",
            "created_at": "2024-03-25T05:16:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/27101#issuecomment-2017234669",
            "id": 2017234669,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27101",
            "node_id": "IC_kwDOAPphoM54PI7t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2017234669/reactions"
            },
            "updated_at": "2024-03-25T05:16:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2017234669",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is it feasible to rebase this?",
            "created_at": "2024-12-13T13:17:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/27101#issuecomment-2541445766",
            "id": 2541445766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27101",
            "node_id": "IC_kwDOAPphoM6Xe2KG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541445766/reactions"
            },
            "updated_at": "2024-12-13T13:17:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2541445766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry for my recent inactivities, I will revisit this.",
            "created_at": "2024-12-20T23:17:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/27101#issuecomment-2557870798",
            "id": 2557870798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27101",
            "node_id": "IC_kwDOAPphoM6YdgLO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557870798/reactions"
            },
            "updated_at": "2024-12-20T23:17:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2557870798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27101/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27101/commits",
    "created_at": "2024-01-20T11:07:28Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27101.diff",
    "draft": true,
    "head": {
        "label": "wookayin:lsp-handler-types",
        "ref": "lsp-handler-types",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/wookayin/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/wookayin/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/wookayin/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/wookayin/neovim/branches{/branch}",
            "clone_url": "https://github.com/wookayin/neovim.git",
            "collaborators_url": "https://api.github.com/repos/wookayin/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/wookayin/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/wookayin/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/wookayin/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/wookayin/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/wookayin/neovim/contributors",
            "created_at": "2022-10-30T19:40:29Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/wookayin/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/wookayin/neovim/downloads",
            "events_url": "https://api.github.com/repos/wookayin/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/wookayin/neovim/forks",
            "full_name": "wookayin/neovim",
            "git_commits_url": "https://api.github.com/repos/wookayin/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/wookayin/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/wookayin/neovim/git/tags{/sha}",
            "git_url": "git://github.com/wookayin/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/wookayin/neovim/hooks",
            "html_url": "https://github.com/wookayin/neovim",
            "id": 559659867,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/wookayin/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/wookayin/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/wookayin/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/wookayin/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/wookayin/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/wookayin/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/wookayin/neovim/merges",
            "milestones_url": "https://api.github.com/repos/wookayin/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOIVu7Ww",
            "notifications_url": "https://api.github.com/repos/wookayin/neovim/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/wookayin/neovim/pulls{/number}",
            "pushed_at": "2024-12-03T05:29:29Z",
            "releases_url": "https://api.github.com/repos/wookayin/neovim/releases{/id}",
            "size": 267022,
            "ssh_url": "git@github.com:wookayin/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/wookayin/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/wookayin/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/wookayin/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/wookayin/neovim/subscription",
            "svn_url": "https://github.com/wookayin/neovim",
            "tags_url": "https://api.github.com/repos/wookayin/neovim/tags",
            "teams_url": "https://api.github.com/repos/wookayin/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/wookayin/neovim/git/trees{/sha}",
            "updated_at": "2024-05-23T03:26:44Z",
            "url": "https://api.github.com/repos/wookayin/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "49f40f9e904ba1478aa807c12052acc070d29277",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
            "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
            "followers_url": "https://api.github.com/users/wookayin/followers",
            "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
            "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/wookayin",
            "id": 1009873,
            "login": "wookayin",
            "node_id": "MDQ6VXNlcjEwMDk4NzM=",
            "organizations_url": "https://api.github.com/users/wookayin/orgs",
            "received_events_url": "https://api.github.com/users/wookayin/received_events",
            "repos_url": "https://api.github.com/users/wookayin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/wookayin",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27101",
    "id": 1688185332,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27101",
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": {
        "closed_at": null,
        "closed_issues": 0,
        "created_at": "2024-05-16T14:11:54Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/43",
        "id": 11063573,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/43/labels",
        "node_id": "MI_kwDOAPphoM4AqNEV",
        "number": 43,
        "open_issues": 32,
        "state": "open",
        "title": "0.12",
        "updated_at": "2025-02-02T00:25:39Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/43"
    },
    "node_id": "PR_kwDOAPphoM5kn6n0",
    "number": 27101,
    "patch_url": "https://github.com/neovim/neovim/pull/27101.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
            "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
            "followers_url": "https://api.github.com/users/mfussenegger/followers",
            "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
            "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mfussenegger",
            "id": 38700,
            "login": "mfussenegger",
            "node_id": "MDQ6VXNlcjM4NzAw",
            "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
            "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
            "repos_url": "https://api.github.com/users/mfussenegger/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mfussenegger",
            "user_view_type": "public"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27101/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/49f40f9e904ba1478aa807c12052acc070d29277",
    "title": "refactor(lsp): add typing and docs for LSP handlers",
    "updated_at": "2025-02-02T00:10:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27101",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
        "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
        "followers_url": "https://api.github.com/users/wookayin/followers",
        "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
        "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wookayin",
        "id": 1009873,
        "login": "wookayin",
        "node_id": "MDQ6VXNlcjEwMDk4NzM=",
        "organizations_url": "https://api.github.com/users/wookayin/orgs",
        "received_events_url": "https://api.github.com/users/wookayin/received_events",
        "repos_url": "https://api.github.com/users/wookayin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wookayin",
        "user_view_type": "public"
    }
}