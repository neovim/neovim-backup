{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29660/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29660/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/29660"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29660"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29660/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/634a4dc6e66d111d67b31d1a9b02945f75d51f4f"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5909,
            "forks_count": 5909,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1872,
            "open_issues_count": 1872,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2025-03-03T23:37:14Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 310907,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 86843,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2025-03-04T02:27:02Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 86843,
            "watchers_count": 86843,
            "web_commit_signoff_required": false
        },
        "sha": "c69ea53c9d73a29f504043cc38d4e9fac076f93b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "This PR adds a single commit on top of #29632.\r\n\r\n------\r\n\r\nProblem: calling `vim.filetype.match()` has performance bottleneck in\r\n  that it has to match a lot of Lua patterns against several versions of\r\n  input file name. This might be the problem if users need to call it\r\n  synchronously a lot of times.\r\n\r\nSolution: add \"parent pattern pre-matching\" which can be used to quickly\r\n  reject several potential pattern matches at (usually rare) cost of\r\n  adding time for one extra Lua pattern match.\r\n\r\n  \"Parent pattern\" is a manually added/tracked grouping of filetype\r\n  patterns which should have two properties:\r\n    - Match at least the same set of strings as its filetype patterns.\r\n      But not too much more.\r\n    - Be fast to match.\r\n\r\n  For them to be effective, group should consist from at least three\r\n  filetype patterns.\r\n\r\n  Example: for a filetpye pattern \".*/etc/a2ps/.*%.cfg\", both \"/etc/\"\r\n  and \"%.cfg\" are good parent patterns (prefer the one which can group\r\n  more filetype patterns).\r\n\r\n  After this commit, `vim.filetype.match()` on most inputs runs ~3.4\r\n  times faster (while some inputs may see less impact if they match\r\n  many parent patterns).\r\n\r\n------\r\n\r\nNotes:\r\n- There is more description about the \"fast pattern\" approach in the new section of 'dev_vimpatch.txt'\r\n- Technically, this can already be used in filetype patterns added via `vim.filetype.add()`, but it is left intentionally undocumented. If it will be decided as a good idea to document, then I'd happily do it (but I'd imagine it is not).\r\n- This is the (almost) the best I can do to optimize performance of `vim.filetype.match()` without breaking compatibility. The only other reasonable route I can think of is to add `skip_slow` flag to `vim.filetype.match()` options which would skip all pattern matching (and possibly content matching). This will not detect filetype for *some* files, but get somewhat faster execution in return (actual speedup is less significant after this PR).\r\n\r\n------\r\n\r\nProfiling results on some different `filename` inputs (computed in debug builds by measuring 10000 calls of `vim.filetype.match({ filename = 'xxx', buf = buf_id })` with empty buffer and taking median value; executed in '/home/user/repos/neovim' directory; \"before fastpat\" is recomputed today):\r\n\r\nFilename | Before fastpat | After fastpat |\r\n--------------|-----------|--------------|\r\ninit.lua | 0.107ms  | 0.030ms |\r\nno-match | 0.128ms | 0.037ms |\r\n/home/user/.config/hello/world/no-match | 0.201ms | 0.059ms |\r\n\r\n------\r\n\r\nInteresting details:\r\n\r\n<details><summary>Motivation on why optimizing pattern matching is the bottleneck</summary>\r\n\r\nHere is what `vim.filetype.match()` currently tries (in order):\r\n\r\n- Exact match for full name. Fast with table lookup (420 entries).\r\n- Exact match for basename/tail. Fast table lookup (420 entries).\r\n- Pattern match for 355 patterns with positive priority. *Very slow*, as each match is either `string.match()` for _both_ filename as typed and full path (majority of cases) or a single match for basename.\r\n- Extension match for computed extension. Fast table lookup (even with 1092+ entries).\r\n- Similar pattern match for 94 patterns with negative priority. Same method as for positive priority.\r\n- Match based on content.\r\n\r\nAs matching by extension is (arguably) the most common real world case, reducing execution time of mandatory matching of positive priority patterns is the best way to get overall performance improvement.\r\n\r\n</details>\r\n\r\n<details><summary>Summary of actually used fast patterns, separately for regular patterns with positive/negative priority and total</summary>\r\n\r\nFast pattern | Positive priority | Negative priority | All patterns |\r\n-------------|-------------------|-------------------|--------------|\r\n'/etc/'      |         79        |         24        |      103     |\r\n''           |         62        |         29        |      91      |\r\n'/log/'      |         77        |         0         |      77      |\r\n'/conf'      |         27        |         1         |      28      |\r\n'%.conf'     |         14        |         10        |      24      |\r\n'/systemd/'  |         17        |         0         |      17      |\r\n'utt'        |         7         |         10        |      17      |\r\n'file'       |         6         |         4         |      10      |\r\n'/%.'        |         8         |         1         |      9       |\r\n'^%.'        |         7         |         2         |      9       |\r\n'/usr/'      |         4         |         5         |      9       |\r\n'git/'       |         6         |         1         |      7       |\r\n'%.cfg'      |         6         |         0         |      6       |\r\n'bash'       |         5         |         0         |      5       |\r\n's6'         |         5         |         0         |      5       |\r\n'/debian/'   |         4         |         0         |      4       |\r\n'/var/'      |         4         |         0         |      4       |\r\n'cmus/'      |         4         |         0         |      4       |\r\n'fvwm'       |         0         |         4         |      4       |\r\n'nginx'      |         4         |         0         |      4       |\r\n'calendar/'  |         0         |         3         |      3       |\r\n'proj%.user$'|         3         |         0         |      3       |\r\n'sst%.meta'  |         3         |         0         |      3       |\r\n'require'    |         3         |         0         |      3       |\r\n\r\n</details>",
    "closed_at": "2024-07-18T15:26:27Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675507543"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675507543"
                }
            },
            "author_association": "MEMBER",
            "body": "This comment block can be significantly cut down.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T08:30:12Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675507543",
            "id": 1675507543,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3jdX",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1766,
            "original_position": 69,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174174666,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675507543/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T08:44:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675507543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675510985"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675510985"
                }
            },
            "author_association": "MEMBER",
            "body": "The fact that the outer and inner pattern are different formats (anchored vs non-anchored) is confusing. Either:\r\n\r\n- Make all the outer patterns anchored: `/debian/` -> `.*/debian/.*`\r\n- Make all the inner patterns non-anchored: `.*/debian/changelog` -> `/debian/changelog$`\r\n   - This would also require a change to `vim.filetype.add` to add the `^$`.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T08:33:05Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.\n+--\n+--- @type table<string,vim.filetype.mapping>\n local pattern = {\n   -- BEGIN PATTERN\n-  ['.*/etc/a2ps/.*%.cfg'] = 'a2ps',\n-  ['.*/etc/a2ps%.cfg'] = 'a2ps',\n-  ['.*/usr/share/alsa/alsa%.conf'] = 'alsaconf',\n-  ['.*/etc/asound%.conf'] = 'alsaconf',\n-  ['.*/etc/apache2/sites%-.*/.*%.com'] = 'apache',\n-  ['.*/etc/httpd/.*%.conf'] = 'apache',\n-  ['.*/etc/apache2/.*%.conf.*'] = detect_apache,\n-  ['.*/etc/apache2/conf%..*/.*'] = detect_apache,\n-  ['.*/etc/apache2/mods%-.*/.*'] = detect_apache,\n-  ['.*/etc/apache2/sites%-.*/.*'] = detect_apache,\n-  ['access%.conf.*'] = detect_apache,\n-  ['apache%.conf.*'] = detect_apache,\n-  ['apache2%.conf.*'] = detect_apache,\n-  ['httpd%.conf.*'] = detect_apache,\n-  ['srm%.conf.*'] = detect_apache,\n-  ['.*/etc/httpd/conf%..*/.*'] = detect_apache,\n-  ['.*/etc/httpd/conf%.d/.*%.conf.*'] = detect_apache,\n-  ['.*/etc/httpd/mods%-.*/.*'] = detect_apache,\n-  ['.*/etc/httpd/sites%-.*/.*'] = detect_apache,\n-  ['.*/etc/proftpd/.*%.conf.*'] = starsetf('apachestyle'),\n-  ['.*/etc/proftpd/conf%..*/.*'] = starsetf('apachestyle'),\n-  ['proftpd%.conf.*'] = starsetf('apachestyle'),\n-  ['.*asterisk/.*%.conf.*'] = starsetf('asterisk'),\n-  ['.*asterisk.*/.*voicemail%.conf.*'] = starsetf('asteriskvm'),\n-  ['.*/%.aptitude/config'] = 'aptconf',\n-  ['[mM]akefile%.am'] = 'automake',\n-  ['.*/bind/db%..*'] = starsetf('bindzone'),\n-  ['.*/named/db%..*'] = starsetf('bindzone'),\n-  ['.*/build/conf/.*%.conf'] = 'bitbake',\n-  ['.*/meta/conf/.*%.conf'] = 'bitbake',\n-  ['.*/meta%-.*/conf/.*%.conf'] = 'bitbake',\n-  ['.*%.blade%.php'] = 'blade',\n-  ['bzr_log%..*'] = 'bzr',\n-  ['.*enlightenment/.*%.cfg'] = 'c',\n-  ['.*/%.cabal/config'] = 'cabalconfig',\n-  ['.*/cabal/config'] = 'cabalconfig',\n-  ['cabal%.project%..*'] = starsetf('cabalproject'),\n-  ['.*/%.calendar/.*'] = starsetf('calendar'),\n-  ['.*/share/calendar/.*/calendar%..*'] = starsetf('calendar'),\n-  ['.*/share/calendar/calendar%..*'] = starsetf('calendar'),\n-  ['sgml%.catalog.*'] = starsetf('catalog'),\n-  ['.*/etc/defaults/cdrdao'] = 'cdrdaoconf',\n-  ['.*/etc/cdrdao%.conf'] = 'cdrdaoconf',\n-  ['.*/etc/default/cdrdao'] = 'cdrdaoconf',\n-  ['.*hgrc'] = 'cfg',\n-  ['.*%.[Cc][Ff][Gg]'] = {\n-    detect.cfg,\n-    -- Decrease priority to avoid conflicts with more specific patterns\n-    -- such as '.*/etc/a2ps/.*%.cfg', '.*enlightenment/.*%.cfg', etc.\n-    { priority = -1 },\n+  ['/debian/'] = {\n+    ['.*/debian/changelog'] = 'debchangelog',",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675510985",
            "id": 1675510985,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3kTJ",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1772,
            "original_position": 125,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174174666,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675510985/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T08:55:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675510985",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675514653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675514653"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we move the pattern parsing to *add* time as opposed to *match* time?\r\n\r\nIf this has to be deferred until the first autocmd is triggered, then that can be done.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T08:36:15Z",
            "diff_hunk": "@@ -2407,39 +2505,54 @@ local function dispatch(ft, path, bufnr, ...)\n   return ft0, on_detect\n end\n \n---- Lookup table/cache for patterns that contain an environment variable pattern, e.g. ${SOME_VAR}.\n---- @type table<string,boolean>\n-local expand_env_lookup = {}\n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { fullpat: string, has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+--- @param pat string\n+--- @return vim.filetype.pattern_cache\n+local function parse_pattern(pat)\n+  pattern_lookup[pat] = {\n+    fullpat = '^' .. pat .. '$',\n+    has_env = pat:find('%$%b{}') ~= nil,\n+    has_slash = pat:find('/') ~= nil,\n+  }\n+  return pattern_lookup[pat]\n+end\n+\n+--- @param pat string\n+--- @return boolean\n+--- @return string\n+local function expand_envvar_pattern(pat)\n+  local some_env_missing = false\n+  local expanded = pat:gsub('%${(%S-)}', function(env)\n+    local val = vim.env[env] --- @type string?\n+    some_env_missing = some_env_missing or val == nil\n+    return vim.pesc(val or '')\n+  end)\n+  return some_env_missing, expanded\n+end\n \n --- @param name string\n --- @param path string\n --- @param tail string\n --- @param pat string\n---- @return string|false?\n+--- @return string|boolean?\n local function match_pattern(name, path, tail, pat)\n-  if expand_env_lookup[pat] == nil then\n-    expand_env_lookup[pat] = pat:find('%${') ~= nil\n-  end\n-  if expand_env_lookup[pat] then\n-    local return_early --- @type true?\n-    --- @type string\n-    pat = pat:gsub('%${(%S-)}', function(env)\n-      -- If an environment variable is present in the pattern but not set, there is no match\n-      if not vim.env[env] then\n-        return_early = true\n-        return nil\n-      end\n-      return vim.pesc(vim.env[env])\n-    end)\n-    if return_early then\n+  local pat_cache = pattern_lookup[pat] or parse_pattern(pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675514653",
            "id": 1675514653,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3lMd",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2543,
            "original_position": 1215,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174174666,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675514653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T08:44:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675514653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675517870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675517870"
                }
            },
            "author_association": "MEMBER",
            "body": "Can this be combined with `match_pattern`?\r\n\r\nUnless you can show otherwise, I don't think the additional code is worth the perf gain. And in general I'm not sure we need to introduce a new \"fastpat\" concept.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T08:39:01Z",
            "diff_hunk": "@@ -2449,6 +2562,56 @@ local function match_pattern(name, path, tail, pat)\n   return (tail:match(fullpat))\n end\n \n+--- Cache for whether current candidates match fast patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local fast_matches = {}\n+\n+--- @param name string\n+--- @param path string\n+--- @param tail string\n+--- @param pat string\n+--- @return boolean\n+local function match_fastpat(name, path, tail, pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675517870",
            "id": 1675517870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3l-u",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2575,
            "original_position": 1249,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174174666,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675517870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T08:44:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675517870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675555457"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675555457"
                }
            },
            "author_association": "MEMBER",
            "body": "Which parts do you think are not necessary?\r\n\r\nI tried to make it more compact and this is the result, as any information seems valuable to me. Can not trim down without more guidance.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T09:05:56Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675555457",
            "id": 1675555457,
            "in_reply_to_id": 1675507543,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3vKB",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1766,
            "original_position": 69,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174249428,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675555457/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T09:05:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675555457",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675559331"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675559331"
                }
            },
            "author_association": "MEMBER",
            "body": "I prefer the second one as earlier preliminary testing showed them to be slightly faster. However, @clason expressed concern that it would make porting future filetype changes less straightforward.\r\n\r\nIf anything, I'd like it to be a separate, more visible in git logs PR.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T09:09:22Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.\n+--\n+--- @type table<string,vim.filetype.mapping>\n local pattern = {\n   -- BEGIN PATTERN\n-  ['.*/etc/a2ps/.*%.cfg'] = 'a2ps',\n-  ['.*/etc/a2ps%.cfg'] = 'a2ps',\n-  ['.*/usr/share/alsa/alsa%.conf'] = 'alsaconf',\n-  ['.*/etc/asound%.conf'] = 'alsaconf',\n-  ['.*/etc/apache2/sites%-.*/.*%.com'] = 'apache',\n-  ['.*/etc/httpd/.*%.conf'] = 'apache',\n-  ['.*/etc/apache2/.*%.conf.*'] = detect_apache,\n-  ['.*/etc/apache2/conf%..*/.*'] = detect_apache,\n-  ['.*/etc/apache2/mods%-.*/.*'] = detect_apache,\n-  ['.*/etc/apache2/sites%-.*/.*'] = detect_apache,\n-  ['access%.conf.*'] = detect_apache,\n-  ['apache%.conf.*'] = detect_apache,\n-  ['apache2%.conf.*'] = detect_apache,\n-  ['httpd%.conf.*'] = detect_apache,\n-  ['srm%.conf.*'] = detect_apache,\n-  ['.*/etc/httpd/conf%..*/.*'] = detect_apache,\n-  ['.*/etc/httpd/conf%.d/.*%.conf.*'] = detect_apache,\n-  ['.*/etc/httpd/mods%-.*/.*'] = detect_apache,\n-  ['.*/etc/httpd/sites%-.*/.*'] = detect_apache,\n-  ['.*/etc/proftpd/.*%.conf.*'] = starsetf('apachestyle'),\n-  ['.*/etc/proftpd/conf%..*/.*'] = starsetf('apachestyle'),\n-  ['proftpd%.conf.*'] = starsetf('apachestyle'),\n-  ['.*asterisk/.*%.conf.*'] = starsetf('asterisk'),\n-  ['.*asterisk.*/.*voicemail%.conf.*'] = starsetf('asteriskvm'),\n-  ['.*/%.aptitude/config'] = 'aptconf',\n-  ['[mM]akefile%.am'] = 'automake',\n-  ['.*/bind/db%..*'] = starsetf('bindzone'),\n-  ['.*/named/db%..*'] = starsetf('bindzone'),\n-  ['.*/build/conf/.*%.conf'] = 'bitbake',\n-  ['.*/meta/conf/.*%.conf'] = 'bitbake',\n-  ['.*/meta%-.*/conf/.*%.conf'] = 'bitbake',\n-  ['.*%.blade%.php'] = 'blade',\n-  ['bzr_log%..*'] = 'bzr',\n-  ['.*enlightenment/.*%.cfg'] = 'c',\n-  ['.*/%.cabal/config'] = 'cabalconfig',\n-  ['.*/cabal/config'] = 'cabalconfig',\n-  ['cabal%.project%..*'] = starsetf('cabalproject'),\n-  ['.*/%.calendar/.*'] = starsetf('calendar'),\n-  ['.*/share/calendar/.*/calendar%..*'] = starsetf('calendar'),\n-  ['.*/share/calendar/calendar%..*'] = starsetf('calendar'),\n-  ['sgml%.catalog.*'] = starsetf('catalog'),\n-  ['.*/etc/defaults/cdrdao'] = 'cdrdaoconf',\n-  ['.*/etc/cdrdao%.conf'] = 'cdrdaoconf',\n-  ['.*/etc/default/cdrdao'] = 'cdrdaoconf',\n-  ['.*hgrc'] = 'cfg',\n-  ['.*%.[Cc][Ff][Gg]'] = {\n-    detect.cfg,\n-    -- Decrease priority to avoid conflicts with more specific patterns\n-    -- such as '.*/etc/a2ps/.*%.cfg', '.*enlightenment/.*%.cfg', etc.\n-    { priority = -1 },\n+  ['/debian/'] = {\n+    ['.*/debian/changelog'] = 'debchangelog',",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675559331",
            "id": 1675559331,
            "in_reply_to_id": 1675510985,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3wGj",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1772,
            "original_position": 125,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174255819,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675559331/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T09:09:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675559331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675562695"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675562695"
                }
            },
            "author_association": "MEMBER",
            "body": "It can be moved to `sort_by_priority()`, as it does some inferring inside of it. However, I am not sure what the benefit of this would be. Could you elaborate, please?",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T09:12:05Z",
            "diff_hunk": "@@ -2407,39 +2505,54 @@ local function dispatch(ft, path, bufnr, ...)\n   return ft0, on_detect\n end\n \n---- Lookup table/cache for patterns that contain an environment variable pattern, e.g. ${SOME_VAR}.\n---- @type table<string,boolean>\n-local expand_env_lookup = {}\n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { fullpat: string, has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+--- @param pat string\n+--- @return vim.filetype.pattern_cache\n+local function parse_pattern(pat)\n+  pattern_lookup[pat] = {\n+    fullpat = '^' .. pat .. '$',\n+    has_env = pat:find('%$%b{}') ~= nil,\n+    has_slash = pat:find('/') ~= nil,\n+  }\n+  return pattern_lookup[pat]\n+end\n+\n+--- @param pat string\n+--- @return boolean\n+--- @return string\n+local function expand_envvar_pattern(pat)\n+  local some_env_missing = false\n+  local expanded = pat:gsub('%${(%S-)}', function(env)\n+    local val = vim.env[env] --- @type string?\n+    some_env_missing = some_env_missing or val == nil\n+    return vim.pesc(val or '')\n+  end)\n+  return some_env_missing, expanded\n+end\n \n --- @param name string\n --- @param path string\n --- @param tail string\n --- @param pat string\n---- @return string|false?\n+--- @return string|boolean?\n local function match_pattern(name, path, tail, pat)\n-  if expand_env_lookup[pat] == nil then\n-    expand_env_lookup[pat] = pat:find('%${') ~= nil\n-  end\n-  if expand_env_lookup[pat] then\n-    local return_early --- @type true?\n-    --- @type string\n-    pat = pat:gsub('%${(%S-)}', function(env)\n-      -- If an environment variable is present in the pattern but not set, there is no match\n-      if not vim.env[env] then\n-        return_early = true\n-        return nil\n-      end\n-      return vim.pesc(vim.env[env])\n-    end)\n-    if return_early then\n+  local pat_cache = pattern_lookup[pat] or parse_pattern(pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675562695",
            "id": 1675562695,
            "in_reply_to_id": 1675514653,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3w7H",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2543,
            "original_position": 1215,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174261185,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675562695/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T09:12:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675562695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675573740"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675573740"
                }
            },
            "author_association": "MEMBER",
            "body": "It can be combined, but behind an extra flag argument of whether it is regular or fast pattern. The reason for this is that regular filetype matching [depends on whether pattern contains slash or not](https://github.com/neovim/neovim/blob/028dd3c5c4d1828eec64c099d3372ffb90572dc0/runtime/lua/vim/filetype.lua#L2444). If reused direcrly for fast patterns, it would require both types of patterns to share this property, which limits the choice of good fast patterns and needs to be documented (as fragile detail). For example, using 'utt' fast pattern for '.*/%.mutt/muttrc.*' filetype pattern.\r\n\r\nHence there is a separate pattern which tries to match all three possible candidates, independently of slash presence.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T09:21:27Z",
            "diff_hunk": "@@ -2449,6 +2562,56 @@ local function match_pattern(name, path, tail, pat)\n   return (tail:match(fullpat))\n end\n \n+--- Cache for whether current candidates match fast patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local fast_matches = {}\n+\n+--- @param name string\n+--- @param path string\n+--- @param tail string\n+--- @param pat string\n+--- @return boolean\n+local function match_fastpat(name, path, tail, pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675573740",
            "id": 1675573740,
            "in_reply_to_id": 1675517870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j3zns",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2575,
            "original_position": 1249,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174278612,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675573740/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T09:21:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675573740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675591009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675591009"
                }
            },
            "author_association": "MEMBER",
            "body": "> I'm not sure we need to introduce a new \"fastpat\" concept.\r\n\r\nApart from mentioned more general matching logic, the main reason for \"fast pattern\" as a concept was that their matching result is cached (hence the name). It is harmful to cache regular filetype matching as it is used at most once.\r\n\r\nThe general \"parse and generate tree\" which works like nested `if ... then ... else` *and* also respects priority sorting can indeed remove the need for caching. However it feels like having small extra reward for a single filetype matching stuff compared to the complexity it entails.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T09:35:33Z",
            "diff_hunk": "@@ -2449,6 +2562,56 @@ local function match_pattern(name, path, tail, pat)\n   return (tail:match(fullpat))\n end\n \n+--- Cache for whether current candidates match fast patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local fast_matches = {}\n+\n+--- @param name string\n+--- @param path string\n+--- @param tail string\n+--- @param pat string\n+--- @return boolean\n+local function match_fastpat(name, path, tail, pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675591009",
            "id": 1675591009,
            "in_reply_to_id": 1675517870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j331h",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2575,
            "original_position": 1249,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174305559,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675591009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T09:35:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675591009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675652220"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675652220"
                }
            },
            "author_association": "MEMBER",
            "body": "*match* time is hotter than *add* time. I think it's best we do as much pre-processing at *add* time, and keep matching as simple as possible.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T10:26:12Z",
            "diff_hunk": "@@ -2407,39 +2505,54 @@ local function dispatch(ft, path, bufnr, ...)\n   return ft0, on_detect\n end\n \n---- Lookup table/cache for patterns that contain an environment variable pattern, e.g. ${SOME_VAR}.\n---- @type table<string,boolean>\n-local expand_env_lookup = {}\n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { fullpat: string, has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+--- @param pat string\n+--- @return vim.filetype.pattern_cache\n+local function parse_pattern(pat)\n+  pattern_lookup[pat] = {\n+    fullpat = '^' .. pat .. '$',\n+    has_env = pat:find('%$%b{}') ~= nil,\n+    has_slash = pat:find('/') ~= nil,\n+  }\n+  return pattern_lookup[pat]\n+end\n+\n+--- @param pat string\n+--- @return boolean\n+--- @return string\n+local function expand_envvar_pattern(pat)\n+  local some_env_missing = false\n+  local expanded = pat:gsub('%${(%S-)}', function(env)\n+    local val = vim.env[env] --- @type string?\n+    some_env_missing = some_env_missing or val == nil\n+    return vim.pesc(val or '')\n+  end)\n+  return some_env_missing, expanded\n+end\n \n --- @param name string\n --- @param path string\n --- @param tail string\n --- @param pat string\n---- @return string|false?\n+--- @return string|boolean?\n local function match_pattern(name, path, tail, pat)\n-  if expand_env_lookup[pat] == nil then\n-    expand_env_lookup[pat] = pat:find('%${') ~= nil\n-  end\n-  if expand_env_lookup[pat] then\n-    local return_early --- @type true?\n-    --- @type string\n-    pat = pat:gsub('%${(%S-)}', function(env)\n-      -- If an environment variable is present in the pattern but not set, there is no match\n-      if not vim.env[env] then\n-        return_early = true\n-        return nil\n-      end\n-      return vim.pesc(vim.env[env])\n-    end)\n-    if return_early then\n+  local pat_cache = pattern_lookup[pat] or parse_pattern(pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675652220",
            "id": 1675652220,
            "in_reply_to_id": 1675514653,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j4Gx8",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2543,
            "original_position": 1215,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174407163,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675652220/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T10:26:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675652220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675659511"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675659511"
                }
            },
            "author_association": "MEMBER",
            "body": "Consider adding an extra flag for now then. I think the whole slash behaviour needs to be revisited as, like priority, is adding significant complexity.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T10:33:15Z",
            "diff_hunk": "@@ -2449,6 +2562,56 @@ local function match_pattern(name, path, tail, pat)\n   return (tail:match(fullpat))\n end\n \n+--- Cache for whether current candidates match fast patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local fast_matches = {}\n+\n+--- @param name string\n+--- @param path string\n+--- @param tail string\n+--- @param pat string\n+--- @return boolean\n+local function match_fastpat(name, path, tail, pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675659511",
            "id": 1675659511,
            "in_reply_to_id": 1675517870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j4Ij3",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2575,
            "original_position": 1249,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174418656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675659511/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T10:33:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675659511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675665603"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675665603"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n-- Table of filetype pattern matching rules grouped by their parent pattern.\r\n--\r\n-- Every filetype pattern match is prefaced with a matching of its parent pattern.\r\n-- If there is no match, skip all matching inside group.\r\n--\r\n-- When modifying an existing regular pattern, make sure that it still fits its group.\r\n--\r\n-- Note that unlike leaf patterns, parent patterns do not have special matching behaviour if they contain a `/`.\r\n```",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T10:39:24Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675665603",
            "id": 1675665603,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j4KDD",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1766,
            "original_position": 69,
            "original_start_line": 1737,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174428524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675665603/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-07-12T10:39:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675665603",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1675668926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675668926"
                }
            },
            "author_association": "MEMBER",
            "body": "My rule of thumb: Documentation should explain usage; rationale belongs into the commit message. Rules of thumb in this case are better placed in CONTRIBUTING (for porting filetype.vim patches) or `:h vim.filetype.add` (for user patterns).",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T10:42:45Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1675668926",
            "id": 1675668926,
            "in_reply_to_id": 1675665603,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j4K2-",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1766,
            "original_position": 69,
            "original_start_line": 1737,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2174433731,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675668926/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-07-12T10:42:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1675668926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1676060877"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676060877"
                }
            },
            "author_association": "MEMBER",
            "body": "I've used the patch (with slightly rearranged sentences for better grouping), thanks! \r\n\r\nThe (compressed) rest of it was added as the new section to 'dev_vimpatch.txt', as this is where 'CONTRIBUTING.md' eventually links.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T14:54:37Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1676060877",
            "id": 1676060877,
            "in_reply_to_id": 1675665603,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j5qjN",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1766,
            "original_position": 69,
            "original_start_line": 1737,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2175115004,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676060877/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-07-12T14:54:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676060877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1676062054"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676062054"
                }
            },
            "author_association": "MEMBER",
            "body": "I've added an extra `try_all_candidates` flag with a comment. No more extra function.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T14:55:24Z",
            "diff_hunk": "@@ -2449,6 +2562,56 @@ local function match_pattern(name, path, tail, pat)\n   return (tail:match(fullpat))\n end\n \n+--- Cache for whether current candidates match fast patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local fast_matches = {}\n+\n+--- @param name string\n+--- @param path string\n+--- @param tail string\n+--- @param pat string\n+--- @return boolean\n+local function match_fastpat(name, path, tail, pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1676062054",
            "id": 1676062054,
            "in_reply_to_id": 1675517870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j5q1m",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2575,
            "original_position": 1249,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2175117237,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676062054/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:55:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676062054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1676062830"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676062830"
                }
            },
            "author_association": "MEMBER",
            "body": "This is resolved in #29632.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T14:55:53Z",
            "diff_hunk": "@@ -2407,39 +2505,54 @@ local function dispatch(ft, path, bufnr, ...)\n   return ft0, on_detect\n end\n \n---- Lookup table/cache for patterns that contain an environment variable pattern, e.g. ${SOME_VAR}.\n---- @type table<string,boolean>\n-local expand_env_lookup = {}\n+--- Lookup table/cache for patterns\n+--- @alias vim.filetype.pattern_cache { fullpat: string, has_env: boolean, has_slash: boolean }\n+--- @type table<string,vim.filetype.pattern_cache>\n+local pattern_lookup = {}\n+\n+--- @param pat string\n+--- @return vim.filetype.pattern_cache\n+local function parse_pattern(pat)\n+  pattern_lookup[pat] = {\n+    fullpat = '^' .. pat .. '$',\n+    has_env = pat:find('%$%b{}') ~= nil,\n+    has_slash = pat:find('/') ~= nil,\n+  }\n+  return pattern_lookup[pat]\n+end\n+\n+--- @param pat string\n+--- @return boolean\n+--- @return string\n+local function expand_envvar_pattern(pat)\n+  local some_env_missing = false\n+  local expanded = pat:gsub('%${(%S-)}', function(env)\n+    local val = vim.env[env] --- @type string?\n+    some_env_missing = some_env_missing or val == nil\n+    return vim.pesc(val or '')\n+  end)\n+  return some_env_missing, expanded\n+end\n \n --- @param name string\n --- @param path string\n --- @param tail string\n --- @param pat string\n---- @return string|false?\n+--- @return string|boolean?\n local function match_pattern(name, path, tail, pat)\n-  if expand_env_lookup[pat] == nil then\n-    expand_env_lookup[pat] = pat:find('%${') ~= nil\n-  end\n-  if expand_env_lookup[pat] then\n-    local return_early --- @type true?\n-    --- @type string\n-    pat = pat:gsub('%${(%S-)}', function(env)\n-      -- If an environment variable is present in the pattern but not set, there is no match\n-      if not vim.env[env] then\n-        return_early = true\n-        return nil\n-      end\n-      return vim.pesc(vim.env[env])\n-    end)\n-    if return_early then\n+  local pat_cache = pattern_lookup[pat] or parse_pattern(pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1676062830",
            "id": 1676062830,
            "in_reply_to_id": 1675514653,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j5rBu",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 2543,
            "original_position": 1215,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2175118239,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676062830/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:55:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676062830",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1676063318"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676063318"
                }
            },
            "author_association": "MEMBER",
            "body": "This was resolved in #29632.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T14:56:10Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.\n+--\n+--- @type table<string,vim.filetype.mapping>\n local pattern = {\n   -- BEGIN PATTERN\n-  ['.*/etc/a2ps/.*%.cfg'] = 'a2ps',\n-  ['.*/etc/a2ps%.cfg'] = 'a2ps',\n-  ['.*/usr/share/alsa/alsa%.conf'] = 'alsaconf',\n-  ['.*/etc/asound%.conf'] = 'alsaconf',\n-  ['.*/etc/apache2/sites%-.*/.*%.com'] = 'apache',\n-  ['.*/etc/httpd/.*%.conf'] = 'apache',\n-  ['.*/etc/apache2/.*%.conf.*'] = detect_apache,\n-  ['.*/etc/apache2/conf%..*/.*'] = detect_apache,\n-  ['.*/etc/apache2/mods%-.*/.*'] = detect_apache,\n-  ['.*/etc/apache2/sites%-.*/.*'] = detect_apache,\n-  ['access%.conf.*'] = detect_apache,\n-  ['apache%.conf.*'] = detect_apache,\n-  ['apache2%.conf.*'] = detect_apache,\n-  ['httpd%.conf.*'] = detect_apache,\n-  ['srm%.conf.*'] = detect_apache,\n-  ['.*/etc/httpd/conf%..*/.*'] = detect_apache,\n-  ['.*/etc/httpd/conf%.d/.*%.conf.*'] = detect_apache,\n-  ['.*/etc/httpd/mods%-.*/.*'] = detect_apache,\n-  ['.*/etc/httpd/sites%-.*/.*'] = detect_apache,\n-  ['.*/etc/proftpd/.*%.conf.*'] = starsetf('apachestyle'),\n-  ['.*/etc/proftpd/conf%..*/.*'] = starsetf('apachestyle'),\n-  ['proftpd%.conf.*'] = starsetf('apachestyle'),\n-  ['.*asterisk/.*%.conf.*'] = starsetf('asterisk'),\n-  ['.*asterisk.*/.*voicemail%.conf.*'] = starsetf('asteriskvm'),\n-  ['.*/%.aptitude/config'] = 'aptconf',\n-  ['[mM]akefile%.am'] = 'automake',\n-  ['.*/bind/db%..*'] = starsetf('bindzone'),\n-  ['.*/named/db%..*'] = starsetf('bindzone'),\n-  ['.*/build/conf/.*%.conf'] = 'bitbake',\n-  ['.*/meta/conf/.*%.conf'] = 'bitbake',\n-  ['.*/meta%-.*/conf/.*%.conf'] = 'bitbake',\n-  ['.*%.blade%.php'] = 'blade',\n-  ['bzr_log%..*'] = 'bzr',\n-  ['.*enlightenment/.*%.cfg'] = 'c',\n-  ['.*/%.cabal/config'] = 'cabalconfig',\n-  ['.*/cabal/config'] = 'cabalconfig',\n-  ['cabal%.project%..*'] = starsetf('cabalproject'),\n-  ['.*/%.calendar/.*'] = starsetf('calendar'),\n-  ['.*/share/calendar/.*/calendar%..*'] = starsetf('calendar'),\n-  ['.*/share/calendar/calendar%..*'] = starsetf('calendar'),\n-  ['sgml%.catalog.*'] = starsetf('catalog'),\n-  ['.*/etc/defaults/cdrdao'] = 'cdrdaoconf',\n-  ['.*/etc/cdrdao%.conf'] = 'cdrdaoconf',\n-  ['.*/etc/default/cdrdao'] = 'cdrdaoconf',\n-  ['.*hgrc'] = 'cfg',\n-  ['.*%.[Cc][Ff][Gg]'] = {\n-    detect.cfg,\n-    -- Decrease priority to avoid conflicts with more specific patterns\n-    -- such as '.*/etc/a2ps/.*%.cfg', '.*enlightenment/.*%.cfg', etc.\n-    { priority = -1 },\n+  ['/debian/'] = {\n+    ['.*/debian/changelog'] = 'debchangelog',",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1676063318",
            "id": 1676063318,
            "in_reply_to_id": 1675510985,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j5rJW",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1772,
            "original_position": 125,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2175118816,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676063318/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:56:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676063318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1676064277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676064277"
                }
            },
            "author_association": "MEMBER",
            "body": "I've used [your suggestion](https://github.com/neovim/neovim/pull/29660#discussion_r1675665603). Thanks for trimming it down!",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-12T14:56:43Z",
            "diff_hunk": "@@ -1724,522 +1728,614 @@ local filename = {\n }\n \n -- Re-use closures as much as possible\n-local detect_apache = starsetf('apache')\n-local detect_muttrc = starsetf('muttrc')\n-local detect_neomuttrc = starsetf('neomuttrc')\n+local detect_apache_diretc = starsetf('apache', { fastpat = '/etc/' })\n+local detect_apache_dotconf = starsetf('apache', { fastpat = '%.conf' })\n+local detect_muttrc = starsetf('muttrc', { fastpat = 'utt' })\n+local detect_neomuttrc = starsetf('neomuttrc', { fastpat = 'utt' })\n+local detect_xkb = starsetf('xkb', { fastpat = '/usr/' })\n \n---- @type vim.filetype.mapping\n+-- Table of filetype pattern matching rules grouped by their \"fast pattern\"\n+--\n+-- Every filetype pattern match is prefaced with a (cached) matching of its parent \"fast pattern\".\n+-- If there is no match, skip all matching inside group. For that to work, fast pattern should:\n+-- - Match at least the same set of strings as filetype patterns inside it. But not too much more.\n+-- - Be fast to match (will be matched directly with `string.match(target, fastpat)`).\n+--\n+-- The core idea behind speedup is that matching results of fast patterns are cached and reused\n+-- inside single same `M.match()` call. The effect is as big as the quality of compromise between:\n+-- - Fast pattern groups many filetype patterns: leads to better cache reuse in case of no match.\n+-- - Fast pattern is specific: leads to less \"fast pattern matches but regular one does not\" which\n+--   has the penalty of a (not useful) single extra fast pattern match.\n+--\n+-- Example:\n+-- - Regular pattern: '.*/etc/a2ps/.*%.cfg'.\n+-- - Good fast patterns: '/etc/'; '%.cfg$' (depends on how many patterns they can group)\n+-- - Bad fast patterns: '%.' (fast but not specific), '/a2ps/.*%.' (slow but specific)\n+--\n+-- When adding a new filetype with pattern matching rule, consider the following:\n+-- - If there is already a group with appropriate fast pattern, use it.\n+-- - If there can be a fast and specific enough pattern to group at least 3 filetype patterns,\n+--   add it as a separate grouped entry. Good new fast pattern should be:\n+--     - Fast. Good rule of thumb is that it should be a short specific string (i.e. no quantifiers\n+--       or character sets).\n+--     - Specific. Good rules of thumb (from best to worst):\n+--         - Full directory name (like '/etc/', '/log/').\n+--         - Part of a rare enough directory name (like '/conf', 'git/').\n+--         - Character sequence reasonably rarely used in real full paths (like 'nginx', 'cmus').\n+--\n+-- When modifying an existing regular pattern, make sure that it still fits its group.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1676064277",
            "id": 1676064277,
            "in_reply_to_id": 1675507543,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j5rYV",
            "original_commit_id": "e188ec0cf14893293dd16873ea62476666ceda5a",
            "original_line": 1766,
            "original_position": 69,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2175120060,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676064277/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-12T14:56:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1676064277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677149790"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677149790"
                }
            },
            "author_association": "MEMBER",
            "body": "Nit: This is Markdown syntax, but this is a Vim help buffer. Probably fine, but I think we typically would put the URL on a separate line with a \"See \" prefix or something.\r\n\r\nAnd since this is linking to a a file in Nvim's runtime we could just use a file path which will let people easily jump to the file inside of Nvim with `gf`.\r\n\r\n```suggestion\r\nNvim's filetype detection behavior matches Vim, but is implemented as part of |vim.filetype| (see $VIMRUNTIME/runtime/lua/vim/filetype.lua).\r\n```",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T14:46:28Z",
            "diff_hunk": "@@ -302,4 +302,40 @@ used in new documentation:\n - `{Only when compiled with ...}`: the vast majority of features have been\n   made non-optional (see https://github.com/neovim/neovim/wiki/Introduction)\n \n+==============================================================================\n+FILETYPE DETECTION                 *dev-vimpatch-filetype*\n+\n+Nvim's [filetype detection](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/filetype.lua)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677149790",
            "id": 1677149790,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j90Ze",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 308,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/dev_vimpatch.txt",
            "position": null,
            "pull_request_review_id": 2176668758,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677149790/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-14T14:47:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677149790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677150290"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677150290"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- @param pat string\r\nlocal function parse_pattern(pat)\r\n```",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T14:49:20Z",
            "diff_hunk": "@@ -2230,29 +2293,36 @@ local function compare_by_priority(a, b)\n   return a[next(a)][2].priority > b[next(b)][2].priority\n end\n \n---- @param t vim.filetype.mapping\n+local parse_pattern = function(pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677150290",
            "id": 1677150290,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j90hS",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 2296,
            "original_position": 1069,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2176669215,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677150290/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-14T14:49:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677150290",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677151069"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677151069"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a reason to make this table scoped to the entire module and reset manually in `match()`, rather than just allocating the table in `match()` and passing it as an argument to `match_pattern_sorted`? If we can, we should try to keep the scope as narrow as possible.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T14:54:18Z",
            "diff_hunk": "@@ -2444,24 +2516,35 @@ local function expand_envvar_pattern(pat)\n   return some_env_missing, expanded\n end\n \n+--- Cache for whether current candidates match their parent patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local parent_matches = {}",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677151069",
            "id": 1677151069,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j90td",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 2522,
            "original_position": 1133,
            "original_start_line": 2519,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2176669877,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677151069/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-07-14T14:59:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677151069",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677152783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677152783"
                }
            },
            "author_association": "MEMBER",
            "body": "No reason apart from not having to make a six argument function. Will make it an argument.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T15:04:49Z",
            "diff_hunk": "@@ -2444,24 +2516,35 @@ local function expand_envvar_pattern(pat)\n   return some_env_missing, expanded\n end\n \n+--- Cache for whether current candidates match their parent patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local parent_matches = {}",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677152783",
            "id": 1677152783,
            "in_reply_to_id": 1677151069,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j91IP",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 2522,
            "original_position": 1133,
            "original_start_line": 2519,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2176671756,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677152783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-07-14T15:04:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677152783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677164448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164448"
                }
            },
            "author_association": "MEMBER",
            "body": "Addressed in f47dae74398c.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T16:18:48Z",
            "diff_hunk": "@@ -2444,24 +2516,35 @@ local function expand_envvar_pattern(pat)\n   return some_env_missing, expanded\n end\n \n+--- Cache for whether current candidates match their parent patterns.\n+--- Need to be manually reset in every new `M.match()` call.\n+--- @type table<string,boolean>\n+local parent_matches = {}",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677164448",
            "id": 1677164448,
            "in_reply_to_id": 1677151069,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j93-g",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 2522,
            "original_position": 1133,
            "original_start_line": 2519,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2176682317,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164448/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-07-14T16:23:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677164556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164556"
                }
            },
            "author_association": "MEMBER",
            "body": "Addressed f47dae74398c (with even and a bit more :) )",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T16:19:26Z",
            "diff_hunk": "@@ -2230,29 +2293,36 @@ local function compare_by_priority(a, b)\n   return a[next(a)][2].priority > b[next(b)][2].priority\n end\n \n---- @param t vim.filetype.mapping\n+local parse_pattern = function(pat)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677164556",
            "id": 1677164556,
            "in_reply_to_id": 1677150290,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j94AM",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 2296,
            "original_position": 1069,
            "original_start_line": null,
            "path": "runtime/lua/vim/filetype.lua",
            "position": null,
            "pull_request_review_id": 2176682389,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-14T16:23:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1677164918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164918"
                }
            },
            "author_association": "MEMBER",
            "body": "Addressed in f47dae74398c2db981c8266494c2035953227489 with `$VIMRUNTIME/lua/vim/filetype.lua` path.",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-07-14T16:22:17Z",
            "diff_hunk": "@@ -302,4 +302,40 @@ used in new documentation:\n - `{Only when compiled with ...}`: the vast majority of features have been\n   made non-optional (see https://github.com/neovim/neovim/wiki/Introduction)\n \n+==============================================================================\n+FILETYPE DETECTION                 *dev-vimpatch-filetype*\n+\n+Nvim's [filetype detection](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/filetype.lua)",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1677164918",
            "id": 1677164918,
            "in_reply_to_id": 1677149790,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5j94F2",
            "original_commit_id": "b7644114bbdec5cdf9b6f30b422002244f5e70e9",
            "original_line": 308,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/dev_vimpatch.txt",
            "position": null,
            "pull_request_review_id": 2176682744,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164918/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-07-14T16:22:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1677164918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1721981638"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721981638"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems like a house of cards. What happens if people get this wrong? Is adding a new filetype now 5x harder than it used to be? Is this worth the gain? ",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-08-19T15:32:02Z",
            "diff_hunk": "@@ -302,4 +302,40 @@ used in new documentation:\n - `{Only when compiled with ...}`: the vast majority of features have been\n   made non-optional (see https://github.com/neovim/neovim/wiki/Introduction)\n \n+==============================================================================\n+FILETYPE DETECTION                 *dev-vimpatch-filetype*\n+\n+Nvim's filetype detection behavior matches Vim, but is implemented as part of\n+|vim.filetype| (see $VIMRUNTIME/lua/vim/filetype.lua).\n+\n+Pattern matching has several differences:\n+- It is done using explicit Lua patterns (without implicit anchoring) instead\n+  of Vim regexes: >\n+    \"*/debian/changelog\" -> \"/debian/changelog$\"\n+    \"*/bind/db.*\" -> \"/bind/db%.\"\n+<\n+- Filetype patterns are grouped by their parent pattern to improve matching\n+  performance. For this to work properly, parent pattern should:\n+    - Match at least the same set of strings as filetype patterns inside it.\n+      But not too much more.\n+    - Be fast to match.\n+\n+  When adding a new filetype with pattern matching, consider the following:\n+  - If there is already a group with appropriate parent pattern, use it.\n+  - If there can be a fast and specific enough pattern to group at least\n+    3 filetype patterns, add it as a separate grouped entry.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1721981638",
            "id": 1721981638,
            "line": 326,
            "node_id": "PRRC_kwDOAPphoM5mo1rG",
            "original_commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "original_line": 326,
            "original_position": 25,
            "original_start_line": 323,
            "path": "runtime/doc/dev_vimpatch.txt",
            "position": 25,
            "pull_request_review_id": 2245867538,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721981638/reactions"
            },
            "side": "RIGHT",
            "start_line": 323,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-19T15:32:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721981638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29660#discussion_r1722007022"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29660"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1722007022"
                }
            },
            "author_association": "MEMBER",
            "body": "People can always opt for adding new built-in pattern (which is a quite rare occasion) to ['' parent pattern](https://github.com/neovim/neovim/blob/6d997f8068a89703823f1572c56a6331c9e024aa/runtime/lua/vim/filetype.lua#L2298). This will still work but without any performance gains.\r\n\r\nYes, this is very much worth the 3x-4x gain on common cases and is easily visible when used in real world cases inside plugins. Here is [one example](https://github.com/ibhagwan/fzf-lua/issues/1358#issuecomment-2254174945).",
            "commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "created_at": "2024-08-19T15:46:35Z",
            "diff_hunk": "@@ -302,4 +302,40 @@ used in new documentation:\n - `{Only when compiled with ...}`: the vast majority of features have been\n   made non-optional (see https://github.com/neovim/neovim/wiki/Introduction)\n \n+==============================================================================\n+FILETYPE DETECTION                 *dev-vimpatch-filetype*\n+\n+Nvim's filetype detection behavior matches Vim, but is implemented as part of\n+|vim.filetype| (see $VIMRUNTIME/lua/vim/filetype.lua).\n+\n+Pattern matching has several differences:\n+- It is done using explicit Lua patterns (without implicit anchoring) instead\n+  of Vim regexes: >\n+    \"*/debian/changelog\" -> \"/debian/changelog$\"\n+    \"*/bind/db.*\" -> \"/bind/db%.\"\n+<\n+- Filetype patterns are grouped by their parent pattern to improve matching\n+  performance. For this to work properly, parent pattern should:\n+    - Match at least the same set of strings as filetype patterns inside it.\n+      But not too much more.\n+    - Be fast to match.\n+\n+  When adding a new filetype with pattern matching, consider the following:\n+  - If there is already a group with appropriate parent pattern, use it.\n+  - If there can be a fast and specific enough pattern to group at least\n+    3 filetype patterns, add it as a separate grouped entry.",
            "html_url": "https://github.com/neovim/neovim/pull/29660#discussion_r1722007022",
            "id": 1722007022,
            "in_reply_to_id": 1721981638,
            "line": 326,
            "node_id": "PRRC_kwDOAPphoM5mo73u",
            "original_commit_id": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
            "original_line": 326,
            "original_position": 25,
            "original_start_line": 323,
            "path": "runtime/doc/dev_vimpatch.txt",
            "position": 25,
            "pull_request_review_id": 2245904697,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1722007022/reactions"
            },
            "side": "RIGHT",
            "start_line": 323,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-19T15:46:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1722007022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "This seems quite complicated for the speedup. I'm not sure this is justified?\n\nInstead of this convoluted fastpat concept, have you considered restructuring the matching to use a tree instead? E.g. the big block of log patterns can be nested with a parent pattern (`.*/log/.*`) that covers all of them.\n\nTo begin with we could construct this tree manually, but eventually we could generate it.",
            "created_at": "2024-07-11T12:46:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2222846930",
            "id": 2222846930,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6EffPS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222846930/reactions"
            },
            "updated_at": "2024-07-11T12:47:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222846930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Instead of this convoluted fastpat concept, have you considered restructuring the matching to use a tree instead? E.g. the big block of log patterns can be nested with a parent pattern (.*/log/.*) that covers all of them.\n\nThat's almost exactly what is done here but instead using \"fastpat\" option as \"parent pattern\".\n\n> To begin with we could construct this tree manually, but eventually we could generate it.\n\nThis was my initial approach, but there are tricky edge cases. Manual tracking seems to be a more robust approach.",
            "created_at": "2024-07-11T13:25:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2222938267",
            "id": 2222938267,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6Ef1ib",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222938267/reactions"
            },
            "updated_at": "2024-07-11T13:25:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222938267",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> but there are tricky edge cases. \r\n\r\nLike what? I would imagine you would need to tokenize the patterns, generate a tree with each node being a single token, and then flatten the tree.\r\n\r\n> That's almost exactly what is done here but instead using \"fastpat\" option as \"parent pattern\".\r\n\r\nAlmost, but more convoluted. Why not make the parent pattern more explicit, and allow multiple of them.",
            "created_at": "2024-07-11T13:41:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2222974755",
            "id": 2222974755,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6Ef-cj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222974755/reactions"
            },
            "updated_at": "2024-07-11T13:42:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222974755",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > but there are tricky edge cases. \n> \n> Like what?\n\nMy initial approach was to check if certain set of hand picked patterns can be found as exact substring. This did not 100% work, because they can be followed by modifiers or (in theory) be inside character set (like trying to find 'git/' pattern in a valid '.*[git/]' pattern).\n\n> I would imagine you would need to tokenize the patterns, generate a tree with each node being a single token, and then flatten the tree. \n\nTo me *this* sounds more convoluted. Besides, the core optimization idea is to decrease number of attempts at pattern matching. This automated approach seems to lead to more overly specific patterns (if I understood what \"tokenize the patterns\" means) with less performance gain. Having a bit of human touch when picking fast patterns I'd say results in the best performance.\n\n> > That's almost exactly what is done here but instead using \"fastpat\" option as \"parent pattern\".\n> \n> Almost, but more convoluted. Why not make the parent pattern more explicit, and allow multiple of them.\n\nIt is as explicit as it gets - right next to the regular filetype pattern. So instead of creating new nested structures, reuse the current ones (which is a less convoluted solution). It also is \"backwards compatible\": adding new filetype patterns can be done in exact same way (adding fast patterns is encouraged but is optional).",
            "created_at": "2024-07-11T13:56:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2223010171",
            "id": 2223010171,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6EgHF7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2223010171/reactions"
            },
            "updated_at": "2024-07-11T13:57:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2223010171",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> To me this sounds more convoluted. Besides, the core optimization idea is to decrease number of attempts at pattern matching. This automated approach seems to lead to more overly specific patterns (if I understood what \"tokenize the patterns\" means) with less performance gain. Having a bit of human touch when picking fast patterns I'd say results in the best performance.\r\n\r\nI'm not sure that you understand then. Tree decoders are a well understood construct. How do you think your CPU decodes an instruction?\r\n\r\nTokenize means split something like `.*/log/.*` -> `.*` `/` `l` `o` `g` `/` `.*`\r\n\r\nDo this for all patterns and create a tree on each of these tokens for all the given patterns.\r\n\r\nE.g. for patterns `.*/log/a` and `.*/log/b` you would generate a tree like.\r\n\r\n```lua\r\nif c:match('^.*') then\r\n  if c:match('^.*/') then\r\n    if c:match('^.*/l') then\r\n      if c:match('^.*/lo') then\r\n        if c:match('^.*/log') then\r\n          if c:match('^.*/log/') then\r\n            if c:match('^.*/log/a$') then\r\n              return 'a'\r\n            elseif c:match ('^.*/log/b$') then\r\n              return 'b'\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nYou would then flatten this tree to something like:\r\n```lua\r\nif c:match('^.*/log/') then\r\n  if c:match('^.*/log/a$') then\r\n    return 'a'\r\n  elseif c:match ('^.*/log/b$') then\r\n    return 'b'\r\n  end\r\nend\r\n```\r\n\r\nIf you have 50 patterns beginning with `.*/log`, you would then only perform 2-50 pattern matches. And this would not need the whole `fastpat` caching thing since you never repeat a match. Therefore, this would be the most performant as it puts less pressure on memory.\r\n\r\nYou could optimise this further with something like:\r\n```lua\r\nlocal h, t = c:match('^(.*/log/)(.*)$')\r\nif h then\r\n  if t:match('^a$') then\r\n    return 'a'\r\n  elseif t:match('^b$') then\r\n    return 'b'\r\n  end\r\nend\r\n```\r\n\r\nBut like I said, to begin with we could construct this tree by hand, but generating it would maximise the performance gain as it would minimise the amount of patterns.\r\n\r\n> It is as explicit as it gets - right next to the regular filetype pattern. So instead of creating new nested structures, reuse the current ones (which is a less convoluted solution). It also is \"backwards compatible\": adding new filetype patterns can be done in exact same way (adding fast patterns is encouraged but is optional).\r\n\r\nExcept you needed to write an entire thesis to describe how it works. I'm sure if you spend enough time studying it in a bubble then it's easy enough to understand, but it is definitely more convoluted than a standard tree decoder.",
            "created_at": "2024-07-11T14:55:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2223154933",
            "id": 2223154933,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6Egqb1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2223154933/reactions"
            },
            "updated_at": "2024-07-11T15:01:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2223154933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Tree decoders are a well understood construct. How do you think your CPU decodes an instruction?\r\n> ...\r\n> Except you needed to write an entire thesis to describe how it works.\r\n\r\n@lewis6991, I'd like to publicly say that I would appreciate a slightly less patronizing tone in the future. Ideally, for any author of a good faith PR.\r\n\r\n------\r\n\r\nIn Matrix room discussion there was a consensus that it would benefit to reformat `pattern` table to be nested and indexed first with a fast patterns (instead of each added explicitly on pattern level). I hope to do that shortly.\r\n\r\nThere was also a consensus that if adding manual matching for the most common cases ('/etc/' and '/log/') gets us 80% of the benefit of a generated tree decoder, it should be fine just sticking with that.",
            "created_at": "2024-07-11T18:20:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2223602593",
            "id": 2223602593,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6EiXuh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 4,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2223602593/reactions"
            },
            "updated_at": "2024-07-11T18:23:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2223602593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In Matrix room discussion there was a consensus that it would benefit to reformat `pattern` table to be nested and indexed first with a fast patterns (instead of each added explicitly on pattern level). I hope to do that shortly.\r\n\r\nI've pushed a reformatted `pattern` table. Keys (fast patterns) are ordered by \"full directory match\" > \"directory start\" > \"directory end\" > \"plain match\". Inside each subtable order is alphabetical by assigned filetype first (as is currently intended on `master`; made a few corrections), then by pattern (alphabetically). Total counts check out, so hopefully did not miss anything :crossed_fingers:\r\n\r\n------\r\n\r\n@lewis6991, I'd like to share some overnight thoughts about automated \"parse pattern and generate tree\" approach:\r\n- Removing fastpat caching in favor of nested `if ... then ... else` is complicated by the fact that patterns need to be ordered by priority first. Preordering in built-in table is doable, but users can add their own filetypes with priorities, which complicates things.\r\n- The automated tree folding approach seems to work left to right (or in some type of order), while the manual approach allows grouping based on parts anywhere in the filetype pattern. Like currently is done for '/conf', 'git/', and more.\r\n- Straightforward tree folding might not get the best nesting on these real world cases. Because I imagine it be splitting by '.*/' (which will always match on Linux), or by a letter (like from 'mutt%-.*%-%w+', 'Muttrc.*' patterns). So it would have to have some heuristics at least.",
            "created_at": "2024-07-12T06:56:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2224946541",
            "id": 2224946541,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6Enf1t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2224946541/reactions"
            },
            "updated_at": "2024-07-12T06:56:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2224946541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Removing fastpat caching in favor of nested if ... then ... else is complicated by the fact that patterns need to be ordered by priority first. Preordering in built-in table is doable, but users can add their own filetypes with priorities, which complicates things.\r\n\r\nDepends how it is done. User added filetypes just need to be inserted at the appropriate place in the internal table. As opposed to fully resorting like we do now.\r\n\r\n> The automated tree folding approach seems to work left to right (or in some type of order), while the manual approach allows grouping based on parts anywhere in the filetype pattern. Like currently is done for '/conf', 'git/', and more.\r\n\r\nThere are many ways it can work. Left to right would just be the most naive. Nothing suggests that the manual groups added in this PR are more optimal than an automated left-to-right approach. In fact, any non-match with these groups will incur ~20 match operations, which is more than I would expect from a fully optimised tree decoder.\r\n\r\n> Straightforward tree folding might not get the best nesting on these real world cases. Because I imagine it be splitting by './' (which will always match on Linux), or by a letter (like from 'mutt%-.%-%w+', 'Muttrc.*' patterns). So it would have to have some heuristics at least.\r\n\r\nThe majority of these patterns are very niche, so in the real world this table will rarely match. Heuristics will be needed if we want to optimize `Muttrc`, but I don't think we need to do that at all. Niche cases are allowed to (and should) be slower.\r\n\r\n> Because I imagine it be splitting by './' (which will always match on Linux)\r\n\r\nNo, not at all. The splitting will be at whatever point it needs to split. `%.` and `/` aren't treated specially.\r\n",
            "created_at": "2024-07-12T08:53:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2225127347",
            "id": 2225127347,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6EoL-z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2225127347/reactions"
            },
            "updated_at": "2024-07-12T08:54:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2225127347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@gpanders, @clason, @lewis6991: I've force pushed some suggested changes:\r\n- There is no separate `match_fastpat()`. The existing one is reused with a flag.\r\n- Big \"thesis\" comment is cut down.\r\n- Replaced the evidently unpopular \"fast pattern\" / \"fastpat\" in favor of \"parent pattern\" / \"parent\".\r\n\r\nAlso rebased on the latest #29632, as it contains resolution to some suggestion from this PR.",
            "created_at": "2024-07-12T15:08:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2225794037",
            "id": 2225794037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6Equv1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2225794037/reactions"
            },
            "updated_at": "2024-07-12T15:11:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2225794037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Only now noticed broken Windows test about symlinks. Turns out it was due to typo (`name:match(path)` instead of `name:match(pat)`). Sigh... Should be all good now.",
            "created_at": "2024-07-13T14:59:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2226942359",
            "id": 2226942359,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6EvHGX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2226942359/reactions"
            },
            "updated_at": "2025-02-25T08:12:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2226942359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Rebased on latest `master` and added new `['%.opam%.locked$'] = 'opam'` pattern.",
            "created_at": "2024-07-18T07:41:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2235839318",
            "id": 2235839318,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6FRDNW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2235839318/reactions"
            },
            "updated_at": "2024-07-18T07:41:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2235839318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for merging! This also unblocks some other potential improvements.",
            "created_at": "2024-07-18T16:44:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/29660#issuecomment-2237061452",
            "id": 2237061452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
            "node_id": "IC_kwDOAPphoM6FVtlM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2237061452/reactions"
            },
            "updated_at": "2024-07-18T16:44:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2237061452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29660/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/29660/commits",
    "created_at": "2024-07-11T10:58:58Z",
    "diff_url": "https://github.com/neovim/neovim/pull/29660.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:filetype-fastpat",
        "ref": "filetype-fastpat",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2025-02-26T14:22:43Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 303027,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2025-02-26T14:22:50Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/29660",
    "id": 1964286598,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29660",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f61efe3fe77c9a517dccb9fd5ff7f16c0660ced4",
    "merged_at": "2024-07-18T15:26:27Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM51FKKG",
    "number": 29660,
    "patch_url": "https://github.com/neovim/neovim/pull/29660.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/29660/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/634a4dc6e66d111d67b31d1a9b02945f75d51f4f",
    "title": "perf(filetype): implement parent pattern pre-matching",
    "updated_at": "2025-02-25T08:12:29Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/29660",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski",
        "user_view_type": "public"
    }
}